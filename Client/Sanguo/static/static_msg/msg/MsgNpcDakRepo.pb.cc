// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgNpcDakRepo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgNpcDakRepo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgNpcDakRepoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakRepoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakRepoQuery_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakRepoQuery_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakRepoInfo_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakRepoInfo_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakRepoRefresh_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakRepoRefresh_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakRepoFinish_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakRepoFinish_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakRepoFinish_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakRepoFinish_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakRepoFinish_S2C_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakRepoFinish_S2C_Reward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ENUM_NPCDAKREPO_RESULT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgNpcDakRepo_2eproto() {
  protobuf_AddDesc_MsgNpcDakRepo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgNpcDakRepo.proto");
  GOOGLE_CHECK(file != NULL);
  MsgNpcDakRepoData_descriptor_ = file->message_type(0);
  static const int MsgNpcDakRepoData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoData, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoData, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoData, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoData, playerlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoData, btaskdone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoData, dirty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoData, last_refresh_time_),
  };
  MsgNpcDakRepoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakRepoData_descriptor_,
      MsgNpcDakRepoData::default_instance_,
      MsgNpcDakRepoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakRepoData));
  MsgNpcDakRepoQuery_C2S_descriptor_ = file->message_type(1);
  static const int MsgNpcDakRepoQuery_C2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoQuery_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoQuery_C2S, iggid_),
  };
  MsgNpcDakRepoQuery_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakRepoQuery_C2S_descriptor_,
      MsgNpcDakRepoQuery_C2S::default_instance_,
      MsgNpcDakRepoQuery_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoQuery_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoQuery_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakRepoQuery_C2S));
  MsgNpcDakRepoInfo_S2C_descriptor_ = file->message_type(2);
  static const int MsgNpcDakRepoInfo_S2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoInfo_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoInfo_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoInfo_S2C, npcdak_repo_data_),
  };
  MsgNpcDakRepoInfo_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakRepoInfo_S2C_descriptor_,
      MsgNpcDakRepoInfo_S2C::default_instance_,
      MsgNpcDakRepoInfo_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoInfo_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoInfo_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakRepoInfo_S2C));
  MsgNpcDakRepoRefresh_S2C_descriptor_ = file->message_type(3);
  static const int MsgNpcDakRepoRefresh_S2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoRefresh_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoRefresh_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoRefresh_S2C, npcdak_repo_data_),
  };
  MsgNpcDakRepoRefresh_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakRepoRefresh_S2C_descriptor_,
      MsgNpcDakRepoRefresh_S2C::default_instance_,
      MsgNpcDakRepoRefresh_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoRefresh_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoRefresh_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakRepoRefresh_S2C));
  MsgNpcDakRepoFinish_C2S_descriptor_ = file->message_type(4);
  static const int MsgNpcDakRepoFinish_C2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_C2S, uuid_),
  };
  MsgNpcDakRepoFinish_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakRepoFinish_C2S_descriptor_,
      MsgNpcDakRepoFinish_C2S::default_instance_,
      MsgNpcDakRepoFinish_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakRepoFinish_C2S));
  MsgNpcDakRepoFinish_S2C_descriptor_ = file->message_type(5);
  static const int MsgNpcDakRepoFinish_S2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_S2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_S2C, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_S2C, items_),
  };
  MsgNpcDakRepoFinish_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakRepoFinish_S2C_descriptor_,
      MsgNpcDakRepoFinish_S2C::default_instance_,
      MsgNpcDakRepoFinish_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakRepoFinish_S2C));
  MsgNpcDakRepoFinish_S2C_Reward_descriptor_ = MsgNpcDakRepoFinish_S2C_descriptor_->nested_type(0);
  static const int MsgNpcDakRepoFinish_S2C_Reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_S2C_Reward, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_S2C_Reward, count_),
  };
  MsgNpcDakRepoFinish_S2C_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakRepoFinish_S2C_Reward_descriptor_,
      MsgNpcDakRepoFinish_S2C_Reward::default_instance_,
      MsgNpcDakRepoFinish_S2C_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_S2C_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRepoFinish_S2C_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakRepoFinish_S2C_Reward));
  ENUM_NPCDAKREPO_RESULT_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgNpcDakRepo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakRepoData_descriptor_, &MsgNpcDakRepoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakRepoQuery_C2S_descriptor_, &MsgNpcDakRepoQuery_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakRepoInfo_S2C_descriptor_, &MsgNpcDakRepoInfo_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakRepoRefresh_S2C_descriptor_, &MsgNpcDakRepoRefresh_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakRepoFinish_C2S_descriptor_, &MsgNpcDakRepoFinish_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakRepoFinish_S2C_descriptor_, &MsgNpcDakRepoFinish_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakRepoFinish_S2C_Reward_descriptor_, &MsgNpcDakRepoFinish_S2C_Reward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgNpcDakRepo_2eproto() {
  delete MsgNpcDakRepoData::default_instance_;
  delete MsgNpcDakRepoData_reflection_;
  delete MsgNpcDakRepoQuery_C2S::default_instance_;
  delete MsgNpcDakRepoQuery_C2S_reflection_;
  delete MsgNpcDakRepoInfo_S2C::default_instance_;
  delete MsgNpcDakRepoInfo_S2C_reflection_;
  delete MsgNpcDakRepoRefresh_S2C::default_instance_;
  delete MsgNpcDakRepoRefresh_S2C_reflection_;
  delete MsgNpcDakRepoFinish_C2S::default_instance_;
  delete MsgNpcDakRepoFinish_C2S_reflection_;
  delete MsgNpcDakRepoFinish_S2C::default_instance_;
  delete MsgNpcDakRepoFinish_S2C_reflection_;
  delete MsgNpcDakRepoFinish_S2C_Reward::default_instance_;
  delete MsgNpcDakRepoFinish_S2C_Reward_reflection_;
}

void protobuf_AddDesc_MsgNpcDakRepo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MsgNpcDakRepo.proto\022\005MsgPB\032\rMsgType.pr"
    "oto\"\216\001\n\021MsgNpcDakRepoData\022\r\n\005iggid\030\001 \001(\003"
    "\022\014\n\004uuid\030\002 \001(\003\022\r\n\005cfgid\030\003 \001(\005\022\020\n\010playerl"
    "v\030\004 \001(\005\022\021\n\tbtaskdone\030\005 \001(\005\022\r\n\005dirty\030\006 \001("
    "\003\022\031\n\021last_refresh_time\030\007 \001(\003\"f\n\026MsgNpcDa"
    "kRepoQuery_C2S\022=\n\007msgType\030\001 \001(\0162\017.MsgPB."
    "EMsgType:\033_MSG_NPC_DAK_REPO_QUERY_C2S\022\r\n"
    "\005iggid\030\002 \001(\003\"\230\001\n\025MsgNpcDakRepoInfo_S2C\022<"
    "\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\032_MSG_N"
    "PC_DAK_REPO_INFO_S2C\022\r\n\005iggid\030\002 \001(\003\0222\n\020n"
    "pcdak_repo_data\030\003 \003(\0132\030.MsgPB.MsgNpcDakR"
    "epoData\"\236\001\n\030MsgNpcDakRepoRefresh_S2C\022\?\n\007"
    "msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\035_MSG_NPC"
    "_DAK_REPO_REFRESH_S2C\022\r\n\005iggid\030\002 \001(\003\0222\n\020"
    "npcdak_repo_data\030\003 \003(\0132\030.MsgPB.MsgNpcDak"
    "RepoData\"v\n\027MsgNpcDakRepoFinish_C2S\022>\n\007m"
    "sgType\030\001 \001(\0162\017.MsgPB.EMsgType:\034_MSG_NPC_"
    "DAK_REPO_FINISH_C2S\022\r\n\005iggid\030\002 \001(\003\022\014\n\004uu"
    "id\030\003 \001(\003\"\346\001\n\027MsgNpcDakRepoFinish_S2C\022>\n\007"
    "msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\034_MSG_NPC"
    "_DAK_REPO_FINISH_S2C\022\r\n\005iggid\030\002 \001(\003\022\016\n\006r"
    "esult\030\003 \001(\005\022\014\n\004uuid\030\004 \001(\003\0224\n\005items\030\005 \003(\013"
    "2%.MsgPB.MsgNpcDakRepoFinish_S2C.Reward\032"
    "(\n\006Reward\022\017\n\007item_id\030\001 \001(\005\022\r\n\005count\030\002 \001("
    "\005*\230\002\n\026ENUM_NPCDAKREPO_RESULT\022\036\n\032ENUM_NPC"
    "DAKREPO_RESULT_ERR\020\000\022\036\n\032ENUM_NPCDAKREPO_"
    "RESULT_SUC\020\001\022!\n\035ENUM_NPCDAKREPO_RESULT_N"
    "ODATA\020\002\022 \n\034ENUM_NPCDAKREPO_RESULT_NOCFG\020"
    "\003\022$\n ENUM_NPCDAKREPO_RESULT_NOTASKCFG\020\004\022"
    "*\n&ENUM_NPCDAKREPO_RESULT_NO_ENOUGHT_ITE"
    "M\020\005\022\'\n#ENUM_NPCDAKREPO_RESULT_SEND_BY_MA"
    "IL\020\006", 1244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgNpcDakRepo.proto", &protobuf_RegisterTypes);
  MsgNpcDakRepoData::default_instance_ = new MsgNpcDakRepoData();
  MsgNpcDakRepoQuery_C2S::default_instance_ = new MsgNpcDakRepoQuery_C2S();
  MsgNpcDakRepoInfo_S2C::default_instance_ = new MsgNpcDakRepoInfo_S2C();
  MsgNpcDakRepoRefresh_S2C::default_instance_ = new MsgNpcDakRepoRefresh_S2C();
  MsgNpcDakRepoFinish_C2S::default_instance_ = new MsgNpcDakRepoFinish_C2S();
  MsgNpcDakRepoFinish_S2C::default_instance_ = new MsgNpcDakRepoFinish_S2C();
  MsgNpcDakRepoFinish_S2C_Reward::default_instance_ = new MsgNpcDakRepoFinish_S2C_Reward();
  MsgNpcDakRepoData::default_instance_->InitAsDefaultInstance();
  MsgNpcDakRepoQuery_C2S::default_instance_->InitAsDefaultInstance();
  MsgNpcDakRepoInfo_S2C::default_instance_->InitAsDefaultInstance();
  MsgNpcDakRepoRefresh_S2C::default_instance_->InitAsDefaultInstance();
  MsgNpcDakRepoFinish_C2S::default_instance_->InitAsDefaultInstance();
  MsgNpcDakRepoFinish_S2C::default_instance_->InitAsDefaultInstance();
  MsgNpcDakRepoFinish_S2C_Reward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgNpcDakRepo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgNpcDakRepo_2eproto {
  StaticDescriptorInitializer_MsgNpcDakRepo_2eproto() {
    protobuf_AddDesc_MsgNpcDakRepo_2eproto();
  }
} static_descriptor_initializer_MsgNpcDakRepo_2eproto_;
const ::google::protobuf::EnumDescriptor* ENUM_NPCDAKREPO_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ENUM_NPCDAKREPO_RESULT_descriptor_;
}
bool ENUM_NPCDAKREPO_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakRepoData::kIggidFieldNumber;
const int MsgNpcDakRepoData::kUuidFieldNumber;
const int MsgNpcDakRepoData::kCfgidFieldNumber;
const int MsgNpcDakRepoData::kPlayerlvFieldNumber;
const int MsgNpcDakRepoData::kBtaskdoneFieldNumber;
const int MsgNpcDakRepoData::kDirtyFieldNumber;
const int MsgNpcDakRepoData::kLastRefreshTimeFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakRepoData::MsgNpcDakRepoData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakRepoData)
}

void MsgNpcDakRepoData::InitAsDefaultInstance() {
}

MsgNpcDakRepoData::MsgNpcDakRepoData(const MsgNpcDakRepoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakRepoData)
}

void MsgNpcDakRepoData::SharedCtor() {
  _cached_size_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  uuid_ = GOOGLE_LONGLONG(0);
  cfgid_ = 0;
  playerlv_ = 0;
  btaskdone_ = 0;
  dirty_ = GOOGLE_LONGLONG(0);
  last_refresh_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakRepoData::~MsgNpcDakRepoData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakRepoData)
  SharedDtor();
}

void MsgNpcDakRepoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakRepoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakRepoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakRepoData_descriptor_;
}

const MsgNpcDakRepoData& MsgNpcDakRepoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDakRepo_2eproto();
  return *default_instance_;
}

MsgNpcDakRepoData* MsgNpcDakRepoData::default_instance_ = NULL;

MsgNpcDakRepoData* MsgNpcDakRepoData::New() const {
  return new MsgNpcDakRepoData;
}

void MsgNpcDakRepoData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakRepoData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(iggid_, btaskdone_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakRepoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakRepoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iggid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 2;
      case 2: {
        if (tag == 16) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cfgid;
        break;
      }

      // optional int32 cfgid = 3;
      case 3: {
        if (tag == 24) {
         parse_cfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerlv;
        break;
      }

      // optional int32 playerlv = 4;
      case 4: {
        if (tag == 32) {
         parse_playerlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlv_)));
          set_has_playerlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_btaskdone;
        break;
      }

      // optional int32 btaskdone = 5;
      case 5: {
        if (tag == 40) {
         parse_btaskdone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btaskdone_)));
          set_has_btaskdone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dirty;
        break;
      }

      // optional int64 dirty = 6;
      case 6: {
        if (tag == 48) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_last_refresh_time;
        break;
      }

      // optional int64 last_refresh_time = 7;
      case 7: {
        if (tag == 56) {
         parse_last_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_refresh_time_)));
          set_has_last_refresh_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakRepoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakRepoData)
  return false;
#undef DO_
}

void MsgNpcDakRepoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakRepoData)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iggid(), output);
  }

  // optional int64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uuid(), output);
  }

  // optional int32 cfgid = 3;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cfgid(), output);
  }

  // optional int32 playerlv = 4;
  if (has_playerlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playerlv(), output);
  }

  // optional int32 btaskdone = 5;
  if (has_btaskdone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->btaskdone(), output);
  }

  // optional int64 dirty = 6;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->dirty(), output);
  }

  // optional int64 last_refresh_time = 7;
  if (has_last_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->last_refresh_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakRepoData)
}

::google::protobuf::uint8* MsgNpcDakRepoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakRepoData)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iggid(), target);
  }

  // optional int64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 cfgid = 3;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cfgid(), target);
  }

  // optional int32 playerlv = 4;
  if (has_playerlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playerlv(), target);
  }

  // optional int32 btaskdone = 5;
  if (has_btaskdone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->btaskdone(), target);
  }

  // optional int64 dirty = 6;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->dirty(), target);
  }

  // optional int64 last_refresh_time = 7;
  if (has_last_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->last_refresh_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakRepoData)
  return target;
}

int MsgNpcDakRepoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iggid = 1;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional int32 cfgid = 3;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfgid());
    }

    // optional int32 playerlv = 4;
    if (has_playerlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlv());
    }

    // optional int32 btaskdone = 5;
    if (has_btaskdone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btaskdone());
    }

    // optional int64 dirty = 6;
    if (has_dirty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirty());
    }

    // optional int64 last_refresh_time = 7;
    if (has_last_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_refresh_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakRepoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakRepoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakRepoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakRepoData::MergeFrom(const MsgNpcDakRepoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_playerlv()) {
      set_playerlv(from.playerlv());
    }
    if (from.has_btaskdone()) {
      set_btaskdone(from.btaskdone());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
    if (from.has_last_refresh_time()) {
      set_last_refresh_time(from.last_refresh_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakRepoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakRepoData::CopyFrom(const MsgNpcDakRepoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakRepoData::IsInitialized() const {

  return true;
}

void MsgNpcDakRepoData::Swap(MsgNpcDakRepoData* other) {
  if (other != this) {
    std::swap(iggid_, other->iggid_);
    std::swap(uuid_, other->uuid_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(playerlv_, other->playerlv_);
    std::swap(btaskdone_, other->btaskdone_);
    std::swap(dirty_, other->dirty_);
    std::swap(last_refresh_time_, other->last_refresh_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakRepoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakRepoData_descriptor_;
  metadata.reflection = MsgNpcDakRepoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakRepoQuery_C2S::kMsgTypeFieldNumber;
const int MsgNpcDakRepoQuery_C2S::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakRepoQuery_C2S::MsgNpcDakRepoQuery_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakRepoQuery_C2S)
}

void MsgNpcDakRepoQuery_C2S::InitAsDefaultInstance() {
}

MsgNpcDakRepoQuery_C2S::MsgNpcDakRepoQuery_C2S(const MsgNpcDakRepoQuery_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakRepoQuery_C2S)
}

void MsgNpcDakRepoQuery_C2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4350;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakRepoQuery_C2S::~MsgNpcDakRepoQuery_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakRepoQuery_C2S)
  SharedDtor();
}

void MsgNpcDakRepoQuery_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakRepoQuery_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakRepoQuery_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakRepoQuery_C2S_descriptor_;
}

const MsgNpcDakRepoQuery_C2S& MsgNpcDakRepoQuery_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDakRepo_2eproto();
  return *default_instance_;
}

MsgNpcDakRepoQuery_C2S* MsgNpcDakRepoQuery_C2S::default_instance_ = NULL;

MsgNpcDakRepoQuery_C2S* MsgNpcDakRepoQuery_C2S::New() const {
  return new MsgNpcDakRepoQuery_C2S;
}

void MsgNpcDakRepoQuery_C2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 4350;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakRepoQuery_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakRepoQuery_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_QUERY_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakRepoQuery_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakRepoQuery_C2S)
  return false;
#undef DO_
}

void MsgNpcDakRepoQuery_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakRepoQuery_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_QUERY_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakRepoQuery_C2S)
}

::google::protobuf::uint8* MsgNpcDakRepoQuery_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakRepoQuery_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_QUERY_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakRepoQuery_C2S)
  return target;
}

int MsgNpcDakRepoQuery_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_QUERY_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakRepoQuery_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakRepoQuery_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakRepoQuery_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakRepoQuery_C2S::MergeFrom(const MsgNpcDakRepoQuery_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakRepoQuery_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakRepoQuery_C2S::CopyFrom(const MsgNpcDakRepoQuery_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakRepoQuery_C2S::IsInitialized() const {

  return true;
}

void MsgNpcDakRepoQuery_C2S::Swap(MsgNpcDakRepoQuery_C2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakRepoQuery_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakRepoQuery_C2S_descriptor_;
  metadata.reflection = MsgNpcDakRepoQuery_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakRepoInfo_S2C::kMsgTypeFieldNumber;
const int MsgNpcDakRepoInfo_S2C::kIggidFieldNumber;
const int MsgNpcDakRepoInfo_S2C::kNpcdakRepoDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakRepoInfo_S2C::MsgNpcDakRepoInfo_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakRepoInfo_S2C)
}

void MsgNpcDakRepoInfo_S2C::InitAsDefaultInstance() {
}

MsgNpcDakRepoInfo_S2C::MsgNpcDakRepoInfo_S2C(const MsgNpcDakRepoInfo_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakRepoInfo_S2C)
}

void MsgNpcDakRepoInfo_S2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4351;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakRepoInfo_S2C::~MsgNpcDakRepoInfo_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakRepoInfo_S2C)
  SharedDtor();
}

void MsgNpcDakRepoInfo_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakRepoInfo_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakRepoInfo_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakRepoInfo_S2C_descriptor_;
}

const MsgNpcDakRepoInfo_S2C& MsgNpcDakRepoInfo_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDakRepo_2eproto();
  return *default_instance_;
}

MsgNpcDakRepoInfo_S2C* MsgNpcDakRepoInfo_S2C::default_instance_ = NULL;

MsgNpcDakRepoInfo_S2C* MsgNpcDakRepoInfo_S2C::New() const {
  return new MsgNpcDakRepoInfo_S2C;
}

void MsgNpcDakRepoInfo_S2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 4351;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  npcdak_repo_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakRepoInfo_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakRepoInfo_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_INFO_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_npcdak_repo_data;
        break;
      }

      // repeated .MsgPB.MsgNpcDakRepoData npcdak_repo_data = 3;
      case 3: {
        if (tag == 26) {
         parse_npcdak_repo_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcdak_repo_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_npcdak_repo_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakRepoInfo_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakRepoInfo_S2C)
  return false;
#undef DO_
}

void MsgNpcDakRepoInfo_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakRepoInfo_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_INFO_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // repeated .MsgPB.MsgNpcDakRepoData npcdak_repo_data = 3;
  for (int i = 0; i < this->npcdak_repo_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->npcdak_repo_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakRepoInfo_S2C)
}

::google::protobuf::uint8* MsgNpcDakRepoInfo_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakRepoInfo_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_INFO_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // repeated .MsgPB.MsgNpcDakRepoData npcdak_repo_data = 3;
  for (int i = 0; i < this->npcdak_repo_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->npcdak_repo_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakRepoInfo_S2C)
  return target;
}

int MsgNpcDakRepoInfo_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_INFO_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  // repeated .MsgPB.MsgNpcDakRepoData npcdak_repo_data = 3;
  total_size += 1 * this->npcdak_repo_data_size();
  for (int i = 0; i < this->npcdak_repo_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcdak_repo_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakRepoInfo_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakRepoInfo_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakRepoInfo_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakRepoInfo_S2C::MergeFrom(const MsgNpcDakRepoInfo_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcdak_repo_data_.MergeFrom(from.npcdak_repo_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakRepoInfo_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakRepoInfo_S2C::CopyFrom(const MsgNpcDakRepoInfo_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakRepoInfo_S2C::IsInitialized() const {

  return true;
}

void MsgNpcDakRepoInfo_S2C::Swap(MsgNpcDakRepoInfo_S2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    npcdak_repo_data_.Swap(&other->npcdak_repo_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakRepoInfo_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakRepoInfo_S2C_descriptor_;
  metadata.reflection = MsgNpcDakRepoInfo_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakRepoRefresh_S2C::kMsgTypeFieldNumber;
const int MsgNpcDakRepoRefresh_S2C::kIggidFieldNumber;
const int MsgNpcDakRepoRefresh_S2C::kNpcdakRepoDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakRepoRefresh_S2C::MsgNpcDakRepoRefresh_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakRepoRefresh_S2C)
}

void MsgNpcDakRepoRefresh_S2C::InitAsDefaultInstance() {
}

MsgNpcDakRepoRefresh_S2C::MsgNpcDakRepoRefresh_S2C(const MsgNpcDakRepoRefresh_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakRepoRefresh_S2C)
}

void MsgNpcDakRepoRefresh_S2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4352;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakRepoRefresh_S2C::~MsgNpcDakRepoRefresh_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakRepoRefresh_S2C)
  SharedDtor();
}

void MsgNpcDakRepoRefresh_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakRepoRefresh_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakRepoRefresh_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakRepoRefresh_S2C_descriptor_;
}

const MsgNpcDakRepoRefresh_S2C& MsgNpcDakRepoRefresh_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDakRepo_2eproto();
  return *default_instance_;
}

MsgNpcDakRepoRefresh_S2C* MsgNpcDakRepoRefresh_S2C::default_instance_ = NULL;

MsgNpcDakRepoRefresh_S2C* MsgNpcDakRepoRefresh_S2C::New() const {
  return new MsgNpcDakRepoRefresh_S2C;
}

void MsgNpcDakRepoRefresh_S2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 4352;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  npcdak_repo_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakRepoRefresh_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakRepoRefresh_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_REFRESH_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_npcdak_repo_data;
        break;
      }

      // repeated .MsgPB.MsgNpcDakRepoData npcdak_repo_data = 3;
      case 3: {
        if (tag == 26) {
         parse_npcdak_repo_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcdak_repo_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_npcdak_repo_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakRepoRefresh_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakRepoRefresh_S2C)
  return false;
#undef DO_
}

void MsgNpcDakRepoRefresh_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakRepoRefresh_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_REFRESH_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // repeated .MsgPB.MsgNpcDakRepoData npcdak_repo_data = 3;
  for (int i = 0; i < this->npcdak_repo_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->npcdak_repo_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakRepoRefresh_S2C)
}

::google::protobuf::uint8* MsgNpcDakRepoRefresh_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakRepoRefresh_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_REFRESH_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // repeated .MsgPB.MsgNpcDakRepoData npcdak_repo_data = 3;
  for (int i = 0; i < this->npcdak_repo_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->npcdak_repo_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakRepoRefresh_S2C)
  return target;
}

int MsgNpcDakRepoRefresh_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_REFRESH_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  // repeated .MsgPB.MsgNpcDakRepoData npcdak_repo_data = 3;
  total_size += 1 * this->npcdak_repo_data_size();
  for (int i = 0; i < this->npcdak_repo_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcdak_repo_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakRepoRefresh_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakRepoRefresh_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakRepoRefresh_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakRepoRefresh_S2C::MergeFrom(const MsgNpcDakRepoRefresh_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcdak_repo_data_.MergeFrom(from.npcdak_repo_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakRepoRefresh_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakRepoRefresh_S2C::CopyFrom(const MsgNpcDakRepoRefresh_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakRepoRefresh_S2C::IsInitialized() const {

  return true;
}

void MsgNpcDakRepoRefresh_S2C::Swap(MsgNpcDakRepoRefresh_S2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    npcdak_repo_data_.Swap(&other->npcdak_repo_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakRepoRefresh_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakRepoRefresh_S2C_descriptor_;
  metadata.reflection = MsgNpcDakRepoRefresh_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakRepoFinish_C2S::kMsgTypeFieldNumber;
const int MsgNpcDakRepoFinish_C2S::kIggidFieldNumber;
const int MsgNpcDakRepoFinish_C2S::kUuidFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakRepoFinish_C2S::MsgNpcDakRepoFinish_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakRepoFinish_C2S)
}

void MsgNpcDakRepoFinish_C2S::InitAsDefaultInstance() {
}

MsgNpcDakRepoFinish_C2S::MsgNpcDakRepoFinish_C2S(const MsgNpcDakRepoFinish_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakRepoFinish_C2S)
}

void MsgNpcDakRepoFinish_C2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4353;
  iggid_ = GOOGLE_LONGLONG(0);
  uuid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakRepoFinish_C2S::~MsgNpcDakRepoFinish_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakRepoFinish_C2S)
  SharedDtor();
}

void MsgNpcDakRepoFinish_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakRepoFinish_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakRepoFinish_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakRepoFinish_C2S_descriptor_;
}

const MsgNpcDakRepoFinish_C2S& MsgNpcDakRepoFinish_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDakRepo_2eproto();
  return *default_instance_;
}

MsgNpcDakRepoFinish_C2S* MsgNpcDakRepoFinish_C2S::default_instance_ = NULL;

MsgNpcDakRepoFinish_C2S* MsgNpcDakRepoFinish_C2S::New() const {
  return new MsgNpcDakRepoFinish_C2S;
}

void MsgNpcDakRepoFinish_C2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakRepoFinish_C2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(iggid_, uuid_);
    msgtype_ = 4353;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakRepoFinish_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakRepoFinish_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_FINISH_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakRepoFinish_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakRepoFinish_C2S)
  return false;
#undef DO_
}

void MsgNpcDakRepoFinish_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakRepoFinish_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_FINISH_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakRepoFinish_C2S)
}

::google::protobuf::uint8* MsgNpcDakRepoFinish_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakRepoFinish_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_FINISH_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakRepoFinish_C2S)
  return target;
}

int MsgNpcDakRepoFinish_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_FINISH_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakRepoFinish_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakRepoFinish_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakRepoFinish_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakRepoFinish_C2S::MergeFrom(const MsgNpcDakRepoFinish_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakRepoFinish_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakRepoFinish_C2S::CopyFrom(const MsgNpcDakRepoFinish_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakRepoFinish_C2S::IsInitialized() const {

  return true;
}

void MsgNpcDakRepoFinish_C2S::Swap(MsgNpcDakRepoFinish_C2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakRepoFinish_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakRepoFinish_C2S_descriptor_;
  metadata.reflection = MsgNpcDakRepoFinish_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakRepoFinish_S2C_Reward::kItemIdFieldNumber;
const int MsgNpcDakRepoFinish_S2C_Reward::kCountFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakRepoFinish_S2C_Reward::MsgNpcDakRepoFinish_S2C_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakRepoFinish_S2C.Reward)
}

void MsgNpcDakRepoFinish_S2C_Reward::InitAsDefaultInstance() {
}

MsgNpcDakRepoFinish_S2C_Reward::MsgNpcDakRepoFinish_S2C_Reward(const MsgNpcDakRepoFinish_S2C_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakRepoFinish_S2C.Reward)
}

void MsgNpcDakRepoFinish_S2C_Reward::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakRepoFinish_S2C_Reward::~MsgNpcDakRepoFinish_S2C_Reward() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakRepoFinish_S2C.Reward)
  SharedDtor();
}

void MsgNpcDakRepoFinish_S2C_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakRepoFinish_S2C_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakRepoFinish_S2C_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakRepoFinish_S2C_Reward_descriptor_;
}

const MsgNpcDakRepoFinish_S2C_Reward& MsgNpcDakRepoFinish_S2C_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDakRepo_2eproto();
  return *default_instance_;
}

MsgNpcDakRepoFinish_S2C_Reward* MsgNpcDakRepoFinish_S2C_Reward::default_instance_ = NULL;

MsgNpcDakRepoFinish_S2C_Reward* MsgNpcDakRepoFinish_S2C_Reward::New() const {
  return new MsgNpcDakRepoFinish_S2C_Reward;
}

void MsgNpcDakRepoFinish_S2C_Reward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakRepoFinish_S2C_Reward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakRepoFinish_S2C_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakRepoFinish_S2C.Reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakRepoFinish_S2C.Reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakRepoFinish_S2C.Reward)
  return false;
#undef DO_
}

void MsgNpcDakRepoFinish_S2C_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakRepoFinish_S2C.Reward)
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakRepoFinish_S2C.Reward)
}

::google::protobuf::uint8* MsgNpcDakRepoFinish_S2C_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakRepoFinish_S2C.Reward)
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakRepoFinish_S2C.Reward)
  return target;
}

int MsgNpcDakRepoFinish_S2C_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakRepoFinish_S2C_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakRepoFinish_S2C_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakRepoFinish_S2C_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakRepoFinish_S2C_Reward::MergeFrom(const MsgNpcDakRepoFinish_S2C_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakRepoFinish_S2C_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakRepoFinish_S2C_Reward::CopyFrom(const MsgNpcDakRepoFinish_S2C_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakRepoFinish_S2C_Reward::IsInitialized() const {

  return true;
}

void MsgNpcDakRepoFinish_S2C_Reward::Swap(MsgNpcDakRepoFinish_S2C_Reward* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakRepoFinish_S2C_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakRepoFinish_S2C_Reward_descriptor_;
  metadata.reflection = MsgNpcDakRepoFinish_S2C_Reward_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgNpcDakRepoFinish_S2C::kMsgTypeFieldNumber;
const int MsgNpcDakRepoFinish_S2C::kIggidFieldNumber;
const int MsgNpcDakRepoFinish_S2C::kResultFieldNumber;
const int MsgNpcDakRepoFinish_S2C::kUuidFieldNumber;
const int MsgNpcDakRepoFinish_S2C::kItemsFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakRepoFinish_S2C::MsgNpcDakRepoFinish_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakRepoFinish_S2C)
}

void MsgNpcDakRepoFinish_S2C::InitAsDefaultInstance() {
}

MsgNpcDakRepoFinish_S2C::MsgNpcDakRepoFinish_S2C(const MsgNpcDakRepoFinish_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakRepoFinish_S2C)
}

void MsgNpcDakRepoFinish_S2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4354;
  iggid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakRepoFinish_S2C::~MsgNpcDakRepoFinish_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakRepoFinish_S2C)
  SharedDtor();
}

void MsgNpcDakRepoFinish_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakRepoFinish_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakRepoFinish_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakRepoFinish_S2C_descriptor_;
}

const MsgNpcDakRepoFinish_S2C& MsgNpcDakRepoFinish_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDakRepo_2eproto();
  return *default_instance_;
}

MsgNpcDakRepoFinish_S2C* MsgNpcDakRepoFinish_S2C::default_instance_ = NULL;

MsgNpcDakRepoFinish_S2C* MsgNpcDakRepoFinish_S2C::New() const {
  return new MsgNpcDakRepoFinish_S2C;
}

void MsgNpcDakRepoFinish_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakRepoFinish_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(result_, uuid_);
    msgtype_ = 4354;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakRepoFinish_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakRepoFinish_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_FINISH_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 4;
      case 4: {
        if (tag == 32) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .MsgPB.MsgNpcDakRepoFinish_S2C.Reward items = 5;
      case 5: {
        if (tag == 42) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakRepoFinish_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakRepoFinish_S2C)
  return false;
#undef DO_
}

void MsgNpcDakRepoFinish_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakRepoFinish_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_FINISH_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional int64 uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->uuid(), output);
  }

  // repeated .MsgPB.MsgNpcDakRepoFinish_S2C.Reward items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakRepoFinish_S2C)
}

::google::protobuf::uint8* MsgNpcDakRepoFinish_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakRepoFinish_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_FINISH_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional int64 uuid = 4;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->uuid(), target);
  }

  // repeated .MsgPB.MsgNpcDakRepoFinish_S2C.Reward items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakRepoFinish_S2C)
  return target;
}

int MsgNpcDakRepoFinish_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_REPO_FINISH_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

  }
  // repeated .MsgPB.MsgNpcDakRepoFinish_S2C.Reward items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakRepoFinish_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakRepoFinish_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakRepoFinish_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakRepoFinish_S2C::MergeFrom(const MsgNpcDakRepoFinish_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakRepoFinish_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakRepoFinish_S2C::CopyFrom(const MsgNpcDakRepoFinish_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakRepoFinish_S2C::IsInitialized() const {

  return true;
}

void MsgNpcDakRepoFinish_S2C::Swap(MsgNpcDakRepoFinish_S2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(result_, other->result_);
    std::swap(uuid_, other->uuid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakRepoFinish_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakRepoFinish_S2C_descriptor_;
  metadata.reflection = MsgNpcDakRepoFinish_S2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
