// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgCooldown.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgCooldown.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgCooldown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCooldown_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCooldownGroupS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCooldownGroupS2C_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgCooldown_2eproto() {
  protobuf_AddDesc_MsgCooldown_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgCooldown.proto");
  GOOGLE_CHECK(file != NULL);
  MsgCooldown_descriptor_ = file->message_type(0);
  static const int MsgCooldown_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCooldown, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCooldown, ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCooldown, dirty_),
  };
  MsgCooldown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCooldown_descriptor_,
      MsgCooldown::default_instance_,
      MsgCooldown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCooldown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCooldown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCooldown));
  MsgCooldownGroupS2C_descriptor_ = file->message_type(1);
  static const int MsgCooldownGroupS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCooldownGroupS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCooldownGroupS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCooldownGroupS2C, cooldowns_),
  };
  MsgCooldownGroupS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCooldownGroupS2C_descriptor_,
      MsgCooldownGroupS2C::default_instance_,
      MsgCooldownGroupS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCooldownGroupS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCooldownGroupS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCooldownGroupS2C));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgCooldown_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCooldown_descriptor_, &MsgCooldown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCooldownGroupS2C_descriptor_, &MsgCooldownGroupS2C::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgCooldown_2eproto() {
  delete MsgCooldown::default_instance_;
  delete MsgCooldown_reflection_;
  delete MsgCooldownGroupS2C::default_instance_;
  delete MsgCooldownGroupS2C_reflection_;
}

void protobuf_AddDesc_MsgCooldown_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021MsgCooldown.proto\022\005MsgPB\032\rMsgType.prot"
    "o\"6\n\013MsgCooldown\022\014\n\004type\030\001 \001(\005\022\n\n\002ms\030\002 \001"
    "(\005\022\r\n\005dirty\030\003 \001(\003\"\206\001\n\023MsgCooldownGroupS2"
    "C\0229\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\027_MS"
    "G_COOLDOWN_GROUP_S2C\022\r\n\005iggid\030\002 \001(\003\022%\n\tc"
    "ooldowns\030\003 \003(\0132\022.MsgPB.MsgCooldown", 234);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgCooldown.proto", &protobuf_RegisterTypes);
  MsgCooldown::default_instance_ = new MsgCooldown();
  MsgCooldownGroupS2C::default_instance_ = new MsgCooldownGroupS2C();
  MsgCooldown::default_instance_->InitAsDefaultInstance();
  MsgCooldownGroupS2C::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgCooldown_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgCooldown_2eproto {
  StaticDescriptorInitializer_MsgCooldown_2eproto() {
    protobuf_AddDesc_MsgCooldown_2eproto();
  }
} static_descriptor_initializer_MsgCooldown_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgCooldown::kTypeFieldNumber;
const int MsgCooldown::kMsFieldNumber;
const int MsgCooldown::kDirtyFieldNumber;
#endif  // !_MSC_VER

MsgCooldown::MsgCooldown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgCooldown)
}

void MsgCooldown::InitAsDefaultInstance() {
}

MsgCooldown::MsgCooldown(const MsgCooldown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgCooldown)
}

void MsgCooldown::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ms_ = 0;
  dirty_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCooldown::~MsgCooldown() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgCooldown)
  SharedDtor();
}

void MsgCooldown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCooldown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCooldown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCooldown_descriptor_;
}

const MsgCooldown& MsgCooldown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCooldown_2eproto();
  return *default_instance_;
}

MsgCooldown* MsgCooldown::default_instance_ = NULL;

MsgCooldown* MsgCooldown::New() const {
  return new MsgCooldown;
}

void MsgCooldown::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCooldown*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, dirty_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCooldown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgCooldown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ms;
        break;
      }

      // optional int32 ms = 2;
      case 2: {
        if (tag == 16) {
         parse_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ms_)));
          set_has_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dirty;
        break;
      }

      // optional int64 dirty = 3;
      case 3: {
        if (tag == 24) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgCooldown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgCooldown)
  return false;
#undef DO_
}

void MsgCooldown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgCooldown)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 ms = 2;
  if (has_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ms(), output);
  }

  // optional int64 dirty = 3;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dirty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgCooldown)
}

::google::protobuf::uint8* MsgCooldown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgCooldown)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 ms = 2;
  if (has_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ms(), target);
  }

  // optional int64 dirty = 3;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->dirty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgCooldown)
  return target;
}

int MsgCooldown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 ms = 2;
    if (has_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ms());
    }

    // optional int64 dirty = 3;
    if (has_dirty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCooldown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCooldown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCooldown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCooldown::MergeFrom(const MsgCooldown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ms()) {
      set_ms(from.ms());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCooldown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCooldown::CopyFrom(const MsgCooldown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCooldown::IsInitialized() const {

  return true;
}

void MsgCooldown::Swap(MsgCooldown* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ms_, other->ms_);
    std::swap(dirty_, other->dirty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCooldown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCooldown_descriptor_;
  metadata.reflection = MsgCooldown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCooldownGroupS2C::kMsgTypeFieldNumber;
const int MsgCooldownGroupS2C::kIggidFieldNumber;
const int MsgCooldownGroupS2C::kCooldownsFieldNumber;
#endif  // !_MSC_VER

MsgCooldownGroupS2C::MsgCooldownGroupS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgCooldownGroupS2C)
}

void MsgCooldownGroupS2C::InitAsDefaultInstance() {
}

MsgCooldownGroupS2C::MsgCooldownGroupS2C(const MsgCooldownGroupS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgCooldownGroupS2C)
}

void MsgCooldownGroupS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1034;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCooldownGroupS2C::~MsgCooldownGroupS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgCooldownGroupS2C)
  SharedDtor();
}

void MsgCooldownGroupS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCooldownGroupS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCooldownGroupS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCooldownGroupS2C_descriptor_;
}

const MsgCooldownGroupS2C& MsgCooldownGroupS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCooldown_2eproto();
  return *default_instance_;
}

MsgCooldownGroupS2C* MsgCooldownGroupS2C::default_instance_ = NULL;

MsgCooldownGroupS2C* MsgCooldownGroupS2C::New() const {
  return new MsgCooldownGroupS2C;
}

void MsgCooldownGroupS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1034;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  cooldowns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCooldownGroupS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgCooldownGroupS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_COOLDOWN_GROUP_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cooldowns;
        break;
      }

      // repeated .MsgPB.MsgCooldown cooldowns = 3;
      case 3: {
        if (tag == 26) {
         parse_cooldowns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cooldowns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cooldowns;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgCooldownGroupS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgCooldownGroupS2C)
  return false;
#undef DO_
}

void MsgCooldownGroupS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgCooldownGroupS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_COOLDOWN_GROUP_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // repeated .MsgPB.MsgCooldown cooldowns = 3;
  for (int i = 0; i < this->cooldowns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cooldowns(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgCooldownGroupS2C)
}

::google::protobuf::uint8* MsgCooldownGroupS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgCooldownGroupS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_COOLDOWN_GROUP_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // repeated .MsgPB.MsgCooldown cooldowns = 3;
  for (int i = 0; i < this->cooldowns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cooldowns(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgCooldownGroupS2C)
  return target;
}

int MsgCooldownGroupS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_COOLDOWN_GROUP_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  // repeated .MsgPB.MsgCooldown cooldowns = 3;
  total_size += 1 * this->cooldowns_size();
  for (int i = 0; i < this->cooldowns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cooldowns(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCooldownGroupS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCooldownGroupS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCooldownGroupS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCooldownGroupS2C::MergeFrom(const MsgCooldownGroupS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  cooldowns_.MergeFrom(from.cooldowns_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCooldownGroupS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCooldownGroupS2C::CopyFrom(const MsgCooldownGroupS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCooldownGroupS2C::IsInitialized() const {

  return true;
}

void MsgCooldownGroupS2C::Swap(MsgCooldownGroupS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    cooldowns_.Swap(&other->cooldowns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCooldownGroupS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCooldownGroupS2C_descriptor_;
  metadata.reflection = MsgCooldownGroupS2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
