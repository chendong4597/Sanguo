// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgDB.proto

#ifndef PROTOBUF_MsgDB_2eproto__INCLUDED
#define PROTOBUF_MsgDB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "MsgType.pb.h"
// @@protoc_insertion_point(includes)

namespace MsgPB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MsgDB_2eproto();
void protobuf_AssignDesc_MsgDB_2eproto();
void protobuf_ShutdownFile_MsgDB_2eproto();

class MsgDBReq;
class MsgDBRes;
class MsgDBCommandReq;
class MsgDBCommandRes;
class MsgDBServerInfoGet_US2DS;
class DBIGGINFO;
class PBDBServerInfo;
class MsgDBServerInfoKeyAllUser_DS2US;
class MsgDBServerAllInfo;
class MsgDBServerInfoAllUser_US2S;
class MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR;
class MsgDBPlayerRenameReq_S2S;
class MsgDBPlayerRenameRes_S2S;
class MsgDBPlayerQueryByNameReq_S2S;
class MsgDBPlayerQueryByNameRes_S2S;

enum EN_DB_RESULT {
  EN_DB_RESULT_ERR = 0,
  EN_DB_RESULT_OK = 1,
  EN_DB_RESULT_REPEAT_NAME = 2,
  EN_DB_RESULT_NO_DATA = 3
};
bool EN_DB_RESULT_IsValid(int value);
const EN_DB_RESULT EN_DB_RESULT_MIN = EN_DB_RESULT_ERR;
const EN_DB_RESULT EN_DB_RESULT_MAX = EN_DB_RESULT_NO_DATA;
const int EN_DB_RESULT_ARRAYSIZE = EN_DB_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* EN_DB_RESULT_descriptor();
inline const ::std::string& EN_DB_RESULT_Name(EN_DB_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    EN_DB_RESULT_descriptor(), value);
}
inline bool EN_DB_RESULT_Parse(
    const ::std::string& name, EN_DB_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EN_DB_RESULT>(
    EN_DB_RESULT_descriptor(), name, value);
}
// ===================================================================

class MsgDBReq : public ::google::protobuf::Message {
 public:
  MsgDBReq();
  virtual ~MsgDBReq();

  MsgDBReq(const MsgDBReq& from);

  inline MsgDBReq& operator=(const MsgDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBReq& default_instance();

  void Swap(MsgDBReq* other);

  // implements Message ----------------------------------------------

  MsgDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBReq& from);
  void MergeFrom(const MsgDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_REQ];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int32 RouteID = 2;
  inline bool has_routeid() const;
  inline void clear_routeid();
  static const int kRouteIDFieldNumber = 2;
  inline ::google::protobuf::int32 routeid() const;
  inline void set_routeid(::google::protobuf::int32 value);

  // optional int64 HashID = 3;
  inline bool has_hashid() const;
  inline void clear_hashid();
  static const int kHashIDFieldNumber = 3;
  inline ::google::protobuf::int64 hashid() const;
  inline void set_hashid(::google::protobuf::int64 value);

  // optional .MsgPB.EMsgType reqType = 4;
  inline bool has_reqtype() const;
  inline void clear_reqtype();
  static const int kReqTypeFieldNumber = 4;
  inline ::MsgPB::EMsgType reqtype() const;
  inline void set_reqtype(::MsgPB::EMsgType value);

  // optional bytes ReqPB = 5;
  inline bool has_reqpb() const;
  inline void clear_reqpb();
  static const int kReqPBFieldNumber = 5;
  inline const ::std::string& reqpb() const;
  inline void set_reqpb(const ::std::string& value);
  inline void set_reqpb(const char* value);
  inline void set_reqpb(const void* value, size_t size);
  inline ::std::string* mutable_reqpb();
  inline ::std::string* release_reqpb();
  inline void set_allocated_reqpb(::std::string* reqpb);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgDBReq)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_routeid();
  inline void clear_has_routeid();
  inline void set_has_hashid();
  inline void clear_has_hashid();
  inline void set_has_reqtype();
  inline void clear_has_reqtype();
  inline void set_has_reqpb();
  inline void clear_has_reqpb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgtype_;
  ::google::protobuf::int32 routeid_;
  ::google::protobuf::int64 hashid_;
  ::std::string* reqpb_;
  int reqtype_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static MsgDBReq* default_instance_;
};
// -------------------------------------------------------------------

class MsgDBRes : public ::google::protobuf::Message {
 public:
  MsgDBRes();
  virtual ~MsgDBRes();

  MsgDBRes(const MsgDBRes& from);

  inline MsgDBRes& operator=(const MsgDBRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBRes& default_instance();

  void Swap(MsgDBRes* other);

  // implements Message ----------------------------------------------

  MsgDBRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBRes& from);
  void MergeFrom(const MsgDBRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_RES];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int32 RouteID = 2;
  inline bool has_routeid() const;
  inline void clear_routeid();
  static const int kRouteIDFieldNumber = 2;
  inline ::google::protobuf::int32 routeid() const;
  inline void set_routeid(::google::protobuf::int32 value);

  // optional int64 HashID = 3;
  inline bool has_hashid() const;
  inline void clear_hashid();
  static const int kHashIDFieldNumber = 3;
  inline ::google::protobuf::int64 hashid() const;
  inline void set_hashid(::google::protobuf::int64 value);

  // optional .MsgPB.EMsgType resType = 4;
  inline bool has_restype() const;
  inline void clear_restype();
  static const int kResTypeFieldNumber = 4;
  inline ::MsgPB::EMsgType restype() const;
  inline void set_restype(::MsgPB::EMsgType value);

  // optional bytes ResPB = 5;
  inline bool has_respb() const;
  inline void clear_respb();
  static const int kResPBFieldNumber = 5;
  inline const ::std::string& respb() const;
  inline void set_respb(const ::std::string& value);
  inline void set_respb(const char* value);
  inline void set_respb(const void* value, size_t size);
  inline ::std::string* mutable_respb();
  inline ::std::string* release_respb();
  inline void set_allocated_respb(::std::string* respb);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgDBRes)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_routeid();
  inline void clear_has_routeid();
  inline void set_has_hashid();
  inline void clear_has_hashid();
  inline void set_has_restype();
  inline void clear_has_restype();
  inline void set_has_respb();
  inline void clear_has_respb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgtype_;
  ::google::protobuf::int32 routeid_;
  ::google::protobuf::int64 hashid_;
  ::std::string* respb_;
  int restype_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static MsgDBRes* default_instance_;
};
// -------------------------------------------------------------------

class MsgDBCommandReq : public ::google::protobuf::Message {
 public:
  MsgDBCommandReq();
  virtual ~MsgDBCommandReq();

  MsgDBCommandReq(const MsgDBCommandReq& from);

  inline MsgDBCommandReq& operator=(const MsgDBCommandReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBCommandReq& default_instance();

  void Swap(MsgDBCommandReq* other);

  // implements Message ----------------------------------------------

  MsgDBCommandReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBCommandReq& from);
  void MergeFrom(const MsgDBCommandReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_COMMAND_REQ];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int32 RouteID = 2;
  inline bool has_routeid() const;
  inline void clear_routeid();
  static const int kRouteIDFieldNumber = 2;
  inline ::google::protobuf::int32 routeid() const;
  inline void set_routeid(::google::protobuf::int32 value);

  // optional int64 HashID = 3;
  inline bool has_hashid() const;
  inline void clear_hashid();
  static const int kHashIDFieldNumber = 3;
  inline ::google::protobuf::int64 hashid() const;
  inline void set_hashid(::google::protobuf::int64 value);

  // optional string strCommandName = 4;
  inline bool has_strcommandname() const;
  inline void clear_strcommandname();
  static const int kStrCommandNameFieldNumber = 4;
  inline const ::std::string& strcommandname() const;
  inline void set_strcommandname(const ::std::string& value);
  inline void set_strcommandname(const char* value);
  inline void set_strcommandname(const char* value, size_t size);
  inline ::std::string* mutable_strcommandname();
  inline ::std::string* release_strcommandname();
  inline void set_allocated_strcommandname(::std::string* strcommandname);

  // optional bytes strAttachmentsData = 5;
  inline bool has_strattachmentsdata() const;
  inline void clear_strattachmentsdata();
  static const int kStrAttachmentsDataFieldNumber = 5;
  inline const ::std::string& strattachmentsdata() const;
  inline void set_strattachmentsdata(const ::std::string& value);
  inline void set_strattachmentsdata(const char* value);
  inline void set_strattachmentsdata(const void* value, size_t size);
  inline ::std::string* mutable_strattachmentsdata();
  inline ::std::string* release_strattachmentsdata();
  inline void set_allocated_strattachmentsdata(::std::string* strattachmentsdata);

  // optional bytes strCommandData = 6;
  inline bool has_strcommanddata() const;
  inline void clear_strcommanddata();
  static const int kStrCommandDataFieldNumber = 6;
  inline const ::std::string& strcommanddata() const;
  inline void set_strcommanddata(const ::std::string& value);
  inline void set_strcommanddata(const char* value);
  inline void set_strcommanddata(const void* value, size_t size);
  inline ::std::string* mutable_strcommanddata();
  inline ::std::string* release_strcommanddata();
  inline void set_allocated_strcommanddata(::std::string* strcommanddata);

  // optional int64 fingerprint = 7;
  inline bool has_fingerprint() const;
  inline void clear_fingerprint();
  static const int kFingerprintFieldNumber = 7;
  inline ::google::protobuf::int64 fingerprint() const;
  inline void set_fingerprint(::google::protobuf::int64 value);

  // optional int64 iggid = 8;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggidFieldNumber = 8;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional int64 query_context_data = 9;
  inline bool has_query_context_data() const;
  inline void clear_query_context_data();
  static const int kQueryContextDataFieldNumber = 9;
  inline ::google::protobuf::int64 query_context_data() const;
  inline void set_query_context_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgDBCommandReq)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_routeid();
  inline void clear_has_routeid();
  inline void set_has_hashid();
  inline void clear_has_hashid();
  inline void set_has_strcommandname();
  inline void clear_has_strcommandname();
  inline void set_has_strattachmentsdata();
  inline void clear_has_strattachmentsdata();
  inline void set_has_strcommanddata();
  inline void clear_has_strcommanddata();
  inline void set_has_fingerprint();
  inline void clear_has_fingerprint();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_query_context_data();
  inline void clear_has_query_context_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgtype_;
  ::google::protobuf::int32 routeid_;
  ::google::protobuf::int64 hashid_;
  ::std::string* strcommandname_;
  ::std::string* strattachmentsdata_;
  ::std::string* strcommanddata_;
  ::google::protobuf::int64 fingerprint_;
  ::google::protobuf::int64 iggid_;
  ::google::protobuf::int64 query_context_data_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static MsgDBCommandReq* default_instance_;
};
// -------------------------------------------------------------------

class MsgDBCommandRes : public ::google::protobuf::Message {
 public:
  MsgDBCommandRes();
  virtual ~MsgDBCommandRes();

  MsgDBCommandRes(const MsgDBCommandRes& from);

  inline MsgDBCommandRes& operator=(const MsgDBCommandRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBCommandRes& default_instance();

  void Swap(MsgDBCommandRes* other);

  // implements Message ----------------------------------------------

  MsgDBCommandRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBCommandRes& from);
  void MergeFrom(const MsgDBCommandRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_COMMAND_RES];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int32 RouteID = 2;
  inline bool has_routeid() const;
  inline void clear_routeid();
  static const int kRouteIDFieldNumber = 2;
  inline ::google::protobuf::int32 routeid() const;
  inline void set_routeid(::google::protobuf::int32 value);

  // optional int64 HashID = 3;
  inline bool has_hashid() const;
  inline void clear_hashid();
  static const int kHashIDFieldNumber = 3;
  inline ::google::protobuf::int64 hashid() const;
  inline void set_hashid(::google::protobuf::int64 value);

  // optional bool IsTail = 4;
  inline bool has_istail() const;
  inline void clear_istail();
  static const int kIsTailFieldNumber = 4;
  inline bool istail() const;
  inline void set_istail(bool value);

  // optional string strCommandName = 5;
  inline bool has_strcommandname() const;
  inline void clear_strcommandname();
  static const int kStrCommandNameFieldNumber = 5;
  inline const ::std::string& strcommandname() const;
  inline void set_strcommandname(const ::std::string& value);
  inline void set_strcommandname(const char* value);
  inline void set_strcommandname(const char* value, size_t size);
  inline ::std::string* mutable_strcommandname();
  inline ::std::string* release_strcommandname();
  inline void set_allocated_strcommandname(::std::string* strcommandname);

  // optional bytes strAttachmentsData = 6;
  inline bool has_strattachmentsdata() const;
  inline void clear_strattachmentsdata();
  static const int kStrAttachmentsDataFieldNumber = 6;
  inline const ::std::string& strattachmentsdata() const;
  inline void set_strattachmentsdata(const ::std::string& value);
  inline void set_strattachmentsdata(const char* value);
  inline void set_strattachmentsdata(const void* value, size_t size);
  inline ::std::string* mutable_strattachmentsdata();
  inline ::std::string* release_strattachmentsdata();
  inline void set_allocated_strattachmentsdata(::std::string* strattachmentsdata);

  // repeated bytes strCommandData = 7;
  inline int strcommanddata_size() const;
  inline void clear_strcommanddata();
  static const int kStrCommandDataFieldNumber = 7;
  inline const ::std::string& strcommanddata(int index) const;
  inline ::std::string* mutable_strcommanddata(int index);
  inline void set_strcommanddata(int index, const ::std::string& value);
  inline void set_strcommanddata(int index, const char* value);
  inline void set_strcommanddata(int index, const void* value, size_t size);
  inline ::std::string* add_strcommanddata();
  inline void add_strcommanddata(const ::std::string& value);
  inline void add_strcommanddata(const char* value);
  inline void add_strcommanddata(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& strcommanddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strcommanddata();

  // optional int64 fingerprint = 8;
  inline bool has_fingerprint() const;
  inline void clear_fingerprint();
  static const int kFingerprintFieldNumber = 8;
  inline ::google::protobuf::int64 fingerprint() const;
  inline void set_fingerprint(::google::protobuf::int64 value);

  // optional int64 iggid = 9;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggidFieldNumber = 9;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional int64 query_context_data = 10;
  inline bool has_query_context_data() const;
  inline void clear_query_context_data();
  static const int kQueryContextDataFieldNumber = 10;
  inline ::google::protobuf::int64 query_context_data() const;
  inline void set_query_context_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgDBCommandRes)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_routeid();
  inline void clear_has_routeid();
  inline void set_has_hashid();
  inline void clear_has_hashid();
  inline void set_has_istail();
  inline void clear_has_istail();
  inline void set_has_strcommandname();
  inline void clear_has_strcommandname();
  inline void set_has_strattachmentsdata();
  inline void clear_has_strattachmentsdata();
  inline void set_has_fingerprint();
  inline void clear_has_fingerprint();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_query_context_data();
  inline void clear_has_query_context_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgtype_;
  ::google::protobuf::int32 routeid_;
  ::google::protobuf::int64 hashid_;
  ::std::string* strcommandname_;
  ::std::string* strattachmentsdata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strcommanddata_;
  ::google::protobuf::int64 fingerprint_;
  ::google::protobuf::int64 iggid_;
  ::google::protobuf::int64 query_context_data_;
  bool istail_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static MsgDBCommandRes* default_instance_;
};
// -------------------------------------------------------------------

class MsgDBServerInfoGet_US2DS : public ::google::protobuf::Message {
 public:
  MsgDBServerInfoGet_US2DS();
  virtual ~MsgDBServerInfoGet_US2DS();

  MsgDBServerInfoGet_US2DS(const MsgDBServerInfoGet_US2DS& from);

  inline MsgDBServerInfoGet_US2DS& operator=(const MsgDBServerInfoGet_US2DS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBServerInfoGet_US2DS& default_instance();

  void Swap(MsgDBServerInfoGet_US2DS* other);

  // implements Message ----------------------------------------------

  MsgDBServerInfoGet_US2DS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBServerInfoGet_US2DS& from);
  void MergeFrom(const MsgDBServerInfoGet_US2DS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_GET_US2DS];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgDBServerInfoGet_US2DS)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgtype_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static MsgDBServerInfoGet_US2DS* default_instance_;
};
// -------------------------------------------------------------------

class DBIGGINFO : public ::google::protobuf::Message {
 public:
  DBIGGINFO();
  virtual ~DBIGGINFO();

  DBIGGINFO(const DBIGGINFO& from);

  inline DBIGGINFO& operator=(const DBIGGINFO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBIGGINFO& default_instance();

  void Swap(DBIGGINFO* other);

  // implements Message ----------------------------------------------

  DBIGGINFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBIGGINFO& from);
  void MergeFrom(const DBIGGINFO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 iggid = 1;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggidFieldNumber = 1;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int64 freezetime = 3;
  inline bool has_freezetime() const;
  inline void clear_freezetime();
  static const int kFreezetimeFieldNumber = 3;
  inline ::google::protobuf::int64 freezetime() const;
  inline void set_freezetime(::google::protobuf::int64 value);

  // optional int32 freezeinterval = 4;
  inline bool has_freezeinterval() const;
  inline void clear_freezeinterval();
  static const int kFreezeintervalFieldNumber = 4;
  inline ::google::protobuf::int32 freezeinterval() const;
  inline void set_freezeinterval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgPB.DBIGGINFO)
 private:
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_freezetime();
  inline void clear_has_freezetime();
  inline void set_has_freezeinterval();
  inline void clear_has_freezeinterval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  ::std::string* nickname_;
  ::google::protobuf::int64 freezetime_;
  ::google::protobuf::int32 freezeinterval_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static DBIGGINFO* default_instance_;
};
// -------------------------------------------------------------------

class PBDBServerInfo : public ::google::protobuf::Message {
 public:
  PBDBServerInfo();
  virtual ~PBDBServerInfo();

  PBDBServerInfo(const PBDBServerInfo& from);

  inline PBDBServerInfo& operator=(const PBDBServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBDBServerInfo& default_instance();

  void Swap(PBDBServerInfo* other);

  // implements Message ----------------------------------------------

  PBDBServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBDBServerInfo& from);
  void MergeFrom(const PBDBServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dbkey = 1;
  inline bool has_dbkey() const;
  inline void clear_dbkey();
  static const int kDbkeyFieldNumber = 1;
  inline const ::std::string& dbkey() const;
  inline void set_dbkey(const ::std::string& value);
  inline void set_dbkey(const char* value);
  inline void set_dbkey(const char* value, size_t size);
  inline ::std::string* mutable_dbkey();
  inline ::std::string* release_dbkey();
  inline void set_allocated_dbkey(::std::string* dbkey);

  // optional int32 dbserver_id = 2;
  inline bool has_dbserver_id() const;
  inline void clear_dbserver_id();
  static const int kDbserverIdFieldNumber = 2;
  inline ::google::protobuf::int32 dbserver_id() const;
  inline void set_dbserver_id(::google::protobuf::int32 value);

  // optional string dbserver_ip = 3;
  inline bool has_dbserver_ip() const;
  inline void clear_dbserver_ip();
  static const int kDbserverIpFieldNumber = 3;
  inline const ::std::string& dbserver_ip() const;
  inline void set_dbserver_ip(const ::std::string& value);
  inline void set_dbserver_ip(const char* value);
  inline void set_dbserver_ip(const char* value, size_t size);
  inline ::std::string* mutable_dbserver_ip();
  inline ::std::string* release_dbserver_ip();
  inline void set_allocated_dbserver_ip(::std::string* dbserver_ip);

  // optional int32 dbserver_port = 4;
  inline bool has_dbserver_port() const;
  inline void clear_dbserver_port();
  static const int kDbserverPortFieldNumber = 4;
  inline ::google::protobuf::int32 dbserver_port() const;
  inline void set_dbserver_port(::google::protobuf::int32 value);

  // optional int32 is_main_db = 5;
  inline bool has_is_main_db() const;
  inline void clear_is_main_db();
  static const int kIsMainDbFieldNumber = 5;
  inline ::google::protobuf::int32 is_main_db() const;
  inline void set_is_main_db(::google::protobuf::int32 value);

  // optional int32 is_center_db = 6;
  inline bool has_is_center_db() const;
  inline void clear_is_center_db();
  static const int kIsCenterDbFieldNumber = 6;
  inline ::google::protobuf::int32 is_center_db() const;
  inline void set_is_center_db(::google::protobuf::int32 value);

  // repeated int32 db_function = 7;
  inline int db_function_size() const;
  inline void clear_db_function();
  static const int kDbFunctionFieldNumber = 7;
  inline ::google::protobuf::int32 db_function(int index) const;
  inline void set_db_function(int index, ::google::protobuf::int32 value);
  inline void add_db_function(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      db_function() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_db_function();

  // optional string dbserver_domain_name = 8;
  inline bool has_dbserver_domain_name() const;
  inline void clear_dbserver_domain_name();
  static const int kDbserverDomainNameFieldNumber = 8;
  inline const ::std::string& dbserver_domain_name() const;
  inline void set_dbserver_domain_name(const ::std::string& value);
  inline void set_dbserver_domain_name(const char* value);
  inline void set_dbserver_domain_name(const char* value, size_t size);
  inline ::std::string* mutable_dbserver_domain_name();
  inline ::std::string* release_dbserver_domain_name();
  inline void set_allocated_dbserver_domain_name(::std::string* dbserver_domain_name);

  // optional int32 area_id = 9;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 9;
  inline ::google::protobuf::int32 area_id() const;
  inline void set_area_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgPB.PBDBServerInfo)
 private:
  inline void set_has_dbkey();
  inline void clear_has_dbkey();
  inline void set_has_dbserver_id();
  inline void clear_has_dbserver_id();
  inline void set_has_dbserver_ip();
  inline void clear_has_dbserver_ip();
  inline void set_has_dbserver_port();
  inline void clear_has_dbserver_port();
  inline void set_has_is_main_db();
  inline void clear_has_is_main_db();
  inline void set_has_is_center_db();
  inline void clear_has_is_center_db();
  inline void set_has_dbserver_domain_name();
  inline void clear_has_dbserver_domain_name();
  inline void set_has_area_id();
  inline void clear_has_area_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dbkey_;
  ::std::string* dbserver_ip_;
  ::google::protobuf::int32 dbserver_id_;
  ::google::protobuf::int32 dbserver_port_;
  ::google::protobuf::int32 is_main_db_;
  ::google::protobuf::int32 is_center_db_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > db_function_;
  ::std::string* dbserver_domain_name_;
  ::google::protobuf::int32 area_id_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static PBDBServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgDBServerInfoKeyAllUser_DS2US : public ::google::protobuf::Message {
 public:
  MsgDBServerInfoKeyAllUser_DS2US();
  virtual ~MsgDBServerInfoKeyAllUser_DS2US();

  MsgDBServerInfoKeyAllUser_DS2US(const MsgDBServerInfoKeyAllUser_DS2US& from);

  inline MsgDBServerInfoKeyAllUser_DS2US& operator=(const MsgDBServerInfoKeyAllUser_DS2US& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBServerInfoKeyAllUser_DS2US& default_instance();

  void Swap(MsgDBServerInfoKeyAllUser_DS2US* other);

  // implements Message ----------------------------------------------

  MsgDBServerInfoKeyAllUser_DS2US* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBServerInfoKeyAllUser_DS2US& from);
  void MergeFrom(const MsgDBServerInfoKeyAllUser_DS2US& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_KEY_ALL_USER_DS2US];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional .MsgPB.PBDBServerInfo dbserver_info = 2;
  inline bool has_dbserver_info() const;
  inline void clear_dbserver_info();
  static const int kDbserverInfoFieldNumber = 2;
  inline const ::MsgPB::PBDBServerInfo& dbserver_info() const;
  inline ::MsgPB::PBDBServerInfo* mutable_dbserver_info();
  inline ::MsgPB::PBDBServerInfo* release_dbserver_info();
  inline void set_allocated_dbserver_info(::MsgPB::PBDBServerInfo* dbserver_info);

  // optional int32 bfirst = 3;
  inline bool has_bfirst() const;
  inline void clear_bfirst();
  static const int kBfirstFieldNumber = 3;
  inline ::google::protobuf::int32 bfirst() const;
  inline void set_bfirst(::google::protobuf::int32 value);

  // optional int32 blast = 4;
  inline bool has_blast() const;
  inline void clear_blast();
  static const int kBlastFieldNumber = 4;
  inline ::google::protobuf::int32 blast() const;
  inline void set_blast(::google::protobuf::int32 value);

  // repeated .MsgPB.DBIGGINFO igginfo_array = 5;
  inline int igginfo_array_size() const;
  inline void clear_igginfo_array();
  static const int kIgginfoArrayFieldNumber = 5;
  inline const ::MsgPB::DBIGGINFO& igginfo_array(int index) const;
  inline ::MsgPB::DBIGGINFO* mutable_igginfo_array(int index);
  inline ::MsgPB::DBIGGINFO* add_igginfo_array();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgPB::DBIGGINFO >&
      igginfo_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgPB::DBIGGINFO >*
      mutable_igginfo_array();

  // @@protoc_insertion_point(class_scope:MsgPB.MsgDBServerInfoKeyAllUser_DS2US)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_dbserver_info();
  inline void clear_has_dbserver_info();
  inline void set_has_bfirst();
  inline void clear_has_bfirst();
  inline void set_has_blast();
  inline void clear_has_blast();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::MsgPB::PBDBServerInfo* dbserver_info_;
  int msgtype_;
  ::google::protobuf::int32 bfirst_;
  ::google::protobuf::RepeatedPtrField< ::MsgPB::DBIGGINFO > igginfo_array_;
  ::google::protobuf::int32 blast_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static MsgDBServerInfoKeyAllUser_DS2US* default_instance_;
};
// -------------------------------------------------------------------

class MsgDBServerAllInfo : public ::google::protobuf::Message {
 public:
  MsgDBServerAllInfo();
  virtual ~MsgDBServerAllInfo();

  MsgDBServerAllInfo(const MsgDBServerAllInfo& from);

  inline MsgDBServerAllInfo& operator=(const MsgDBServerAllInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBServerAllInfo& default_instance();

  void Swap(MsgDBServerAllInfo* other);

  // implements Message ----------------------------------------------

  MsgDBServerAllInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBServerAllInfo& from);
  void MergeFrom(const MsgDBServerAllInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_ALL_INFO];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // repeated .MsgPB.PBDBServerInfo db_server_info_array = 2;
  inline int db_server_info_array_size() const;
  inline void clear_db_server_info_array();
  static const int kDbServerInfoArrayFieldNumber = 2;
  inline const ::MsgPB::PBDBServerInfo& db_server_info_array(int index) const;
  inline ::MsgPB::PBDBServerInfo* mutable_db_server_info_array(int index);
  inline ::MsgPB::PBDBServerInfo* add_db_server_info_array();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgPB::PBDBServerInfo >&
      db_server_info_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgPB::PBDBServerInfo >*
      mutable_db_server_info_array();

  // @@protoc_insertion_point(class_scope:MsgPB.MsgDBServerAllInfo)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MsgPB::PBDBServerInfo > db_server_info_array_;
  int msgtype_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static MsgDBServerAllInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgDBServerInfoAllUser_US2S : public ::google::protobuf::Message {
 public:
  MsgDBServerInfoAllUser_US2S();
  virtual ~MsgDBServerInfoAllUser_US2S();

  MsgDBServerInfoAllUser_US2S(const MsgDBServerInfoAllUser_US2S& from);

  inline MsgDBServerInfoAllUser_US2S& operator=(const MsgDBServerInfoAllUser_US2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBServerInfoAllUser_US2S& default_instance();

  void Swap(MsgDBServerInfoAllUser_US2S* other);

  // implements Message ----------------------------------------------

  MsgDBServerInfoAllUser_US2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBServerInfoAllUser_US2S& from);
  void MergeFrom(const MsgDBServerInfoAllUser_US2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_ALL_USER_US2S];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional string dbkey = 2;
  inline bool has_dbkey() const;
  inline void clear_dbkey();
  static const int kDbkeyFieldNumber = 2;
  inline const ::std::string& dbkey() const;
  inline void set_dbkey(const ::std::string& value);
  inline void set_dbkey(const char* value);
  inline void set_dbkey(const char* value, size_t size);
  inline ::std::string* mutable_dbkey();
  inline ::std::string* release_dbkey();
  inline void set_allocated_dbkey(::std::string* dbkey);

  // optional int32 user_count = 3;
  inline bool has_user_count() const;
  inline void clear_user_count();
  static const int kUserCountFieldNumber = 3;
  inline ::google::protobuf::int32 user_count() const;
  inline void set_user_count(::google::protobuf::int32 value);

  // optional int32 bfirst = 4;
  inline bool has_bfirst() const;
  inline void clear_bfirst();
  static const int kBfirstFieldNumber = 4;
  inline ::google::protobuf::int32 bfirst() const;
  inline void set_bfirst(::google::protobuf::int32 value);

  // optional int32 blast = 5;
  inline bool has_blast() const;
  inline void clear_blast();
  static const int kBlastFieldNumber = 5;
  inline ::google::protobuf::int32 blast() const;
  inline void set_blast(::google::protobuf::int32 value);

  // repeated .MsgPB.DBIGGINFO igginfo_array = 6;
  inline int igginfo_array_size() const;
  inline void clear_igginfo_array();
  static const int kIgginfoArrayFieldNumber = 6;
  inline const ::MsgPB::DBIGGINFO& igginfo_array(int index) const;
  inline ::MsgPB::DBIGGINFO* mutable_igginfo_array(int index);
  inline ::MsgPB::DBIGGINFO* add_igginfo_array();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgPB::DBIGGINFO >&
      igginfo_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgPB::DBIGGINFO >*
      mutable_igginfo_array();

  // @@protoc_insertion_point(class_scope:MsgPB.MsgDBServerInfoAllUser_US2S)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_dbkey();
  inline void clear_has_dbkey();
  inline void set_has_user_count();
  inline void clear_has_user_count();
  inline void set_has_bfirst();
  inline void clear_has_bfirst();
  inline void set_has_blast();
  inline void clear_has_blast();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dbkey_;
  int msgtype_;
  ::google::protobuf::int32 user_count_;
  ::google::protobuf::int32 bfirst_;
  ::google::protobuf::int32 blast_;
  ::google::protobuf::RepeatedPtrField< ::MsgPB::DBIGGINFO > igginfo_array_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static MsgDBServerInfoAllUser_US2S* default_instance_;
};
// -------------------------------------------------------------------

class MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR : public ::google::protobuf::Message {
 public:
  MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR();
  virtual ~MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR();

  MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR(const MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR& from);

  inline MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR& operator=(const MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR& default_instance();

  void Swap(MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR* other);

  // implements Message ----------------------------------------------

  MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR& from);
  void MergeFrom(const MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_DBMGR_PLAYER_LOGIN_SUCCESS_MGR2DBMGR];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggid = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggidFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional string dbkey = 3;
  inline bool has_dbkey() const;
  inline void clear_dbkey();
  static const int kDbkeyFieldNumber = 3;
  inline const ::std::string& dbkey() const;
  inline void set_dbkey(const ::std::string& value);
  inline void set_dbkey(const char* value);
  inline void set_dbkey(const char* value, size_t size);
  inline ::std::string* mutable_dbkey();
  inline ::std::string* release_dbkey();
  inline void set_allocated_dbkey(::std::string* dbkey);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_dbkey();
  inline void clear_has_dbkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  ::std::string* dbkey_;
  int msgtype_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR* default_instance_;
};
// -------------------------------------------------------------------

class MsgDBPlayerRenameReq_S2S : public ::google::protobuf::Message {
 public:
  MsgDBPlayerRenameReq_S2S();
  virtual ~MsgDBPlayerRenameReq_S2S();

  MsgDBPlayerRenameReq_S2S(const MsgDBPlayerRenameReq_S2S& from);

  inline MsgDBPlayerRenameReq_S2S& operator=(const MsgDBPlayerRenameReq_S2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBPlayerRenameReq_S2S& default_instance();

  void Swap(MsgDBPlayerRenameReq_S2S* other);

  // implements Message ----------------------------------------------

  MsgDBPlayerRenameReq_S2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBPlayerRenameReq_S2S& from);
  void MergeFrom(const MsgDBPlayerRenameReq_S2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_RENAME_REQ_S2S];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggid = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggidFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgDBPlayerRenameReq_S2S)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  ::std::string* name_;
  int msgtype_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static MsgDBPlayerRenameReq_S2S* default_instance_;
};
// -------------------------------------------------------------------

class MsgDBPlayerRenameRes_S2S : public ::google::protobuf::Message {
 public:
  MsgDBPlayerRenameRes_S2S();
  virtual ~MsgDBPlayerRenameRes_S2S();

  MsgDBPlayerRenameRes_S2S(const MsgDBPlayerRenameRes_S2S& from);

  inline MsgDBPlayerRenameRes_S2S& operator=(const MsgDBPlayerRenameRes_S2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBPlayerRenameRes_S2S& default_instance();

  void Swap(MsgDBPlayerRenameRes_S2S* other);

  // implements Message ----------------------------------------------

  MsgDBPlayerRenameRes_S2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBPlayerRenameRes_S2S& from);
  void MergeFrom(const MsgDBPlayerRenameRes_S2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_RENAME_RES_S2S];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggid = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggidFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .MsgPB.EN_DB_RESULT res = 4;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 4;
  inline ::MsgPB::EN_DB_RESULT res() const;
  inline void set_res(::MsgPB::EN_DB_RESULT value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgDBPlayerRenameRes_S2S)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  int msgtype_;
  int res_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static MsgDBPlayerRenameRes_S2S* default_instance_;
};
// -------------------------------------------------------------------

class MsgDBPlayerQueryByNameReq_S2S : public ::google::protobuf::Message {
 public:
  MsgDBPlayerQueryByNameReq_S2S();
  virtual ~MsgDBPlayerQueryByNameReq_S2S();

  MsgDBPlayerQueryByNameReq_S2S(const MsgDBPlayerQueryByNameReq_S2S& from);

  inline MsgDBPlayerQueryByNameReq_S2S& operator=(const MsgDBPlayerQueryByNameReq_S2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBPlayerQueryByNameReq_S2S& default_instance();

  void Swap(MsgDBPlayerQueryByNameReq_S2S* other);

  // implements Message ----------------------------------------------

  MsgDBPlayerQueryByNameReq_S2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBPlayerQueryByNameReq_S2S& from);
  void MergeFrom(const MsgDBPlayerQueryByNameReq_S2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_QUERY_BY_NAME_REQ_S2S];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggid = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggidFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 query_contex_data = 4;
  inline bool has_query_contex_data() const;
  inline void clear_query_contex_data();
  static const int kQueryContexDataFieldNumber = 4;
  inline ::google::protobuf::int64 query_contex_data() const;
  inline void set_query_contex_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgDBPlayerQueryByNameReq_S2S)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_query_contex_data();
  inline void clear_has_query_contex_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  ::std::string* name_;
  ::google::protobuf::int64 query_contex_data_;
  int msgtype_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static MsgDBPlayerQueryByNameReq_S2S* default_instance_;
};
// -------------------------------------------------------------------

class MsgDBPlayerQueryByNameRes_S2S : public ::google::protobuf::Message {
 public:
  MsgDBPlayerQueryByNameRes_S2S();
  virtual ~MsgDBPlayerQueryByNameRes_S2S();

  MsgDBPlayerQueryByNameRes_S2S(const MsgDBPlayerQueryByNameRes_S2S& from);

  inline MsgDBPlayerQueryByNameRes_S2S& operator=(const MsgDBPlayerQueryByNameRes_S2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBPlayerQueryByNameRes_S2S& default_instance();

  void Swap(MsgDBPlayerQueryByNameRes_S2S* other);

  // implements Message ----------------------------------------------

  MsgDBPlayerQueryByNameRes_S2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBPlayerQueryByNameRes_S2S& from);
  void MergeFrom(const MsgDBPlayerQueryByNameRes_S2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_QUERY_BY_NAME_RES_S2S];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggid = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggidFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 query_contex_data = 4;
  inline bool has_query_contex_data() const;
  inline void clear_query_contex_data();
  static const int kQueryContexDataFieldNumber = 4;
  inline ::google::protobuf::int64 query_contex_data() const;
  inline void set_query_contex_data(::google::protobuf::int64 value);

  // optional .MsgPB.EN_DB_RESULT res = 5;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 5;
  inline ::MsgPB::EN_DB_RESULT res() const;
  inline void set_res(::MsgPB::EN_DB_RESULT value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgDBPlayerQueryByNameRes_S2S)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_query_contex_data();
  inline void clear_has_query_contex_data();
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  ::std::string* name_;
  int msgtype_;
  int res_;
  ::google::protobuf::int64 query_contex_data_;
  friend void  protobuf_AddDesc_MsgDB_2eproto();
  friend void protobuf_AssignDesc_MsgDB_2eproto();
  friend void protobuf_ShutdownFile_MsgDB_2eproto();

  void InitAsDefaultInstance();
  static MsgDBPlayerQueryByNameRes_S2S* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgDBReq

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_REQ];
inline bool MsgDBReq::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBReq::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBReq::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBReq::clear_msgtype() {
  msgtype_ = 11024;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgDBReq::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBReq.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgDBReq::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBReq.msgType)
}

// optional int32 RouteID = 2;
inline bool MsgDBReq::has_routeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDBReq::set_has_routeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDBReq::clear_has_routeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDBReq::clear_routeid() {
  routeid_ = 0;
  clear_has_routeid();
}
inline ::google::protobuf::int32 MsgDBReq::routeid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBReq.RouteID)
  return routeid_;
}
inline void MsgDBReq::set_routeid(::google::protobuf::int32 value) {
  set_has_routeid();
  routeid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBReq.RouteID)
}

// optional int64 HashID = 3;
inline bool MsgDBReq::has_hashid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDBReq::set_has_hashid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDBReq::clear_has_hashid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDBReq::clear_hashid() {
  hashid_ = GOOGLE_LONGLONG(0);
  clear_has_hashid();
}
inline ::google::protobuf::int64 MsgDBReq::hashid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBReq.HashID)
  return hashid_;
}
inline void MsgDBReq::set_hashid(::google::protobuf::int64 value) {
  set_has_hashid();
  hashid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBReq.HashID)
}

// optional .MsgPB.EMsgType reqType = 4;
inline bool MsgDBReq::has_reqtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgDBReq::set_has_reqtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgDBReq::clear_has_reqtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgDBReq::clear_reqtype() {
  reqtype_ = 0;
  clear_has_reqtype();
}
inline ::MsgPB::EMsgType MsgDBReq::reqtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBReq.reqType)
  return static_cast< ::MsgPB::EMsgType >(reqtype_);
}
inline void MsgDBReq::set_reqtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_reqtype();
  reqtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBReq.reqType)
}

// optional bytes ReqPB = 5;
inline bool MsgDBReq::has_reqpb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgDBReq::set_has_reqpb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgDBReq::clear_has_reqpb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgDBReq::clear_reqpb() {
  if (reqpb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqpb_->clear();
  }
  clear_has_reqpb();
}
inline const ::std::string& MsgDBReq::reqpb() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBReq.ReqPB)
  return *reqpb_;
}
inline void MsgDBReq::set_reqpb(const ::std::string& value) {
  set_has_reqpb();
  if (reqpb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqpb_ = new ::std::string;
  }
  reqpb_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBReq.ReqPB)
}
inline void MsgDBReq::set_reqpb(const char* value) {
  set_has_reqpb();
  if (reqpb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqpb_ = new ::std::string;
  }
  reqpb_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBReq.ReqPB)
}
inline void MsgDBReq::set_reqpb(const void* value, size_t size) {
  set_has_reqpb();
  if (reqpb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqpb_ = new ::std::string;
  }
  reqpb_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBReq.ReqPB)
}
inline ::std::string* MsgDBReq::mutable_reqpb() {
  set_has_reqpb();
  if (reqpb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqpb_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBReq.ReqPB)
  return reqpb_;
}
inline ::std::string* MsgDBReq::release_reqpb() {
  clear_has_reqpb();
  if (reqpb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reqpb_;
    reqpb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgDBReq::set_allocated_reqpb(::std::string* reqpb) {
  if (reqpb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reqpb_;
  }
  if (reqpb) {
    set_has_reqpb();
    reqpb_ = reqpb;
  } else {
    clear_has_reqpb();
    reqpb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBReq.ReqPB)
}

// -------------------------------------------------------------------

// MsgDBRes

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_RES];
inline bool MsgDBRes::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBRes::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBRes::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBRes::clear_msgtype() {
  msgtype_ = 11025;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgDBRes::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBRes.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgDBRes::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBRes.msgType)
}

// optional int32 RouteID = 2;
inline bool MsgDBRes::has_routeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDBRes::set_has_routeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDBRes::clear_has_routeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDBRes::clear_routeid() {
  routeid_ = 0;
  clear_has_routeid();
}
inline ::google::protobuf::int32 MsgDBRes::routeid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBRes.RouteID)
  return routeid_;
}
inline void MsgDBRes::set_routeid(::google::protobuf::int32 value) {
  set_has_routeid();
  routeid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBRes.RouteID)
}

// optional int64 HashID = 3;
inline bool MsgDBRes::has_hashid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDBRes::set_has_hashid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDBRes::clear_has_hashid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDBRes::clear_hashid() {
  hashid_ = GOOGLE_LONGLONG(0);
  clear_has_hashid();
}
inline ::google::protobuf::int64 MsgDBRes::hashid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBRes.HashID)
  return hashid_;
}
inline void MsgDBRes::set_hashid(::google::protobuf::int64 value) {
  set_has_hashid();
  hashid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBRes.HashID)
}

// optional .MsgPB.EMsgType resType = 4;
inline bool MsgDBRes::has_restype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgDBRes::set_has_restype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgDBRes::clear_has_restype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgDBRes::clear_restype() {
  restype_ = 0;
  clear_has_restype();
}
inline ::MsgPB::EMsgType MsgDBRes::restype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBRes.resType)
  return static_cast< ::MsgPB::EMsgType >(restype_);
}
inline void MsgDBRes::set_restype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_restype();
  restype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBRes.resType)
}

// optional bytes ResPB = 5;
inline bool MsgDBRes::has_respb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgDBRes::set_has_respb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgDBRes::clear_has_respb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgDBRes::clear_respb() {
  if (respb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    respb_->clear();
  }
  clear_has_respb();
}
inline const ::std::string& MsgDBRes::respb() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBRes.ResPB)
  return *respb_;
}
inline void MsgDBRes::set_respb(const ::std::string& value) {
  set_has_respb();
  if (respb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    respb_ = new ::std::string;
  }
  respb_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBRes.ResPB)
}
inline void MsgDBRes::set_respb(const char* value) {
  set_has_respb();
  if (respb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    respb_ = new ::std::string;
  }
  respb_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBRes.ResPB)
}
inline void MsgDBRes::set_respb(const void* value, size_t size) {
  set_has_respb();
  if (respb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    respb_ = new ::std::string;
  }
  respb_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBRes.ResPB)
}
inline ::std::string* MsgDBRes::mutable_respb() {
  set_has_respb();
  if (respb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    respb_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBRes.ResPB)
  return respb_;
}
inline ::std::string* MsgDBRes::release_respb() {
  clear_has_respb();
  if (respb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = respb_;
    respb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgDBRes::set_allocated_respb(::std::string* respb) {
  if (respb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete respb_;
  }
  if (respb) {
    set_has_respb();
    respb_ = respb;
  } else {
    clear_has_respb();
    respb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBRes.ResPB)
}

// -------------------------------------------------------------------

// MsgDBCommandReq

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_COMMAND_REQ];
inline bool MsgDBCommandReq::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBCommandReq::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBCommandReq::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBCommandReq::clear_msgtype() {
  msgtype_ = 1050;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgDBCommandReq::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandReq.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgDBCommandReq::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandReq.msgType)
}

// optional int32 RouteID = 2;
inline bool MsgDBCommandReq::has_routeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDBCommandReq::set_has_routeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDBCommandReq::clear_has_routeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDBCommandReq::clear_routeid() {
  routeid_ = 0;
  clear_has_routeid();
}
inline ::google::protobuf::int32 MsgDBCommandReq::routeid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandReq.RouteID)
  return routeid_;
}
inline void MsgDBCommandReq::set_routeid(::google::protobuf::int32 value) {
  set_has_routeid();
  routeid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandReq.RouteID)
}

// optional int64 HashID = 3;
inline bool MsgDBCommandReq::has_hashid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDBCommandReq::set_has_hashid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDBCommandReq::clear_has_hashid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDBCommandReq::clear_hashid() {
  hashid_ = GOOGLE_LONGLONG(0);
  clear_has_hashid();
}
inline ::google::protobuf::int64 MsgDBCommandReq::hashid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandReq.HashID)
  return hashid_;
}
inline void MsgDBCommandReq::set_hashid(::google::protobuf::int64 value) {
  set_has_hashid();
  hashid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandReq.HashID)
}

// optional string strCommandName = 4;
inline bool MsgDBCommandReq::has_strcommandname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgDBCommandReq::set_has_strcommandname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgDBCommandReq::clear_has_strcommandname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgDBCommandReq::clear_strcommandname() {
  if (strcommandname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommandname_->clear();
  }
  clear_has_strcommandname();
}
inline const ::std::string& MsgDBCommandReq::strcommandname() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandReq.strCommandName)
  return *strcommandname_;
}
inline void MsgDBCommandReq::set_strcommandname(const ::std::string& value) {
  set_has_strcommandname();
  if (strcommandname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommandname_ = new ::std::string;
  }
  strcommandname_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandReq.strCommandName)
}
inline void MsgDBCommandReq::set_strcommandname(const char* value) {
  set_has_strcommandname();
  if (strcommandname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommandname_ = new ::std::string;
  }
  strcommandname_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBCommandReq.strCommandName)
}
inline void MsgDBCommandReq::set_strcommandname(const char* value, size_t size) {
  set_has_strcommandname();
  if (strcommandname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommandname_ = new ::std::string;
  }
  strcommandname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBCommandReq.strCommandName)
}
inline ::std::string* MsgDBCommandReq::mutable_strcommandname() {
  set_has_strcommandname();
  if (strcommandname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommandname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBCommandReq.strCommandName)
  return strcommandname_;
}
inline ::std::string* MsgDBCommandReq::release_strcommandname() {
  clear_has_strcommandname();
  if (strcommandname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strcommandname_;
    strcommandname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgDBCommandReq::set_allocated_strcommandname(::std::string* strcommandname) {
  if (strcommandname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strcommandname_;
  }
  if (strcommandname) {
    set_has_strcommandname();
    strcommandname_ = strcommandname;
  } else {
    clear_has_strcommandname();
    strcommandname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBCommandReq.strCommandName)
}

// optional bytes strAttachmentsData = 5;
inline bool MsgDBCommandReq::has_strattachmentsdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgDBCommandReq::set_has_strattachmentsdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgDBCommandReq::clear_has_strattachmentsdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgDBCommandReq::clear_strattachmentsdata() {
  if (strattachmentsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strattachmentsdata_->clear();
  }
  clear_has_strattachmentsdata();
}
inline const ::std::string& MsgDBCommandReq::strattachmentsdata() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandReq.strAttachmentsData)
  return *strattachmentsdata_;
}
inline void MsgDBCommandReq::set_strattachmentsdata(const ::std::string& value) {
  set_has_strattachmentsdata();
  if (strattachmentsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strattachmentsdata_ = new ::std::string;
  }
  strattachmentsdata_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandReq.strAttachmentsData)
}
inline void MsgDBCommandReq::set_strattachmentsdata(const char* value) {
  set_has_strattachmentsdata();
  if (strattachmentsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strattachmentsdata_ = new ::std::string;
  }
  strattachmentsdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBCommandReq.strAttachmentsData)
}
inline void MsgDBCommandReq::set_strattachmentsdata(const void* value, size_t size) {
  set_has_strattachmentsdata();
  if (strattachmentsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strattachmentsdata_ = new ::std::string;
  }
  strattachmentsdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBCommandReq.strAttachmentsData)
}
inline ::std::string* MsgDBCommandReq::mutable_strattachmentsdata() {
  set_has_strattachmentsdata();
  if (strattachmentsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strattachmentsdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBCommandReq.strAttachmentsData)
  return strattachmentsdata_;
}
inline ::std::string* MsgDBCommandReq::release_strattachmentsdata() {
  clear_has_strattachmentsdata();
  if (strattachmentsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strattachmentsdata_;
    strattachmentsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgDBCommandReq::set_allocated_strattachmentsdata(::std::string* strattachmentsdata) {
  if (strattachmentsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strattachmentsdata_;
  }
  if (strattachmentsdata) {
    set_has_strattachmentsdata();
    strattachmentsdata_ = strattachmentsdata;
  } else {
    clear_has_strattachmentsdata();
    strattachmentsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBCommandReq.strAttachmentsData)
}

// optional bytes strCommandData = 6;
inline bool MsgDBCommandReq::has_strcommanddata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgDBCommandReq::set_has_strcommanddata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgDBCommandReq::clear_has_strcommanddata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgDBCommandReq::clear_strcommanddata() {
  if (strcommanddata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommanddata_->clear();
  }
  clear_has_strcommanddata();
}
inline const ::std::string& MsgDBCommandReq::strcommanddata() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandReq.strCommandData)
  return *strcommanddata_;
}
inline void MsgDBCommandReq::set_strcommanddata(const ::std::string& value) {
  set_has_strcommanddata();
  if (strcommanddata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommanddata_ = new ::std::string;
  }
  strcommanddata_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandReq.strCommandData)
}
inline void MsgDBCommandReq::set_strcommanddata(const char* value) {
  set_has_strcommanddata();
  if (strcommanddata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommanddata_ = new ::std::string;
  }
  strcommanddata_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBCommandReq.strCommandData)
}
inline void MsgDBCommandReq::set_strcommanddata(const void* value, size_t size) {
  set_has_strcommanddata();
  if (strcommanddata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommanddata_ = new ::std::string;
  }
  strcommanddata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBCommandReq.strCommandData)
}
inline ::std::string* MsgDBCommandReq::mutable_strcommanddata() {
  set_has_strcommanddata();
  if (strcommanddata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommanddata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBCommandReq.strCommandData)
  return strcommanddata_;
}
inline ::std::string* MsgDBCommandReq::release_strcommanddata() {
  clear_has_strcommanddata();
  if (strcommanddata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strcommanddata_;
    strcommanddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgDBCommandReq::set_allocated_strcommanddata(::std::string* strcommanddata) {
  if (strcommanddata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strcommanddata_;
  }
  if (strcommanddata) {
    set_has_strcommanddata();
    strcommanddata_ = strcommanddata;
  } else {
    clear_has_strcommanddata();
    strcommanddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBCommandReq.strCommandData)
}

// optional int64 fingerprint = 7;
inline bool MsgDBCommandReq::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgDBCommandReq::set_has_fingerprint() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgDBCommandReq::clear_has_fingerprint() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgDBCommandReq::clear_fingerprint() {
  fingerprint_ = GOOGLE_LONGLONG(0);
  clear_has_fingerprint();
}
inline ::google::protobuf::int64 MsgDBCommandReq::fingerprint() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandReq.fingerprint)
  return fingerprint_;
}
inline void MsgDBCommandReq::set_fingerprint(::google::protobuf::int64 value) {
  set_has_fingerprint();
  fingerprint_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandReq.fingerprint)
}

// optional int64 iggid = 8;
inline bool MsgDBCommandReq::has_iggid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgDBCommandReq::set_has_iggid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgDBCommandReq::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgDBCommandReq::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgDBCommandReq::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandReq.iggid)
  return iggid_;
}
inline void MsgDBCommandReq::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandReq.iggid)
}

// optional int64 query_context_data = 9;
inline bool MsgDBCommandReq::has_query_context_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgDBCommandReq::set_has_query_context_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgDBCommandReq::clear_has_query_context_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgDBCommandReq::clear_query_context_data() {
  query_context_data_ = GOOGLE_LONGLONG(0);
  clear_has_query_context_data();
}
inline ::google::protobuf::int64 MsgDBCommandReq::query_context_data() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandReq.query_context_data)
  return query_context_data_;
}
inline void MsgDBCommandReq::set_query_context_data(::google::protobuf::int64 value) {
  set_has_query_context_data();
  query_context_data_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandReq.query_context_data)
}

// -------------------------------------------------------------------

// MsgDBCommandRes

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_COMMAND_RES];
inline bool MsgDBCommandRes::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBCommandRes::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBCommandRes::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBCommandRes::clear_msgtype() {
  msgtype_ = 1051;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgDBCommandRes::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandRes.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgDBCommandRes::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandRes.msgType)
}

// optional int32 RouteID = 2;
inline bool MsgDBCommandRes::has_routeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDBCommandRes::set_has_routeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDBCommandRes::clear_has_routeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDBCommandRes::clear_routeid() {
  routeid_ = 0;
  clear_has_routeid();
}
inline ::google::protobuf::int32 MsgDBCommandRes::routeid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandRes.RouteID)
  return routeid_;
}
inline void MsgDBCommandRes::set_routeid(::google::protobuf::int32 value) {
  set_has_routeid();
  routeid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandRes.RouteID)
}

// optional int64 HashID = 3;
inline bool MsgDBCommandRes::has_hashid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDBCommandRes::set_has_hashid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDBCommandRes::clear_has_hashid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDBCommandRes::clear_hashid() {
  hashid_ = GOOGLE_LONGLONG(0);
  clear_has_hashid();
}
inline ::google::protobuf::int64 MsgDBCommandRes::hashid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandRes.HashID)
  return hashid_;
}
inline void MsgDBCommandRes::set_hashid(::google::protobuf::int64 value) {
  set_has_hashid();
  hashid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandRes.HashID)
}

// optional bool IsTail = 4;
inline bool MsgDBCommandRes::has_istail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgDBCommandRes::set_has_istail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgDBCommandRes::clear_has_istail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgDBCommandRes::clear_istail() {
  istail_ = false;
  clear_has_istail();
}
inline bool MsgDBCommandRes::istail() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandRes.IsTail)
  return istail_;
}
inline void MsgDBCommandRes::set_istail(bool value) {
  set_has_istail();
  istail_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandRes.IsTail)
}

// optional string strCommandName = 5;
inline bool MsgDBCommandRes::has_strcommandname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgDBCommandRes::set_has_strcommandname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgDBCommandRes::clear_has_strcommandname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgDBCommandRes::clear_strcommandname() {
  if (strcommandname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommandname_->clear();
  }
  clear_has_strcommandname();
}
inline const ::std::string& MsgDBCommandRes::strcommandname() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandRes.strCommandName)
  return *strcommandname_;
}
inline void MsgDBCommandRes::set_strcommandname(const ::std::string& value) {
  set_has_strcommandname();
  if (strcommandname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommandname_ = new ::std::string;
  }
  strcommandname_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandRes.strCommandName)
}
inline void MsgDBCommandRes::set_strcommandname(const char* value) {
  set_has_strcommandname();
  if (strcommandname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommandname_ = new ::std::string;
  }
  strcommandname_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBCommandRes.strCommandName)
}
inline void MsgDBCommandRes::set_strcommandname(const char* value, size_t size) {
  set_has_strcommandname();
  if (strcommandname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommandname_ = new ::std::string;
  }
  strcommandname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBCommandRes.strCommandName)
}
inline ::std::string* MsgDBCommandRes::mutable_strcommandname() {
  set_has_strcommandname();
  if (strcommandname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strcommandname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBCommandRes.strCommandName)
  return strcommandname_;
}
inline ::std::string* MsgDBCommandRes::release_strcommandname() {
  clear_has_strcommandname();
  if (strcommandname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strcommandname_;
    strcommandname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgDBCommandRes::set_allocated_strcommandname(::std::string* strcommandname) {
  if (strcommandname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strcommandname_;
  }
  if (strcommandname) {
    set_has_strcommandname();
    strcommandname_ = strcommandname;
  } else {
    clear_has_strcommandname();
    strcommandname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBCommandRes.strCommandName)
}

// optional bytes strAttachmentsData = 6;
inline bool MsgDBCommandRes::has_strattachmentsdata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgDBCommandRes::set_has_strattachmentsdata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgDBCommandRes::clear_has_strattachmentsdata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgDBCommandRes::clear_strattachmentsdata() {
  if (strattachmentsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strattachmentsdata_->clear();
  }
  clear_has_strattachmentsdata();
}
inline const ::std::string& MsgDBCommandRes::strattachmentsdata() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandRes.strAttachmentsData)
  return *strattachmentsdata_;
}
inline void MsgDBCommandRes::set_strattachmentsdata(const ::std::string& value) {
  set_has_strattachmentsdata();
  if (strattachmentsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strattachmentsdata_ = new ::std::string;
  }
  strattachmentsdata_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandRes.strAttachmentsData)
}
inline void MsgDBCommandRes::set_strattachmentsdata(const char* value) {
  set_has_strattachmentsdata();
  if (strattachmentsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strattachmentsdata_ = new ::std::string;
  }
  strattachmentsdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBCommandRes.strAttachmentsData)
}
inline void MsgDBCommandRes::set_strattachmentsdata(const void* value, size_t size) {
  set_has_strattachmentsdata();
  if (strattachmentsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strattachmentsdata_ = new ::std::string;
  }
  strattachmentsdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBCommandRes.strAttachmentsData)
}
inline ::std::string* MsgDBCommandRes::mutable_strattachmentsdata() {
  set_has_strattachmentsdata();
  if (strattachmentsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strattachmentsdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBCommandRes.strAttachmentsData)
  return strattachmentsdata_;
}
inline ::std::string* MsgDBCommandRes::release_strattachmentsdata() {
  clear_has_strattachmentsdata();
  if (strattachmentsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strattachmentsdata_;
    strattachmentsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgDBCommandRes::set_allocated_strattachmentsdata(::std::string* strattachmentsdata) {
  if (strattachmentsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strattachmentsdata_;
  }
  if (strattachmentsdata) {
    set_has_strattachmentsdata();
    strattachmentsdata_ = strattachmentsdata;
  } else {
    clear_has_strattachmentsdata();
    strattachmentsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBCommandRes.strAttachmentsData)
}

// repeated bytes strCommandData = 7;
inline int MsgDBCommandRes::strcommanddata_size() const {
  return strcommanddata_.size();
}
inline void MsgDBCommandRes::clear_strcommanddata() {
  strcommanddata_.Clear();
}
inline const ::std::string& MsgDBCommandRes::strcommanddata(int index) const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandRes.strCommandData)
  return strcommanddata_.Get(index);
}
inline ::std::string* MsgDBCommandRes::mutable_strcommanddata(int index) {
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBCommandRes.strCommandData)
  return strcommanddata_.Mutable(index);
}
inline void MsgDBCommandRes::set_strcommanddata(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandRes.strCommandData)
  strcommanddata_.Mutable(index)->assign(value);
}
inline void MsgDBCommandRes::set_strcommanddata(int index, const char* value) {
  strcommanddata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBCommandRes.strCommandData)
}
inline void MsgDBCommandRes::set_strcommanddata(int index, const void* value, size_t size) {
  strcommanddata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBCommandRes.strCommandData)
}
inline ::std::string* MsgDBCommandRes::add_strcommanddata() {
  return strcommanddata_.Add();
}
inline void MsgDBCommandRes::add_strcommanddata(const ::std::string& value) {
  strcommanddata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MsgPB.MsgDBCommandRes.strCommandData)
}
inline void MsgDBCommandRes::add_strcommanddata(const char* value) {
  strcommanddata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MsgPB.MsgDBCommandRes.strCommandData)
}
inline void MsgDBCommandRes::add_strcommanddata(const void* value, size_t size) {
  strcommanddata_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MsgPB.MsgDBCommandRes.strCommandData)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgDBCommandRes::strcommanddata() const {
  // @@protoc_insertion_point(field_list:MsgPB.MsgDBCommandRes.strCommandData)
  return strcommanddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgDBCommandRes::mutable_strcommanddata() {
  // @@protoc_insertion_point(field_mutable_list:MsgPB.MsgDBCommandRes.strCommandData)
  return &strcommanddata_;
}

// optional int64 fingerprint = 8;
inline bool MsgDBCommandRes::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgDBCommandRes::set_has_fingerprint() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgDBCommandRes::clear_has_fingerprint() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgDBCommandRes::clear_fingerprint() {
  fingerprint_ = GOOGLE_LONGLONG(0);
  clear_has_fingerprint();
}
inline ::google::protobuf::int64 MsgDBCommandRes::fingerprint() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandRes.fingerprint)
  return fingerprint_;
}
inline void MsgDBCommandRes::set_fingerprint(::google::protobuf::int64 value) {
  set_has_fingerprint();
  fingerprint_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandRes.fingerprint)
}

// optional int64 iggid = 9;
inline bool MsgDBCommandRes::has_iggid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgDBCommandRes::set_has_iggid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgDBCommandRes::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgDBCommandRes::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgDBCommandRes::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandRes.iggid)
  return iggid_;
}
inline void MsgDBCommandRes::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandRes.iggid)
}

// optional int64 query_context_data = 10;
inline bool MsgDBCommandRes::has_query_context_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgDBCommandRes::set_has_query_context_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgDBCommandRes::clear_has_query_context_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgDBCommandRes::clear_query_context_data() {
  query_context_data_ = GOOGLE_LONGLONG(0);
  clear_has_query_context_data();
}
inline ::google::protobuf::int64 MsgDBCommandRes::query_context_data() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBCommandRes.query_context_data)
  return query_context_data_;
}
inline void MsgDBCommandRes::set_query_context_data(::google::protobuf::int64 value) {
  set_has_query_context_data();
  query_context_data_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBCommandRes.query_context_data)
}

// -------------------------------------------------------------------

// MsgDBServerInfoGet_US2DS

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_GET_US2DS];
inline bool MsgDBServerInfoGet_US2DS::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBServerInfoGet_US2DS::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBServerInfoGet_US2DS::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBServerInfoGet_US2DS::clear_msgtype() {
  msgtype_ = 9200;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgDBServerInfoGet_US2DS::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerInfoGet_US2DS.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgDBServerInfoGet_US2DS::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBServerInfoGet_US2DS.msgType)
}

// -------------------------------------------------------------------

// DBIGGINFO

// optional int64 iggid = 1;
inline bool DBIGGINFO::has_iggid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBIGGINFO::set_has_iggid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBIGGINFO::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBIGGINFO::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 DBIGGINFO::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.DBIGGINFO.iggid)
  return iggid_;
}
inline void DBIGGINFO::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.DBIGGINFO.iggid)
}

// optional string nickname = 2;
inline bool DBIGGINFO::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBIGGINFO::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBIGGINFO::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBIGGINFO::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& DBIGGINFO::nickname() const {
  // @@protoc_insertion_point(field_get:MsgPB.DBIGGINFO.nickname)
  return *nickname_;
}
inline void DBIGGINFO::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.DBIGGINFO.nickname)
}
inline void DBIGGINFO::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.DBIGGINFO.nickname)
}
inline void DBIGGINFO::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.DBIGGINFO.nickname)
}
inline ::std::string* DBIGGINFO::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.DBIGGINFO.nickname)
  return nickname_;
}
inline ::std::string* DBIGGINFO::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DBIGGINFO::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.DBIGGINFO.nickname)
}

// optional int64 freezetime = 3;
inline bool DBIGGINFO::has_freezetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBIGGINFO::set_has_freezetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBIGGINFO::clear_has_freezetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBIGGINFO::clear_freezetime() {
  freezetime_ = GOOGLE_LONGLONG(0);
  clear_has_freezetime();
}
inline ::google::protobuf::int64 DBIGGINFO::freezetime() const {
  // @@protoc_insertion_point(field_get:MsgPB.DBIGGINFO.freezetime)
  return freezetime_;
}
inline void DBIGGINFO::set_freezetime(::google::protobuf::int64 value) {
  set_has_freezetime();
  freezetime_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.DBIGGINFO.freezetime)
}

// optional int32 freezeinterval = 4;
inline bool DBIGGINFO::has_freezeinterval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBIGGINFO::set_has_freezeinterval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBIGGINFO::clear_has_freezeinterval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBIGGINFO::clear_freezeinterval() {
  freezeinterval_ = 0;
  clear_has_freezeinterval();
}
inline ::google::protobuf::int32 DBIGGINFO::freezeinterval() const {
  // @@protoc_insertion_point(field_get:MsgPB.DBIGGINFO.freezeinterval)
  return freezeinterval_;
}
inline void DBIGGINFO::set_freezeinterval(::google::protobuf::int32 value) {
  set_has_freezeinterval();
  freezeinterval_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.DBIGGINFO.freezeinterval)
}

// -------------------------------------------------------------------

// PBDBServerInfo

// optional string dbkey = 1;
inline bool PBDBServerInfo::has_dbkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBDBServerInfo::set_has_dbkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBDBServerInfo::clear_has_dbkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBDBServerInfo::clear_dbkey() {
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_->clear();
  }
  clear_has_dbkey();
}
inline const ::std::string& PBDBServerInfo::dbkey() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBDBServerInfo.dbkey)
  return *dbkey_;
}
inline void PBDBServerInfo::set_dbkey(const ::std::string& value) {
  set_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_ = new ::std::string;
  }
  dbkey_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.PBDBServerInfo.dbkey)
}
inline void PBDBServerInfo::set_dbkey(const char* value) {
  set_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_ = new ::std::string;
  }
  dbkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.PBDBServerInfo.dbkey)
}
inline void PBDBServerInfo::set_dbkey(const char* value, size_t size) {
  set_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_ = new ::std::string;
  }
  dbkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.PBDBServerInfo.dbkey)
}
inline ::std::string* PBDBServerInfo::mutable_dbkey() {
  set_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.PBDBServerInfo.dbkey)
  return dbkey_;
}
inline ::std::string* PBDBServerInfo::release_dbkey() {
  clear_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dbkey_;
    dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDBServerInfo::set_allocated_dbkey(::std::string* dbkey) {
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbkey_;
  }
  if (dbkey) {
    set_has_dbkey();
    dbkey_ = dbkey;
  } else {
    clear_has_dbkey();
    dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.PBDBServerInfo.dbkey)
}

// optional int32 dbserver_id = 2;
inline bool PBDBServerInfo::has_dbserver_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBDBServerInfo::set_has_dbserver_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBDBServerInfo::clear_has_dbserver_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBDBServerInfo::clear_dbserver_id() {
  dbserver_id_ = 0;
  clear_has_dbserver_id();
}
inline ::google::protobuf::int32 PBDBServerInfo::dbserver_id() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBDBServerInfo.dbserver_id)
  return dbserver_id_;
}
inline void PBDBServerInfo::set_dbserver_id(::google::protobuf::int32 value) {
  set_has_dbserver_id();
  dbserver_id_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.PBDBServerInfo.dbserver_id)
}

// optional string dbserver_ip = 3;
inline bool PBDBServerInfo::has_dbserver_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBDBServerInfo::set_has_dbserver_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBDBServerInfo::clear_has_dbserver_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBDBServerInfo::clear_dbserver_ip() {
  if (dbserver_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbserver_ip_->clear();
  }
  clear_has_dbserver_ip();
}
inline const ::std::string& PBDBServerInfo::dbserver_ip() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBDBServerInfo.dbserver_ip)
  return *dbserver_ip_;
}
inline void PBDBServerInfo::set_dbserver_ip(const ::std::string& value) {
  set_has_dbserver_ip();
  if (dbserver_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbserver_ip_ = new ::std::string;
  }
  dbserver_ip_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.PBDBServerInfo.dbserver_ip)
}
inline void PBDBServerInfo::set_dbserver_ip(const char* value) {
  set_has_dbserver_ip();
  if (dbserver_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbserver_ip_ = new ::std::string;
  }
  dbserver_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.PBDBServerInfo.dbserver_ip)
}
inline void PBDBServerInfo::set_dbserver_ip(const char* value, size_t size) {
  set_has_dbserver_ip();
  if (dbserver_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbserver_ip_ = new ::std::string;
  }
  dbserver_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.PBDBServerInfo.dbserver_ip)
}
inline ::std::string* PBDBServerInfo::mutable_dbserver_ip() {
  set_has_dbserver_ip();
  if (dbserver_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbserver_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.PBDBServerInfo.dbserver_ip)
  return dbserver_ip_;
}
inline ::std::string* PBDBServerInfo::release_dbserver_ip() {
  clear_has_dbserver_ip();
  if (dbserver_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dbserver_ip_;
    dbserver_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDBServerInfo::set_allocated_dbserver_ip(::std::string* dbserver_ip) {
  if (dbserver_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbserver_ip_;
  }
  if (dbserver_ip) {
    set_has_dbserver_ip();
    dbserver_ip_ = dbserver_ip;
  } else {
    clear_has_dbserver_ip();
    dbserver_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.PBDBServerInfo.dbserver_ip)
}

// optional int32 dbserver_port = 4;
inline bool PBDBServerInfo::has_dbserver_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBDBServerInfo::set_has_dbserver_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBDBServerInfo::clear_has_dbserver_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBDBServerInfo::clear_dbserver_port() {
  dbserver_port_ = 0;
  clear_has_dbserver_port();
}
inline ::google::protobuf::int32 PBDBServerInfo::dbserver_port() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBDBServerInfo.dbserver_port)
  return dbserver_port_;
}
inline void PBDBServerInfo::set_dbserver_port(::google::protobuf::int32 value) {
  set_has_dbserver_port();
  dbserver_port_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.PBDBServerInfo.dbserver_port)
}

// optional int32 is_main_db = 5;
inline bool PBDBServerInfo::has_is_main_db() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBDBServerInfo::set_has_is_main_db() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBDBServerInfo::clear_has_is_main_db() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBDBServerInfo::clear_is_main_db() {
  is_main_db_ = 0;
  clear_has_is_main_db();
}
inline ::google::protobuf::int32 PBDBServerInfo::is_main_db() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBDBServerInfo.is_main_db)
  return is_main_db_;
}
inline void PBDBServerInfo::set_is_main_db(::google::protobuf::int32 value) {
  set_has_is_main_db();
  is_main_db_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.PBDBServerInfo.is_main_db)
}

// optional int32 is_center_db = 6;
inline bool PBDBServerInfo::has_is_center_db() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBDBServerInfo::set_has_is_center_db() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBDBServerInfo::clear_has_is_center_db() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBDBServerInfo::clear_is_center_db() {
  is_center_db_ = 0;
  clear_has_is_center_db();
}
inline ::google::protobuf::int32 PBDBServerInfo::is_center_db() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBDBServerInfo.is_center_db)
  return is_center_db_;
}
inline void PBDBServerInfo::set_is_center_db(::google::protobuf::int32 value) {
  set_has_is_center_db();
  is_center_db_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.PBDBServerInfo.is_center_db)
}

// repeated int32 db_function = 7;
inline int PBDBServerInfo::db_function_size() const {
  return db_function_.size();
}
inline void PBDBServerInfo::clear_db_function() {
  db_function_.Clear();
}
inline ::google::protobuf::int32 PBDBServerInfo::db_function(int index) const {
  // @@protoc_insertion_point(field_get:MsgPB.PBDBServerInfo.db_function)
  return db_function_.Get(index);
}
inline void PBDBServerInfo::set_db_function(int index, ::google::protobuf::int32 value) {
  db_function_.Set(index, value);
  // @@protoc_insertion_point(field_set:MsgPB.PBDBServerInfo.db_function)
}
inline void PBDBServerInfo::add_db_function(::google::protobuf::int32 value) {
  db_function_.Add(value);
  // @@protoc_insertion_point(field_add:MsgPB.PBDBServerInfo.db_function)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBDBServerInfo::db_function() const {
  // @@protoc_insertion_point(field_list:MsgPB.PBDBServerInfo.db_function)
  return db_function_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBDBServerInfo::mutable_db_function() {
  // @@protoc_insertion_point(field_mutable_list:MsgPB.PBDBServerInfo.db_function)
  return &db_function_;
}

// optional string dbserver_domain_name = 8;
inline bool PBDBServerInfo::has_dbserver_domain_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBDBServerInfo::set_has_dbserver_domain_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBDBServerInfo::clear_has_dbserver_domain_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBDBServerInfo::clear_dbserver_domain_name() {
  if (dbserver_domain_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbserver_domain_name_->clear();
  }
  clear_has_dbserver_domain_name();
}
inline const ::std::string& PBDBServerInfo::dbserver_domain_name() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBDBServerInfo.dbserver_domain_name)
  return *dbserver_domain_name_;
}
inline void PBDBServerInfo::set_dbserver_domain_name(const ::std::string& value) {
  set_has_dbserver_domain_name();
  if (dbserver_domain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbserver_domain_name_ = new ::std::string;
  }
  dbserver_domain_name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.PBDBServerInfo.dbserver_domain_name)
}
inline void PBDBServerInfo::set_dbserver_domain_name(const char* value) {
  set_has_dbserver_domain_name();
  if (dbserver_domain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbserver_domain_name_ = new ::std::string;
  }
  dbserver_domain_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.PBDBServerInfo.dbserver_domain_name)
}
inline void PBDBServerInfo::set_dbserver_domain_name(const char* value, size_t size) {
  set_has_dbserver_domain_name();
  if (dbserver_domain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbserver_domain_name_ = new ::std::string;
  }
  dbserver_domain_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.PBDBServerInfo.dbserver_domain_name)
}
inline ::std::string* PBDBServerInfo::mutable_dbserver_domain_name() {
  set_has_dbserver_domain_name();
  if (dbserver_domain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbserver_domain_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.PBDBServerInfo.dbserver_domain_name)
  return dbserver_domain_name_;
}
inline ::std::string* PBDBServerInfo::release_dbserver_domain_name() {
  clear_has_dbserver_domain_name();
  if (dbserver_domain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dbserver_domain_name_;
    dbserver_domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDBServerInfo::set_allocated_dbserver_domain_name(::std::string* dbserver_domain_name) {
  if (dbserver_domain_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbserver_domain_name_;
  }
  if (dbserver_domain_name) {
    set_has_dbserver_domain_name();
    dbserver_domain_name_ = dbserver_domain_name;
  } else {
    clear_has_dbserver_domain_name();
    dbserver_domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.PBDBServerInfo.dbserver_domain_name)
}

// optional int32 area_id = 9;
inline bool PBDBServerInfo::has_area_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBDBServerInfo::set_has_area_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBDBServerInfo::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBDBServerInfo::clear_area_id() {
  area_id_ = 0;
  clear_has_area_id();
}
inline ::google::protobuf::int32 PBDBServerInfo::area_id() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBDBServerInfo.area_id)
  return area_id_;
}
inline void PBDBServerInfo::set_area_id(::google::protobuf::int32 value) {
  set_has_area_id();
  area_id_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.PBDBServerInfo.area_id)
}

// -------------------------------------------------------------------

// MsgDBServerInfoKeyAllUser_DS2US

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_KEY_ALL_USER_DS2US];
inline bool MsgDBServerInfoKeyAllUser_DS2US::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::clear_msgtype() {
  msgtype_ = 9201;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgDBServerInfoKeyAllUser_DS2US::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgDBServerInfoKeyAllUser_DS2US::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.msgType)
}

// optional .MsgPB.PBDBServerInfo dbserver_info = 2;
inline bool MsgDBServerInfoKeyAllUser_DS2US::has_dbserver_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::set_has_dbserver_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::clear_has_dbserver_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::clear_dbserver_info() {
  if (dbserver_info_ != NULL) dbserver_info_->::MsgPB::PBDBServerInfo::Clear();
  clear_has_dbserver_info();
}
inline const ::MsgPB::PBDBServerInfo& MsgDBServerInfoKeyAllUser_DS2US::dbserver_info() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.dbserver_info)
  return dbserver_info_ != NULL ? *dbserver_info_ : *default_instance_->dbserver_info_;
}
inline ::MsgPB::PBDBServerInfo* MsgDBServerInfoKeyAllUser_DS2US::mutable_dbserver_info() {
  set_has_dbserver_info();
  if (dbserver_info_ == NULL) dbserver_info_ = new ::MsgPB::PBDBServerInfo;
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.dbserver_info)
  return dbserver_info_;
}
inline ::MsgPB::PBDBServerInfo* MsgDBServerInfoKeyAllUser_DS2US::release_dbserver_info() {
  clear_has_dbserver_info();
  ::MsgPB::PBDBServerInfo* temp = dbserver_info_;
  dbserver_info_ = NULL;
  return temp;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::set_allocated_dbserver_info(::MsgPB::PBDBServerInfo* dbserver_info) {
  delete dbserver_info_;
  dbserver_info_ = dbserver_info;
  if (dbserver_info) {
    set_has_dbserver_info();
  } else {
    clear_has_dbserver_info();
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.dbserver_info)
}

// optional int32 bfirst = 3;
inline bool MsgDBServerInfoKeyAllUser_DS2US::has_bfirst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::set_has_bfirst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::clear_has_bfirst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::clear_bfirst() {
  bfirst_ = 0;
  clear_has_bfirst();
}
inline ::google::protobuf::int32 MsgDBServerInfoKeyAllUser_DS2US::bfirst() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.bfirst)
  return bfirst_;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::set_bfirst(::google::protobuf::int32 value) {
  set_has_bfirst();
  bfirst_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.bfirst)
}

// optional int32 blast = 4;
inline bool MsgDBServerInfoKeyAllUser_DS2US::has_blast() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::set_has_blast() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::clear_has_blast() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::clear_blast() {
  blast_ = 0;
  clear_has_blast();
}
inline ::google::protobuf::int32 MsgDBServerInfoKeyAllUser_DS2US::blast() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.blast)
  return blast_;
}
inline void MsgDBServerInfoKeyAllUser_DS2US::set_blast(::google::protobuf::int32 value) {
  set_has_blast();
  blast_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.blast)
}

// repeated .MsgPB.DBIGGINFO igginfo_array = 5;
inline int MsgDBServerInfoKeyAllUser_DS2US::igginfo_array_size() const {
  return igginfo_array_.size();
}
inline void MsgDBServerInfoKeyAllUser_DS2US::clear_igginfo_array() {
  igginfo_array_.Clear();
}
inline const ::MsgPB::DBIGGINFO& MsgDBServerInfoKeyAllUser_DS2US::igginfo_array(int index) const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.igginfo_array)
  return igginfo_array_.Get(index);
}
inline ::MsgPB::DBIGGINFO* MsgDBServerInfoKeyAllUser_DS2US::mutable_igginfo_array(int index) {
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.igginfo_array)
  return igginfo_array_.Mutable(index);
}
inline ::MsgPB::DBIGGINFO* MsgDBServerInfoKeyAllUser_DS2US::add_igginfo_array() {
  // @@protoc_insertion_point(field_add:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.igginfo_array)
  return igginfo_array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgPB::DBIGGINFO >&
MsgDBServerInfoKeyAllUser_DS2US::igginfo_array() const {
  // @@protoc_insertion_point(field_list:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.igginfo_array)
  return igginfo_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgPB::DBIGGINFO >*
MsgDBServerInfoKeyAllUser_DS2US::mutable_igginfo_array() {
  // @@protoc_insertion_point(field_mutable_list:MsgPB.MsgDBServerInfoKeyAllUser_DS2US.igginfo_array)
  return &igginfo_array_;
}

// -------------------------------------------------------------------

// MsgDBServerAllInfo

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_ALL_INFO];
inline bool MsgDBServerAllInfo::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBServerAllInfo::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBServerAllInfo::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBServerAllInfo::clear_msgtype() {
  msgtype_ = 9203;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgDBServerAllInfo::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerAllInfo.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgDBServerAllInfo::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBServerAllInfo.msgType)
}

// repeated .MsgPB.PBDBServerInfo db_server_info_array = 2;
inline int MsgDBServerAllInfo::db_server_info_array_size() const {
  return db_server_info_array_.size();
}
inline void MsgDBServerAllInfo::clear_db_server_info_array() {
  db_server_info_array_.Clear();
}
inline const ::MsgPB::PBDBServerInfo& MsgDBServerAllInfo::db_server_info_array(int index) const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerAllInfo.db_server_info_array)
  return db_server_info_array_.Get(index);
}
inline ::MsgPB::PBDBServerInfo* MsgDBServerAllInfo::mutable_db_server_info_array(int index) {
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBServerAllInfo.db_server_info_array)
  return db_server_info_array_.Mutable(index);
}
inline ::MsgPB::PBDBServerInfo* MsgDBServerAllInfo::add_db_server_info_array() {
  // @@protoc_insertion_point(field_add:MsgPB.MsgDBServerAllInfo.db_server_info_array)
  return db_server_info_array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgPB::PBDBServerInfo >&
MsgDBServerAllInfo::db_server_info_array() const {
  // @@protoc_insertion_point(field_list:MsgPB.MsgDBServerAllInfo.db_server_info_array)
  return db_server_info_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgPB::PBDBServerInfo >*
MsgDBServerAllInfo::mutable_db_server_info_array() {
  // @@protoc_insertion_point(field_mutable_list:MsgPB.MsgDBServerAllInfo.db_server_info_array)
  return &db_server_info_array_;
}

// -------------------------------------------------------------------

// MsgDBServerInfoAllUser_US2S

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_ALL_USER_US2S];
inline bool MsgDBServerInfoAllUser_US2S::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBServerInfoAllUser_US2S::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBServerInfoAllUser_US2S::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBServerInfoAllUser_US2S::clear_msgtype() {
  msgtype_ = 9205;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgDBServerInfoAllUser_US2S::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerInfoAllUser_US2S.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgDBServerInfoAllUser_US2S::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBServerInfoAllUser_US2S.msgType)
}

// optional string dbkey = 2;
inline bool MsgDBServerInfoAllUser_US2S::has_dbkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDBServerInfoAllUser_US2S::set_has_dbkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDBServerInfoAllUser_US2S::clear_has_dbkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDBServerInfoAllUser_US2S::clear_dbkey() {
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_->clear();
  }
  clear_has_dbkey();
}
inline const ::std::string& MsgDBServerInfoAllUser_US2S::dbkey() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerInfoAllUser_US2S.dbkey)
  return *dbkey_;
}
inline void MsgDBServerInfoAllUser_US2S::set_dbkey(const ::std::string& value) {
  set_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_ = new ::std::string;
  }
  dbkey_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBServerInfoAllUser_US2S.dbkey)
}
inline void MsgDBServerInfoAllUser_US2S::set_dbkey(const char* value) {
  set_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_ = new ::std::string;
  }
  dbkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBServerInfoAllUser_US2S.dbkey)
}
inline void MsgDBServerInfoAllUser_US2S::set_dbkey(const char* value, size_t size) {
  set_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_ = new ::std::string;
  }
  dbkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBServerInfoAllUser_US2S.dbkey)
}
inline ::std::string* MsgDBServerInfoAllUser_US2S::mutable_dbkey() {
  set_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBServerInfoAllUser_US2S.dbkey)
  return dbkey_;
}
inline ::std::string* MsgDBServerInfoAllUser_US2S::release_dbkey() {
  clear_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dbkey_;
    dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgDBServerInfoAllUser_US2S::set_allocated_dbkey(::std::string* dbkey) {
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbkey_;
  }
  if (dbkey) {
    set_has_dbkey();
    dbkey_ = dbkey;
  } else {
    clear_has_dbkey();
    dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBServerInfoAllUser_US2S.dbkey)
}

// optional int32 user_count = 3;
inline bool MsgDBServerInfoAllUser_US2S::has_user_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDBServerInfoAllUser_US2S::set_has_user_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDBServerInfoAllUser_US2S::clear_has_user_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDBServerInfoAllUser_US2S::clear_user_count() {
  user_count_ = 0;
  clear_has_user_count();
}
inline ::google::protobuf::int32 MsgDBServerInfoAllUser_US2S::user_count() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerInfoAllUser_US2S.user_count)
  return user_count_;
}
inline void MsgDBServerInfoAllUser_US2S::set_user_count(::google::protobuf::int32 value) {
  set_has_user_count();
  user_count_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBServerInfoAllUser_US2S.user_count)
}

// optional int32 bfirst = 4;
inline bool MsgDBServerInfoAllUser_US2S::has_bfirst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgDBServerInfoAllUser_US2S::set_has_bfirst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgDBServerInfoAllUser_US2S::clear_has_bfirst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgDBServerInfoAllUser_US2S::clear_bfirst() {
  bfirst_ = 0;
  clear_has_bfirst();
}
inline ::google::protobuf::int32 MsgDBServerInfoAllUser_US2S::bfirst() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerInfoAllUser_US2S.bfirst)
  return bfirst_;
}
inline void MsgDBServerInfoAllUser_US2S::set_bfirst(::google::protobuf::int32 value) {
  set_has_bfirst();
  bfirst_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBServerInfoAllUser_US2S.bfirst)
}

// optional int32 blast = 5;
inline bool MsgDBServerInfoAllUser_US2S::has_blast() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgDBServerInfoAllUser_US2S::set_has_blast() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgDBServerInfoAllUser_US2S::clear_has_blast() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgDBServerInfoAllUser_US2S::clear_blast() {
  blast_ = 0;
  clear_has_blast();
}
inline ::google::protobuf::int32 MsgDBServerInfoAllUser_US2S::blast() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerInfoAllUser_US2S.blast)
  return blast_;
}
inline void MsgDBServerInfoAllUser_US2S::set_blast(::google::protobuf::int32 value) {
  set_has_blast();
  blast_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBServerInfoAllUser_US2S.blast)
}

// repeated .MsgPB.DBIGGINFO igginfo_array = 6;
inline int MsgDBServerInfoAllUser_US2S::igginfo_array_size() const {
  return igginfo_array_.size();
}
inline void MsgDBServerInfoAllUser_US2S::clear_igginfo_array() {
  igginfo_array_.Clear();
}
inline const ::MsgPB::DBIGGINFO& MsgDBServerInfoAllUser_US2S::igginfo_array(int index) const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerInfoAllUser_US2S.igginfo_array)
  return igginfo_array_.Get(index);
}
inline ::MsgPB::DBIGGINFO* MsgDBServerInfoAllUser_US2S::mutable_igginfo_array(int index) {
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBServerInfoAllUser_US2S.igginfo_array)
  return igginfo_array_.Mutable(index);
}
inline ::MsgPB::DBIGGINFO* MsgDBServerInfoAllUser_US2S::add_igginfo_array() {
  // @@protoc_insertion_point(field_add:MsgPB.MsgDBServerInfoAllUser_US2S.igginfo_array)
  return igginfo_array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgPB::DBIGGINFO >&
MsgDBServerInfoAllUser_US2S::igginfo_array() const {
  // @@protoc_insertion_point(field_list:MsgPB.MsgDBServerInfoAllUser_US2S.igginfo_array)
  return igginfo_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgPB::DBIGGINFO >*
MsgDBServerInfoAllUser_US2S::mutable_igginfo_array() {
  // @@protoc_insertion_point(field_mutable_list:MsgPB.MsgDBServerInfoAllUser_US2S.igginfo_array)
  return &igginfo_array_;
}

// -------------------------------------------------------------------

// MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_DBMGR_PLAYER_LOGIN_SUCCESS_MGR2DBMGR];
inline bool MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::clear_msgtype() {
  msgtype_ = 9206;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR.msgType)
}

// optional int64 iggid = 2;
inline bool MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR.iggid)
  return iggid_;
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR.iggid)
}

// optional string dbkey = 3;
inline bool MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::has_dbkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::set_has_dbkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::clear_has_dbkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::clear_dbkey() {
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_->clear();
  }
  clear_has_dbkey();
}
inline const ::std::string& MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::dbkey() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR.dbkey)
  return *dbkey_;
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::set_dbkey(const ::std::string& value) {
  set_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_ = new ::std::string;
  }
  dbkey_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR.dbkey)
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::set_dbkey(const char* value) {
  set_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_ = new ::std::string;
  }
  dbkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR.dbkey)
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::set_dbkey(const char* value, size_t size) {
  set_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_ = new ::std::string;
  }
  dbkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR.dbkey)
}
inline ::std::string* MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::mutable_dbkey() {
  set_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR.dbkey)
  return dbkey_;
}
inline ::std::string* MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::release_dbkey() {
  clear_has_dbkey();
  if (dbkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dbkey_;
    dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::set_allocated_dbkey(::std::string* dbkey) {
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbkey_;
  }
  if (dbkey) {
    set_has_dbkey();
    dbkey_ = dbkey;
  } else {
    clear_has_dbkey();
    dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR.dbkey)
}

// -------------------------------------------------------------------

// MsgDBPlayerRenameReq_S2S

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_RENAME_REQ_S2S];
inline bool MsgDBPlayerRenameReq_S2S::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBPlayerRenameReq_S2S::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBPlayerRenameReq_S2S::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBPlayerRenameReq_S2S::clear_msgtype() {
  msgtype_ = 9208;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgDBPlayerRenameReq_S2S::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerRenameReq_S2S.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgDBPlayerRenameReq_S2S::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerRenameReq_S2S.msgType)
}

// optional int64 iggid = 2;
inline bool MsgDBPlayerRenameReq_S2S::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDBPlayerRenameReq_S2S::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDBPlayerRenameReq_S2S::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDBPlayerRenameReq_S2S::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgDBPlayerRenameReq_S2S::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerRenameReq_S2S.iggid)
  return iggid_;
}
inline void MsgDBPlayerRenameReq_S2S::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerRenameReq_S2S.iggid)
}

// optional string name = 3;
inline bool MsgDBPlayerRenameReq_S2S::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDBPlayerRenameReq_S2S::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDBPlayerRenameReq_S2S::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDBPlayerRenameReq_S2S::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgDBPlayerRenameReq_S2S::name() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerRenameReq_S2S.name)
  return *name_;
}
inline void MsgDBPlayerRenameReq_S2S::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerRenameReq_S2S.name)
}
inline void MsgDBPlayerRenameReq_S2S::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBPlayerRenameReq_S2S.name)
}
inline void MsgDBPlayerRenameReq_S2S::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBPlayerRenameReq_S2S.name)
}
inline ::std::string* MsgDBPlayerRenameReq_S2S::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBPlayerRenameReq_S2S.name)
  return name_;
}
inline ::std::string* MsgDBPlayerRenameReq_S2S::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgDBPlayerRenameReq_S2S::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBPlayerRenameReq_S2S.name)
}

// -------------------------------------------------------------------

// MsgDBPlayerRenameRes_S2S

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_RENAME_RES_S2S];
inline bool MsgDBPlayerRenameRes_S2S::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBPlayerRenameRes_S2S::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBPlayerRenameRes_S2S::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBPlayerRenameRes_S2S::clear_msgtype() {
  msgtype_ = 9209;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgDBPlayerRenameRes_S2S::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerRenameRes_S2S.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgDBPlayerRenameRes_S2S::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerRenameRes_S2S.msgType)
}

// optional int64 iggid = 2;
inline bool MsgDBPlayerRenameRes_S2S::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDBPlayerRenameRes_S2S::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDBPlayerRenameRes_S2S::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDBPlayerRenameRes_S2S::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgDBPlayerRenameRes_S2S::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerRenameRes_S2S.iggid)
  return iggid_;
}
inline void MsgDBPlayerRenameRes_S2S::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerRenameRes_S2S.iggid)
}

// optional string name = 3;
inline bool MsgDBPlayerRenameRes_S2S::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDBPlayerRenameRes_S2S::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDBPlayerRenameRes_S2S::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDBPlayerRenameRes_S2S::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgDBPlayerRenameRes_S2S::name() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerRenameRes_S2S.name)
  return *name_;
}
inline void MsgDBPlayerRenameRes_S2S::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerRenameRes_S2S.name)
}
inline void MsgDBPlayerRenameRes_S2S::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBPlayerRenameRes_S2S.name)
}
inline void MsgDBPlayerRenameRes_S2S::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBPlayerRenameRes_S2S.name)
}
inline ::std::string* MsgDBPlayerRenameRes_S2S::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBPlayerRenameRes_S2S.name)
  return name_;
}
inline ::std::string* MsgDBPlayerRenameRes_S2S::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgDBPlayerRenameRes_S2S::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBPlayerRenameRes_S2S.name)
}

// optional .MsgPB.EN_DB_RESULT res = 4;
inline bool MsgDBPlayerRenameRes_S2S::has_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgDBPlayerRenameRes_S2S::set_has_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgDBPlayerRenameRes_S2S::clear_has_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgDBPlayerRenameRes_S2S::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::MsgPB::EN_DB_RESULT MsgDBPlayerRenameRes_S2S::res() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerRenameRes_S2S.res)
  return static_cast< ::MsgPB::EN_DB_RESULT >(res_);
}
inline void MsgDBPlayerRenameRes_S2S::set_res(::MsgPB::EN_DB_RESULT value) {
  assert(::MsgPB::EN_DB_RESULT_IsValid(value));
  set_has_res();
  res_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerRenameRes_S2S.res)
}

// -------------------------------------------------------------------

// MsgDBPlayerQueryByNameReq_S2S

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_QUERY_BY_NAME_REQ_S2S];
inline bool MsgDBPlayerQueryByNameReq_S2S::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBPlayerQueryByNameReq_S2S::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBPlayerQueryByNameReq_S2S::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBPlayerQueryByNameReq_S2S::clear_msgtype() {
  msgtype_ = 9210;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgDBPlayerQueryByNameReq_S2S::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerQueryByNameReq_S2S.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgDBPlayerQueryByNameReq_S2S::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerQueryByNameReq_S2S.msgType)
}

// optional int64 iggid = 2;
inline bool MsgDBPlayerQueryByNameReq_S2S::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDBPlayerQueryByNameReq_S2S::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDBPlayerQueryByNameReq_S2S::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDBPlayerQueryByNameReq_S2S::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgDBPlayerQueryByNameReq_S2S::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerQueryByNameReq_S2S.iggid)
  return iggid_;
}
inline void MsgDBPlayerQueryByNameReq_S2S::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerQueryByNameReq_S2S.iggid)
}

// optional string name = 3;
inline bool MsgDBPlayerQueryByNameReq_S2S::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDBPlayerQueryByNameReq_S2S::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDBPlayerQueryByNameReq_S2S::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDBPlayerQueryByNameReq_S2S::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgDBPlayerQueryByNameReq_S2S::name() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerQueryByNameReq_S2S.name)
  return *name_;
}
inline void MsgDBPlayerQueryByNameReq_S2S::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerQueryByNameReq_S2S.name)
}
inline void MsgDBPlayerQueryByNameReq_S2S::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBPlayerQueryByNameReq_S2S.name)
}
inline void MsgDBPlayerQueryByNameReq_S2S::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBPlayerQueryByNameReq_S2S.name)
}
inline ::std::string* MsgDBPlayerQueryByNameReq_S2S::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBPlayerQueryByNameReq_S2S.name)
  return name_;
}
inline ::std::string* MsgDBPlayerQueryByNameReq_S2S::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgDBPlayerQueryByNameReq_S2S::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBPlayerQueryByNameReq_S2S.name)
}

// optional int64 query_contex_data = 4;
inline bool MsgDBPlayerQueryByNameReq_S2S::has_query_contex_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgDBPlayerQueryByNameReq_S2S::set_has_query_contex_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgDBPlayerQueryByNameReq_S2S::clear_has_query_contex_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgDBPlayerQueryByNameReq_S2S::clear_query_contex_data() {
  query_contex_data_ = GOOGLE_LONGLONG(0);
  clear_has_query_contex_data();
}
inline ::google::protobuf::int64 MsgDBPlayerQueryByNameReq_S2S::query_contex_data() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerQueryByNameReq_S2S.query_contex_data)
  return query_contex_data_;
}
inline void MsgDBPlayerQueryByNameReq_S2S::set_query_contex_data(::google::protobuf::int64 value) {
  set_has_query_contex_data();
  query_contex_data_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerQueryByNameReq_S2S.query_contex_data)
}

// -------------------------------------------------------------------

// MsgDBPlayerQueryByNameRes_S2S

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_QUERY_BY_NAME_RES_S2S];
inline bool MsgDBPlayerQueryByNameRes_S2S::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBPlayerQueryByNameRes_S2S::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBPlayerQueryByNameRes_S2S::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBPlayerQueryByNameRes_S2S::clear_msgtype() {
  msgtype_ = 9211;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgDBPlayerQueryByNameRes_S2S::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerQueryByNameRes_S2S.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgDBPlayerQueryByNameRes_S2S::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerQueryByNameRes_S2S.msgType)
}

// optional int64 iggid = 2;
inline bool MsgDBPlayerQueryByNameRes_S2S::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDBPlayerQueryByNameRes_S2S::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDBPlayerQueryByNameRes_S2S::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDBPlayerQueryByNameRes_S2S::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgDBPlayerQueryByNameRes_S2S::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerQueryByNameRes_S2S.iggid)
  return iggid_;
}
inline void MsgDBPlayerQueryByNameRes_S2S::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerQueryByNameRes_S2S.iggid)
}

// optional string name = 3;
inline bool MsgDBPlayerQueryByNameRes_S2S::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDBPlayerQueryByNameRes_S2S::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDBPlayerQueryByNameRes_S2S::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDBPlayerQueryByNameRes_S2S::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgDBPlayerQueryByNameRes_S2S::name() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerQueryByNameRes_S2S.name)
  return *name_;
}
inline void MsgDBPlayerQueryByNameRes_S2S::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerQueryByNameRes_S2S.name)
}
inline void MsgDBPlayerQueryByNameRes_S2S::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgDBPlayerQueryByNameRes_S2S.name)
}
inline void MsgDBPlayerQueryByNameRes_S2S::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgDBPlayerQueryByNameRes_S2S.name)
}
inline ::std::string* MsgDBPlayerQueryByNameRes_S2S::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgDBPlayerQueryByNameRes_S2S.name)
  return name_;
}
inline ::std::string* MsgDBPlayerQueryByNameRes_S2S::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgDBPlayerQueryByNameRes_S2S::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgDBPlayerQueryByNameRes_S2S.name)
}

// optional int64 query_contex_data = 4;
inline bool MsgDBPlayerQueryByNameRes_S2S::has_query_contex_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgDBPlayerQueryByNameRes_S2S::set_has_query_contex_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgDBPlayerQueryByNameRes_S2S::clear_has_query_contex_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgDBPlayerQueryByNameRes_S2S::clear_query_contex_data() {
  query_contex_data_ = GOOGLE_LONGLONG(0);
  clear_has_query_contex_data();
}
inline ::google::protobuf::int64 MsgDBPlayerQueryByNameRes_S2S::query_contex_data() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerQueryByNameRes_S2S.query_contex_data)
  return query_contex_data_;
}
inline void MsgDBPlayerQueryByNameRes_S2S::set_query_contex_data(::google::protobuf::int64 value) {
  set_has_query_contex_data();
  query_contex_data_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerQueryByNameRes_S2S.query_contex_data)
}

// optional .MsgPB.EN_DB_RESULT res = 5;
inline bool MsgDBPlayerQueryByNameRes_S2S::has_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgDBPlayerQueryByNameRes_S2S::set_has_res() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgDBPlayerQueryByNameRes_S2S::clear_has_res() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgDBPlayerQueryByNameRes_S2S::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::MsgPB::EN_DB_RESULT MsgDBPlayerQueryByNameRes_S2S::res() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgDBPlayerQueryByNameRes_S2S.res)
  return static_cast< ::MsgPB::EN_DB_RESULT >(res_);
}
inline void MsgDBPlayerQueryByNameRes_S2S::set_res(::MsgPB::EN_DB_RESULT value) {
  assert(::MsgPB::EN_DB_RESULT_IsValid(value));
  set_has_res();
  res_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgDBPlayerQueryByNameRes_S2S.res)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MsgPB::EN_DB_RESULT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgPB::EN_DB_RESULT>() {
  return ::MsgPB::EN_DB_RESULT_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MsgDB_2eproto__INCLUDED
