// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgPlayerEvent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgPlayerEvent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerEventTaskReport_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerEventTaskReport_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerClientModeDead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerClientModeDead_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EN_PLAYER_EVT_TASK_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EN_PLAYER_EVT_TASK_STATUE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgPlayerEvent_2eproto() {
  protobuf_AddDesc_MsgPlayerEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgPlayerEvent.proto");
  GOOGLE_CHECK(file != NULL);
  MsgTaskData_descriptor_ = file->message_type(0);
  static const int MsgTaskData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskData, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskData, task_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskData, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskData, complete_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskData, source_),
  };
  MsgTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTaskData_descriptor_,
      MsgTaskData::default_instance_,
      MsgTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTaskData));
  MsgPlayerEventTaskReport_C2S_descriptor_ = file->message_type(1);
  static const int MsgPlayerEventTaskReport_C2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEventTaskReport_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEventTaskReport_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEventTaskReport_C2S, task_data_),
  };
  MsgPlayerEventTaskReport_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerEventTaskReport_C2S_descriptor_,
      MsgPlayerEventTaskReport_C2S::default_instance_,
      MsgPlayerEventTaskReport_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEventTaskReport_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEventTaskReport_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerEventTaskReport_C2S));
  MsgPlayerClientModeDead_descriptor_ = file->message_type(2);
  static const int MsgPlayerClientModeDead_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerClientModeDead, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerClientModeDead, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerClientModeDead, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerClientModeDead, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerClientModeDead, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerClientModeDead, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerClientModeDead, info_),
  };
  MsgPlayerClientModeDead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerClientModeDead_descriptor_,
      MsgPlayerClientModeDead::default_instance_,
      MsgPlayerClientModeDead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerClientModeDead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerClientModeDead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerClientModeDead));
  EN_PLAYER_EVT_TASK_TYPE_descriptor_ = file->enum_type(0);
  EN_PLAYER_EVT_TASK_STATUE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgPlayerEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTaskData_descriptor_, &MsgTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerEventTaskReport_C2S_descriptor_, &MsgPlayerEventTaskReport_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerClientModeDead_descriptor_, &MsgPlayerClientModeDead::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgPlayerEvent_2eproto() {
  delete MsgTaskData::default_instance_;
  delete MsgTaskData_reflection_;
  delete MsgPlayerEventTaskReport_C2S::default_instance_;
  delete MsgPlayerEventTaskReport_C2S_reflection_;
  delete MsgPlayerClientModeDead::default_instance_;
  delete MsgPlayerClientModeDead_reflection_;
}

void protobuf_AddDesc_MsgPlayerEvent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024MsgPlayerEvent.proto\022\005MsgPB\032\rMsgType.p"
    "roto\"\272\001\n\013MsgTaskData\022\017\n\007task_id\030\001 \001(\005\0221\n"
    "\ttask_type\030\002 \001(\0162\036.MsgPB.EN_PLAYER_EVT_T"
    "ASK_TYPE\0220\n\006status\030\003 \001(\0162 .MsgPB.EN_PLAY"
    "ER_EVT_TASK_STATUE\022\r\n\005count\030\004 \001(\005\022\026\n\016com"
    "plete_count\030\005 \001(\005\022\016\n\006source\030\006 \003(\005\"\231\001\n\034Ms"
    "gPlayerEventTaskReport_C2S\022C\n\007msgType\030\001 "
    "\001(\0162\017.MsgPB.EMsgType:!_MSG_PLAYER_EVENT_"
    "TASK_REPORT_C2S\022\r\n\005iggid\030\002 \001(\003\022%\n\ttask_d"
    "ata\030\003 \001(\0132\022.MsgPB.MsgTaskData\"\264\001\n\027MsgPla"
    "yerClientModeDead\022@\n\007msgType\030\001 \001(\0162\017.Msg"
    "PB.EMsgType:\036_MSG_PALYER_DIE_IN_CLIENT_M"
    "ODE\022\r\n\005iggid\030\002 \001(\003\022\r\n\005mapid\030\003 \001(\005\022\r\n\005lev"
    "el\030\004 \001(\005\022\r\n\005pos_x\030\005 \001(\005\022\r\n\005pos_y\030\006 \001(\005\022\014"
    "\n\004info\030\007 \001(\t*\217\001\n\027EN_PLAYER_EVT_TASK_TYPE"
    "\022 \n\034EN_PLAYER_EVT_TASK_TYPE_NONE\020\000\022)\n%EN"
    "_PLAYER_EVT_TASK_TYPE_ADVENTRUE_LOG\020\001\022\'\n"
    "#EN_PLAYER_EVT_TASK_TYPE_MONTHLY_SUB\020\002*\216"
    "\001\n\031EN_PLAYER_EVT_TASK_STATUE\022\"\n\036EN_PLAYE"
    "R_EVT_TASK_STATUE_NONE\020\000\022%\n!EN_PLAYER_EV"
    "T_TASK_STATUE_RECEIVE\020\001\022&\n\"EN_PLAYER_EVT"
    "_TASK_STATUE_COMPLETE\020\002", 863);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgPlayerEvent.proto", &protobuf_RegisterTypes);
  MsgTaskData::default_instance_ = new MsgTaskData();
  MsgPlayerEventTaskReport_C2S::default_instance_ = new MsgPlayerEventTaskReport_C2S();
  MsgPlayerClientModeDead::default_instance_ = new MsgPlayerClientModeDead();
  MsgTaskData::default_instance_->InitAsDefaultInstance();
  MsgPlayerEventTaskReport_C2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerClientModeDead::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgPlayerEvent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgPlayerEvent_2eproto {
  StaticDescriptorInitializer_MsgPlayerEvent_2eproto() {
    protobuf_AddDesc_MsgPlayerEvent_2eproto();
  }
} static_descriptor_initializer_MsgPlayerEvent_2eproto_;
const ::google::protobuf::EnumDescriptor* EN_PLAYER_EVT_TASK_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EN_PLAYER_EVT_TASK_TYPE_descriptor_;
}
bool EN_PLAYER_EVT_TASK_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EN_PLAYER_EVT_TASK_STATUE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EN_PLAYER_EVT_TASK_STATUE_descriptor_;
}
bool EN_PLAYER_EVT_TASK_STATUE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTaskData::kTaskIdFieldNumber;
const int MsgTaskData::kTaskTypeFieldNumber;
const int MsgTaskData::kStatusFieldNumber;
const int MsgTaskData::kCountFieldNumber;
const int MsgTaskData::kCompleteCountFieldNumber;
const int MsgTaskData::kSourceFieldNumber;
#endif  // !_MSC_VER

MsgTaskData::MsgTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTaskData)
}

void MsgTaskData::InitAsDefaultInstance() {
}

MsgTaskData::MsgTaskData(const MsgTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTaskData)
}

void MsgTaskData::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  task_type_ = 0;
  status_ = 0;
  count_ = 0;
  complete_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTaskData::~MsgTaskData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTaskData)
  SharedDtor();
}

void MsgTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTaskData_descriptor_;
}

const MsgTaskData& MsgTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayerEvent_2eproto();
  return *default_instance_;
}

MsgTaskData* MsgTaskData::default_instance_ = NULL;

MsgTaskData* MsgTaskData::New() const {
  return new MsgTaskData;
}

void MsgTaskData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTaskData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(task_id_, count_);
    complete_count_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  source_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTaskData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_task_type;
        break;
      }

      // optional .MsgPB.EN_PLAYER_EVT_TASK_TYPE task_type = 2;
      case 2: {
        if (tag == 16) {
         parse_task_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EN_PLAYER_EVT_TASK_TYPE_IsValid(value)) {
            set_task_type(static_cast< ::MsgPB::EN_PLAYER_EVT_TASK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .MsgPB.EN_PLAYER_EVT_TASK_STATUE status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EN_PLAYER_EVT_TASK_STATUE_IsValid(value)) {
            set_status(static_cast< ::MsgPB::EN_PLAYER_EVT_TASK_STATUE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_complete_count;
        break;
      }

      // optional int32 complete_count = 5;
      case 5: {
        if (tag == 40) {
         parse_complete_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &complete_count_)));
          set_has_complete_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_source;
        break;
      }

      // repeated int32 source = 6;
      case 6: {
        if (tag == 48) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_source())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_source())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_source;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTaskData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTaskData)
  return false;
#undef DO_
}

void MsgTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTaskData)
  // optional int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  // optional .MsgPB.EN_PLAYER_EVT_TASK_TYPE task_type = 2;
  if (has_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->task_type(), output);
  }

  // optional .MsgPB.EN_PLAYER_EVT_TASK_STATUE status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // optional int32 complete_count = 5;
  if (has_complete_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->complete_count(), output);
  }

  // repeated int32 source = 6;
  for (int i = 0; i < this->source_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->source(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTaskData)
}

::google::protobuf::uint8* MsgTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTaskData)
  // optional int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }

  // optional .MsgPB.EN_PLAYER_EVT_TASK_TYPE task_type = 2;
  if (has_task_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->task_type(), target);
  }

  // optional .MsgPB.EN_PLAYER_EVT_TASK_STATUE status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // optional int32 complete_count = 5;
  if (has_complete_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->complete_count(), target);
  }

  // repeated int32 source = 6;
  for (int i = 0; i < this->source_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->source(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTaskData)
  return target;
}

int MsgTaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // optional .MsgPB.EN_PLAYER_EVT_TASK_TYPE task_type = 2;
    if (has_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_type());
    }

    // optional .MsgPB.EN_PLAYER_EVT_TASK_STATUE status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 complete_count = 5;
    if (has_complete_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->complete_count());
    }

  }
  // repeated int32 source = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->source_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->source(i));
    }
    total_size += 1 * this->source_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTaskData::MergeFrom(const MsgTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  source_.MergeFrom(from.source_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_type()) {
      set_task_type(from.task_type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_complete_count()) {
      set_complete_count(from.complete_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTaskData::CopyFrom(const MsgTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTaskData::IsInitialized() const {

  return true;
}

void MsgTaskData::Swap(MsgTaskData* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(task_type_, other->task_type_);
    std::swap(status_, other->status_);
    std::swap(count_, other->count_);
    std::swap(complete_count_, other->complete_count_);
    source_.Swap(&other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTaskData_descriptor_;
  metadata.reflection = MsgTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerEventTaskReport_C2S::kMsgTypeFieldNumber;
const int MsgPlayerEventTaskReport_C2S::kIggidFieldNumber;
const int MsgPlayerEventTaskReport_C2S::kTaskDataFieldNumber;
#endif  // !_MSC_VER

MsgPlayerEventTaskReport_C2S::MsgPlayerEventTaskReport_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerEventTaskReport_C2S)
}

void MsgPlayerEventTaskReport_C2S::InitAsDefaultInstance() {
  task_data_ = const_cast< ::MsgPB::MsgTaskData*>(&::MsgPB::MsgTaskData::default_instance());
}

MsgPlayerEventTaskReport_C2S::MsgPlayerEventTaskReport_C2S(const MsgPlayerEventTaskReport_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerEventTaskReport_C2S)
}

void MsgPlayerEventTaskReport_C2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7150;
  iggid_ = GOOGLE_LONGLONG(0);
  task_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerEventTaskReport_C2S::~MsgPlayerEventTaskReport_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerEventTaskReport_C2S)
  SharedDtor();
}

void MsgPlayerEventTaskReport_C2S::SharedDtor() {
  if (this != default_instance_) {
    delete task_data_;
  }
}

void MsgPlayerEventTaskReport_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerEventTaskReport_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerEventTaskReport_C2S_descriptor_;
}

const MsgPlayerEventTaskReport_C2S& MsgPlayerEventTaskReport_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayerEvent_2eproto();
  return *default_instance_;
}

MsgPlayerEventTaskReport_C2S* MsgPlayerEventTaskReport_C2S::default_instance_ = NULL;

MsgPlayerEventTaskReport_C2S* MsgPlayerEventTaskReport_C2S::New() const {
  return new MsgPlayerEventTaskReport_C2S;
}

void MsgPlayerEventTaskReport_C2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 7150;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_task_data()) {
      if (task_data_ != NULL) task_data_->::MsgPB::MsgTaskData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerEventTaskReport_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerEventTaskReport_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_EVENT_TASK_REPORT_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_task_data;
        break;
      }

      // optional .MsgPB.MsgTaskData task_data = 3;
      case 3: {
        if (tag == 26) {
         parse_task_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerEventTaskReport_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerEventTaskReport_C2S)
  return false;
#undef DO_
}

void MsgPlayerEventTaskReport_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerEventTaskReport_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_EVENT_TASK_REPORT_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.MsgTaskData task_data = 3;
  if (has_task_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->task_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerEventTaskReport_C2S)
}

::google::protobuf::uint8* MsgPlayerEventTaskReport_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerEventTaskReport_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_EVENT_TASK_REPORT_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.MsgTaskData task_data = 3;
  if (has_task_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->task_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerEventTaskReport_C2S)
  return target;
}

int MsgPlayerEventTaskReport_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_EVENT_TASK_REPORT_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.MsgTaskData task_data = 3;
    if (has_task_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerEventTaskReport_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerEventTaskReport_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerEventTaskReport_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerEventTaskReport_C2S::MergeFrom(const MsgPlayerEventTaskReport_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_task_data()) {
      mutable_task_data()->::MsgPB::MsgTaskData::MergeFrom(from.task_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerEventTaskReport_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerEventTaskReport_C2S::CopyFrom(const MsgPlayerEventTaskReport_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerEventTaskReport_C2S::IsInitialized() const {

  return true;
}

void MsgPlayerEventTaskReport_C2S::Swap(MsgPlayerEventTaskReport_C2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(task_data_, other->task_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerEventTaskReport_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerEventTaskReport_C2S_descriptor_;
  metadata.reflection = MsgPlayerEventTaskReport_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerClientModeDead::kMsgTypeFieldNumber;
const int MsgPlayerClientModeDead::kIggidFieldNumber;
const int MsgPlayerClientModeDead::kMapidFieldNumber;
const int MsgPlayerClientModeDead::kLevelFieldNumber;
const int MsgPlayerClientModeDead::kPosXFieldNumber;
const int MsgPlayerClientModeDead::kPosYFieldNumber;
const int MsgPlayerClientModeDead::kInfoFieldNumber;
#endif  // !_MSC_VER

MsgPlayerClientModeDead::MsgPlayerClientModeDead()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerClientModeDead)
}

void MsgPlayerClientModeDead::InitAsDefaultInstance() {
}

MsgPlayerClientModeDead::MsgPlayerClientModeDead(const MsgPlayerClientModeDead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerClientModeDead)
}

void MsgPlayerClientModeDead::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1168;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  level_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerClientModeDead::~MsgPlayerClientModeDead() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerClientModeDead)
  SharedDtor();
}

void MsgPlayerClientModeDead::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlayerClientModeDead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerClientModeDead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerClientModeDead_descriptor_;
}

const MsgPlayerClientModeDead& MsgPlayerClientModeDead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayerEvent_2eproto();
  return *default_instance_;
}

MsgPlayerClientModeDead* MsgPlayerClientModeDead::default_instance_ = NULL;

MsgPlayerClientModeDead* MsgPlayerClientModeDead::New() const {
  return new MsgPlayerClientModeDead;
}

void MsgPlayerClientModeDead::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerClientModeDead*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(mapid_, pos_x_);
    msgtype_ = 1168;
    iggid_ = GOOGLE_LONGLONG(0);
    pos_y_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerClientModeDead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerClientModeDead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PALYER_DIE_IN_CLIENT_MODE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 5;
      case 5: {
        if (tag == 40) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 6;
      case 6: {
        if (tag == 48) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_info;
        break;
      }

      // optional string info = 7;
      case 7: {
        if (tag == 58) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerClientModeDead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerClientModeDead)
  return false;
#undef DO_
}

void MsgPlayerClientModeDead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerClientModeDead)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PALYER_DIE_IN_CLIENT_MODE];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 pos_x = 5;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_x(), output);
  }

  // optional int32 pos_y = 6;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pos_y(), output);
  }

  // optional string info = 7;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerClientModeDead)
}

::google::protobuf::uint8* MsgPlayerClientModeDead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerClientModeDead)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PALYER_DIE_IN_CLIENT_MODE];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 pos_x = 5;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_x(), target);
  }

  // optional int32 pos_y = 6;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pos_y(), target);
  }

  // optional string info = 7;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerClientModeDead)
  return target;
}

int MsgPlayerClientModeDead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PALYER_DIE_IN_CLIENT_MODE];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 pos_x = 5;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 6;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional string info = 7;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerClientModeDead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerClientModeDead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerClientModeDead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerClientModeDead::MergeFrom(const MsgPlayerClientModeDead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerClientModeDead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerClientModeDead::CopyFrom(const MsgPlayerClientModeDead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerClientModeDead::IsInitialized() const {

  return true;
}

void MsgPlayerClientModeDead::Swap(MsgPlayerClientModeDead* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    std::swap(level_, other->level_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerClientModeDead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerClientModeDead_descriptor_;
  metadata.reflection = MsgPlayerClientModeDead_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
