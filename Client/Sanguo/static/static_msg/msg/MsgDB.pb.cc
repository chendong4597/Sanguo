// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgDB.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgDB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBCommandReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBCommandReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBCommandRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBCommandRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBServerInfoGet_US2DS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBServerInfoGet_US2DS_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBIGGINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBIGGINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDBServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDBServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBServerInfoKeyAllUser_DS2US_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBServerInfoKeyAllUser_DS2US_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBServerAllInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBServerAllInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBServerInfoAllUser_US2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBServerInfoAllUser_US2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBPlayerRenameReq_S2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBPlayerRenameReq_S2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBPlayerRenameRes_S2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBPlayerRenameRes_S2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBPlayerQueryByNameReq_S2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBPlayerQueryByNameReq_S2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBPlayerQueryByNameRes_S2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBPlayerQueryByNameRes_S2S_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EN_DB_RESULT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgDB_2eproto() {
  protobuf_AddDesc_MsgDB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgDB.proto");
  GOOGLE_CHECK(file != NULL);
  MsgDBReq_descriptor_ = file->message_type(0);
  static const int MsgDBReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBReq, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBReq, routeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBReq, hashid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBReq, reqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBReq, reqpb_),
  };
  MsgDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBReq_descriptor_,
      MsgDBReq::default_instance_,
      MsgDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBReq));
  MsgDBRes_descriptor_ = file->message_type(1);
  static const int MsgDBRes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBRes, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBRes, routeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBRes, hashid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBRes, restype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBRes, respb_),
  };
  MsgDBRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBRes_descriptor_,
      MsgDBRes::default_instance_,
      MsgDBRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBRes));
  MsgDBCommandReq_descriptor_ = file->message_type(2);
  static const int MsgDBCommandReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandReq, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandReq, routeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandReq, hashid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandReq, strcommandname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandReq, strattachmentsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandReq, strcommanddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandReq, fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandReq, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandReq, query_context_data_),
  };
  MsgDBCommandReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBCommandReq_descriptor_,
      MsgDBCommandReq::default_instance_,
      MsgDBCommandReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBCommandReq));
  MsgDBCommandRes_descriptor_ = file->message_type(3);
  static const int MsgDBCommandRes_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandRes, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandRes, routeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandRes, hashid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandRes, istail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandRes, strcommandname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandRes, strattachmentsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandRes, strcommanddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandRes, fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandRes, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandRes, query_context_data_),
  };
  MsgDBCommandRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBCommandRes_descriptor_,
      MsgDBCommandRes::default_instance_,
      MsgDBCommandRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBCommandRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBCommandRes));
  MsgDBServerInfoGet_US2DS_descriptor_ = file->message_type(4);
  static const int MsgDBServerInfoGet_US2DS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoGet_US2DS, msgtype_),
  };
  MsgDBServerInfoGet_US2DS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBServerInfoGet_US2DS_descriptor_,
      MsgDBServerInfoGet_US2DS::default_instance_,
      MsgDBServerInfoGet_US2DS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoGet_US2DS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoGet_US2DS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBServerInfoGet_US2DS));
  DBIGGINFO_descriptor_ = file->message_type(5);
  static const int DBIGGINFO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBIGGINFO, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBIGGINFO, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBIGGINFO, freezetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBIGGINFO, freezeinterval_),
  };
  DBIGGINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBIGGINFO_descriptor_,
      DBIGGINFO::default_instance_,
      DBIGGINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBIGGINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBIGGINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBIGGINFO));
  PBDBServerInfo_descriptor_ = file->message_type(6);
  static const int PBDBServerInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBServerInfo, dbkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBServerInfo, dbserver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBServerInfo, dbserver_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBServerInfo, dbserver_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBServerInfo, is_main_db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBServerInfo, is_center_db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBServerInfo, db_function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBServerInfo, dbserver_domain_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBServerInfo, area_id_),
  };
  PBDBServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDBServerInfo_descriptor_,
      PBDBServerInfo::default_instance_,
      PBDBServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDBServerInfo));
  MsgDBServerInfoKeyAllUser_DS2US_descriptor_ = file->message_type(7);
  static const int MsgDBServerInfoKeyAllUser_DS2US_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoKeyAllUser_DS2US, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoKeyAllUser_DS2US, dbserver_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoKeyAllUser_DS2US, bfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoKeyAllUser_DS2US, blast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoKeyAllUser_DS2US, igginfo_array_),
  };
  MsgDBServerInfoKeyAllUser_DS2US_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBServerInfoKeyAllUser_DS2US_descriptor_,
      MsgDBServerInfoKeyAllUser_DS2US::default_instance_,
      MsgDBServerInfoKeyAllUser_DS2US_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoKeyAllUser_DS2US, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoKeyAllUser_DS2US, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBServerInfoKeyAllUser_DS2US));
  MsgDBServerAllInfo_descriptor_ = file->message_type(8);
  static const int MsgDBServerAllInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerAllInfo, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerAllInfo, db_server_info_array_),
  };
  MsgDBServerAllInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBServerAllInfo_descriptor_,
      MsgDBServerAllInfo::default_instance_,
      MsgDBServerAllInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerAllInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerAllInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBServerAllInfo));
  MsgDBServerInfoAllUser_US2S_descriptor_ = file->message_type(9);
  static const int MsgDBServerInfoAllUser_US2S_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoAllUser_US2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoAllUser_US2S, dbkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoAllUser_US2S, user_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoAllUser_US2S, bfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoAllUser_US2S, blast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoAllUser_US2S, igginfo_array_),
  };
  MsgDBServerInfoAllUser_US2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBServerInfoAllUser_US2S_descriptor_,
      MsgDBServerInfoAllUser_US2S::default_instance_,
      MsgDBServerInfoAllUser_US2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoAllUser_US2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerInfoAllUser_US2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBServerInfoAllUser_US2S));
  MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR_descriptor_ = file->message_type(10);
  static const int MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR, dbkey_),
  };
  MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR_descriptor_,
      MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::default_instance_,
      MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR));
  MsgDBPlayerRenameReq_S2S_descriptor_ = file->message_type(11);
  static const int MsgDBPlayerRenameReq_S2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerRenameReq_S2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerRenameReq_S2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerRenameReq_S2S, name_),
  };
  MsgDBPlayerRenameReq_S2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBPlayerRenameReq_S2S_descriptor_,
      MsgDBPlayerRenameReq_S2S::default_instance_,
      MsgDBPlayerRenameReq_S2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerRenameReq_S2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerRenameReq_S2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBPlayerRenameReq_S2S));
  MsgDBPlayerRenameRes_S2S_descriptor_ = file->message_type(12);
  static const int MsgDBPlayerRenameRes_S2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerRenameRes_S2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerRenameRes_S2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerRenameRes_S2S, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerRenameRes_S2S, res_),
  };
  MsgDBPlayerRenameRes_S2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBPlayerRenameRes_S2S_descriptor_,
      MsgDBPlayerRenameRes_S2S::default_instance_,
      MsgDBPlayerRenameRes_S2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerRenameRes_S2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerRenameRes_S2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBPlayerRenameRes_S2S));
  MsgDBPlayerQueryByNameReq_S2S_descriptor_ = file->message_type(13);
  static const int MsgDBPlayerQueryByNameReq_S2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerQueryByNameReq_S2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerQueryByNameReq_S2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerQueryByNameReq_S2S, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerQueryByNameReq_S2S, query_contex_data_),
  };
  MsgDBPlayerQueryByNameReq_S2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBPlayerQueryByNameReq_S2S_descriptor_,
      MsgDBPlayerQueryByNameReq_S2S::default_instance_,
      MsgDBPlayerQueryByNameReq_S2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerQueryByNameReq_S2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerQueryByNameReq_S2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBPlayerQueryByNameReq_S2S));
  MsgDBPlayerQueryByNameRes_S2S_descriptor_ = file->message_type(14);
  static const int MsgDBPlayerQueryByNameRes_S2S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerQueryByNameRes_S2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerQueryByNameRes_S2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerQueryByNameRes_S2S, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerQueryByNameRes_S2S, query_contex_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerQueryByNameRes_S2S, res_),
  };
  MsgDBPlayerQueryByNameRes_S2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBPlayerQueryByNameRes_S2S_descriptor_,
      MsgDBPlayerQueryByNameRes_S2S::default_instance_,
      MsgDBPlayerQueryByNameRes_S2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerQueryByNameRes_S2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBPlayerQueryByNameRes_S2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBPlayerQueryByNameRes_S2S));
  EN_DB_RESULT_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgDB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBReq_descriptor_, &MsgDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBRes_descriptor_, &MsgDBRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBCommandReq_descriptor_, &MsgDBCommandReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBCommandRes_descriptor_, &MsgDBCommandRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBServerInfoGet_US2DS_descriptor_, &MsgDBServerInfoGet_US2DS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBIGGINFO_descriptor_, &DBIGGINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDBServerInfo_descriptor_, &PBDBServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBServerInfoKeyAllUser_DS2US_descriptor_, &MsgDBServerInfoKeyAllUser_DS2US::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBServerAllInfo_descriptor_, &MsgDBServerAllInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBServerInfoAllUser_US2S_descriptor_, &MsgDBServerInfoAllUser_US2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR_descriptor_, &MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBPlayerRenameReq_S2S_descriptor_, &MsgDBPlayerRenameReq_S2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBPlayerRenameRes_S2S_descriptor_, &MsgDBPlayerRenameRes_S2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBPlayerQueryByNameReq_S2S_descriptor_, &MsgDBPlayerQueryByNameReq_S2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBPlayerQueryByNameRes_S2S_descriptor_, &MsgDBPlayerQueryByNameRes_S2S::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgDB_2eproto() {
  delete MsgDBReq::default_instance_;
  delete MsgDBReq_reflection_;
  delete MsgDBRes::default_instance_;
  delete MsgDBRes_reflection_;
  delete MsgDBCommandReq::default_instance_;
  delete MsgDBCommandReq_reflection_;
  delete MsgDBCommandRes::default_instance_;
  delete MsgDBCommandRes_reflection_;
  delete MsgDBServerInfoGet_US2DS::default_instance_;
  delete MsgDBServerInfoGet_US2DS_reflection_;
  delete DBIGGINFO::default_instance_;
  delete DBIGGINFO_reflection_;
  delete PBDBServerInfo::default_instance_;
  delete PBDBServerInfo_reflection_;
  delete MsgDBServerInfoKeyAllUser_DS2US::default_instance_;
  delete MsgDBServerInfoKeyAllUser_DS2US_reflection_;
  delete MsgDBServerAllInfo::default_instance_;
  delete MsgDBServerAllInfo_reflection_;
  delete MsgDBServerInfoAllUser_US2S::default_instance_;
  delete MsgDBServerInfoAllUser_US2S_reflection_;
  delete MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::default_instance_;
  delete MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR_reflection_;
  delete MsgDBPlayerRenameReq_S2S::default_instance_;
  delete MsgDBPlayerRenameReq_S2S_reflection_;
  delete MsgDBPlayerRenameRes_S2S::default_instance_;
  delete MsgDBPlayerRenameRes_S2S_reflection_;
  delete MsgDBPlayerQueryByNameReq_S2S::default_instance_;
  delete MsgDBPlayerQueryByNameReq_S2S_reflection_;
  delete MsgDBPlayerQueryByNameRes_S2S::default_instance_;
  delete MsgDBPlayerQueryByNameRes_S2S_reflection_;
}

void protobuf_AddDesc_MsgDB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013MsgDB.proto\022\005MsgPB\032\rMsgType.proto\"\217\001\n\010"
    "MsgDBReq\0221\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTy"
    "pe:\017_MSG_CMD_DB_REQ\022\017\n\007RouteID\030\002 \001(\005\022\016\n\006"
    "HashID\030\003 \001(\003\022 \n\007reqType\030\004 \001(\0162\017.MsgPB.EM"
    "sgType\022\r\n\005ReqPB\030\005 \001(\014\"\217\001\n\010MsgDBRes\0221\n\007ms"
    "gType\030\001 \001(\0162\017.MsgPB.EMsgType:\017_MSG_CMD_D"
    "B_RES\022\017\n\007RouteID\030\002 \001(\005\022\016\n\006HashID\030\003 \001(\003\022 "
    "\n\007resType\030\004 \001(\0162\017.MsgPB.EMsgType\022\r\n\005ResP"
    "B\030\005 \001(\014\"\371\001\n\017MsgDBCommandReq\0229\n\007msgType\030\001"
    " \001(\0162\017.MsgPB.EMsgType:\027_MSG_CMD_DB_COMMA"
    "ND_REQ\022\017\n\007RouteID\030\002 \001(\005\022\016\n\006HashID\030\003 \001(\003\022"
    "\026\n\016strCommandName\030\004 \001(\t\022\032\n\022strAttachment"
    "sData\030\005 \001(\014\022\026\n\016strCommandData\030\006 \001(\014\022\023\n\013f"
    "ingerprint\030\007 \001(\003\022\r\n\005iggid\030\010 \001(\003\022\032\n\022query"
    "_context_data\030\t \001(\003\"\211\002\n\017MsgDBCommandRes\022"
    "9\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\027_MSG_"
    "CMD_DB_COMMAND_RES\022\017\n\007RouteID\030\002 \001(\005\022\016\n\006H"
    "ashID\030\003 \001(\003\022\016\n\006IsTail\030\004 \001(\010\022\026\n\016strComman"
    "dName\030\005 \001(\t\022\032\n\022strAttachmentsData\030\006 \001(\014\022"
    "\026\n\016strCommandData\030\007 \003(\014\022\023\n\013fingerprint\030\010"
    " \001(\003\022\r\n\005iggid\030\t \001(\003\022\032\n\022query_context_dat"
    "a\030\n \001(\003\"Z\n\030MsgDBServerInfoGet_US2DS\022>\n\007m"
    "sgType\030\001 \001(\0162\017.MsgPB.EMsgType:\034_MSG_DBSE"
    "RVER_INFO_GET_US2DS\"X\n\tDBIGGINFO\022\r\n\005iggi"
    "d\030\001 \001(\003\022\020\n\010nickname\030\002 \001(\t\022\022\n\nfreezetime\030"
    "\003 \001(\003\022\026\n\016freezeinterval\030\004 \001(\005\"\316\001\n\016PBDBSe"
    "rverInfo\022\r\n\005dbkey\030\001 \001(\t\022\023\n\013dbserver_id\030\002"
    " \001(\005\022\023\n\013dbserver_ip\030\003 \001(\t\022\025\n\rdbserver_po"
    "rt\030\004 \001(\005\022\022\n\nis_main_db\030\005 \001(\005\022\024\n\014is_cente"
    "r_db\030\006 \001(\005\022\023\n\013db_function\030\007 \003(\005\022\034\n\024dbser"
    "ver_domain_name\030\010 \001(\t\022\017\n\007area_id\030\t \001(\005\"\340"
    "\001\n\037MsgDBServerInfoKeyAllUser_DS2US\022G\n\007ms"
    "gType\030\001 \001(\0162\017.MsgPB.EMsgType:%_MSG_DBSER"
    "VER_INFO_KEY_ALL_USER_DS2US\022,\n\rdbserver_"
    "info\030\002 \001(\0132\025.MsgPB.PBDBServerInfo\022\016\n\006bfi"
    "rst\030\003 \001(\005\022\r\n\005blast\030\004 \001(\005\022\'\n\rigginfo_arra"
    "y\030\005 \003(\0132\020.MsgPB.DBIGGINFO\"\203\001\n\022MsgDBServe"
    "rAllInfo\0228\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTy"
    "pe:\026_MSG_DBSERVER_ALL_INFO\0223\n\024db_server_"
    "info_array\030\002 \003(\0132\025.MsgPB.PBDBServerInfo\""
    "\314\001\n\033MsgDBServerInfoAllUser_US2S\022B\n\007msgTy"
    "pe\030\001 \001(\0162\017.MsgPB.EMsgType: _MSG_DBSERVER"
    "_INFO_ALL_USER_US2S\022\r\n\005dbkey\030\002 \001(\t\022\022\n\nus"
    "er_count\030\003 \001(\005\022\016\n\006bfirst\030\004 \001(\005\022\r\n\005blast\030"
    "\005 \001(\005\022\'\n\rigginfo_array\030\006 \003(\0132\020.MsgPB.DBI"
    "GGINFO\"\242\001\n,MsgDBServerDBMgrPlayerLoginSu"
    "ccess_MGR2DBMGR\022T\n\007msgType\030\001 \001(\0162\017.MsgPB"
    ".EMsgType:2_MSG_DBSERVER_DBMGR_PLAYER_LO"
    "GIN_SUCCESS_MGR2DBMGR\022\r\n\005iggid\030\002 \001(\003\022\r\n\005"
    "dbkey\030\003 \001(\t\"x\n\030MsgDBPlayerRenameReq_S2S\022"
    "\?\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\035_MSG_"
    "DB_PLAYER_RENAME_REQ_S2S\022\r\n\005iggid\030\002 \001(\003\022"
    "\014\n\004name\030\003 \001(\t\"\232\001\n\030MsgDBPlayerRenameRes_S"
    "2S\022\?\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\035_M"
    "SG_DB_PLAYER_RENAME_RES_S2S\022\r\n\005iggid\030\002 \001"
    "(\003\022\014\n\004name\030\003 \001(\t\022 \n\003res\030\004 \001(\0162\023.MsgPB.EN"
    "_DB_RESULT\"\237\001\n\035MsgDBPlayerQueryByNameReq"
    "_S2S\022F\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:$"
    "_MSG_DB_PLAYER_QUERY_BY_NAME_REQ_S2S\022\r\n\005"
    "iggid\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\031\n\021query_conte"
    "x_data\030\004 \001(\003\"\301\001\n\035MsgDBPlayerQueryByNameR"
    "es_S2S\022F\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType"
    ":$_MSG_DB_PLAYER_QUERY_BY_NAME_RES_S2S\022\r"
    "\n\005iggid\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\031\n\021query_con"
    "tex_data\030\004 \001(\003\022 \n\003res\030\005 \001(\0162\023.MsgPB.EN_D"
    "B_RESULT*q\n\014EN_DB_RESULT\022\024\n\020EN_DB_RESULT"
    "_ERR\020\000\022\023\n\017EN_DB_RESULT_OK\020\001\022\034\n\030EN_DB_RES"
    "ULT_REPEAT_NAME\020\002\022\030\n\024EN_DB_RESULT_NO_DAT"
    "A\020\003", 2723);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgDB.proto", &protobuf_RegisterTypes);
  MsgDBReq::default_instance_ = new MsgDBReq();
  MsgDBRes::default_instance_ = new MsgDBRes();
  MsgDBCommandReq::default_instance_ = new MsgDBCommandReq();
  MsgDBCommandRes::default_instance_ = new MsgDBCommandRes();
  MsgDBServerInfoGet_US2DS::default_instance_ = new MsgDBServerInfoGet_US2DS();
  DBIGGINFO::default_instance_ = new DBIGGINFO();
  PBDBServerInfo::default_instance_ = new PBDBServerInfo();
  MsgDBServerInfoKeyAllUser_DS2US::default_instance_ = new MsgDBServerInfoKeyAllUser_DS2US();
  MsgDBServerAllInfo::default_instance_ = new MsgDBServerAllInfo();
  MsgDBServerInfoAllUser_US2S::default_instance_ = new MsgDBServerInfoAllUser_US2S();
  MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::default_instance_ = new MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR();
  MsgDBPlayerRenameReq_S2S::default_instance_ = new MsgDBPlayerRenameReq_S2S();
  MsgDBPlayerRenameRes_S2S::default_instance_ = new MsgDBPlayerRenameRes_S2S();
  MsgDBPlayerQueryByNameReq_S2S::default_instance_ = new MsgDBPlayerQueryByNameReq_S2S();
  MsgDBPlayerQueryByNameRes_S2S::default_instance_ = new MsgDBPlayerQueryByNameRes_S2S();
  MsgDBReq::default_instance_->InitAsDefaultInstance();
  MsgDBRes::default_instance_->InitAsDefaultInstance();
  MsgDBCommandReq::default_instance_->InitAsDefaultInstance();
  MsgDBCommandRes::default_instance_->InitAsDefaultInstance();
  MsgDBServerInfoGet_US2DS::default_instance_->InitAsDefaultInstance();
  DBIGGINFO::default_instance_->InitAsDefaultInstance();
  PBDBServerInfo::default_instance_->InitAsDefaultInstance();
  MsgDBServerInfoKeyAllUser_DS2US::default_instance_->InitAsDefaultInstance();
  MsgDBServerAllInfo::default_instance_->InitAsDefaultInstance();
  MsgDBServerInfoAllUser_US2S::default_instance_->InitAsDefaultInstance();
  MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::default_instance_->InitAsDefaultInstance();
  MsgDBPlayerRenameReq_S2S::default_instance_->InitAsDefaultInstance();
  MsgDBPlayerRenameRes_S2S::default_instance_->InitAsDefaultInstance();
  MsgDBPlayerQueryByNameReq_S2S::default_instance_->InitAsDefaultInstance();
  MsgDBPlayerQueryByNameRes_S2S::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgDB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgDB_2eproto {
  StaticDescriptorInitializer_MsgDB_2eproto() {
    protobuf_AddDesc_MsgDB_2eproto();
  }
} static_descriptor_initializer_MsgDB_2eproto_;
const ::google::protobuf::EnumDescriptor* EN_DB_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EN_DB_RESULT_descriptor_;
}
bool EN_DB_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBReq::kMsgTypeFieldNumber;
const int MsgDBReq::kRouteIDFieldNumber;
const int MsgDBReq::kHashIDFieldNumber;
const int MsgDBReq::kReqTypeFieldNumber;
const int MsgDBReq::kReqPBFieldNumber;
#endif  // !_MSC_VER

MsgDBReq::MsgDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBReq)
}

void MsgDBReq::InitAsDefaultInstance() {
}

MsgDBReq::MsgDBReq(const MsgDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBReq)
}

void MsgDBReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 11024;
  routeid_ = 0;
  hashid_ = GOOGLE_LONGLONG(0);
  reqtype_ = 0;
  reqpb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBReq::~MsgDBReq() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBReq)
  SharedDtor();
}

void MsgDBReq::SharedDtor() {
  if (reqpb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reqpb_;
  }
  if (this != default_instance_) {
  }
}

void MsgDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBReq_descriptor_;
}

const MsgDBReq& MsgDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

MsgDBReq* MsgDBReq::default_instance_ = NULL;

MsgDBReq* MsgDBReq::New() const {
  return new MsgDBReq;
}

void MsgDBReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDBReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(routeid_, hashid_);
    msgtype_ = 11024;
    reqtype_ = 0;
    if (has_reqpb()) {
      if (reqpb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reqpb_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RouteID;
        break;
      }

      // optional int32 RouteID = 2;
      case 2: {
        if (tag == 16) {
         parse_RouteID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &routeid_)));
          set_has_routeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HashID;
        break;
      }

      // optional int64 HashID = 3;
      case 3: {
        if (tag == 24) {
         parse_HashID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hashid_)));
          set_has_hashid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reqType;
        break;
      }

      // optional .MsgPB.EMsgType reqType = 4;
      case 4: {
        if (tag == 32) {
         parse_reqType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_reqtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ReqPB;
        break;
      }

      // optional bytes ReqPB = 5;
      case 5: {
        if (tag == 42) {
         parse_ReqPB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqpb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBReq)
  return false;
#undef DO_
}

void MsgDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBReq)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_REQ];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 RouteID = 2;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->routeid(), output);
  }

  // optional int64 HashID = 3;
  if (has_hashid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->hashid(), output);
  }

  // optional .MsgPB.EMsgType reqType = 4;
  if (has_reqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reqtype(), output);
  }

  // optional bytes ReqPB = 5;
  if (has_reqpb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->reqpb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBReq)
}

::google::protobuf::uint8* MsgDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBReq)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_REQ];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 RouteID = 2;
  if (has_routeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->routeid(), target);
  }

  // optional int64 HashID = 3;
  if (has_hashid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->hashid(), target);
  }

  // optional .MsgPB.EMsgType reqType = 4;
  if (has_reqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reqtype(), target);
  }

  // optional bytes ReqPB = 5;
  if (has_reqpb()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->reqpb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBReq)
  return target;
}

int MsgDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_REQ];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 RouteID = 2;
    if (has_routeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->routeid());
    }

    // optional int64 HashID = 3;
    if (has_hashid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hashid());
    }

    // optional .MsgPB.EMsgType reqType = 4;
    if (has_reqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reqtype());
    }

    // optional bytes ReqPB = 5;
    if (has_reqpb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqpb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBReq::MergeFrom(const MsgDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_routeid()) {
      set_routeid(from.routeid());
    }
    if (from.has_hashid()) {
      set_hashid(from.hashid());
    }
    if (from.has_reqtype()) {
      set_reqtype(from.reqtype());
    }
    if (from.has_reqpb()) {
      set_reqpb(from.reqpb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBReq::CopyFrom(const MsgDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBReq::IsInitialized() const {

  return true;
}

void MsgDBReq::Swap(MsgDBReq* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(routeid_, other->routeid_);
    std::swap(hashid_, other->hashid_);
    std::swap(reqtype_, other->reqtype_);
    std::swap(reqpb_, other->reqpb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBReq_descriptor_;
  metadata.reflection = MsgDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBRes::kMsgTypeFieldNumber;
const int MsgDBRes::kRouteIDFieldNumber;
const int MsgDBRes::kHashIDFieldNumber;
const int MsgDBRes::kResTypeFieldNumber;
const int MsgDBRes::kResPBFieldNumber;
#endif  // !_MSC_VER

MsgDBRes::MsgDBRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBRes)
}

void MsgDBRes::InitAsDefaultInstance() {
}

MsgDBRes::MsgDBRes(const MsgDBRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBRes)
}

void MsgDBRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 11025;
  routeid_ = 0;
  hashid_ = GOOGLE_LONGLONG(0);
  restype_ = 0;
  respb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBRes::~MsgDBRes() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBRes)
  SharedDtor();
}

void MsgDBRes::SharedDtor() {
  if (respb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete respb_;
  }
  if (this != default_instance_) {
  }
}

void MsgDBRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBRes_descriptor_;
}

const MsgDBRes& MsgDBRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

MsgDBRes* MsgDBRes::default_instance_ = NULL;

MsgDBRes* MsgDBRes::New() const {
  return new MsgDBRes;
}

void MsgDBRes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDBRes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(routeid_, hashid_);
    msgtype_ = 11025;
    restype_ = 0;
    if (has_respb()) {
      if (respb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        respb_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_RES];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RouteID;
        break;
      }

      // optional int32 RouteID = 2;
      case 2: {
        if (tag == 16) {
         parse_RouteID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &routeid_)));
          set_has_routeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HashID;
        break;
      }

      // optional int64 HashID = 3;
      case 3: {
        if (tag == 24) {
         parse_HashID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hashid_)));
          set_has_hashid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resType;
        break;
      }

      // optional .MsgPB.EMsgType resType = 4;
      case 4: {
        if (tag == 32) {
         parse_resType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_restype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ResPB;
        break;
      }

      // optional bytes ResPB = 5;
      case 5: {
        if (tag == 42) {
         parse_ResPB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_respb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBRes)
  return false;
#undef DO_
}

void MsgDBRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBRes)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_RES];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 RouteID = 2;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->routeid(), output);
  }

  // optional int64 HashID = 3;
  if (has_hashid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->hashid(), output);
  }

  // optional .MsgPB.EMsgType resType = 4;
  if (has_restype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->restype(), output);
  }

  // optional bytes ResPB = 5;
  if (has_respb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->respb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBRes)
}

::google::protobuf::uint8* MsgDBRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBRes)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_RES];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 RouteID = 2;
  if (has_routeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->routeid(), target);
  }

  // optional int64 HashID = 3;
  if (has_hashid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->hashid(), target);
  }

  // optional .MsgPB.EMsgType resType = 4;
  if (has_restype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->restype(), target);
  }

  // optional bytes ResPB = 5;
  if (has_respb()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->respb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBRes)
  return target;
}

int MsgDBRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_RES];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 RouteID = 2;
    if (has_routeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->routeid());
    }

    // optional int64 HashID = 3;
    if (has_hashid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hashid());
    }

    // optional .MsgPB.EMsgType resType = 4;
    if (has_restype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->restype());
    }

    // optional bytes ResPB = 5;
    if (has_respb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->respb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBRes::MergeFrom(const MsgDBRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_routeid()) {
      set_routeid(from.routeid());
    }
    if (from.has_hashid()) {
      set_hashid(from.hashid());
    }
    if (from.has_restype()) {
      set_restype(from.restype());
    }
    if (from.has_respb()) {
      set_respb(from.respb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBRes::CopyFrom(const MsgDBRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBRes::IsInitialized() const {

  return true;
}

void MsgDBRes::Swap(MsgDBRes* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(routeid_, other->routeid_);
    std::swap(hashid_, other->hashid_);
    std::swap(restype_, other->restype_);
    std::swap(respb_, other->respb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBRes_descriptor_;
  metadata.reflection = MsgDBRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBCommandReq::kMsgTypeFieldNumber;
const int MsgDBCommandReq::kRouteIDFieldNumber;
const int MsgDBCommandReq::kHashIDFieldNumber;
const int MsgDBCommandReq::kStrCommandNameFieldNumber;
const int MsgDBCommandReq::kStrAttachmentsDataFieldNumber;
const int MsgDBCommandReq::kStrCommandDataFieldNumber;
const int MsgDBCommandReq::kFingerprintFieldNumber;
const int MsgDBCommandReq::kIggidFieldNumber;
const int MsgDBCommandReq::kQueryContextDataFieldNumber;
#endif  // !_MSC_VER

MsgDBCommandReq::MsgDBCommandReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBCommandReq)
}

void MsgDBCommandReq::InitAsDefaultInstance() {
}

MsgDBCommandReq::MsgDBCommandReq(const MsgDBCommandReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBCommandReq)
}

void MsgDBCommandReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1050;
  routeid_ = 0;
  hashid_ = GOOGLE_LONGLONG(0);
  strcommandname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strattachmentsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strcommanddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fingerprint_ = GOOGLE_LONGLONG(0);
  iggid_ = GOOGLE_LONGLONG(0);
  query_context_data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBCommandReq::~MsgDBCommandReq() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBCommandReq)
  SharedDtor();
}

void MsgDBCommandReq::SharedDtor() {
  if (strcommandname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strcommandname_;
  }
  if (strattachmentsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strattachmentsdata_;
  }
  if (strcommanddata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strcommanddata_;
  }
  if (this != default_instance_) {
  }
}

void MsgDBCommandReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBCommandReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBCommandReq_descriptor_;
}

const MsgDBCommandReq& MsgDBCommandReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

MsgDBCommandReq* MsgDBCommandReq::default_instance_ = NULL;

MsgDBCommandReq* MsgDBCommandReq::New() const {
  return new MsgDBCommandReq;
}

void MsgDBCommandReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDBCommandReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(routeid_, hashid_);
    ZR_(fingerprint_, iggid_);
    msgtype_ = 1050;
    if (has_strcommandname()) {
      if (strcommandname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strcommandname_->clear();
      }
    }
    if (has_strattachmentsdata()) {
      if (strattachmentsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strattachmentsdata_->clear();
      }
    }
    if (has_strcommanddata()) {
      if (strcommanddata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strcommanddata_->clear();
      }
    }
  }
  query_context_data_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBCommandReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBCommandReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_COMMAND_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RouteID;
        break;
      }

      // optional int32 RouteID = 2;
      case 2: {
        if (tag == 16) {
         parse_RouteID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &routeid_)));
          set_has_routeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HashID;
        break;
      }

      // optional int64 HashID = 3;
      case 3: {
        if (tag == 24) {
         parse_HashID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hashid_)));
          set_has_hashid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_strCommandName;
        break;
      }

      // optional string strCommandName = 4;
      case 4: {
        if (tag == 34) {
         parse_strCommandName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcommandname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strcommandname().data(), this->strcommandname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strcommandname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_strAttachmentsData;
        break;
      }

      // optional bytes strAttachmentsData = 5;
      case 5: {
        if (tag == 42) {
         parse_strAttachmentsData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strattachmentsdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_strCommandData;
        break;
      }

      // optional bytes strCommandData = 6;
      case 6: {
        if (tag == 50) {
         parse_strCommandData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strcommanddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fingerprint;
        break;
      }

      // optional int64 fingerprint = 7;
      case 7: {
        if (tag == 56) {
         parse_fingerprint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fingerprint_)));
          set_has_fingerprint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 8;
      case 8: {
        if (tag == 64) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_query_context_data;
        break;
      }

      // optional int64 query_context_data = 9;
      case 9: {
        if (tag == 72) {
         parse_query_context_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &query_context_data_)));
          set_has_query_context_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBCommandReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBCommandReq)
  return false;
#undef DO_
}

void MsgDBCommandReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBCommandReq)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_COMMAND_REQ];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 RouteID = 2;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->routeid(), output);
  }

  // optional int64 HashID = 3;
  if (has_hashid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->hashid(), output);
  }

  // optional string strCommandName = 4;
  if (has_strcommandname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strcommandname().data(), this->strcommandname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strcommandname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->strcommandname(), output);
  }

  // optional bytes strAttachmentsData = 5;
  if (has_strattachmentsdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->strattachmentsdata(), output);
  }

  // optional bytes strCommandData = 6;
  if (has_strcommanddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->strcommanddata(), output);
  }

  // optional int64 fingerprint = 7;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->fingerprint(), output);
  }

  // optional int64 iggid = 8;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->iggid(), output);
  }

  // optional int64 query_context_data = 9;
  if (has_query_context_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->query_context_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBCommandReq)
}

::google::protobuf::uint8* MsgDBCommandReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBCommandReq)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_COMMAND_REQ];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 RouteID = 2;
  if (has_routeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->routeid(), target);
  }

  // optional int64 HashID = 3;
  if (has_hashid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->hashid(), target);
  }

  // optional string strCommandName = 4;
  if (has_strcommandname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strcommandname().data(), this->strcommandname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strcommandname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strcommandname(), target);
  }

  // optional bytes strAttachmentsData = 5;
  if (has_strattachmentsdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->strattachmentsdata(), target);
  }

  // optional bytes strCommandData = 6;
  if (has_strcommanddata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->strcommanddata(), target);
  }

  // optional int64 fingerprint = 7;
  if (has_fingerprint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->fingerprint(), target);
  }

  // optional int64 iggid = 8;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->iggid(), target);
  }

  // optional int64 query_context_data = 9;
  if (has_query_context_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->query_context_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBCommandReq)
  return target;
}

int MsgDBCommandReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_COMMAND_REQ];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 RouteID = 2;
    if (has_routeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->routeid());
    }

    // optional int64 HashID = 3;
    if (has_hashid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hashid());
    }

    // optional string strCommandName = 4;
    if (has_strcommandname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcommandname());
    }

    // optional bytes strAttachmentsData = 5;
    if (has_strattachmentsdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strattachmentsdata());
    }

    // optional bytes strCommandData = 6;
    if (has_strcommanddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strcommanddata());
    }

    // optional int64 fingerprint = 7;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fingerprint());
    }

    // optional int64 iggid = 8;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 query_context_data = 9;
    if (has_query_context_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->query_context_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBCommandReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBCommandReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBCommandReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBCommandReq::MergeFrom(const MsgDBCommandReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_routeid()) {
      set_routeid(from.routeid());
    }
    if (from.has_hashid()) {
      set_hashid(from.hashid());
    }
    if (from.has_strcommandname()) {
      set_strcommandname(from.strcommandname());
    }
    if (from.has_strattachmentsdata()) {
      set_strattachmentsdata(from.strattachmentsdata());
    }
    if (from.has_strcommanddata()) {
      set_strcommanddata(from.strcommanddata());
    }
    if (from.has_fingerprint()) {
      set_fingerprint(from.fingerprint());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_query_context_data()) {
      set_query_context_data(from.query_context_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBCommandReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBCommandReq::CopyFrom(const MsgDBCommandReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBCommandReq::IsInitialized() const {

  return true;
}

void MsgDBCommandReq::Swap(MsgDBCommandReq* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(routeid_, other->routeid_);
    std::swap(hashid_, other->hashid_);
    std::swap(strcommandname_, other->strcommandname_);
    std::swap(strattachmentsdata_, other->strattachmentsdata_);
    std::swap(strcommanddata_, other->strcommanddata_);
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(iggid_, other->iggid_);
    std::swap(query_context_data_, other->query_context_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBCommandReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBCommandReq_descriptor_;
  metadata.reflection = MsgDBCommandReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBCommandRes::kMsgTypeFieldNumber;
const int MsgDBCommandRes::kRouteIDFieldNumber;
const int MsgDBCommandRes::kHashIDFieldNumber;
const int MsgDBCommandRes::kIsTailFieldNumber;
const int MsgDBCommandRes::kStrCommandNameFieldNumber;
const int MsgDBCommandRes::kStrAttachmentsDataFieldNumber;
const int MsgDBCommandRes::kStrCommandDataFieldNumber;
const int MsgDBCommandRes::kFingerprintFieldNumber;
const int MsgDBCommandRes::kIggidFieldNumber;
const int MsgDBCommandRes::kQueryContextDataFieldNumber;
#endif  // !_MSC_VER

MsgDBCommandRes::MsgDBCommandRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBCommandRes)
}

void MsgDBCommandRes::InitAsDefaultInstance() {
}

MsgDBCommandRes::MsgDBCommandRes(const MsgDBCommandRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBCommandRes)
}

void MsgDBCommandRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1051;
  routeid_ = 0;
  hashid_ = GOOGLE_LONGLONG(0);
  istail_ = false;
  strcommandname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strattachmentsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fingerprint_ = GOOGLE_LONGLONG(0);
  iggid_ = GOOGLE_LONGLONG(0);
  query_context_data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBCommandRes::~MsgDBCommandRes() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBCommandRes)
  SharedDtor();
}

void MsgDBCommandRes::SharedDtor() {
  if (strcommandname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strcommandname_;
  }
  if (strattachmentsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strattachmentsdata_;
  }
  if (this != default_instance_) {
  }
}

void MsgDBCommandRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBCommandRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBCommandRes_descriptor_;
}

const MsgDBCommandRes& MsgDBCommandRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

MsgDBCommandRes* MsgDBCommandRes::default_instance_ = NULL;

MsgDBCommandRes* MsgDBCommandRes::New() const {
  return new MsgDBCommandRes;
}

void MsgDBCommandRes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDBCommandRes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(routeid_, hashid_);
    msgtype_ = 1051;
    istail_ = false;
    if (has_strcommandname()) {
      if (strcommandname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strcommandname_->clear();
      }
    }
    if (has_strattachmentsdata()) {
      if (strattachmentsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strattachmentsdata_->clear();
      }
    }
    fingerprint_ = GOOGLE_LONGLONG(0);
  }
  ZR_(iggid_, query_context_data_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  strcommanddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBCommandRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBCommandRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_COMMAND_RES];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RouteID;
        break;
      }

      // optional int32 RouteID = 2;
      case 2: {
        if (tag == 16) {
         parse_RouteID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &routeid_)));
          set_has_routeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HashID;
        break;
      }

      // optional int64 HashID = 3;
      case 3: {
        if (tag == 24) {
         parse_HashID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hashid_)));
          set_has_hashid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_IsTail;
        break;
      }

      // optional bool IsTail = 4;
      case 4: {
        if (tag == 32) {
         parse_IsTail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istail_)));
          set_has_istail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_strCommandName;
        break;
      }

      // optional string strCommandName = 5;
      case 5: {
        if (tag == 42) {
         parse_strCommandName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcommandname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strcommandname().data(), this->strcommandname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strcommandname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_strAttachmentsData;
        break;
      }

      // optional bytes strAttachmentsData = 6;
      case 6: {
        if (tag == 50) {
         parse_strAttachmentsData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strattachmentsdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_strCommandData;
        break;
      }

      // repeated bytes strCommandData = 7;
      case 7: {
        if (tag == 58) {
         parse_strCommandData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_strcommanddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_strCommandData;
        if (input->ExpectTag(64)) goto parse_fingerprint;
        break;
      }

      // optional int64 fingerprint = 8;
      case 8: {
        if (tag == 64) {
         parse_fingerprint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fingerprint_)));
          set_has_fingerprint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 9;
      case 9: {
        if (tag == 72) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_query_context_data;
        break;
      }

      // optional int64 query_context_data = 10;
      case 10: {
        if (tag == 80) {
         parse_query_context_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &query_context_data_)));
          set_has_query_context_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBCommandRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBCommandRes)
  return false;
#undef DO_
}

void MsgDBCommandRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBCommandRes)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_COMMAND_RES];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 RouteID = 2;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->routeid(), output);
  }

  // optional int64 HashID = 3;
  if (has_hashid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->hashid(), output);
  }

  // optional bool IsTail = 4;
  if (has_istail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->istail(), output);
  }

  // optional string strCommandName = 5;
  if (has_strcommandname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strcommandname().data(), this->strcommandname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strcommandname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->strcommandname(), output);
  }

  // optional bytes strAttachmentsData = 6;
  if (has_strattachmentsdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->strattachmentsdata(), output);
  }

  // repeated bytes strCommandData = 7;
  for (int i = 0; i < this->strcommanddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->strcommanddata(i), output);
  }

  // optional int64 fingerprint = 8;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->fingerprint(), output);
  }

  // optional int64 iggid = 9;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->iggid(), output);
  }

  // optional int64 query_context_data = 10;
  if (has_query_context_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->query_context_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBCommandRes)
}

::google::protobuf::uint8* MsgDBCommandRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBCommandRes)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_COMMAND_RES];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 RouteID = 2;
  if (has_routeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->routeid(), target);
  }

  // optional int64 HashID = 3;
  if (has_hashid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->hashid(), target);
  }

  // optional bool IsTail = 4;
  if (has_istail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->istail(), target);
  }

  // optional string strCommandName = 5;
  if (has_strcommandname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strcommandname().data(), this->strcommandname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strcommandname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strcommandname(), target);
  }

  // optional bytes strAttachmentsData = 6;
  if (has_strattachmentsdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->strattachmentsdata(), target);
  }

  // repeated bytes strCommandData = 7;
  for (int i = 0; i < this->strcommanddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->strcommanddata(i), target);
  }

  // optional int64 fingerprint = 8;
  if (has_fingerprint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->fingerprint(), target);
  }

  // optional int64 iggid = 9;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->iggid(), target);
  }

  // optional int64 query_context_data = 10;
  if (has_query_context_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->query_context_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBCommandRes)
  return target;
}

int MsgDBCommandRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CMD_DB_COMMAND_RES];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 RouteID = 2;
    if (has_routeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->routeid());
    }

    // optional int64 HashID = 3;
    if (has_hashid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hashid());
    }

    // optional bool IsTail = 4;
    if (has_istail()) {
      total_size += 1 + 1;
    }

    // optional string strCommandName = 5;
    if (has_strcommandname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcommandname());
    }

    // optional bytes strAttachmentsData = 6;
    if (has_strattachmentsdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strattachmentsdata());
    }

    // optional int64 fingerprint = 8;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fingerprint());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 iggid = 9;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 query_context_data = 10;
    if (has_query_context_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->query_context_data());
    }

  }
  // repeated bytes strCommandData = 7;
  total_size += 1 * this->strcommanddata_size();
  for (int i = 0; i < this->strcommanddata_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->strcommanddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBCommandRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBCommandRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBCommandRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBCommandRes::MergeFrom(const MsgDBCommandRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  strcommanddata_.MergeFrom(from.strcommanddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_routeid()) {
      set_routeid(from.routeid());
    }
    if (from.has_hashid()) {
      set_hashid(from.hashid());
    }
    if (from.has_istail()) {
      set_istail(from.istail());
    }
    if (from.has_strcommandname()) {
      set_strcommandname(from.strcommandname());
    }
    if (from.has_strattachmentsdata()) {
      set_strattachmentsdata(from.strattachmentsdata());
    }
    if (from.has_fingerprint()) {
      set_fingerprint(from.fingerprint());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_query_context_data()) {
      set_query_context_data(from.query_context_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBCommandRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBCommandRes::CopyFrom(const MsgDBCommandRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBCommandRes::IsInitialized() const {

  return true;
}

void MsgDBCommandRes::Swap(MsgDBCommandRes* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(routeid_, other->routeid_);
    std::swap(hashid_, other->hashid_);
    std::swap(istail_, other->istail_);
    std::swap(strcommandname_, other->strcommandname_);
    std::swap(strattachmentsdata_, other->strattachmentsdata_);
    strcommanddata_.Swap(&other->strcommanddata_);
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(iggid_, other->iggid_);
    std::swap(query_context_data_, other->query_context_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBCommandRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBCommandRes_descriptor_;
  metadata.reflection = MsgDBCommandRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBServerInfoGet_US2DS::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgDBServerInfoGet_US2DS::MsgDBServerInfoGet_US2DS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBServerInfoGet_US2DS)
}

void MsgDBServerInfoGet_US2DS::InitAsDefaultInstance() {
}

MsgDBServerInfoGet_US2DS::MsgDBServerInfoGet_US2DS(const MsgDBServerInfoGet_US2DS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBServerInfoGet_US2DS)
}

void MsgDBServerInfoGet_US2DS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 9200;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBServerInfoGet_US2DS::~MsgDBServerInfoGet_US2DS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBServerInfoGet_US2DS)
  SharedDtor();
}

void MsgDBServerInfoGet_US2DS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDBServerInfoGet_US2DS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBServerInfoGet_US2DS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBServerInfoGet_US2DS_descriptor_;
}

const MsgDBServerInfoGet_US2DS& MsgDBServerInfoGet_US2DS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

MsgDBServerInfoGet_US2DS* MsgDBServerInfoGet_US2DS::default_instance_ = NULL;

MsgDBServerInfoGet_US2DS* MsgDBServerInfoGet_US2DS::New() const {
  return new MsgDBServerInfoGet_US2DS;
}

void MsgDBServerInfoGet_US2DS::Clear() {
  msgtype_ = 9200;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBServerInfoGet_US2DS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBServerInfoGet_US2DS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_GET_US2DS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBServerInfoGet_US2DS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBServerInfoGet_US2DS)
  return false;
#undef DO_
}

void MsgDBServerInfoGet_US2DS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBServerInfoGet_US2DS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_GET_US2DS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBServerInfoGet_US2DS)
}

::google::protobuf::uint8* MsgDBServerInfoGet_US2DS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBServerInfoGet_US2DS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_GET_US2DS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBServerInfoGet_US2DS)
  return target;
}

int MsgDBServerInfoGet_US2DS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_GET_US2DS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBServerInfoGet_US2DS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBServerInfoGet_US2DS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBServerInfoGet_US2DS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBServerInfoGet_US2DS::MergeFrom(const MsgDBServerInfoGet_US2DS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBServerInfoGet_US2DS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBServerInfoGet_US2DS::CopyFrom(const MsgDBServerInfoGet_US2DS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBServerInfoGet_US2DS::IsInitialized() const {

  return true;
}

void MsgDBServerInfoGet_US2DS::Swap(MsgDBServerInfoGet_US2DS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBServerInfoGet_US2DS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBServerInfoGet_US2DS_descriptor_;
  metadata.reflection = MsgDBServerInfoGet_US2DS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBIGGINFO::kIggidFieldNumber;
const int DBIGGINFO::kNicknameFieldNumber;
const int DBIGGINFO::kFreezetimeFieldNumber;
const int DBIGGINFO::kFreezeintervalFieldNumber;
#endif  // !_MSC_VER

DBIGGINFO::DBIGGINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.DBIGGINFO)
}

void DBIGGINFO::InitAsDefaultInstance() {
}

DBIGGINFO::DBIGGINFO(const DBIGGINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.DBIGGINFO)
}

void DBIGGINFO::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freezetime_ = GOOGLE_LONGLONG(0);
  freezeinterval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBIGGINFO::~DBIGGINFO() {
  // @@protoc_insertion_point(destructor:MsgPB.DBIGGINFO)
  SharedDtor();
}

void DBIGGINFO::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void DBIGGINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBIGGINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBIGGINFO_descriptor_;
}

const DBIGGINFO& DBIGGINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

DBIGGINFO* DBIGGINFO::default_instance_ = NULL;

DBIGGINFO* DBIGGINFO::New() const {
  return new DBIGGINFO;
}

void DBIGGINFO::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBIGGINFO*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(freezetime_, freezeinterval_);
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBIGGINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.DBIGGINFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iggid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_freezetime;
        break;
      }

      // optional int64 freezetime = 3;
      case 3: {
        if (tag == 24) {
         parse_freezetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freezetime_)));
          set_has_freezetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_freezeinterval;
        break;
      }

      // optional int32 freezeinterval = 4;
      case 4: {
        if (tag == 32) {
         parse_freezeinterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freezeinterval_)));
          set_has_freezeinterval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.DBIGGINFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.DBIGGINFO)
  return false;
#undef DO_
}

void DBIGGINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.DBIGGINFO)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iggid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int64 freezetime = 3;
  if (has_freezetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->freezetime(), output);
  }

  // optional int32 freezeinterval = 4;
  if (has_freezeinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->freezeinterval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.DBIGGINFO)
}

::google::protobuf::uint8* DBIGGINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.DBIGGINFO)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iggid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int64 freezetime = 3;
  if (has_freezetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->freezetime(), target);
  }

  // optional int32 freezeinterval = 4;
  if (has_freezeinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->freezeinterval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.DBIGGINFO)
  return target;
}

int DBIGGINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iggid = 1;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int64 freezetime = 3;
    if (has_freezetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freezetime());
    }

    // optional int32 freezeinterval = 4;
    if (has_freezeinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freezeinterval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBIGGINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBIGGINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBIGGINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBIGGINFO::MergeFrom(const DBIGGINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_freezetime()) {
      set_freezetime(from.freezetime());
    }
    if (from.has_freezeinterval()) {
      set_freezeinterval(from.freezeinterval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBIGGINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBIGGINFO::CopyFrom(const DBIGGINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBIGGINFO::IsInitialized() const {

  return true;
}

void DBIGGINFO::Swap(DBIGGINFO* other) {
  if (other != this) {
    std::swap(iggid_, other->iggid_);
    std::swap(nickname_, other->nickname_);
    std::swap(freezetime_, other->freezetime_);
    std::swap(freezeinterval_, other->freezeinterval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBIGGINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBIGGINFO_descriptor_;
  metadata.reflection = DBIGGINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDBServerInfo::kDbkeyFieldNumber;
const int PBDBServerInfo::kDbserverIdFieldNumber;
const int PBDBServerInfo::kDbserverIpFieldNumber;
const int PBDBServerInfo::kDbserverPortFieldNumber;
const int PBDBServerInfo::kIsMainDbFieldNumber;
const int PBDBServerInfo::kIsCenterDbFieldNumber;
const int PBDBServerInfo::kDbFunctionFieldNumber;
const int PBDBServerInfo::kDbserverDomainNameFieldNumber;
const int PBDBServerInfo::kAreaIdFieldNumber;
#endif  // !_MSC_VER

PBDBServerInfo::PBDBServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.PBDBServerInfo)
}

void PBDBServerInfo::InitAsDefaultInstance() {
}

PBDBServerInfo::PBDBServerInfo(const PBDBServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.PBDBServerInfo)
}

void PBDBServerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbserver_id_ = 0;
  dbserver_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbserver_port_ = 0;
  is_main_db_ = 0;
  is_center_db_ = 0;
  dbserver_domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDBServerInfo::~PBDBServerInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.PBDBServerInfo)
  SharedDtor();
}

void PBDBServerInfo::SharedDtor() {
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbkey_;
  }
  if (dbserver_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbserver_ip_;
  }
  if (dbserver_domain_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbserver_domain_name_;
  }
  if (this != default_instance_) {
  }
}

void PBDBServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDBServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDBServerInfo_descriptor_;
}

const PBDBServerInfo& PBDBServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

PBDBServerInfo* PBDBServerInfo::default_instance_ = NULL;

PBDBServerInfo* PBDBServerInfo::New() const {
  return new PBDBServerInfo;
}

void PBDBServerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBDBServerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(dbserver_id_, is_center_db_);
    if (has_dbkey()) {
      if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbkey_->clear();
      }
    }
    if (has_dbserver_ip()) {
      if (dbserver_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbserver_ip_->clear();
      }
    }
    if (has_dbserver_domain_name()) {
      if (dbserver_domain_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbserver_domain_name_->clear();
      }
    }
  }
  area_id_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  db_function_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDBServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.PBDBServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dbkey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbkey().data(), this->dbkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dbserver_id;
        break;
      }

      // optional int32 dbserver_id = 2;
      case 2: {
        if (tag == 16) {
         parse_dbserver_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbserver_id_)));
          set_has_dbserver_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dbserver_ip;
        break;
      }

      // optional string dbserver_ip = 3;
      case 3: {
        if (tag == 26) {
         parse_dbserver_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbserver_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbserver_ip().data(), this->dbserver_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbserver_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dbserver_port;
        break;
      }

      // optional int32 dbserver_port = 4;
      case 4: {
        if (tag == 32) {
         parse_dbserver_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbserver_port_)));
          set_has_dbserver_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_main_db;
        break;
      }

      // optional int32 is_main_db = 5;
      case 5: {
        if (tag == 40) {
         parse_is_main_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_main_db_)));
          set_has_is_main_db();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_center_db;
        break;
      }

      // optional int32 is_center_db = 6;
      case 6: {
        if (tag == 48) {
         parse_is_center_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_center_db_)));
          set_has_is_center_db();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_db_function;
        break;
      }

      // repeated int32 db_function = 7;
      case 7: {
        if (tag == 56) {
         parse_db_function:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_db_function())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_db_function())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_db_function;
        if (input->ExpectTag(66)) goto parse_dbserver_domain_name;
        break;
      }

      // optional string dbserver_domain_name = 8;
      case 8: {
        if (tag == 66) {
         parse_dbserver_domain_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbserver_domain_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbserver_domain_name().data(), this->dbserver_domain_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbserver_domain_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_area_id;
        break;
      }

      // optional int32 area_id = 9;
      case 9: {
        if (tag == 72) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.PBDBServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.PBDBServerInfo)
  return false;
#undef DO_
}

void PBDBServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.PBDBServerInfo)
  // optional string dbkey = 1;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dbkey(), output);
  }

  // optional int32 dbserver_id = 2;
  if (has_dbserver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dbserver_id(), output);
  }

  // optional string dbserver_ip = 3;
  if (has_dbserver_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbserver_ip().data(), this->dbserver_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbserver_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dbserver_ip(), output);
  }

  // optional int32 dbserver_port = 4;
  if (has_dbserver_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dbserver_port(), output);
  }

  // optional int32 is_main_db = 5;
  if (has_is_main_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_main_db(), output);
  }

  // optional int32 is_center_db = 6;
  if (has_is_center_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_center_db(), output);
  }

  // repeated int32 db_function = 7;
  for (int i = 0; i < this->db_function_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->db_function(i), output);
  }

  // optional string dbserver_domain_name = 8;
  if (has_dbserver_domain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbserver_domain_name().data(), this->dbserver_domain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbserver_domain_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->dbserver_domain_name(), output);
  }

  // optional int32 area_id = 9;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->area_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.PBDBServerInfo)
}

::google::protobuf::uint8* PBDBServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.PBDBServerInfo)
  // optional string dbkey = 1;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dbkey(), target);
  }

  // optional int32 dbserver_id = 2;
  if (has_dbserver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dbserver_id(), target);
  }

  // optional string dbserver_ip = 3;
  if (has_dbserver_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbserver_ip().data(), this->dbserver_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbserver_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbserver_ip(), target);
  }

  // optional int32 dbserver_port = 4;
  if (has_dbserver_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dbserver_port(), target);
  }

  // optional int32 is_main_db = 5;
  if (has_is_main_db()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_main_db(), target);
  }

  // optional int32 is_center_db = 6;
  if (has_is_center_db()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_center_db(), target);
  }

  // repeated int32 db_function = 7;
  for (int i = 0; i < this->db_function_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->db_function(i), target);
  }

  // optional string dbserver_domain_name = 8;
  if (has_dbserver_domain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbserver_domain_name().data(), this->dbserver_domain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbserver_domain_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->dbserver_domain_name(), target);
  }

  // optional int32 area_id = 9;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->area_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.PBDBServerInfo)
  return target;
}

int PBDBServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dbkey = 1;
    if (has_dbkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbkey());
    }

    // optional int32 dbserver_id = 2;
    if (has_dbserver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dbserver_id());
    }

    // optional string dbserver_ip = 3;
    if (has_dbserver_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbserver_ip());
    }

    // optional int32 dbserver_port = 4;
    if (has_dbserver_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dbserver_port());
    }

    // optional int32 is_main_db = 5;
    if (has_is_main_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_main_db());
    }

    // optional int32 is_center_db = 6;
    if (has_is_center_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_center_db());
    }

    // optional string dbserver_domain_name = 8;
    if (has_dbserver_domain_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbserver_domain_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 area_id = 9;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

  }
  // repeated int32 db_function = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->db_function_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->db_function(i));
    }
    total_size += 1 * this->db_function_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDBServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDBServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDBServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDBServerInfo::MergeFrom(const PBDBServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  db_function_.MergeFrom(from.db_function_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbkey()) {
      set_dbkey(from.dbkey());
    }
    if (from.has_dbserver_id()) {
      set_dbserver_id(from.dbserver_id());
    }
    if (from.has_dbserver_ip()) {
      set_dbserver_ip(from.dbserver_ip());
    }
    if (from.has_dbserver_port()) {
      set_dbserver_port(from.dbserver_port());
    }
    if (from.has_is_main_db()) {
      set_is_main_db(from.is_main_db());
    }
    if (from.has_is_center_db()) {
      set_is_center_db(from.is_center_db());
    }
    if (from.has_dbserver_domain_name()) {
      set_dbserver_domain_name(from.dbserver_domain_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDBServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDBServerInfo::CopyFrom(const PBDBServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDBServerInfo::IsInitialized() const {

  return true;
}

void PBDBServerInfo::Swap(PBDBServerInfo* other) {
  if (other != this) {
    std::swap(dbkey_, other->dbkey_);
    std::swap(dbserver_id_, other->dbserver_id_);
    std::swap(dbserver_ip_, other->dbserver_ip_);
    std::swap(dbserver_port_, other->dbserver_port_);
    std::swap(is_main_db_, other->is_main_db_);
    std::swap(is_center_db_, other->is_center_db_);
    db_function_.Swap(&other->db_function_);
    std::swap(dbserver_domain_name_, other->dbserver_domain_name_);
    std::swap(area_id_, other->area_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDBServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDBServerInfo_descriptor_;
  metadata.reflection = PBDBServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBServerInfoKeyAllUser_DS2US::kMsgTypeFieldNumber;
const int MsgDBServerInfoKeyAllUser_DS2US::kDbserverInfoFieldNumber;
const int MsgDBServerInfoKeyAllUser_DS2US::kBfirstFieldNumber;
const int MsgDBServerInfoKeyAllUser_DS2US::kBlastFieldNumber;
const int MsgDBServerInfoKeyAllUser_DS2US::kIgginfoArrayFieldNumber;
#endif  // !_MSC_VER

MsgDBServerInfoKeyAllUser_DS2US::MsgDBServerInfoKeyAllUser_DS2US()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBServerInfoKeyAllUser_DS2US)
}

void MsgDBServerInfoKeyAllUser_DS2US::InitAsDefaultInstance() {
  dbserver_info_ = const_cast< ::MsgPB::PBDBServerInfo*>(&::MsgPB::PBDBServerInfo::default_instance());
}

MsgDBServerInfoKeyAllUser_DS2US::MsgDBServerInfoKeyAllUser_DS2US(const MsgDBServerInfoKeyAllUser_DS2US& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBServerInfoKeyAllUser_DS2US)
}

void MsgDBServerInfoKeyAllUser_DS2US::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 9201;
  dbserver_info_ = NULL;
  bfirst_ = 0;
  blast_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBServerInfoKeyAllUser_DS2US::~MsgDBServerInfoKeyAllUser_DS2US() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBServerInfoKeyAllUser_DS2US)
  SharedDtor();
}

void MsgDBServerInfoKeyAllUser_DS2US::SharedDtor() {
  if (this != default_instance_) {
    delete dbserver_info_;
  }
}

void MsgDBServerInfoKeyAllUser_DS2US::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBServerInfoKeyAllUser_DS2US::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBServerInfoKeyAllUser_DS2US_descriptor_;
}

const MsgDBServerInfoKeyAllUser_DS2US& MsgDBServerInfoKeyAllUser_DS2US::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

MsgDBServerInfoKeyAllUser_DS2US* MsgDBServerInfoKeyAllUser_DS2US::default_instance_ = NULL;

MsgDBServerInfoKeyAllUser_DS2US* MsgDBServerInfoKeyAllUser_DS2US::New() const {
  return new MsgDBServerInfoKeyAllUser_DS2US;
}

void MsgDBServerInfoKeyAllUser_DS2US::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 9201;
    if (has_dbserver_info()) {
      if (dbserver_info_ != NULL) dbserver_info_->::MsgPB::PBDBServerInfo::Clear();
    }
    bfirst_ = 0;
    blast_ = 0;
  }
  igginfo_array_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBServerInfoKeyAllUser_DS2US::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBServerInfoKeyAllUser_DS2US)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_KEY_ALL_USER_DS2US];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dbserver_info;
        break;
      }

      // optional .MsgPB.PBDBServerInfo dbserver_info = 2;
      case 2: {
        if (tag == 18) {
         parse_dbserver_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dbserver_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bfirst;
        break;
      }

      // optional int32 bfirst = 3;
      case 3: {
        if (tag == 24) {
         parse_bfirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bfirst_)));
          set_has_bfirst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blast;
        break;
      }

      // optional int32 blast = 4;
      case 4: {
        if (tag == 32) {
         parse_blast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blast_)));
          set_has_blast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_igginfo_array;
        break;
      }

      // repeated .MsgPB.DBIGGINFO igginfo_array = 5;
      case 5: {
        if (tag == 42) {
         parse_igginfo_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_igginfo_array()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_igginfo_array;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBServerInfoKeyAllUser_DS2US)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBServerInfoKeyAllUser_DS2US)
  return false;
#undef DO_
}

void MsgDBServerInfoKeyAllUser_DS2US::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBServerInfoKeyAllUser_DS2US)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_KEY_ALL_USER_DS2US];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.PBDBServerInfo dbserver_info = 2;
  if (has_dbserver_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dbserver_info(), output);
  }

  // optional int32 bfirst = 3;
  if (has_bfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bfirst(), output);
  }

  // optional int32 blast = 4;
  if (has_blast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->blast(), output);
  }

  // repeated .MsgPB.DBIGGINFO igginfo_array = 5;
  for (int i = 0; i < this->igginfo_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->igginfo_array(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBServerInfoKeyAllUser_DS2US)
}

::google::protobuf::uint8* MsgDBServerInfoKeyAllUser_DS2US::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBServerInfoKeyAllUser_DS2US)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_KEY_ALL_USER_DS2US];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.PBDBServerInfo dbserver_info = 2;
  if (has_dbserver_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dbserver_info(), target);
  }

  // optional int32 bfirst = 3;
  if (has_bfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bfirst(), target);
  }

  // optional int32 blast = 4;
  if (has_blast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->blast(), target);
  }

  // repeated .MsgPB.DBIGGINFO igginfo_array = 5;
  for (int i = 0; i < this->igginfo_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->igginfo_array(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBServerInfoKeyAllUser_DS2US)
  return target;
}

int MsgDBServerInfoKeyAllUser_DS2US::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_KEY_ALL_USER_DS2US];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.PBDBServerInfo dbserver_info = 2;
    if (has_dbserver_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dbserver_info());
    }

    // optional int32 bfirst = 3;
    if (has_bfirst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bfirst());
    }

    // optional int32 blast = 4;
    if (has_blast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blast());
    }

  }
  // repeated .MsgPB.DBIGGINFO igginfo_array = 5;
  total_size += 1 * this->igginfo_array_size();
  for (int i = 0; i < this->igginfo_array_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->igginfo_array(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBServerInfoKeyAllUser_DS2US::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBServerInfoKeyAllUser_DS2US* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBServerInfoKeyAllUser_DS2US*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBServerInfoKeyAllUser_DS2US::MergeFrom(const MsgDBServerInfoKeyAllUser_DS2US& from) {
  GOOGLE_CHECK_NE(&from, this);
  igginfo_array_.MergeFrom(from.igginfo_array_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_dbserver_info()) {
      mutable_dbserver_info()->::MsgPB::PBDBServerInfo::MergeFrom(from.dbserver_info());
    }
    if (from.has_bfirst()) {
      set_bfirst(from.bfirst());
    }
    if (from.has_blast()) {
      set_blast(from.blast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBServerInfoKeyAllUser_DS2US::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBServerInfoKeyAllUser_DS2US::CopyFrom(const MsgDBServerInfoKeyAllUser_DS2US& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBServerInfoKeyAllUser_DS2US::IsInitialized() const {

  return true;
}

void MsgDBServerInfoKeyAllUser_DS2US::Swap(MsgDBServerInfoKeyAllUser_DS2US* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(dbserver_info_, other->dbserver_info_);
    std::swap(bfirst_, other->bfirst_);
    std::swap(blast_, other->blast_);
    igginfo_array_.Swap(&other->igginfo_array_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBServerInfoKeyAllUser_DS2US::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBServerInfoKeyAllUser_DS2US_descriptor_;
  metadata.reflection = MsgDBServerInfoKeyAllUser_DS2US_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBServerAllInfo::kMsgTypeFieldNumber;
const int MsgDBServerAllInfo::kDbServerInfoArrayFieldNumber;
#endif  // !_MSC_VER

MsgDBServerAllInfo::MsgDBServerAllInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBServerAllInfo)
}

void MsgDBServerAllInfo::InitAsDefaultInstance() {
}

MsgDBServerAllInfo::MsgDBServerAllInfo(const MsgDBServerAllInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBServerAllInfo)
}

void MsgDBServerAllInfo::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 9203;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBServerAllInfo::~MsgDBServerAllInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBServerAllInfo)
  SharedDtor();
}

void MsgDBServerAllInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDBServerAllInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBServerAllInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBServerAllInfo_descriptor_;
}

const MsgDBServerAllInfo& MsgDBServerAllInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

MsgDBServerAllInfo* MsgDBServerAllInfo::default_instance_ = NULL;

MsgDBServerAllInfo* MsgDBServerAllInfo::New() const {
  return new MsgDBServerAllInfo;
}

void MsgDBServerAllInfo::Clear() {
  msgtype_ = 9203;
  db_server_info_array_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBServerAllInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBServerAllInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_ALL_INFO];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db_server_info_array;
        break;
      }

      // repeated .MsgPB.PBDBServerInfo db_server_info_array = 2;
      case 2: {
        if (tag == 18) {
         parse_db_server_info_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_db_server_info_array()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db_server_info_array;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBServerAllInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBServerAllInfo)
  return false;
#undef DO_
}

void MsgDBServerAllInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBServerAllInfo)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_ALL_INFO];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // repeated .MsgPB.PBDBServerInfo db_server_info_array = 2;
  for (int i = 0; i < this->db_server_info_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->db_server_info_array(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBServerAllInfo)
}

::google::protobuf::uint8* MsgDBServerAllInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBServerAllInfo)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_ALL_INFO];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // repeated .MsgPB.PBDBServerInfo db_server_info_array = 2;
  for (int i = 0; i < this->db_server_info_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->db_server_info_array(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBServerAllInfo)
  return target;
}

int MsgDBServerAllInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_ALL_INFO];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  // repeated .MsgPB.PBDBServerInfo db_server_info_array = 2;
  total_size += 1 * this->db_server_info_array_size();
  for (int i = 0; i < this->db_server_info_array_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->db_server_info_array(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBServerAllInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBServerAllInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBServerAllInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBServerAllInfo::MergeFrom(const MsgDBServerAllInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  db_server_info_array_.MergeFrom(from.db_server_info_array_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBServerAllInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBServerAllInfo::CopyFrom(const MsgDBServerAllInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBServerAllInfo::IsInitialized() const {

  return true;
}

void MsgDBServerAllInfo::Swap(MsgDBServerAllInfo* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    db_server_info_array_.Swap(&other->db_server_info_array_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBServerAllInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBServerAllInfo_descriptor_;
  metadata.reflection = MsgDBServerAllInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBServerInfoAllUser_US2S::kMsgTypeFieldNumber;
const int MsgDBServerInfoAllUser_US2S::kDbkeyFieldNumber;
const int MsgDBServerInfoAllUser_US2S::kUserCountFieldNumber;
const int MsgDBServerInfoAllUser_US2S::kBfirstFieldNumber;
const int MsgDBServerInfoAllUser_US2S::kBlastFieldNumber;
const int MsgDBServerInfoAllUser_US2S::kIgginfoArrayFieldNumber;
#endif  // !_MSC_VER

MsgDBServerInfoAllUser_US2S::MsgDBServerInfoAllUser_US2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBServerInfoAllUser_US2S)
}

void MsgDBServerInfoAllUser_US2S::InitAsDefaultInstance() {
}

MsgDBServerInfoAllUser_US2S::MsgDBServerInfoAllUser_US2S(const MsgDBServerInfoAllUser_US2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBServerInfoAllUser_US2S)
}

void MsgDBServerInfoAllUser_US2S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 9205;
  dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_count_ = 0;
  bfirst_ = 0;
  blast_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBServerInfoAllUser_US2S::~MsgDBServerInfoAllUser_US2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBServerInfoAllUser_US2S)
  SharedDtor();
}

void MsgDBServerInfoAllUser_US2S::SharedDtor() {
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbkey_;
  }
  if (this != default_instance_) {
  }
}

void MsgDBServerInfoAllUser_US2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBServerInfoAllUser_US2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBServerInfoAllUser_US2S_descriptor_;
}

const MsgDBServerInfoAllUser_US2S& MsgDBServerInfoAllUser_US2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

MsgDBServerInfoAllUser_US2S* MsgDBServerInfoAllUser_US2S::default_instance_ = NULL;

MsgDBServerInfoAllUser_US2S* MsgDBServerInfoAllUser_US2S::New() const {
  return new MsgDBServerInfoAllUser_US2S;
}

void MsgDBServerInfoAllUser_US2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDBServerInfoAllUser_US2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_count_, blast_);
    msgtype_ = 9205;
    if (has_dbkey()) {
      if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbkey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  igginfo_array_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBServerInfoAllUser_US2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBServerInfoAllUser_US2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_ALL_USER_US2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dbkey;
        break;
      }

      // optional string dbkey = 2;
      case 2: {
        if (tag == 18) {
         parse_dbkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbkey().data(), this->dbkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_count;
        break;
      }

      // optional int32 user_count = 3;
      case 3: {
        if (tag == 24) {
         parse_user_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_count_)));
          set_has_user_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bfirst;
        break;
      }

      // optional int32 bfirst = 4;
      case 4: {
        if (tag == 32) {
         parse_bfirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bfirst_)));
          set_has_bfirst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_blast;
        break;
      }

      // optional int32 blast = 5;
      case 5: {
        if (tag == 40) {
         parse_blast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blast_)));
          set_has_blast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_igginfo_array;
        break;
      }

      // repeated .MsgPB.DBIGGINFO igginfo_array = 6;
      case 6: {
        if (tag == 50) {
         parse_igginfo_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_igginfo_array()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_igginfo_array;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBServerInfoAllUser_US2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBServerInfoAllUser_US2S)
  return false;
#undef DO_
}

void MsgDBServerInfoAllUser_US2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBServerInfoAllUser_US2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_ALL_USER_US2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional string dbkey = 2;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dbkey(), output);
  }

  // optional int32 user_count = 3;
  if (has_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_count(), output);
  }

  // optional int32 bfirst = 4;
  if (has_bfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bfirst(), output);
  }

  // optional int32 blast = 5;
  if (has_blast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->blast(), output);
  }

  // repeated .MsgPB.DBIGGINFO igginfo_array = 6;
  for (int i = 0; i < this->igginfo_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->igginfo_array(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBServerInfoAllUser_US2S)
}

::google::protobuf::uint8* MsgDBServerInfoAllUser_US2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBServerInfoAllUser_US2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_ALL_USER_US2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional string dbkey = 2;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dbkey(), target);
  }

  // optional int32 user_count = 3;
  if (has_user_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_count(), target);
  }

  // optional int32 bfirst = 4;
  if (has_bfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bfirst(), target);
  }

  // optional int32 blast = 5;
  if (has_blast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->blast(), target);
  }

  // repeated .MsgPB.DBIGGINFO igginfo_array = 6;
  for (int i = 0; i < this->igginfo_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->igginfo_array(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBServerInfoAllUser_US2S)
  return target;
}

int MsgDBServerInfoAllUser_US2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_INFO_ALL_USER_US2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional string dbkey = 2;
    if (has_dbkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbkey());
    }

    // optional int32 user_count = 3;
    if (has_user_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_count());
    }

    // optional int32 bfirst = 4;
    if (has_bfirst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bfirst());
    }

    // optional int32 blast = 5;
    if (has_blast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blast());
    }

  }
  // repeated .MsgPB.DBIGGINFO igginfo_array = 6;
  total_size += 1 * this->igginfo_array_size();
  for (int i = 0; i < this->igginfo_array_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->igginfo_array(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBServerInfoAllUser_US2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBServerInfoAllUser_US2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBServerInfoAllUser_US2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBServerInfoAllUser_US2S::MergeFrom(const MsgDBServerInfoAllUser_US2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  igginfo_array_.MergeFrom(from.igginfo_array_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_dbkey()) {
      set_dbkey(from.dbkey());
    }
    if (from.has_user_count()) {
      set_user_count(from.user_count());
    }
    if (from.has_bfirst()) {
      set_bfirst(from.bfirst());
    }
    if (from.has_blast()) {
      set_blast(from.blast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBServerInfoAllUser_US2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBServerInfoAllUser_US2S::CopyFrom(const MsgDBServerInfoAllUser_US2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBServerInfoAllUser_US2S::IsInitialized() const {

  return true;
}

void MsgDBServerInfoAllUser_US2S::Swap(MsgDBServerInfoAllUser_US2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(dbkey_, other->dbkey_);
    std::swap(user_count_, other->user_count_);
    std::swap(bfirst_, other->bfirst_);
    std::swap(blast_, other->blast_);
    igginfo_array_.Swap(&other->igginfo_array_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBServerInfoAllUser_US2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBServerInfoAllUser_US2S_descriptor_;
  metadata.reflection = MsgDBServerInfoAllUser_US2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::kMsgTypeFieldNumber;
const int MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::kIggidFieldNumber;
const int MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::kDbkeyFieldNumber;
#endif  // !_MSC_VER

MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR)
}

void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::InitAsDefaultInstance() {
}

MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR(const MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR)
}

void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 9206;
  iggid_ = GOOGLE_LONGLONG(0);
  dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::~MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR)
  SharedDtor();
}

void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::SharedDtor() {
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbkey_;
  }
  if (this != default_instance_) {
  }
}

void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR_descriptor_;
}

const MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR& MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR* MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::default_instance_ = NULL;

MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR* MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::New() const {
  return new MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR;
}

void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 9206;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_dbkey()) {
      if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_DBMGR_PLAYER_LOGIN_SUCCESS_MGR2DBMGR];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dbkey;
        break;
      }

      // optional string dbkey = 3;
      case 3: {
        if (tag == 26) {
         parse_dbkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbkey().data(), this->dbkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR)
  return false;
#undef DO_
}

void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_DBMGR_PLAYER_LOGIN_SUCCESS_MGR2DBMGR];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional string dbkey = 3;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dbkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR)
}

::google::protobuf::uint8* MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_DBMGR_PLAYER_LOGIN_SUCCESS_MGR2DBMGR];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional string dbkey = 3;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR)
  return target;
}

int MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DBSERVER_DBMGR_PLAYER_LOGIN_SUCCESS_MGR2DBMGR];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string dbkey = 3;
    if (has_dbkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::MergeFrom(const MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_dbkey()) {
      set_dbkey(from.dbkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::CopyFrom(const MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::IsInitialized() const {

  return true;
}

void MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::Swap(MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(dbkey_, other->dbkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR_descriptor_;
  metadata.reflection = MsgDBServerDBMgrPlayerLoginSuccess_MGR2DBMGR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBPlayerRenameReq_S2S::kMsgTypeFieldNumber;
const int MsgDBPlayerRenameReq_S2S::kIggidFieldNumber;
const int MsgDBPlayerRenameReq_S2S::kNameFieldNumber;
#endif  // !_MSC_VER

MsgDBPlayerRenameReq_S2S::MsgDBPlayerRenameReq_S2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBPlayerRenameReq_S2S)
}

void MsgDBPlayerRenameReq_S2S::InitAsDefaultInstance() {
}

MsgDBPlayerRenameReq_S2S::MsgDBPlayerRenameReq_S2S(const MsgDBPlayerRenameReq_S2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBPlayerRenameReq_S2S)
}

void MsgDBPlayerRenameReq_S2S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 9208;
  iggid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBPlayerRenameReq_S2S::~MsgDBPlayerRenameReq_S2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBPlayerRenameReq_S2S)
  SharedDtor();
}

void MsgDBPlayerRenameReq_S2S::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgDBPlayerRenameReq_S2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBPlayerRenameReq_S2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBPlayerRenameReq_S2S_descriptor_;
}

const MsgDBPlayerRenameReq_S2S& MsgDBPlayerRenameReq_S2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

MsgDBPlayerRenameReq_S2S* MsgDBPlayerRenameReq_S2S::default_instance_ = NULL;

MsgDBPlayerRenameReq_S2S* MsgDBPlayerRenameReq_S2S::New() const {
  return new MsgDBPlayerRenameReq_S2S;
}

void MsgDBPlayerRenameReq_S2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 9208;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBPlayerRenameReq_S2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBPlayerRenameReq_S2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_RENAME_REQ_S2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBPlayerRenameReq_S2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBPlayerRenameReq_S2S)
  return false;
#undef DO_
}

void MsgDBPlayerRenameReq_S2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBPlayerRenameReq_S2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_RENAME_REQ_S2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBPlayerRenameReq_S2S)
}

::google::protobuf::uint8* MsgDBPlayerRenameReq_S2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBPlayerRenameReq_S2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_RENAME_REQ_S2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBPlayerRenameReq_S2S)
  return target;
}

int MsgDBPlayerRenameReq_S2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_RENAME_REQ_S2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBPlayerRenameReq_S2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBPlayerRenameReq_S2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBPlayerRenameReq_S2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBPlayerRenameReq_S2S::MergeFrom(const MsgDBPlayerRenameReq_S2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBPlayerRenameReq_S2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBPlayerRenameReq_S2S::CopyFrom(const MsgDBPlayerRenameReq_S2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBPlayerRenameReq_S2S::IsInitialized() const {

  return true;
}

void MsgDBPlayerRenameReq_S2S::Swap(MsgDBPlayerRenameReq_S2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBPlayerRenameReq_S2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBPlayerRenameReq_S2S_descriptor_;
  metadata.reflection = MsgDBPlayerRenameReq_S2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBPlayerRenameRes_S2S::kMsgTypeFieldNumber;
const int MsgDBPlayerRenameRes_S2S::kIggidFieldNumber;
const int MsgDBPlayerRenameRes_S2S::kNameFieldNumber;
const int MsgDBPlayerRenameRes_S2S::kResFieldNumber;
#endif  // !_MSC_VER

MsgDBPlayerRenameRes_S2S::MsgDBPlayerRenameRes_S2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBPlayerRenameRes_S2S)
}

void MsgDBPlayerRenameRes_S2S::InitAsDefaultInstance() {
}

MsgDBPlayerRenameRes_S2S::MsgDBPlayerRenameRes_S2S(const MsgDBPlayerRenameRes_S2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBPlayerRenameRes_S2S)
}

void MsgDBPlayerRenameRes_S2S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 9209;
  iggid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBPlayerRenameRes_S2S::~MsgDBPlayerRenameRes_S2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBPlayerRenameRes_S2S)
  SharedDtor();
}

void MsgDBPlayerRenameRes_S2S::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgDBPlayerRenameRes_S2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBPlayerRenameRes_S2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBPlayerRenameRes_S2S_descriptor_;
}

const MsgDBPlayerRenameRes_S2S& MsgDBPlayerRenameRes_S2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

MsgDBPlayerRenameRes_S2S* MsgDBPlayerRenameRes_S2S::default_instance_ = NULL;

MsgDBPlayerRenameRes_S2S* MsgDBPlayerRenameRes_S2S::New() const {
  return new MsgDBPlayerRenameRes_S2S;
}

void MsgDBPlayerRenameRes_S2S::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 9209;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBPlayerRenameRes_S2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBPlayerRenameRes_S2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_RENAME_RES_S2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_res;
        break;
      }

      // optional .MsgPB.EN_DB_RESULT res = 4;
      case 4: {
        if (tag == 32) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EN_DB_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::EN_DB_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBPlayerRenameRes_S2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBPlayerRenameRes_S2S)
  return false;
#undef DO_
}

void MsgDBPlayerRenameRes_S2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBPlayerRenameRes_S2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_RENAME_RES_S2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .MsgPB.EN_DB_RESULT res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBPlayerRenameRes_S2S)
}

::google::protobuf::uint8* MsgDBPlayerRenameRes_S2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBPlayerRenameRes_S2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_RENAME_RES_S2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .MsgPB.EN_DB_RESULT res = 4;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBPlayerRenameRes_S2S)
  return target;
}

int MsgDBPlayerRenameRes_S2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_RENAME_RES_S2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .MsgPB.EN_DB_RESULT res = 4;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBPlayerRenameRes_S2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBPlayerRenameRes_S2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBPlayerRenameRes_S2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBPlayerRenameRes_S2S::MergeFrom(const MsgDBPlayerRenameRes_S2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBPlayerRenameRes_S2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBPlayerRenameRes_S2S::CopyFrom(const MsgDBPlayerRenameRes_S2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBPlayerRenameRes_S2S::IsInitialized() const {

  return true;
}

void MsgDBPlayerRenameRes_S2S::Swap(MsgDBPlayerRenameRes_S2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(name_, other->name_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBPlayerRenameRes_S2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBPlayerRenameRes_S2S_descriptor_;
  metadata.reflection = MsgDBPlayerRenameRes_S2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBPlayerQueryByNameReq_S2S::kMsgTypeFieldNumber;
const int MsgDBPlayerQueryByNameReq_S2S::kIggidFieldNumber;
const int MsgDBPlayerQueryByNameReq_S2S::kNameFieldNumber;
const int MsgDBPlayerQueryByNameReq_S2S::kQueryContexDataFieldNumber;
#endif  // !_MSC_VER

MsgDBPlayerQueryByNameReq_S2S::MsgDBPlayerQueryByNameReq_S2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBPlayerQueryByNameReq_S2S)
}

void MsgDBPlayerQueryByNameReq_S2S::InitAsDefaultInstance() {
}

MsgDBPlayerQueryByNameReq_S2S::MsgDBPlayerQueryByNameReq_S2S(const MsgDBPlayerQueryByNameReq_S2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBPlayerQueryByNameReq_S2S)
}

void MsgDBPlayerQueryByNameReq_S2S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 9210;
  iggid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_contex_data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBPlayerQueryByNameReq_S2S::~MsgDBPlayerQueryByNameReq_S2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBPlayerQueryByNameReq_S2S)
  SharedDtor();
}

void MsgDBPlayerQueryByNameReq_S2S::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgDBPlayerQueryByNameReq_S2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBPlayerQueryByNameReq_S2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBPlayerQueryByNameReq_S2S_descriptor_;
}

const MsgDBPlayerQueryByNameReq_S2S& MsgDBPlayerQueryByNameReq_S2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

MsgDBPlayerQueryByNameReq_S2S* MsgDBPlayerQueryByNameReq_S2S::default_instance_ = NULL;

MsgDBPlayerQueryByNameReq_S2S* MsgDBPlayerQueryByNameReq_S2S::New() const {
  return new MsgDBPlayerQueryByNameReq_S2S;
}

void MsgDBPlayerQueryByNameReq_S2S::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 9210;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    query_contex_data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBPlayerQueryByNameReq_S2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBPlayerQueryByNameReq_S2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_QUERY_BY_NAME_REQ_S2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_query_contex_data;
        break;
      }

      // optional int64 query_contex_data = 4;
      case 4: {
        if (tag == 32) {
         parse_query_contex_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &query_contex_data_)));
          set_has_query_contex_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBPlayerQueryByNameReq_S2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBPlayerQueryByNameReq_S2S)
  return false;
#undef DO_
}

void MsgDBPlayerQueryByNameReq_S2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBPlayerQueryByNameReq_S2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_QUERY_BY_NAME_REQ_S2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int64 query_contex_data = 4;
  if (has_query_contex_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->query_contex_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBPlayerQueryByNameReq_S2S)
}

::google::protobuf::uint8* MsgDBPlayerQueryByNameReq_S2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBPlayerQueryByNameReq_S2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_QUERY_BY_NAME_REQ_S2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int64 query_contex_data = 4;
  if (has_query_contex_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->query_contex_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBPlayerQueryByNameReq_S2S)
  return target;
}

int MsgDBPlayerQueryByNameReq_S2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_QUERY_BY_NAME_REQ_S2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 query_contex_data = 4;
    if (has_query_contex_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->query_contex_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBPlayerQueryByNameReq_S2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBPlayerQueryByNameReq_S2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBPlayerQueryByNameReq_S2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBPlayerQueryByNameReq_S2S::MergeFrom(const MsgDBPlayerQueryByNameReq_S2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_query_contex_data()) {
      set_query_contex_data(from.query_contex_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBPlayerQueryByNameReq_S2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBPlayerQueryByNameReq_S2S::CopyFrom(const MsgDBPlayerQueryByNameReq_S2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBPlayerQueryByNameReq_S2S::IsInitialized() const {

  return true;
}

void MsgDBPlayerQueryByNameReq_S2S::Swap(MsgDBPlayerQueryByNameReq_S2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(name_, other->name_);
    std::swap(query_contex_data_, other->query_contex_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBPlayerQueryByNameReq_S2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBPlayerQueryByNameReq_S2S_descriptor_;
  metadata.reflection = MsgDBPlayerQueryByNameReq_S2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBPlayerQueryByNameRes_S2S::kMsgTypeFieldNumber;
const int MsgDBPlayerQueryByNameRes_S2S::kIggidFieldNumber;
const int MsgDBPlayerQueryByNameRes_S2S::kNameFieldNumber;
const int MsgDBPlayerQueryByNameRes_S2S::kQueryContexDataFieldNumber;
const int MsgDBPlayerQueryByNameRes_S2S::kResFieldNumber;
#endif  // !_MSC_VER

MsgDBPlayerQueryByNameRes_S2S::MsgDBPlayerQueryByNameRes_S2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBPlayerQueryByNameRes_S2S)
}

void MsgDBPlayerQueryByNameRes_S2S::InitAsDefaultInstance() {
}

MsgDBPlayerQueryByNameRes_S2S::MsgDBPlayerQueryByNameRes_S2S(const MsgDBPlayerQueryByNameRes_S2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBPlayerQueryByNameRes_S2S)
}

void MsgDBPlayerQueryByNameRes_S2S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 9211;
  iggid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_contex_data_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBPlayerQueryByNameRes_S2S::~MsgDBPlayerQueryByNameRes_S2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBPlayerQueryByNameRes_S2S)
  SharedDtor();
}

void MsgDBPlayerQueryByNameRes_S2S::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgDBPlayerQueryByNameRes_S2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBPlayerQueryByNameRes_S2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBPlayerQueryByNameRes_S2S_descriptor_;
}

const MsgDBPlayerQueryByNameRes_S2S& MsgDBPlayerQueryByNameRes_S2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDB_2eproto();
  return *default_instance_;
}

MsgDBPlayerQueryByNameRes_S2S* MsgDBPlayerQueryByNameRes_S2S::default_instance_ = NULL;

MsgDBPlayerQueryByNameRes_S2S* MsgDBPlayerQueryByNameRes_S2S::New() const {
  return new MsgDBPlayerQueryByNameRes_S2S;
}

void MsgDBPlayerQueryByNameRes_S2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDBPlayerQueryByNameRes_S2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(res_, query_contex_data_);
    msgtype_ = 9211;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBPlayerQueryByNameRes_S2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBPlayerQueryByNameRes_S2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_QUERY_BY_NAME_RES_S2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_query_contex_data;
        break;
      }

      // optional int64 query_contex_data = 4;
      case 4: {
        if (tag == 32) {
         parse_query_contex_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &query_contex_data_)));
          set_has_query_contex_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_res;
        break;
      }

      // optional .MsgPB.EN_DB_RESULT res = 5;
      case 5: {
        if (tag == 40) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EN_DB_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::EN_DB_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBPlayerQueryByNameRes_S2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBPlayerQueryByNameRes_S2S)
  return false;
#undef DO_
}

void MsgDBPlayerQueryByNameRes_S2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBPlayerQueryByNameRes_S2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_QUERY_BY_NAME_RES_S2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int64 query_contex_data = 4;
  if (has_query_contex_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->query_contex_data(), output);
  }

  // optional .MsgPB.EN_DB_RESULT res = 5;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBPlayerQueryByNameRes_S2S)
}

::google::protobuf::uint8* MsgDBPlayerQueryByNameRes_S2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBPlayerQueryByNameRes_S2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_QUERY_BY_NAME_RES_S2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int64 query_contex_data = 4;
  if (has_query_contex_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->query_contex_data(), target);
  }

  // optional .MsgPB.EN_DB_RESULT res = 5;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBPlayerQueryByNameRes_S2S)
  return target;
}

int MsgDBPlayerQueryByNameRes_S2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_PLAYER_QUERY_BY_NAME_RES_S2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 query_contex_data = 4;
    if (has_query_contex_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->query_contex_data());
    }

    // optional .MsgPB.EN_DB_RESULT res = 5;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBPlayerQueryByNameRes_S2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBPlayerQueryByNameRes_S2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBPlayerQueryByNameRes_S2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBPlayerQueryByNameRes_S2S::MergeFrom(const MsgDBPlayerQueryByNameRes_S2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_query_contex_data()) {
      set_query_contex_data(from.query_contex_data());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBPlayerQueryByNameRes_S2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBPlayerQueryByNameRes_S2S::CopyFrom(const MsgDBPlayerQueryByNameRes_S2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBPlayerQueryByNameRes_S2S::IsInitialized() const {

  return true;
}

void MsgDBPlayerQueryByNameRes_S2S::Swap(MsgDBPlayerQueryByNameRes_S2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(name_, other->name_);
    std::swap(query_contex_data_, other->query_contex_data_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBPlayerQueryByNameRes_S2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBPlayerQueryByNameRes_S2S_descriptor_;
  metadata.reflection = MsgDBPlayerQueryByNameRes_S2S_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
