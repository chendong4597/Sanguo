// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgTeam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgTeam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgTeamCreateDungeonRecruitment_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamCreateDungeonRecruitment_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamCreateDungeonRecruitmentRs_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamCreateDungeonRecruitmentRs_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamStartDungeon_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamStartDungeon_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamStartDungeonRs_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamStartDungeonRs_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamRequestJoinTeam_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamRequestJoinTeam_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamRequestJoinTeamRs_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamRequestJoinTeamRs_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamRequestLeaveTeam_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamRequestLeaveTeam_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamRequestLeaveTeamRs_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamRequestLeaveTeamRs_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamSetLeader_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamSetLeader_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamSetLeaderRs_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamSetLeaderRs_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamRemovePlayer_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamRemovePlayer_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamRemovePlayerRs_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamRemovePlayerRs_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamAutoJoinTeam_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamAutoJoinTeam_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamAutoJoinTeamRs_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamAutoJoinTeamRs_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamNotifyTeamDisbanded_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamNotifyTeamDisbanded_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamDungeonReadyToGo_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamDungeonReadyToGo_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamInfo_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamInfo_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamMember_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamMember_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamInvite_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamInvite_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamInviteRs_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamInviteRs_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamInviteNotify_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamInviteNotify_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamAccept_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamAccept_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamAcceptRs_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamAcceptRs_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamSelectDungeon_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamSelectDungeon_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamSelectDungeonRs_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamSelectDungeonRs_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamError_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamMapInfoSync_MS2MC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamMapInfoSync_MS2MC_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamCheckItemCount_MC2MS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamCheckItemCount_MC2MS_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamIteamCount_MC2MS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamIteamCount_MC2MS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamSetOpenJoin_C2MC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamSetOpenJoin_C2MC_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamRemovePlayerNotify_MC2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamRemovePlayerNotify_MC2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamAutoJoinCancel_C2MC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamAutoJoinCancel_C2MC_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamAutoJoinCancelRes_MC2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamAutoJoinCancelRes_MC2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamRefuseInvite_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamRefuseInvite_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamRefuseInvite_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamRefuseInvite_S2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_DUNGEON_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_TEAM_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CREATE_TEAM_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_START_DUNGEON_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JOIN_TEAM_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LEAVE_TEAM_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SET_TEAMLEADER_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REMOVE_TEAMMEMBER_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AUTO_JOINTEAM_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_DISBANDED_REASON_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_INVITE_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_ACCEPT_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_SELECT_DUNGEON_RESULT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgTeam_2eproto() {
  protobuf_AddDesc_MsgTeam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgTeam.proto");
  GOOGLE_CHECK(file != NULL);
  MsgTeamCreateDungeonRecruitment_C2S_descriptor_ = file->message_type(0);
  static const int MsgTeamCreateDungeonRecruitment_C2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreateDungeonRecruitment_C2S, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreateDungeonRecruitment_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreateDungeonRecruitment_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreateDungeonRecruitment_C2S, mapdataid_),
  };
  MsgTeamCreateDungeonRecruitment_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamCreateDungeonRecruitment_C2S_descriptor_,
      MsgTeamCreateDungeonRecruitment_C2S::default_instance_,
      MsgTeamCreateDungeonRecruitment_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreateDungeonRecruitment_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreateDungeonRecruitment_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamCreateDungeonRecruitment_C2S));
  MsgTeamCreateDungeonRecruitmentRs_S2C_descriptor_ = file->message_type(1);
  static const int MsgTeamCreateDungeonRecruitmentRs_S2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreateDungeonRecruitmentRs_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreateDungeonRecruitmentRs_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreateDungeonRecruitmentRs_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreateDungeonRecruitmentRs_S2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreateDungeonRecruitmentRs_S2C, teamid_),
  };
  MsgTeamCreateDungeonRecruitmentRs_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamCreateDungeonRecruitmentRs_S2C_descriptor_,
      MsgTeamCreateDungeonRecruitmentRs_S2C::default_instance_,
      MsgTeamCreateDungeonRecruitmentRs_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreateDungeonRecruitmentRs_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreateDungeonRecruitmentRs_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamCreateDungeonRecruitmentRs_S2C));
  MsgTeamStartDungeon_C2S_descriptor_ = file->message_type(2);
  static const int MsgTeamStartDungeon_C2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamStartDungeon_C2S, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamStartDungeon_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamStartDungeon_C2S, iggid_),
  };
  MsgTeamStartDungeon_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamStartDungeon_C2S_descriptor_,
      MsgTeamStartDungeon_C2S::default_instance_,
      MsgTeamStartDungeon_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamStartDungeon_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamStartDungeon_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamStartDungeon_C2S));
  MsgTeamStartDungeonRs_S2C_descriptor_ = file->message_type(3);
  static const int MsgTeamStartDungeonRs_S2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamStartDungeonRs_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamStartDungeonRs_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamStartDungeonRs_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamStartDungeonRs_S2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamStartDungeonRs_S2C, err_mem_iggid_),
  };
  MsgTeamStartDungeonRs_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamStartDungeonRs_S2C_descriptor_,
      MsgTeamStartDungeonRs_S2C::default_instance_,
      MsgTeamStartDungeonRs_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamStartDungeonRs_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamStartDungeonRs_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamStartDungeonRs_S2C));
  MsgTeamRequestJoinTeam_C2S_descriptor_ = file->message_type(4);
  static const int MsgTeamRequestJoinTeam_C2S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestJoinTeam_C2S, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestJoinTeam_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestJoinTeam_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestJoinTeam_C2S, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestJoinTeam_C2S, mapdataid_),
  };
  MsgTeamRequestJoinTeam_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamRequestJoinTeam_C2S_descriptor_,
      MsgTeamRequestJoinTeam_C2S::default_instance_,
      MsgTeamRequestJoinTeam_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestJoinTeam_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestJoinTeam_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamRequestJoinTeam_C2S));
  MsgTeamRequestJoinTeamRs_S2C_descriptor_ = file->message_type(5);
  static const int MsgTeamRequestJoinTeamRs_S2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestJoinTeamRs_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestJoinTeamRs_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestJoinTeamRs_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestJoinTeamRs_S2C, result_),
  };
  MsgTeamRequestJoinTeamRs_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamRequestJoinTeamRs_S2C_descriptor_,
      MsgTeamRequestJoinTeamRs_S2C::default_instance_,
      MsgTeamRequestJoinTeamRs_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestJoinTeamRs_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestJoinTeamRs_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamRequestJoinTeamRs_S2C));
  MsgTeamRequestLeaveTeam_C2S_descriptor_ = file->message_type(6);
  static const int MsgTeamRequestLeaveTeam_C2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestLeaveTeam_C2S, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestLeaveTeam_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestLeaveTeam_C2S, iggid_),
  };
  MsgTeamRequestLeaveTeam_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamRequestLeaveTeam_C2S_descriptor_,
      MsgTeamRequestLeaveTeam_C2S::default_instance_,
      MsgTeamRequestLeaveTeam_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestLeaveTeam_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestLeaveTeam_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamRequestLeaveTeam_C2S));
  MsgTeamRequestLeaveTeamRs_S2C_descriptor_ = file->message_type(7);
  static const int MsgTeamRequestLeaveTeamRs_S2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestLeaveTeamRs_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestLeaveTeamRs_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestLeaveTeamRs_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestLeaveTeamRs_S2C, result_),
  };
  MsgTeamRequestLeaveTeamRs_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamRequestLeaveTeamRs_S2C_descriptor_,
      MsgTeamRequestLeaveTeamRs_S2C::default_instance_,
      MsgTeamRequestLeaveTeamRs_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestLeaveTeamRs_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRequestLeaveTeamRs_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamRequestLeaveTeamRs_S2C));
  MsgTeamSetLeader_C2S_descriptor_ = file->message_type(8);
  static const int MsgTeamSetLeader_C2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetLeader_C2S, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetLeader_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetLeader_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetLeader_C2S, new_leader_iggid_),
  };
  MsgTeamSetLeader_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamSetLeader_C2S_descriptor_,
      MsgTeamSetLeader_C2S::default_instance_,
      MsgTeamSetLeader_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetLeader_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetLeader_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamSetLeader_C2S));
  MsgTeamSetLeaderRs_S2C_descriptor_ = file->message_type(9);
  static const int MsgTeamSetLeaderRs_S2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetLeaderRs_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetLeaderRs_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetLeaderRs_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetLeaderRs_S2C, result_),
  };
  MsgTeamSetLeaderRs_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamSetLeaderRs_S2C_descriptor_,
      MsgTeamSetLeaderRs_S2C::default_instance_,
      MsgTeamSetLeaderRs_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetLeaderRs_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetLeaderRs_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamSetLeaderRs_S2C));
  MsgTeamRemovePlayer_C2S_descriptor_ = file->message_type(10);
  static const int MsgTeamRemovePlayer_C2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayer_C2S, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayer_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayer_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayer_C2S, member_iggid_),
  };
  MsgTeamRemovePlayer_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamRemovePlayer_C2S_descriptor_,
      MsgTeamRemovePlayer_C2S::default_instance_,
      MsgTeamRemovePlayer_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayer_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayer_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamRemovePlayer_C2S));
  MsgTeamRemovePlayerRs_S2C_descriptor_ = file->message_type(11);
  static const int MsgTeamRemovePlayerRs_S2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayerRs_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayerRs_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayerRs_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayerRs_S2C, result_),
  };
  MsgTeamRemovePlayerRs_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamRemovePlayerRs_S2C_descriptor_,
      MsgTeamRemovePlayerRs_S2C::default_instance_,
      MsgTeamRemovePlayerRs_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayerRs_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayerRs_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamRemovePlayerRs_S2C));
  MsgTeamAutoJoinTeam_C2S_descriptor_ = file->message_type(12);
  static const int MsgTeamAutoJoinTeam_C2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinTeam_C2S, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinTeam_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinTeam_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinTeam_C2S, mapdataid_),
  };
  MsgTeamAutoJoinTeam_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamAutoJoinTeam_C2S_descriptor_,
      MsgTeamAutoJoinTeam_C2S::default_instance_,
      MsgTeamAutoJoinTeam_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinTeam_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinTeam_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamAutoJoinTeam_C2S));
  MsgTeamAutoJoinTeamRs_S2C_descriptor_ = file->message_type(13);
  static const int MsgTeamAutoJoinTeamRs_S2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinTeamRs_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinTeamRs_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinTeamRs_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinTeamRs_S2C, result_),
  };
  MsgTeamAutoJoinTeamRs_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamAutoJoinTeamRs_S2C_descriptor_,
      MsgTeamAutoJoinTeamRs_S2C::default_instance_,
      MsgTeamAutoJoinTeamRs_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinTeamRs_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinTeamRs_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamAutoJoinTeamRs_S2C));
  MsgTeamNotifyTeamDisbanded_S2C_descriptor_ = file->message_type(14);
  static const int MsgTeamNotifyTeamDisbanded_S2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamNotifyTeamDisbanded_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamNotifyTeamDisbanded_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamNotifyTeamDisbanded_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamNotifyTeamDisbanded_S2C, reson_),
  };
  MsgTeamNotifyTeamDisbanded_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamNotifyTeamDisbanded_S2C_descriptor_,
      MsgTeamNotifyTeamDisbanded_S2C::default_instance_,
      MsgTeamNotifyTeamDisbanded_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamNotifyTeamDisbanded_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamNotifyTeamDisbanded_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamNotifyTeamDisbanded_S2C));
  MsgTeamDungeonReadyToGo_S2C_descriptor_ = file->message_type(15);
  static const int MsgTeamDungeonReadyToGo_S2C_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamDungeonReadyToGo_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamDungeonReadyToGo_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamDungeonReadyToGo_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamDungeonReadyToGo_S2C, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamDungeonReadyToGo_S2C, mapdataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamDungeonReadyToGo_S2C, countdown_),
  };
  MsgTeamDungeonReadyToGo_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamDungeonReadyToGo_S2C_descriptor_,
      MsgTeamDungeonReadyToGo_S2C::default_instance_,
      MsgTeamDungeonReadyToGo_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamDungeonReadyToGo_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamDungeonReadyToGo_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamDungeonReadyToGo_S2C));
  MsgTeamInfo_S2C_descriptor_ = file->message_type(16);
  static const int MsgTeamInfo_S2C_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInfo_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInfo_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInfo_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInfo_S2C, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInfo_S2C, mapdataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInfo_S2C, leaderiggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInfo_S2C, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInfo_S2C, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInfo_S2C, teamchatjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInfo_S2C, open_join_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInfo_S2C, team_status_),
  };
  MsgTeamInfo_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamInfo_S2C_descriptor_,
      MsgTeamInfo_S2C::default_instance_,
      MsgTeamInfo_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInfo_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInfo_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamInfo_S2C));
  MsgTeamPlayerInfo_descriptor_ = file->message_type(17);
  static const int MsgTeamPlayerInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamPlayerInfo, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamPlayerInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamPlayerInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamPlayerInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamPlayerInfo, skincolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamPlayerInfo, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamPlayerInfo, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamPlayerInfo, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamPlayerInfo, pos_),
  };
  MsgTeamPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamPlayerInfo_descriptor_,
      MsgTeamPlayerInfo::default_instance_,
      MsgTeamPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamPlayerInfo));
  MsgTeamMember_S2C_descriptor_ = file->message_type(18);
  static const int MsgTeamMember_S2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamMember_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamMember_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamMember_S2C, playerinfos_),
  };
  MsgTeamMember_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamMember_S2C_descriptor_,
      MsgTeamMember_S2C::default_instance_,
      MsgTeamMember_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamMember_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamMember_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamMember_S2C));
  MsgTeamInvite_C2S_descriptor_ = file->message_type(19);
  static const int MsgTeamInvite_C2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInvite_C2S, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInvite_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInvite_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInvite_C2S, target_iggids_),
  };
  MsgTeamInvite_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamInvite_C2S_descriptor_,
      MsgTeamInvite_C2S::default_instance_,
      MsgTeamInvite_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInvite_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInvite_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamInvite_C2S));
  MsgTeamInviteRs_S2C_descriptor_ = file->message_type(20);
  static const int MsgTeamInviteRs_S2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteRs_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteRs_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteRs_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteRs_S2C, result_),
  };
  MsgTeamInviteRs_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamInviteRs_S2C_descriptor_,
      MsgTeamInviteRs_S2C::default_instance_,
      MsgTeamInviteRs_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteRs_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteRs_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamInviteRs_S2C));
  MsgTeamInviteNotify_S2C_descriptor_ = file->message_type(21);
  static const int MsgTeamInviteNotify_S2C_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteNotify_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteNotify_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteNotify_S2C, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteNotify_S2C, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteNotify_S2C, mapdataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteNotify_S2C, gender_),
  };
  MsgTeamInviteNotify_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamInviteNotify_S2C_descriptor_,
      MsgTeamInviteNotify_S2C::default_instance_,
      MsgTeamInviteNotify_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteNotify_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamInviteNotify_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamInviteNotify_S2C));
  MsgTeamAccept_C2S_descriptor_ = file->message_type(22);
  static const int MsgTeamAccept_C2S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAccept_C2S, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAccept_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAccept_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAccept_C2S, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAccept_C2S, mapdataid_),
  };
  MsgTeamAccept_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamAccept_C2S_descriptor_,
      MsgTeamAccept_C2S::default_instance_,
      MsgTeamAccept_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAccept_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAccept_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamAccept_C2S));
  MsgTeamAcceptRs_S2C_descriptor_ = file->message_type(23);
  static const int MsgTeamAcceptRs_S2C_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAcceptRs_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAcceptRs_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAcceptRs_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAcceptRs_S2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAcceptRs_S2C, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAcceptRs_S2C, mapdataid_),
  };
  MsgTeamAcceptRs_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamAcceptRs_S2C_descriptor_,
      MsgTeamAcceptRs_S2C::default_instance_,
      MsgTeamAcceptRs_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAcceptRs_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAcceptRs_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamAcceptRs_S2C));
  MsgTeamSelectDungeon_C2S_descriptor_ = file->message_type(24);
  static const int MsgTeamSelectDungeon_C2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSelectDungeon_C2S, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSelectDungeon_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSelectDungeon_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSelectDungeon_C2S, mapdataid_),
  };
  MsgTeamSelectDungeon_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamSelectDungeon_C2S_descriptor_,
      MsgTeamSelectDungeon_C2S::default_instance_,
      MsgTeamSelectDungeon_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSelectDungeon_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSelectDungeon_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamSelectDungeon_C2S));
  MsgTeamSelectDungeonRs_S2C_descriptor_ = file->message_type(25);
  static const int MsgTeamSelectDungeonRs_S2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSelectDungeonRs_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSelectDungeonRs_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSelectDungeonRs_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSelectDungeonRs_S2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSelectDungeonRs_S2C, err_mem_iggid_),
  };
  MsgTeamSelectDungeonRs_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamSelectDungeonRs_S2C_descriptor_,
      MsgTeamSelectDungeonRs_S2C::default_instance_,
      MsgTeamSelectDungeonRs_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSelectDungeonRs_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSelectDungeonRs_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamSelectDungeonRs_S2C));
  MsgTeamError_descriptor_ = file->message_type(26);
  static const int MsgTeamError_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamError, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamError, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamError, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamError, res_),
  };
  MsgTeamError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamError_descriptor_,
      MsgTeamError::default_instance_,
      MsgTeamError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamError));
  MsgTeamMapInfoSync_MS2MC_descriptor_ = file->message_type(27);
  static const int MsgTeamMapInfoSync_MS2MC_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamMapInfoSync_MS2MC, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamMapInfoSync_MS2MC, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamMapInfoSync_MS2MC, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamMapInfoSync_MS2MC, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamMapInfoSync_MS2MC, mapuuid_),
  };
  MsgTeamMapInfoSync_MS2MC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamMapInfoSync_MS2MC_descriptor_,
      MsgTeamMapInfoSync_MS2MC::default_instance_,
      MsgTeamMapInfoSync_MS2MC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamMapInfoSync_MS2MC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamMapInfoSync_MS2MC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamMapInfoSync_MS2MC));
  MsgTeamCheckItemCount_MC2MS_descriptor_ = file->message_type(28);
  static const int MsgTeamCheckItemCount_MC2MS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCheckItemCount_MC2MS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCheckItemCount_MC2MS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCheckItemCount_MC2MS, item_dataid_),
  };
  MsgTeamCheckItemCount_MC2MS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamCheckItemCount_MC2MS_descriptor_,
      MsgTeamCheckItemCount_MC2MS::default_instance_,
      MsgTeamCheckItemCount_MC2MS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCheckItemCount_MC2MS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCheckItemCount_MC2MS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamCheckItemCount_MC2MS));
  ItemInfo_descriptor_ = file->message_type(29);
  static const int ItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, item_dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, item_count_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  MsgTeamIteamCount_MC2MS_descriptor_ = file->message_type(30);
  static const int MsgTeamIteamCount_MC2MS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamIteamCount_MC2MS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamIteamCount_MC2MS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamIteamCount_MC2MS, item_info_),
  };
  MsgTeamIteamCount_MC2MS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamIteamCount_MC2MS_descriptor_,
      MsgTeamIteamCount_MC2MS::default_instance_,
      MsgTeamIteamCount_MC2MS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamIteamCount_MC2MS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamIteamCount_MC2MS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamIteamCount_MC2MS));
  MsgTeamSetOpenJoin_C2MC_descriptor_ = file->message_type(31);
  static const int MsgTeamSetOpenJoin_C2MC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetOpenJoin_C2MC, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetOpenJoin_C2MC, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetOpenJoin_C2MC, open_join_),
  };
  MsgTeamSetOpenJoin_C2MC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamSetOpenJoin_C2MC_descriptor_,
      MsgTeamSetOpenJoin_C2MC::default_instance_,
      MsgTeamSetOpenJoin_C2MC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetOpenJoin_C2MC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamSetOpenJoin_C2MC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamSetOpenJoin_C2MC));
  MsgTeamRemovePlayerNotify_MC2C_descriptor_ = file->message_type(32);
  static const int MsgTeamRemovePlayerNotify_MC2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayerNotify_MC2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayerNotify_MC2C, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayerNotify_MC2C, remove_iggid_),
  };
  MsgTeamRemovePlayerNotify_MC2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamRemovePlayerNotify_MC2C_descriptor_,
      MsgTeamRemovePlayerNotify_MC2C::default_instance_,
      MsgTeamRemovePlayerNotify_MC2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayerNotify_MC2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRemovePlayerNotify_MC2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamRemovePlayerNotify_MC2C));
  MsgTeamAutoJoinCancel_C2MC_descriptor_ = file->message_type(33);
  static const int MsgTeamAutoJoinCancel_C2MC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinCancel_C2MC, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinCancel_C2MC, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinCancel_C2MC, serialid_),
  };
  MsgTeamAutoJoinCancel_C2MC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamAutoJoinCancel_C2MC_descriptor_,
      MsgTeamAutoJoinCancel_C2MC::default_instance_,
      MsgTeamAutoJoinCancel_C2MC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinCancel_C2MC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinCancel_C2MC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamAutoJoinCancel_C2MC));
  MsgTeamAutoJoinCancelRes_MC2C_descriptor_ = file->message_type(34);
  static const int MsgTeamAutoJoinCancelRes_MC2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinCancelRes_MC2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinCancelRes_MC2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinCancelRes_MC2C, res_),
  };
  MsgTeamAutoJoinCancelRes_MC2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamAutoJoinCancelRes_MC2C_descriptor_,
      MsgTeamAutoJoinCancelRes_MC2C::default_instance_,
      MsgTeamAutoJoinCancelRes_MC2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinCancelRes_MC2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamAutoJoinCancelRes_MC2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamAutoJoinCancelRes_MC2C));
  MsgTeamRefuseInvite_C2S_descriptor_ = file->message_type(35);
  static const int MsgTeamRefuseInvite_C2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRefuseInvite_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRefuseInvite_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRefuseInvite_C2S, teamid_),
  };
  MsgTeamRefuseInvite_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamRefuseInvite_C2S_descriptor_,
      MsgTeamRefuseInvite_C2S::default_instance_,
      MsgTeamRefuseInvite_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRefuseInvite_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRefuseInvite_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamRefuseInvite_C2S));
  MsgTeamRefuseInvite_S2C_descriptor_ = file->message_type(36);
  static const int MsgTeamRefuseInvite_S2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRefuseInvite_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRefuseInvite_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRefuseInvite_S2C, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRefuseInvite_S2C, iggid_refuse_),
  };
  MsgTeamRefuseInvite_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamRefuseInvite_S2C_descriptor_,
      MsgTeamRefuseInvite_S2C::default_instance_,
      MsgTeamRefuseInvite_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRefuseInvite_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamRefuseInvite_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamRefuseInvite_S2C));
  TEAM_DUNGEON_RESULT_descriptor_ = file->enum_type(0);
  PB_TEAM_STATUS_descriptor_ = file->enum_type(1);
  CREATE_TEAM_RESULT_descriptor_ = file->enum_type(2);
  TEAM_START_DUNGEON_RESULT_descriptor_ = file->enum_type(3);
  JOIN_TEAM_RESULT_descriptor_ = file->enum_type(4);
  LEAVE_TEAM_RESULT_descriptor_ = file->enum_type(5);
  SET_TEAMLEADER_RESULT_descriptor_ = file->enum_type(6);
  REMOVE_TEAMMEMBER_RESULT_descriptor_ = file->enum_type(7);
  AUTO_JOINTEAM_RESULT_descriptor_ = file->enum_type(8);
  TEAM_DISBANDED_REASON_descriptor_ = file->enum_type(9);
  TEAM_INVITE_RESULT_descriptor_ = file->enum_type(10);
  TEAM_ACCEPT_RESULT_descriptor_ = file->enum_type(11);
  TEAM_SELECT_DUNGEON_RESULT_descriptor_ = file->enum_type(12);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgTeam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamCreateDungeonRecruitment_C2S_descriptor_, &MsgTeamCreateDungeonRecruitment_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamCreateDungeonRecruitmentRs_S2C_descriptor_, &MsgTeamCreateDungeonRecruitmentRs_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamStartDungeon_C2S_descriptor_, &MsgTeamStartDungeon_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamStartDungeonRs_S2C_descriptor_, &MsgTeamStartDungeonRs_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamRequestJoinTeam_C2S_descriptor_, &MsgTeamRequestJoinTeam_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamRequestJoinTeamRs_S2C_descriptor_, &MsgTeamRequestJoinTeamRs_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamRequestLeaveTeam_C2S_descriptor_, &MsgTeamRequestLeaveTeam_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamRequestLeaveTeamRs_S2C_descriptor_, &MsgTeamRequestLeaveTeamRs_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamSetLeader_C2S_descriptor_, &MsgTeamSetLeader_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamSetLeaderRs_S2C_descriptor_, &MsgTeamSetLeaderRs_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamRemovePlayer_C2S_descriptor_, &MsgTeamRemovePlayer_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamRemovePlayerRs_S2C_descriptor_, &MsgTeamRemovePlayerRs_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamAutoJoinTeam_C2S_descriptor_, &MsgTeamAutoJoinTeam_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamAutoJoinTeamRs_S2C_descriptor_, &MsgTeamAutoJoinTeamRs_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamNotifyTeamDisbanded_S2C_descriptor_, &MsgTeamNotifyTeamDisbanded_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamDungeonReadyToGo_S2C_descriptor_, &MsgTeamDungeonReadyToGo_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamInfo_S2C_descriptor_, &MsgTeamInfo_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamPlayerInfo_descriptor_, &MsgTeamPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamMember_S2C_descriptor_, &MsgTeamMember_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamInvite_C2S_descriptor_, &MsgTeamInvite_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamInviteRs_S2C_descriptor_, &MsgTeamInviteRs_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamInviteNotify_S2C_descriptor_, &MsgTeamInviteNotify_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamAccept_C2S_descriptor_, &MsgTeamAccept_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamAcceptRs_S2C_descriptor_, &MsgTeamAcceptRs_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamSelectDungeon_C2S_descriptor_, &MsgTeamSelectDungeon_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamSelectDungeonRs_S2C_descriptor_, &MsgTeamSelectDungeonRs_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamError_descriptor_, &MsgTeamError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamMapInfoSync_MS2MC_descriptor_, &MsgTeamMapInfoSync_MS2MC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamCheckItemCount_MC2MS_descriptor_, &MsgTeamCheckItemCount_MC2MS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamIteamCount_MC2MS_descriptor_, &MsgTeamIteamCount_MC2MS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamSetOpenJoin_C2MC_descriptor_, &MsgTeamSetOpenJoin_C2MC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamRemovePlayerNotify_MC2C_descriptor_, &MsgTeamRemovePlayerNotify_MC2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamAutoJoinCancel_C2MC_descriptor_, &MsgTeamAutoJoinCancel_C2MC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamAutoJoinCancelRes_MC2C_descriptor_, &MsgTeamAutoJoinCancelRes_MC2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamRefuseInvite_C2S_descriptor_, &MsgTeamRefuseInvite_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamRefuseInvite_S2C_descriptor_, &MsgTeamRefuseInvite_S2C::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgTeam_2eproto() {
  delete MsgTeamCreateDungeonRecruitment_C2S::default_instance_;
  delete MsgTeamCreateDungeonRecruitment_C2S_reflection_;
  delete MsgTeamCreateDungeonRecruitmentRs_S2C::default_instance_;
  delete MsgTeamCreateDungeonRecruitmentRs_S2C_reflection_;
  delete MsgTeamStartDungeon_C2S::default_instance_;
  delete MsgTeamStartDungeon_C2S_reflection_;
  delete MsgTeamStartDungeonRs_S2C::default_instance_;
  delete MsgTeamStartDungeonRs_S2C_reflection_;
  delete MsgTeamRequestJoinTeam_C2S::default_instance_;
  delete MsgTeamRequestJoinTeam_C2S_reflection_;
  delete MsgTeamRequestJoinTeamRs_S2C::default_instance_;
  delete MsgTeamRequestJoinTeamRs_S2C_reflection_;
  delete MsgTeamRequestLeaveTeam_C2S::default_instance_;
  delete MsgTeamRequestLeaveTeam_C2S_reflection_;
  delete MsgTeamRequestLeaveTeamRs_S2C::default_instance_;
  delete MsgTeamRequestLeaveTeamRs_S2C_reflection_;
  delete MsgTeamSetLeader_C2S::default_instance_;
  delete MsgTeamSetLeader_C2S_reflection_;
  delete MsgTeamSetLeaderRs_S2C::default_instance_;
  delete MsgTeamSetLeaderRs_S2C_reflection_;
  delete MsgTeamRemovePlayer_C2S::default_instance_;
  delete MsgTeamRemovePlayer_C2S_reflection_;
  delete MsgTeamRemovePlayerRs_S2C::default_instance_;
  delete MsgTeamRemovePlayerRs_S2C_reflection_;
  delete MsgTeamAutoJoinTeam_C2S::default_instance_;
  delete MsgTeamAutoJoinTeam_C2S_reflection_;
  delete MsgTeamAutoJoinTeamRs_S2C::default_instance_;
  delete MsgTeamAutoJoinTeamRs_S2C_reflection_;
  delete MsgTeamNotifyTeamDisbanded_S2C::default_instance_;
  delete MsgTeamNotifyTeamDisbanded_S2C_reflection_;
  delete MsgTeamDungeonReadyToGo_S2C::default_instance_;
  delete MsgTeamDungeonReadyToGo_S2C_reflection_;
  delete MsgTeamInfo_S2C::default_instance_;
  delete MsgTeamInfo_S2C_reflection_;
  delete MsgTeamPlayerInfo::default_instance_;
  delete MsgTeamPlayerInfo_reflection_;
  delete MsgTeamMember_S2C::default_instance_;
  delete MsgTeamMember_S2C_reflection_;
  delete MsgTeamInvite_C2S::default_instance_;
  delete MsgTeamInvite_C2S_reflection_;
  delete MsgTeamInviteRs_S2C::default_instance_;
  delete MsgTeamInviteRs_S2C_reflection_;
  delete MsgTeamInviteNotify_S2C::default_instance_;
  delete MsgTeamInviteNotify_S2C_reflection_;
  delete MsgTeamAccept_C2S::default_instance_;
  delete MsgTeamAccept_C2S_reflection_;
  delete MsgTeamAcceptRs_S2C::default_instance_;
  delete MsgTeamAcceptRs_S2C_reflection_;
  delete MsgTeamSelectDungeon_C2S::default_instance_;
  delete MsgTeamSelectDungeon_C2S_reflection_;
  delete MsgTeamSelectDungeonRs_S2C::default_instance_;
  delete MsgTeamSelectDungeonRs_S2C_reflection_;
  delete MsgTeamError::default_instance_;
  delete MsgTeamError_reflection_;
  delete MsgTeamMapInfoSync_MS2MC::default_instance_;
  delete MsgTeamMapInfoSync_MS2MC_reflection_;
  delete MsgTeamCheckItemCount_MC2MS::default_instance_;
  delete MsgTeamCheckItemCount_MC2MS_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete MsgTeamIteamCount_MC2MS::default_instance_;
  delete MsgTeamIteamCount_MC2MS_reflection_;
  delete MsgTeamSetOpenJoin_C2MC::default_instance_;
  delete MsgTeamSetOpenJoin_C2MC_reflection_;
  delete MsgTeamRemovePlayerNotify_MC2C::default_instance_;
  delete MsgTeamRemovePlayerNotify_MC2C_reflection_;
  delete MsgTeamAutoJoinCancel_C2MC::default_instance_;
  delete MsgTeamAutoJoinCancel_C2MC_reflection_;
  delete MsgTeamAutoJoinCancelRes_MC2C::default_instance_;
  delete MsgTeamAutoJoinCancelRes_MC2C_reflection_;
  delete MsgTeamRefuseInvite_C2S::default_instance_;
  delete MsgTeamRefuseInvite_C2S_reflection_;
  delete MsgTeamRefuseInvite_S2C::default_instance_;
  delete MsgTeamRefuseInvite_S2C_reflection_;
}

void protobuf_AddDesc_MsgTeam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgItem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMsgTeam.proto\022\005MsgPB\032\rMsgType.proto\032\rM"
    "sgItem.proto\"\245\001\n#MsgTeamCreateDungeonRec"
    "ruitment_C2S\022\020\n\010SerialID\030\001 \001(\005\022J\n\007msgTyp"
    "e\030\002 \001(\0162\017.MsgPB.EMsgType:(_MSG_TEAM_CREA"
    "TE_DUNGEON_RECRUITMENT_C2S\022\r\n\005iggid\030\003 \001("
    "\003\022\021\n\tmapdataid\030\004 \001(\005\"\322\001\n%MsgTeamCreateDu"
    "ngeonRecruitmentRs_S2C\022\020\n\010SerialID\030\001 \001(\005"
    "\022M\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsgType:+_MSG"
    "_TEAM_CREATE_DUNGEON_RECRUITMENT_RS_S2C\022"
    "\r\n\005iggid\030\003 \001(\003\022)\n\006result\030\004 \001(\0162\031.MsgPB.C"
    "REATE_TEAM_RESULT\022\016\n\006teamid\030\005 \001(\005\"y\n\027Msg"
    "TeamStartDungeon_C2S\022\020\n\010SerialID\030\001 \001(\005\022="
    "\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsgType:\033_MSG_T"
    "EAM_START_DUNGEON_C2S\022\r\n\005iggid\030\003 \001(\003\"\307\001\n"
    "\031MsgTeamStartDungeonRs_S2C\022\020\n\010SerialID\030\001"
    " \001(\005\022@\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsgType:\036"
    "_MSG_TEAM_START_DUNGEON_RS_S2C\022\r\n\005iggid\030"
    "\003 \001(\003\0220\n\006result\030\004 \001(\0162 .MsgPB.TEAM_START"
    "_DUNGEON_RESULT\022\025\n\rerr_mem_iggid\030\005 \003(\003\"\243"
    "\001\n\032MsgTeamRequestJoinTeam_C2S\022\020\n\010SerialI"
    "D\030\001 \001(\005\022A\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsgTyp"
    "e:\037_MSG_TEAM_REQUEST_JOIN_TEAM_C2S\022\r\n\005ig"
    "gid\030\003 \001(\003\022\016\n\006teamid\030\004 \001(\005\022\021\n\tmapdataid\030\005"
    " \001(\005\"\256\001\n\034MsgTeamRequestJoinTeamRs_S2C\022\020\n"
    "\010SerialID\030\001 \001(\005\022D\n\007msgType\030\002 \001(\0162\017.MsgPB"
    ".EMsgType:\"_MSG_TEAM_REQUEST_JOIN_TEAM_R"
    "S_S2C\022\r\n\005iggid\030\003 \001(\003\022\'\n\006result\030\004 \001(\0162\027.M"
    "sgPB.JOIN_TEAM_RESULT\"\202\001\n\033MsgTeamRequest"
    "LeaveTeam_C2S\022\020\n\010SerialID\030\001 \001(\005\022B\n\007msgTy"
    "pe\030\002 \001(\0162\017.MsgPB.EMsgType: _MSG_TEAM_REQ"
    "UEST_LEAVE_TEAM_C2S\022\r\n\005iggid\030\003 \001(\003\"\261\001\n\035M"
    "sgTeamRequestLeaveTeamRs_S2C\022\020\n\010SerialID"
    "\030\001 \001(\005\022E\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsgType"
    ":#_MSG_TEAM_REQUEST_LEAVE_TEAM_RS_S2C\022\r\n"
    "\005iggid\030\003 \001(\003\022(\n\006result\030\004 \001(\0162\030.MsgPB.LEA"
    "VE_TEAM_RESULT\"\215\001\n\024MsgTeamSetLeader_C2S\022"
    "\020\n\010SerialID\030\001 \001(\005\022:\n\007msgType\030\002 \001(\0162\017.Msg"
    "PB.EMsgType:\030_MSG_TEAM_SET_LEADER_C2S\022\r\n"
    "\005iggid\030\003 \001(\003\022\030\n\020new_leader_iggid\030\004 \001(\003\"\246"
    "\001\n\026MsgTeamSetLeaderRs_S2C\022\020\n\010SerialID\030\001 "
    "\001(\005\022=\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsgType:\033_"
    "MSG_TEAM_SET_LEADER_RS_S2C\022\r\n\005iggid\030\003 \001("
    "\003\022,\n\006result\030\004 \001(\0162\034.MsgPB.SET_TEAMLEADER"
    "_RESULT\"\217\001\n\027MsgTeamRemovePlayer_C2S\022\020\n\010S"
    "erialID\030\001 \001(\005\022=\n\007msgType\030\002 \001(\0162\017.MsgPB.E"
    "MsgType:\033_MSG_TEAM_REMOVE_PLAYER_C2S\022\r\n\005"
    "iggid\030\003 \001(\003\022\024\n\014member_iggid\030\004 \001(\003\"\257\001\n\031Ms"
    "gTeamRemovePlayerRs_S2C\022\020\n\010SerialID\030\001 \001("
    "\005\022@\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsgType:\036_MS"
    "G_TEAM_REMOVE_PLAYER_RS_S2C\022\r\n\005iggid\030\003 \001"
    "(\003\022/\n\006result\030\004 \001(\0162\037.MsgPB.REMOVE_TEAMME"
    "MBER_RESULT\"\215\001\n\027MsgTeamAutoJoinTeam_C2S\022"
    "\020\n\010SerialID\030\001 \001(\005\022>\n\007msgType\030\002 \001(\0162\017.Msg"
    "PB.EMsgType:\034_MSG_TEAM_AUTO_JOIN_TEAM_C2"
    "S\022\r\n\005iggid\030\003 \001(\003\022\021\n\tmapdataid\030\004 \001(\005\"\254\001\n\031"
    "MsgTeamAutoJoinTeamRs_S2C\022\020\n\010SerialID\030\001 "
    "\001(\005\022A\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsgType:\037_"
    "MSG_TEAM_AUTO_JOIN_TEAM_RS_S2C\022\r\n\005iggid\030"
    "\003 \001(\003\022+\n\006result\030\004 \001(\0162\033.MsgPB.AUTO_JOINT"
    "EAM_RESULT\"\265\001\n\036MsgTeamNotifyTeamDisbande"
    "d_S2C\022\020\n\010SerialID\030\001 \001(\005\022E\n\007msgType\030\002 \001(\016"
    "2\017.MsgPB.EMsgType:#_MSG_TEAM_NOTIFY_TEAM"
    "_DISBANDED_S2C\022\r\n\005iggid\030\003 \001(\003\022+\n\005reson\030\004"
    " \001(\0162\034.MsgPB.TEAM_DISBANDED_REASON\"\271\001\n\033M"
    "sgTeamDungeonReadyToGo_S2C\022\020\n\010SerialID\030\001"
    " \001(\005\022C\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsgType:!"
    "_MSG_TEAM_DUNGEON_READY_TO_GO_S2C\022\r\n\005igg"
    "id\030\003 \001(\003\022\016\n\006teamid\030\004 \001(\005\022\021\n\tmapdataid\030\005 "
    "\001(\005\022\021\n\tcountdown\030\006 \001(\005\"\226\002\n\017MsgTeamInfo_S"
    "2C\022\020\n\010SerialID\030\001 \001(\005\0220\n\007msgType\030\002 \001(\0162\017."
    "MsgPB.EMsgType:\016_MSG_TEAM_INFO\022\r\n\005iggid\030"
    "\003 \001(\003\022\016\n\006TeamID\030\004 \001(\005\022\021\n\tMapDataID\030\005 \001(\005"
    "\022\023\n\013LeaderIggid\030\006 \001(\003\022\022\n\nstart_time\030\007 \001("
    "\003\022\020\n\010end_time\030\010 \001(\003\022\023\n\013teamChatJID\030\t \001(\t"
    "\022\021\n\topen_join\030\n \001(\005\022*\n\013team_status\030\013 \001(\016"
    "2\025.MsgPB.PB_TEAM_STATUS\"\275\001\n\021MsgTeamPlaye"
    "rInfo\022\r\n\005iggid\030\001 \001(\003\022\n\n\002lv\030\002 \001(\005\022\020\n\010nick"
    "name\030\003 \001(\t\022\016\n\006gender\030\004 \001(\005\022\021\n\tskincolor\030"
    "\005 \001(\005\022\014\n\004hair\030\006 \001(\005\022\021\n\thaircolor\030\007 \001(\005\022*"
    "\n\010itemdata\030\010 \003(\0132\030.MsgPB.MsgItemCommonDa"
    "ta\022\013\n\003pos\030\t \001(\005\"\205\001\n\021MsgTeamMember_S2C\0222\n"
    "\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\020_MSG_TE"
    "AM_MEMBER\022\r\n\005iggid\030\002 \001(\003\022-\n\013playerinfos\030"
    "\003 \003(\0132\030.MsgPB.MsgTeamPlayerInfo\"\203\001\n\021MsgT"
    "eamInvite_C2S\022\020\n\010SerialID\030\001 \001(\005\0226\n\007msgTy"
    "pe\030\002 \001(\0162\017.MsgPB.EMsgType:\024_MSG_TEAM_INV"
    "ITE_C2S\022\r\n\005iggid\030\003 \001(\003\022\025\n\rtarget_iggids\030"
    "\004 \003(\003\"\234\001\n\023MsgTeamInviteRs_S2C\022\020\n\010SerialI"
    "D\030\001 \001(\005\0229\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsgTyp"
    "e:\027_MSG_TEAM_INVITE_RS_S2C\022\r\n\005iggid\030\003 \001("
    "\003\022)\n\006result\030\004 \001(\0162\031.MsgPB.TEAM_INVITE_RE"
    "SULT\"\254\001\n\027MsgTeamInviteNotify_S2C\022=\n\007msgT"
    "ype\030\001 \001(\0162\017.MsgPB.EMsgType:\033_MSG_TEAM_IN"
    "VITE_NOTIFY_S2C\022\r\n\005iggid\030\002 \001(\003\022\016\n\006teamid"
    "\030\003 \001(\005\022\020\n\010nickname\030\004 \001(\t\022\021\n\tmapdataid\030\005 "
    "\001(\005\022\016\n\006gender\030\006 \001(\005\"\217\001\n\021MsgTeamAccept_C2"
    "S\022\020\n\010SerialID\030\001 \001(\005\0226\n\007msgType\030\002 \001(\0162\017.M"
    "sgPB.EMsgType:\024_MSG_TEAM_ACCEPT_C2S\022\r\n\005i"
    "ggid\030\003 \001(\003\022\016\n\006teamid\030\004 \001(\005\022\021\n\tmapdataid\030"
    "\005 \001(\005\"\277\001\n\023MsgTeamAcceptRs_S2C\022\020\n\010SerialI"
    "D\030\001 \001(\005\0229\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsgTyp"
    "e:\027_MSG_TEAM_ACCEPT_RS_S2C\022\r\n\005iggid\030\003 \001("
    "\003\022)\n\006result\030\004 \001(\0162\031.MsgPB.TEAM_ACCEPT_RE"
    "SULT\022\016\n\006teamid\030\005 \001(\005\022\021\n\tmapdataid\030\006 \001(\005\""
    "\216\001\n\030MsgTeamSelectDungeon_C2S\022\020\n\010SerialID"
    "\030\001 \001(\005\022>\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsgType"
    ":\034_MSG_TEAM_SELECT_DUNGEON_C2S\022\r\n\005iggid\030"
    "\003 \001(\003\022\021\n\tmapdataid\030\004 \001(\005\"\312\001\n\032MsgTeamSele"
    "ctDungeonRs_S2C\022\020\n\010SerialID\030\001 \001(\005\022A\n\007msg"
    "Type\030\002 \001(\0162\017.MsgPB.EMsgType:\037_MSG_TEAM_S"
    "ELECT_DUNGEON_RS_S2C\022\r\n\005iggid\030\003 \001(\003\0221\n\006r"
    "esult\030\004 \001(\0162!.MsgPB.TEAM_SELECT_DUNGEON_"
    "RESULT\022\025\n\rerr_mem_iggid\030\005 \003(\003\"\213\001\n\014MsgTea"
    "mError\022\020\n\010SerialID\030\001 \001(\005\0221\n\007msgType\030\002 \001("
    "\0162\017.MsgPB.EMsgType:\017_MSG_TEAM_ERROR\022\r\n\005i"
    "ggid\030\003 \001(\003\022\'\n\003res\030\004 \001(\0162\032.MsgPB.TEAM_DUN"
    "GEON_RESULT\"\227\001\n\030MsgTeamMapInfoSync_MS2MC"
    "\022\?\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\035_MSG"
    "_TEAM_MAP_INFO_SYNC_MS2MC\022\016\n\006teamid\030\002 \001("
    "\005\022\014\n\004type\030\003 \001(\005\022\013\n\003val\030\004 \001(\005\022\017\n\007mapuuid\030"
    "\005 \001(\003\"\205\001\n\033MsgTeamCheckItemCount_MC2MS\022B\n"
    "\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType: _MSG_TE"
    "AM_CHECK_ITEM_COUNT_MC2MS\022\r\n\005iggid\030\002 \001(\003"
    "\022\023\n\013item_dataid\030\004 \003(\005\"3\n\010ItemInfo\022\023\n\013ite"
    "m_dataid\030\001 \001(\005\022\022\n\nitem_count\030\002 \001(\005\"\212\001\n\027M"
    "sgTeamIteamCount_MC2MS\022<\n\007msgType\030\001 \001(\0162"
    "\017.MsgPB.EMsgType:\032_MSG_TEAM_ITEM_COUNT_M"
    "C2MS\022\r\n\005iggid\030\002 \001(\003\022\"\n\titem_info\030\003 \003(\0132\017"
    ".MsgPB.ItemInfo\"{\n\027MsgTeamSetOpenJoin_C2"
    "MC\022>\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\034_M"
    "SG_TEAM_SET_OPEN_JOIN_C2MC\022\r\n\005iggid\030\002 \001("
    "\003\022\021\n\topen_join\030\003 \001(\005\"\215\001\n\036MsgTeamRemovePl"
    "ayerNotify_MC2C\022E\n\007msgType\030\001 \001(\0162\017.MsgPB"
    ".EMsgType:#_MSG_TEAM_REMOVE_PLAYER_NOTIF"
    "Y_MC2C\022\016\n\006teamid\030\002 \001(\005\022\024\n\014remove_iggid\030\003"
    " \001(\003\"\200\001\n\032MsgTeamAutoJoinCancel_C2MC\022A\n\007m"
    "sgType\030\001 \001(\0162\017.MsgPB.EMsgType:\037_MSG_TEAM"
    "_AUTO_JOIN_CANCEL_C2MC\022\r\n\005iggid\030\002 \001(\003\022\020\n"
    "\010SerialID\030\003 \001(\005\"\236\001\n\035MsgTeamAutoJoinCance"
    "lRes_MC2C\022E\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgT"
    "ype:#_MSG_TEAM_AUTO_JOIN_CANCEL_RES_MC2C"
    "\022\r\n\005iggid\030\002 \001(\003\022\'\n\003res\030\003 \001(\0162\032.MsgPB.TEA"
    "M_DUNGEON_RESULT\"w\n\027MsgTeamRefuseInvite_"
    "C2S\022=\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\033_"
    "MSG_TEAM_REFUSE_INVITE_C2S\022\r\n\005iggid\030\002 \001("
    "\003\022\016\n\006teamid\030\003 \001(\005\"\215\001\n\027MsgTeamRefuseInvit"
    "e_S2C\022=\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:"
    "\033_MSG_TEAM_REFUSE_INVITE_S2C\022\r\n\005iggid\030\002 "
    "\001(\003\022\016\n\006teamid\030\003 \001(\005\022\024\n\014iggid_refuse\030\004 \001("
    "\003*\356\003\n\023TEAM_DUNGEON_RESULT\022\034\n\030TEAM_DUNGEO"
    "N_RESULT_NULL\020\000\022\037\n\033TEAM_DUNGEON_RESULT_S"
    "UCCESS\020\001\022\033\n\027TEAM_DUNGEON_RESULT_ERR\020\002\022\"\n"
    "\036TEAM_DUNGEON_RESULT_ERR_HUNGER\020\003\022!\n\035TEA"
    "M_DUNGEON_RESULT_ERR_LEVEL\020\004\022\"\n\036TEAM_DUN"
    "GEON_RESULT_ERR_TICKET\020\005\022$\n TEAM_DUNGEON"
    "_RESULT_PLAYER_FAILE\020\006\022#\n\037TEAM_DUNGEON_R"
    "ESULT_NOT_IN_TEAM\020\007\022$\n TEAM_DUNGEON_RESU"
    "LT_NO_TEAM_DATA\020\010\022\'\n#TEAM_DUNGEON_RESULT"
    "_NOT_TEAM_LEADER\020\t\022\"\n\036TEAM_DUNGEON_RESUL"
    "T_PLAYER_DIE\020\n\022%\n!TEAM_DUNGEON_RESULT_FU"
    "NCTION_LOCK\020\013\022+\n\'TEAM_DUNGEON_RESULT_DUN"
    "MINE_ENTER_LIMIT\020\014*\236\001\n\016PB_TEAM_STATUS\022\027\n"
    "\023PB_TEAM_STATUS_NULL\020\000\022\034\n\030PB_TEAM_STATUS"
    "_WAIT_JOIN\020\001\022\036\n\032PB_TEAM_STATUS_READY_TO_"
    "GO\020\002\022\035\n\031PB_TEAM_STATUS_ON_DUNGEON\020\003\022\026\n\022P"
    "B_TEAM_STATUS_END\020\004*\243\002\n\022CREATE_TEAM_RESU"
    "LT\022\024\n\020CREATE_TEAM_NULL\020\000\022\027\n\023CREATE_TEAM_"
    "SUCCESS\020\001\022\034\n\030CREATE_TEAM_PLAYER_FAILE\020\002\022"
    "\037\n\033CREATE_TEAM_ALREADY_IN_TEAM\020\003\022\031\n\025CREA"
    "TE_TEAM_DATA_FULL\020\004\022\"\n\036CREATE_TEAM_NEW_T"
    "EAMDATA_ERROR\020\005\022$\n CREATE_TEAM_DUNGEON_C"
    "ONFIG_ERROR\020\006\022\037\n\033CREATE_TEAM_MAPDATAID_E"
    "RROR\020\007\022\031\n\025CREATE_TEAM_NO_TICKET\020\010*\341\002\n\031TE"
    "AM_START_DUNGEON_RESULT\022\033\n\027TEAM_START_DU"
    "NGEON_NULL\020\000\022\036\n\032TEAM_START_DUNGEON_SUCCE"
    "SS\020\001\022#\n\037TEAM_START_DUNGEON_PLAYER_FAILE\020"
    "\002\022\"\n\036TEAM_START_DUNGEON_NOT_IN_TEAM\020\003\022%\n"
    "!TEAM_START_DUNGEON_TEAMDATA_FAILE\020\004\022!\n\035"
    "TEAM_START_DUNGEON_NOT_LEADER\020\005\022\'\n#TEAM_"
    "START_DUNGEON_PLAYER_NO_TICKET\020\006\022\"\n\036TEAM"
    "_START_DUNGEON_MAP_CFG_ERR\020\007\022\'\n#TEAM_STA"
    "RT_DUNGEON_PLAYER_COUNT_ERR\020\010*\345\001\n\020JOIN_T"
    "EAM_RESULT\022\022\n\016JOIN_TEAM_NULL\020\000\022\025\n\021JOIN_T"
    "EAM_SUCCESS\020\001\022\032\n\026JOIN_TEAM_PLAYER_FAILE\020"
    "\002\022\035\n\031JOIN_TEAM_ALREADY_IN_TEAM\020\003\022\027\n\023JOIN"
    "_TEAM_NOT_EXIST\020\004\022\031\n\025JOIN_TEAM_MEMBER_FU"
    "LL\020\005\022\036\n\032JOIN_TEAM_ADD_MEMBER_ERROR\020\006\022\027\n\023"
    "JOIN_TEAM_NO_TICKET\020\007*\353\001\n\021LEAVE_TEAM_RES"
    "ULT\022\023\n\017LEAVE_TEAM_NULL\020\000\022\026\n\022LEAVE_TEAM_S"
    "UCCESS\020\001\022\033\n\027LEAVE_TEAM_PLAYER_FAILE\020\002\022\032\n"
    "\026LEAVE_TEAM_NOT_IN_TEAM\020\003\022\033\n\027LEAVE_TEAM_"
    "IN_DIFF_TEAM\020\004\022\033\n\027LEAVE_TEAM_NO_TEAM_DAT"
    "A\020\005\022\032\n\026LEAVE_TEAM_REMOVE_FAIL\020\006\022\032\n\026LEAVE"
    "_TEAM_READY_TO_GO\020\007*\310\002\n\025SET_TEAMLEADER_R"
    "ESULT\022\027\n\023SET_TEAMLEADER_NULL\020\000\022\032\n\026SET_TE"
    "AMLEADER_SUCCESS\020\001\022\037\n\033SET_TEAMLEADER_PLA"
    "YER_FAILE\020\002\022%\n!SET_TEAMLEADER_PLAYER_NOT"
    "_IN_TEAM\020\003\022\037\n\033SET_TEAMLEADER_NO_TEAM_DAT"
    "A\020\004\022)\n%SET_TEAMLEADER_PLAYER_NOT_TEAM_LE"
    "ADER\020\005\022!\n\035SET_TEAMLEADER_TARGET_IS_SELF\020"
    "\006\022\034\n\030SET_TEAMLEADER_NO_MEMBER\020\007\022%\n!SET_T"
    "EAMLEADER_TARGET_NOT_IN_TEAM\020\010*\207\004\n\030REMOV"
    "E_TEAMMEMBER_RESULT\022\032\n\026REMOVE_TEAMMEMBER"
    "_NULL\020\000\022\035\n\031REMOVE_TEAMMEMBER_SUCCESS\020\001\022\""
    "\n\036REMOVE_TEAMMEMBER_PLAYER_FAILE\020\002\022(\n$RE"
    "MOVE_TEAMMEMBER_PLAYER_NOT_IN_TEAM\020\003\022\"\n\036"
    "REMOVE_TEAMMEMBER_NO_TEAM_DATA\020\004\022,\n(REMO"
    "VE_TEAMMEMBER_PLAYER_NOT_TEAM_LEADER\020\005\022\""
    "\n\036REMOVE_TEAMMEMBER_TARGET_FAILE\020\006\022(\n$RE"
    "MOVE_TEAMMEMBER_TARGET_NOT_IN_TEAM\020\007\022)\n%"
    "REMOVE_TEAMMEMBER_TARGET_IN_DIFF_TEAM\020\010\022"
    ")\n%REMOVE_TEAMMEMBER_TARGET_TEAMID_ERROR"
    "\020\t\022&\n\"REMOVE_TEAMMEMBER_CANT_REMOVE_SELF"
    "\020\n\022!\n\035REMOVE_TEAMMEMBER_REMOVE_FAIL\020\013\022!\n"
    "\035REMOVE_TEAMMEMBER_READY_TO_GO\020\014*\314\003\n\024AUT"
    "O_JOINTEAM_RESULT\022\026\n\022AUTO_JOINTEAM_NULL\020"
    "\000\022\031\n\025AUTO_JOINTEAM_SUCCESS\020\001\022\036\n\032AUTO_JOI"
    "NTEAM_PLAYER_FAILE\020\002\022(\n$AUTO_JOINTEAM_PL"
    "AYER_ALREADY_IN_TEAM\020\003\022\033\n\027AUTO_JOINTEAM_"
    "DATA_FULL\020\004\022$\n AUTO_JOINTEAM_NEW_TEAMDAT"
    "A_ERROR\020\005\022&\n\"AUTO_JOINTEAM_DUNGEON_CONFI"
    "G_ERROR\020\006\022!\n\035AUTO_JOINTEAM_MAPDATAID_ERR"
    "OR\020\007\022 \n\034AUTO_JOINTEAM_TEAM_NOT_EXIST\020\010\022\""
    "\n\036AUTO_JOINTEAM_TEAM_MEMBER_FULL\020\t\022\'\n#AU"
    "TO_JOINTEAM_TEAM_ADD_MEMBER_ERROR\020\n\022\033\n\027A"
    "UTO_JOINTEAM_NO_TICKET\020\013\022\035\n\031AUTO_JOINTEA"
    "M_PENDING_REQ\020\014*R\n\025TEAM_DISBANDED_REASON"
    "\022\027\n\023TEAM_DISBANDED_NULL\020\000\022 \n\034TEAM_DISBAN"
    "DED_DUNGEON_CLOSE\020\001*\365\001\n\022TEAM_INVITE_RESU"
    "LT\022\024\n\020TEAM_INVITE_NULL\020\000\022\027\n\023TEAM_INVITE_"
    "SUCCESS\020\001\022\034\n\030TEAM_INVITE_PLAYER_FAILE\020\002\022"
    "\033\n\027TEAM_INVITE_NOT_IN_TEAM\020\003\022\034\n\030TEAM_INV"
    "ITE_NO_TEAM_DATA\020\004\022\033\n\027TEAM_INVITE_MEMBER"
    "_FULL\020\005\022\033\n\027TEAM_INVITE_INVITE_FAIL\020\006\022\035\n\031"
    "TEAM_INVITE_NOT_WAIT_JOIN\020\007*\262\002\n\022TEAM_ACC"
    "EPT_RESULT\022\024\n\020TEAM_ACCEPT_NULL\020\000\022\027\n\023TEAM"
    "_ACCEPT_SUCCESS\020\001\022\034\n\030TEAM_ACCEPT_PLAYER_"
    "FAILE\020\002\022\037\n\033TEAM_ACCEPT_ALREADY_IN_TEAM\020\003"
    "\022\031\n\025TEAM_ACCEPT_NOT_EXIST\020\004\022\033\n\027TEAM_ACCE"
    "PT_MEMBER_FULL\020\005\022 \n\034TEAM_ACCEPT_ADD_MEMB"
    "ER_ERROR\020\006\022\032\n\026TEAM_ACCEPT_NOT_INVITE\020\007\022\035"
    "\n\031TEAM_ACCEPT_NOT_WAIT_JOIN\020\010\022\031\n\025TEAM_AC"
    "CEPT_NO_TICKET\020\t*\303\002\n\032TEAM_SELECT_DUNGEON"
    "_RESULT\022\034\n\030TEAM_SELECT_DUNGEON_NULL\020\000\022\037\n"
    "\033TEAM_SELECT_DUNGEON_SUCCESS\020\001\022$\n TEAM_S"
    "ELECT_DUNGEON_PLAYER_FAILE\020\002\022#\n\037TEAM_SEL"
    "ECT_DUNGEON_NOT_IN_TEAM\020\003\022&\n\"TEAM_SELECT"
    "_DUNGEON_TEAMDATA_FAILE\020\004\022\"\n\036TEAM_SELECT"
    "_DUNGEON_NOT_LEADER\020\005\022%\n!TEAM_SELECT_DUN"
    "GEON_NOT_WAIT_JOIN\020\006\022(\n$TEAM_SELECT_DUNG"
    "EON_PLAYER_NO_TICKET\020\007", 10022);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgTeam.proto", &protobuf_RegisterTypes);
  MsgTeamCreateDungeonRecruitment_C2S::default_instance_ = new MsgTeamCreateDungeonRecruitment_C2S();
  MsgTeamCreateDungeonRecruitmentRs_S2C::default_instance_ = new MsgTeamCreateDungeonRecruitmentRs_S2C();
  MsgTeamStartDungeon_C2S::default_instance_ = new MsgTeamStartDungeon_C2S();
  MsgTeamStartDungeonRs_S2C::default_instance_ = new MsgTeamStartDungeonRs_S2C();
  MsgTeamRequestJoinTeam_C2S::default_instance_ = new MsgTeamRequestJoinTeam_C2S();
  MsgTeamRequestJoinTeamRs_S2C::default_instance_ = new MsgTeamRequestJoinTeamRs_S2C();
  MsgTeamRequestLeaveTeam_C2S::default_instance_ = new MsgTeamRequestLeaveTeam_C2S();
  MsgTeamRequestLeaveTeamRs_S2C::default_instance_ = new MsgTeamRequestLeaveTeamRs_S2C();
  MsgTeamSetLeader_C2S::default_instance_ = new MsgTeamSetLeader_C2S();
  MsgTeamSetLeaderRs_S2C::default_instance_ = new MsgTeamSetLeaderRs_S2C();
  MsgTeamRemovePlayer_C2S::default_instance_ = new MsgTeamRemovePlayer_C2S();
  MsgTeamRemovePlayerRs_S2C::default_instance_ = new MsgTeamRemovePlayerRs_S2C();
  MsgTeamAutoJoinTeam_C2S::default_instance_ = new MsgTeamAutoJoinTeam_C2S();
  MsgTeamAutoJoinTeamRs_S2C::default_instance_ = new MsgTeamAutoJoinTeamRs_S2C();
  MsgTeamNotifyTeamDisbanded_S2C::default_instance_ = new MsgTeamNotifyTeamDisbanded_S2C();
  MsgTeamDungeonReadyToGo_S2C::default_instance_ = new MsgTeamDungeonReadyToGo_S2C();
  MsgTeamInfo_S2C::default_instance_ = new MsgTeamInfo_S2C();
  MsgTeamPlayerInfo::default_instance_ = new MsgTeamPlayerInfo();
  MsgTeamMember_S2C::default_instance_ = new MsgTeamMember_S2C();
  MsgTeamInvite_C2S::default_instance_ = new MsgTeamInvite_C2S();
  MsgTeamInviteRs_S2C::default_instance_ = new MsgTeamInviteRs_S2C();
  MsgTeamInviteNotify_S2C::default_instance_ = new MsgTeamInviteNotify_S2C();
  MsgTeamAccept_C2S::default_instance_ = new MsgTeamAccept_C2S();
  MsgTeamAcceptRs_S2C::default_instance_ = new MsgTeamAcceptRs_S2C();
  MsgTeamSelectDungeon_C2S::default_instance_ = new MsgTeamSelectDungeon_C2S();
  MsgTeamSelectDungeonRs_S2C::default_instance_ = new MsgTeamSelectDungeonRs_S2C();
  MsgTeamError::default_instance_ = new MsgTeamError();
  MsgTeamMapInfoSync_MS2MC::default_instance_ = new MsgTeamMapInfoSync_MS2MC();
  MsgTeamCheckItemCount_MC2MS::default_instance_ = new MsgTeamCheckItemCount_MC2MS();
  ItemInfo::default_instance_ = new ItemInfo();
  MsgTeamIteamCount_MC2MS::default_instance_ = new MsgTeamIteamCount_MC2MS();
  MsgTeamSetOpenJoin_C2MC::default_instance_ = new MsgTeamSetOpenJoin_C2MC();
  MsgTeamRemovePlayerNotify_MC2C::default_instance_ = new MsgTeamRemovePlayerNotify_MC2C();
  MsgTeamAutoJoinCancel_C2MC::default_instance_ = new MsgTeamAutoJoinCancel_C2MC();
  MsgTeamAutoJoinCancelRes_MC2C::default_instance_ = new MsgTeamAutoJoinCancelRes_MC2C();
  MsgTeamRefuseInvite_C2S::default_instance_ = new MsgTeamRefuseInvite_C2S();
  MsgTeamRefuseInvite_S2C::default_instance_ = new MsgTeamRefuseInvite_S2C();
  MsgTeamCreateDungeonRecruitment_C2S::default_instance_->InitAsDefaultInstance();
  MsgTeamCreateDungeonRecruitmentRs_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamStartDungeon_C2S::default_instance_->InitAsDefaultInstance();
  MsgTeamStartDungeonRs_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamRequestJoinTeam_C2S::default_instance_->InitAsDefaultInstance();
  MsgTeamRequestJoinTeamRs_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamRequestLeaveTeam_C2S::default_instance_->InitAsDefaultInstance();
  MsgTeamRequestLeaveTeamRs_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamSetLeader_C2S::default_instance_->InitAsDefaultInstance();
  MsgTeamSetLeaderRs_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamRemovePlayer_C2S::default_instance_->InitAsDefaultInstance();
  MsgTeamRemovePlayerRs_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamAutoJoinTeam_C2S::default_instance_->InitAsDefaultInstance();
  MsgTeamAutoJoinTeamRs_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamNotifyTeamDisbanded_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamDungeonReadyToGo_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamInfo_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamPlayerInfo::default_instance_->InitAsDefaultInstance();
  MsgTeamMember_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamInvite_C2S::default_instance_->InitAsDefaultInstance();
  MsgTeamInviteRs_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamInviteNotify_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamAccept_C2S::default_instance_->InitAsDefaultInstance();
  MsgTeamAcceptRs_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamSelectDungeon_C2S::default_instance_->InitAsDefaultInstance();
  MsgTeamSelectDungeonRs_S2C::default_instance_->InitAsDefaultInstance();
  MsgTeamError::default_instance_->InitAsDefaultInstance();
  MsgTeamMapInfoSync_MS2MC::default_instance_->InitAsDefaultInstance();
  MsgTeamCheckItemCount_MC2MS::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  MsgTeamIteamCount_MC2MS::default_instance_->InitAsDefaultInstance();
  MsgTeamSetOpenJoin_C2MC::default_instance_->InitAsDefaultInstance();
  MsgTeamRemovePlayerNotify_MC2C::default_instance_->InitAsDefaultInstance();
  MsgTeamAutoJoinCancel_C2MC::default_instance_->InitAsDefaultInstance();
  MsgTeamAutoJoinCancelRes_MC2C::default_instance_->InitAsDefaultInstance();
  MsgTeamRefuseInvite_C2S::default_instance_->InitAsDefaultInstance();
  MsgTeamRefuseInvite_S2C::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgTeam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgTeam_2eproto {
  StaticDescriptorInitializer_MsgTeam_2eproto() {
    protobuf_AddDesc_MsgTeam_2eproto();
  }
} static_descriptor_initializer_MsgTeam_2eproto_;
const ::google::protobuf::EnumDescriptor* TEAM_DUNGEON_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_DUNGEON_RESULT_descriptor_;
}
bool TEAM_DUNGEON_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PB_TEAM_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_TEAM_STATUS_descriptor_;
}
bool PB_TEAM_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CREATE_TEAM_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CREATE_TEAM_RESULT_descriptor_;
}
bool CREATE_TEAM_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_START_DUNGEON_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_START_DUNGEON_RESULT_descriptor_;
}
bool TEAM_START_DUNGEON_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JOIN_TEAM_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOIN_TEAM_RESULT_descriptor_;
}
bool JOIN_TEAM_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LEAVE_TEAM_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LEAVE_TEAM_RESULT_descriptor_;
}
bool LEAVE_TEAM_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SET_TEAMLEADER_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SET_TEAMLEADER_RESULT_descriptor_;
}
bool SET_TEAMLEADER_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REMOVE_TEAMMEMBER_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REMOVE_TEAMMEMBER_RESULT_descriptor_;
}
bool REMOVE_TEAMMEMBER_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AUTO_JOINTEAM_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AUTO_JOINTEAM_RESULT_descriptor_;
}
bool AUTO_JOINTEAM_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_DISBANDED_REASON_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_DISBANDED_REASON_descriptor_;
}
bool TEAM_DISBANDED_REASON_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_INVITE_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_INVITE_RESULT_descriptor_;
}
bool TEAM_INVITE_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_ACCEPT_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_ACCEPT_RESULT_descriptor_;
}
bool TEAM_ACCEPT_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_SELECT_DUNGEON_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_SELECT_DUNGEON_RESULT_descriptor_;
}
bool TEAM_SELECT_DUNGEON_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamCreateDungeonRecruitment_C2S::kSerialIDFieldNumber;
const int MsgTeamCreateDungeonRecruitment_C2S::kMsgTypeFieldNumber;
const int MsgTeamCreateDungeonRecruitment_C2S::kIggidFieldNumber;
const int MsgTeamCreateDungeonRecruitment_C2S::kMapdataidFieldNumber;
#endif  // !_MSC_VER

MsgTeamCreateDungeonRecruitment_C2S::MsgTeamCreateDungeonRecruitment_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamCreateDungeonRecruitment_C2S)
}

void MsgTeamCreateDungeonRecruitment_C2S::InitAsDefaultInstance() {
}

MsgTeamCreateDungeonRecruitment_C2S::MsgTeamCreateDungeonRecruitment_C2S(const MsgTeamCreateDungeonRecruitment_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamCreateDungeonRecruitment_C2S)
}

void MsgTeamCreateDungeonRecruitment_C2S::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 30005;
  iggid_ = GOOGLE_LONGLONG(0);
  mapdataid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamCreateDungeonRecruitment_C2S::~MsgTeamCreateDungeonRecruitment_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamCreateDungeonRecruitment_C2S)
  SharedDtor();
}

void MsgTeamCreateDungeonRecruitment_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamCreateDungeonRecruitment_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamCreateDungeonRecruitment_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamCreateDungeonRecruitment_C2S_descriptor_;
}

const MsgTeamCreateDungeonRecruitment_C2S& MsgTeamCreateDungeonRecruitment_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamCreateDungeonRecruitment_C2S* MsgTeamCreateDungeonRecruitment_C2S::default_instance_ = NULL;

MsgTeamCreateDungeonRecruitment_C2S* MsgTeamCreateDungeonRecruitment_C2S::New() const {
  return new MsgTeamCreateDungeonRecruitment_C2S;
}

void MsgTeamCreateDungeonRecruitment_C2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamCreateDungeonRecruitment_C2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, mapdataid_);
    serialid_ = 0;
    msgtype_ = 30005;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamCreateDungeonRecruitment_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamCreateDungeonRecruitment_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_CREATE_DUNGEON_RECRUITMENT_C2S];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapdataid;
        break;
      }

      // optional int32 mapdataid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapdataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapdataid_)));
          set_has_mapdataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamCreateDungeonRecruitment_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamCreateDungeonRecruitment_C2S)
  return false;
#undef DO_
}

void MsgTeamCreateDungeonRecruitment_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamCreateDungeonRecruitment_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_CREATE_DUNGEON_RECRUITMENT_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int32 mapdataid = 4;
  if (has_mapdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapdataid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamCreateDungeonRecruitment_C2S)
}

::google::protobuf::uint8* MsgTeamCreateDungeonRecruitment_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamCreateDungeonRecruitment_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_CREATE_DUNGEON_RECRUITMENT_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int32 mapdataid = 4;
  if (has_mapdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapdataid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamCreateDungeonRecruitment_C2S)
  return target;
}

int MsgTeamCreateDungeonRecruitment_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_CREATE_DUNGEON_RECRUITMENT_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapdataid = 4;
    if (has_mapdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapdataid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamCreateDungeonRecruitment_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamCreateDungeonRecruitment_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamCreateDungeonRecruitment_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamCreateDungeonRecruitment_C2S::MergeFrom(const MsgTeamCreateDungeonRecruitment_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapdataid()) {
      set_mapdataid(from.mapdataid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamCreateDungeonRecruitment_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamCreateDungeonRecruitment_C2S::CopyFrom(const MsgTeamCreateDungeonRecruitment_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamCreateDungeonRecruitment_C2S::IsInitialized() const {

  return true;
}

void MsgTeamCreateDungeonRecruitment_C2S::Swap(MsgTeamCreateDungeonRecruitment_C2S* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapdataid_, other->mapdataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamCreateDungeonRecruitment_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamCreateDungeonRecruitment_C2S_descriptor_;
  metadata.reflection = MsgTeamCreateDungeonRecruitment_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamCreateDungeonRecruitmentRs_S2C::kSerialIDFieldNumber;
const int MsgTeamCreateDungeonRecruitmentRs_S2C::kMsgTypeFieldNumber;
const int MsgTeamCreateDungeonRecruitmentRs_S2C::kIggidFieldNumber;
const int MsgTeamCreateDungeonRecruitmentRs_S2C::kResultFieldNumber;
const int MsgTeamCreateDungeonRecruitmentRs_S2C::kTeamidFieldNumber;
#endif  // !_MSC_VER

MsgTeamCreateDungeonRecruitmentRs_S2C::MsgTeamCreateDungeonRecruitmentRs_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamCreateDungeonRecruitmentRs_S2C)
}

void MsgTeamCreateDungeonRecruitmentRs_S2C::InitAsDefaultInstance() {
}

MsgTeamCreateDungeonRecruitmentRs_S2C::MsgTeamCreateDungeonRecruitmentRs_S2C(const MsgTeamCreateDungeonRecruitmentRs_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamCreateDungeonRecruitmentRs_S2C)
}

void MsgTeamCreateDungeonRecruitmentRs_S2C::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2101;
  iggid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamCreateDungeonRecruitmentRs_S2C::~MsgTeamCreateDungeonRecruitmentRs_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamCreateDungeonRecruitmentRs_S2C)
  SharedDtor();
}

void MsgTeamCreateDungeonRecruitmentRs_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamCreateDungeonRecruitmentRs_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamCreateDungeonRecruitmentRs_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamCreateDungeonRecruitmentRs_S2C_descriptor_;
}

const MsgTeamCreateDungeonRecruitmentRs_S2C& MsgTeamCreateDungeonRecruitmentRs_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamCreateDungeonRecruitmentRs_S2C* MsgTeamCreateDungeonRecruitmentRs_S2C::default_instance_ = NULL;

MsgTeamCreateDungeonRecruitmentRs_S2C* MsgTeamCreateDungeonRecruitmentRs_S2C::New() const {
  return new MsgTeamCreateDungeonRecruitmentRs_S2C;
}

void MsgTeamCreateDungeonRecruitmentRs_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamCreateDungeonRecruitmentRs_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(iggid_, teamid_);
    serialid_ = 0;
    msgtype_ = 2101;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamCreateDungeonRecruitmentRs_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamCreateDungeonRecruitmentRs_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_CREATE_DUNGEON_RECRUITMENT_RS_S2C];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .MsgPB.CREATE_TEAM_RESULT result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::CREATE_TEAM_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::CREATE_TEAM_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 5;
      case 5: {
        if (tag == 40) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamCreateDungeonRecruitmentRs_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamCreateDungeonRecruitmentRs_S2C)
  return false;
#undef DO_
}

void MsgTeamCreateDungeonRecruitmentRs_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamCreateDungeonRecruitmentRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_CREATE_DUNGEON_RECRUITMENT_RS_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional .MsgPB.CREATE_TEAM_RESULT result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // optional int32 teamid = 5;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamCreateDungeonRecruitmentRs_S2C)
}

::google::protobuf::uint8* MsgTeamCreateDungeonRecruitmentRs_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamCreateDungeonRecruitmentRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_CREATE_DUNGEON_RECRUITMENT_RS_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional .MsgPB.CREATE_TEAM_RESULT result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // optional int32 teamid = 5;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamCreateDungeonRecruitmentRs_S2C)
  return target;
}

int MsgTeamCreateDungeonRecruitmentRs_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_CREATE_DUNGEON_RECRUITMENT_RS_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.CREATE_TEAM_RESULT result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 teamid = 5;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamCreateDungeonRecruitmentRs_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamCreateDungeonRecruitmentRs_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamCreateDungeonRecruitmentRs_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamCreateDungeonRecruitmentRs_S2C::MergeFrom(const MsgTeamCreateDungeonRecruitmentRs_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamCreateDungeonRecruitmentRs_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamCreateDungeonRecruitmentRs_S2C::CopyFrom(const MsgTeamCreateDungeonRecruitmentRs_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamCreateDungeonRecruitmentRs_S2C::IsInitialized() const {

  return true;
}

void MsgTeamCreateDungeonRecruitmentRs_S2C::Swap(MsgTeamCreateDungeonRecruitmentRs_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(result_, other->result_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamCreateDungeonRecruitmentRs_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamCreateDungeonRecruitmentRs_S2C_descriptor_;
  metadata.reflection = MsgTeamCreateDungeonRecruitmentRs_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamStartDungeon_C2S::kSerialIDFieldNumber;
const int MsgTeamStartDungeon_C2S::kMsgTypeFieldNumber;
const int MsgTeamStartDungeon_C2S::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgTeamStartDungeon_C2S::MsgTeamStartDungeon_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamStartDungeon_C2S)
}

void MsgTeamStartDungeon_C2S::InitAsDefaultInstance() {
}

MsgTeamStartDungeon_C2S::MsgTeamStartDungeon_C2S(const MsgTeamStartDungeon_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamStartDungeon_C2S)
}

void MsgTeamStartDungeon_C2S::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 30006;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamStartDungeon_C2S::~MsgTeamStartDungeon_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamStartDungeon_C2S)
  SharedDtor();
}

void MsgTeamStartDungeon_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamStartDungeon_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamStartDungeon_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamStartDungeon_C2S_descriptor_;
}

const MsgTeamStartDungeon_C2S& MsgTeamStartDungeon_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamStartDungeon_C2S* MsgTeamStartDungeon_C2S::default_instance_ = NULL;

MsgTeamStartDungeon_C2S* MsgTeamStartDungeon_C2S::New() const {
  return new MsgTeamStartDungeon_C2S;
}

void MsgTeamStartDungeon_C2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    serialid_ = 0;
    msgtype_ = 30006;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamStartDungeon_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamStartDungeon_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_START_DUNGEON_C2S];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamStartDungeon_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamStartDungeon_C2S)
  return false;
#undef DO_
}

void MsgTeamStartDungeon_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamStartDungeon_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_START_DUNGEON_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamStartDungeon_C2S)
}

::google::protobuf::uint8* MsgTeamStartDungeon_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamStartDungeon_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_START_DUNGEON_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamStartDungeon_C2S)
  return target;
}

int MsgTeamStartDungeon_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_START_DUNGEON_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamStartDungeon_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamStartDungeon_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamStartDungeon_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamStartDungeon_C2S::MergeFrom(const MsgTeamStartDungeon_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamStartDungeon_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamStartDungeon_C2S::CopyFrom(const MsgTeamStartDungeon_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamStartDungeon_C2S::IsInitialized() const {

  return true;
}

void MsgTeamStartDungeon_C2S::Swap(MsgTeamStartDungeon_C2S* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamStartDungeon_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamStartDungeon_C2S_descriptor_;
  metadata.reflection = MsgTeamStartDungeon_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamStartDungeonRs_S2C::kSerialIDFieldNumber;
const int MsgTeamStartDungeonRs_S2C::kMsgTypeFieldNumber;
const int MsgTeamStartDungeonRs_S2C::kIggidFieldNumber;
const int MsgTeamStartDungeonRs_S2C::kResultFieldNumber;
const int MsgTeamStartDungeonRs_S2C::kErrMemIggidFieldNumber;
#endif  // !_MSC_VER

MsgTeamStartDungeonRs_S2C::MsgTeamStartDungeonRs_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamStartDungeonRs_S2C)
}

void MsgTeamStartDungeonRs_S2C::InitAsDefaultInstance() {
}

MsgTeamStartDungeonRs_S2C::MsgTeamStartDungeonRs_S2C(const MsgTeamStartDungeonRs_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamStartDungeonRs_S2C)
}

void MsgTeamStartDungeonRs_S2C::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2103;
  iggid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamStartDungeonRs_S2C::~MsgTeamStartDungeonRs_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamStartDungeonRs_S2C)
  SharedDtor();
}

void MsgTeamStartDungeonRs_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamStartDungeonRs_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamStartDungeonRs_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamStartDungeonRs_S2C_descriptor_;
}

const MsgTeamStartDungeonRs_S2C& MsgTeamStartDungeonRs_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamStartDungeonRs_S2C* MsgTeamStartDungeonRs_S2C::default_instance_ = NULL;

MsgTeamStartDungeonRs_S2C* MsgTeamStartDungeonRs_S2C::New() const {
  return new MsgTeamStartDungeonRs_S2C;
}

void MsgTeamStartDungeonRs_S2C::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    serialid_ = 0;
    msgtype_ = 2103;
    iggid_ = GOOGLE_LONGLONG(0);
    result_ = 0;
  }
  err_mem_iggid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamStartDungeonRs_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamStartDungeonRs_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_START_DUNGEON_RS_S2C];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .MsgPB.TEAM_START_DUNGEON_RESULT result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::TEAM_START_DUNGEON_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::TEAM_START_DUNGEON_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_err_mem_iggid;
        break;
      }

      // repeated int64 err_mem_iggid = 5;
      case 5: {
        if (tag == 40) {
         parse_err_mem_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_err_mem_iggid())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_err_mem_iggid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_err_mem_iggid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamStartDungeonRs_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamStartDungeonRs_S2C)
  return false;
#undef DO_
}

void MsgTeamStartDungeonRs_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamStartDungeonRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_START_DUNGEON_RS_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional .MsgPB.TEAM_START_DUNGEON_RESULT result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // repeated int64 err_mem_iggid = 5;
  for (int i = 0; i < this->err_mem_iggid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->err_mem_iggid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamStartDungeonRs_S2C)
}

::google::protobuf::uint8* MsgTeamStartDungeonRs_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamStartDungeonRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_START_DUNGEON_RS_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional .MsgPB.TEAM_START_DUNGEON_RESULT result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // repeated int64 err_mem_iggid = 5;
  for (int i = 0; i < this->err_mem_iggid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->err_mem_iggid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamStartDungeonRs_S2C)
  return target;
}

int MsgTeamStartDungeonRs_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_START_DUNGEON_RS_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.TEAM_START_DUNGEON_RESULT result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated int64 err_mem_iggid = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->err_mem_iggid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->err_mem_iggid(i));
    }
    total_size += 1 * this->err_mem_iggid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamStartDungeonRs_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamStartDungeonRs_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamStartDungeonRs_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamStartDungeonRs_S2C::MergeFrom(const MsgTeamStartDungeonRs_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  err_mem_iggid_.MergeFrom(from.err_mem_iggid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamStartDungeonRs_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamStartDungeonRs_S2C::CopyFrom(const MsgTeamStartDungeonRs_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamStartDungeonRs_S2C::IsInitialized() const {

  return true;
}

void MsgTeamStartDungeonRs_S2C::Swap(MsgTeamStartDungeonRs_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(result_, other->result_);
    err_mem_iggid_.Swap(&other->err_mem_iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamStartDungeonRs_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamStartDungeonRs_S2C_descriptor_;
  metadata.reflection = MsgTeamStartDungeonRs_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamRequestJoinTeam_C2S::kSerialIDFieldNumber;
const int MsgTeamRequestJoinTeam_C2S::kMsgTypeFieldNumber;
const int MsgTeamRequestJoinTeam_C2S::kIggidFieldNumber;
const int MsgTeamRequestJoinTeam_C2S::kTeamidFieldNumber;
const int MsgTeamRequestJoinTeam_C2S::kMapdataidFieldNumber;
#endif  // !_MSC_VER

MsgTeamRequestJoinTeam_C2S::MsgTeamRequestJoinTeam_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamRequestJoinTeam_C2S)
}

void MsgTeamRequestJoinTeam_C2S::InitAsDefaultInstance() {
}

MsgTeamRequestJoinTeam_C2S::MsgTeamRequestJoinTeam_C2S(const MsgTeamRequestJoinTeam_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamRequestJoinTeam_C2S)
}

void MsgTeamRequestJoinTeam_C2S::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 30007;
  iggid_ = GOOGLE_LONGLONG(0);
  teamid_ = 0;
  mapdataid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamRequestJoinTeam_C2S::~MsgTeamRequestJoinTeam_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamRequestJoinTeam_C2S)
  SharedDtor();
}

void MsgTeamRequestJoinTeam_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamRequestJoinTeam_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamRequestJoinTeam_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamRequestJoinTeam_C2S_descriptor_;
}

const MsgTeamRequestJoinTeam_C2S& MsgTeamRequestJoinTeam_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamRequestJoinTeam_C2S* MsgTeamRequestJoinTeam_C2S::default_instance_ = NULL;

MsgTeamRequestJoinTeam_C2S* MsgTeamRequestJoinTeam_C2S::New() const {
  return new MsgTeamRequestJoinTeam_C2S;
}

void MsgTeamRequestJoinTeam_C2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamRequestJoinTeam_C2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(iggid_, mapdataid_);
    serialid_ = 0;
    msgtype_ = 30007;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamRequestJoinTeam_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamRequestJoinTeam_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_JOIN_TEAM_C2S];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 4;
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapdataid;
        break;
      }

      // optional int32 mapdataid = 5;
      case 5: {
        if (tag == 40) {
         parse_mapdataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapdataid_)));
          set_has_mapdataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamRequestJoinTeam_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamRequestJoinTeam_C2S)
  return false;
#undef DO_
}

void MsgTeamRequestJoinTeam_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamRequestJoinTeam_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_JOIN_TEAM_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int32 teamid = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamid(), output);
  }

  // optional int32 mapdataid = 5;
  if (has_mapdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapdataid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamRequestJoinTeam_C2S)
}

::google::protobuf::uint8* MsgTeamRequestJoinTeam_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamRequestJoinTeam_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_JOIN_TEAM_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int32 teamid = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamid(), target);
  }

  // optional int32 mapdataid = 5;
  if (has_mapdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapdataid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamRequestJoinTeam_C2S)
  return target;
}

int MsgTeamRequestJoinTeam_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_JOIN_TEAM_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int32 mapdataid = 5;
    if (has_mapdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapdataid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamRequestJoinTeam_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamRequestJoinTeam_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamRequestJoinTeam_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamRequestJoinTeam_C2S::MergeFrom(const MsgTeamRequestJoinTeam_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mapdataid()) {
      set_mapdataid(from.mapdataid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamRequestJoinTeam_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamRequestJoinTeam_C2S::CopyFrom(const MsgTeamRequestJoinTeam_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamRequestJoinTeam_C2S::IsInitialized() const {

  return true;
}

void MsgTeamRequestJoinTeam_C2S::Swap(MsgTeamRequestJoinTeam_C2S* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(teamid_, other->teamid_);
    std::swap(mapdataid_, other->mapdataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamRequestJoinTeam_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamRequestJoinTeam_C2S_descriptor_;
  metadata.reflection = MsgTeamRequestJoinTeam_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamRequestJoinTeamRs_S2C::kSerialIDFieldNumber;
const int MsgTeamRequestJoinTeamRs_S2C::kMsgTypeFieldNumber;
const int MsgTeamRequestJoinTeamRs_S2C::kIggidFieldNumber;
const int MsgTeamRequestJoinTeamRs_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

MsgTeamRequestJoinTeamRs_S2C::MsgTeamRequestJoinTeamRs_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamRequestJoinTeamRs_S2C)
}

void MsgTeamRequestJoinTeamRs_S2C::InitAsDefaultInstance() {
}

MsgTeamRequestJoinTeamRs_S2C::MsgTeamRequestJoinTeamRs_S2C(const MsgTeamRequestJoinTeamRs_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamRequestJoinTeamRs_S2C)
}

void MsgTeamRequestJoinTeamRs_S2C::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2105;
  iggid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamRequestJoinTeamRs_S2C::~MsgTeamRequestJoinTeamRs_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamRequestJoinTeamRs_S2C)
  SharedDtor();
}

void MsgTeamRequestJoinTeamRs_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamRequestJoinTeamRs_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamRequestJoinTeamRs_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamRequestJoinTeamRs_S2C_descriptor_;
}

const MsgTeamRequestJoinTeamRs_S2C& MsgTeamRequestJoinTeamRs_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamRequestJoinTeamRs_S2C* MsgTeamRequestJoinTeamRs_S2C::default_instance_ = NULL;

MsgTeamRequestJoinTeamRs_S2C* MsgTeamRequestJoinTeamRs_S2C::New() const {
  return new MsgTeamRequestJoinTeamRs_S2C;
}

void MsgTeamRequestJoinTeamRs_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamRequestJoinTeamRs_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, result_);
    serialid_ = 0;
    msgtype_ = 2105;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamRequestJoinTeamRs_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamRequestJoinTeamRs_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_JOIN_TEAM_RS_S2C];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .MsgPB.JOIN_TEAM_RESULT result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::JOIN_TEAM_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::JOIN_TEAM_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamRequestJoinTeamRs_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamRequestJoinTeamRs_S2C)
  return false;
#undef DO_
}

void MsgTeamRequestJoinTeamRs_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamRequestJoinTeamRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_JOIN_TEAM_RS_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional .MsgPB.JOIN_TEAM_RESULT result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamRequestJoinTeamRs_S2C)
}

::google::protobuf::uint8* MsgTeamRequestJoinTeamRs_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamRequestJoinTeamRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_JOIN_TEAM_RS_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional .MsgPB.JOIN_TEAM_RESULT result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamRequestJoinTeamRs_S2C)
  return target;
}

int MsgTeamRequestJoinTeamRs_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_JOIN_TEAM_RS_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.JOIN_TEAM_RESULT result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamRequestJoinTeamRs_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamRequestJoinTeamRs_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamRequestJoinTeamRs_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamRequestJoinTeamRs_S2C::MergeFrom(const MsgTeamRequestJoinTeamRs_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamRequestJoinTeamRs_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamRequestJoinTeamRs_S2C::CopyFrom(const MsgTeamRequestJoinTeamRs_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamRequestJoinTeamRs_S2C::IsInitialized() const {

  return true;
}

void MsgTeamRequestJoinTeamRs_S2C::Swap(MsgTeamRequestJoinTeamRs_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamRequestJoinTeamRs_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamRequestJoinTeamRs_S2C_descriptor_;
  metadata.reflection = MsgTeamRequestJoinTeamRs_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamRequestLeaveTeam_C2S::kSerialIDFieldNumber;
const int MsgTeamRequestLeaveTeam_C2S::kMsgTypeFieldNumber;
const int MsgTeamRequestLeaveTeam_C2S::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgTeamRequestLeaveTeam_C2S::MsgTeamRequestLeaveTeam_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamRequestLeaveTeam_C2S)
}

void MsgTeamRequestLeaveTeam_C2S::InitAsDefaultInstance() {
}

MsgTeamRequestLeaveTeam_C2S::MsgTeamRequestLeaveTeam_C2S(const MsgTeamRequestLeaveTeam_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamRequestLeaveTeam_C2S)
}

void MsgTeamRequestLeaveTeam_C2S::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 30008;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamRequestLeaveTeam_C2S::~MsgTeamRequestLeaveTeam_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamRequestLeaveTeam_C2S)
  SharedDtor();
}

void MsgTeamRequestLeaveTeam_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamRequestLeaveTeam_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamRequestLeaveTeam_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamRequestLeaveTeam_C2S_descriptor_;
}

const MsgTeamRequestLeaveTeam_C2S& MsgTeamRequestLeaveTeam_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamRequestLeaveTeam_C2S* MsgTeamRequestLeaveTeam_C2S::default_instance_ = NULL;

MsgTeamRequestLeaveTeam_C2S* MsgTeamRequestLeaveTeam_C2S::New() const {
  return new MsgTeamRequestLeaveTeam_C2S;
}

void MsgTeamRequestLeaveTeam_C2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    serialid_ = 0;
    msgtype_ = 30008;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamRequestLeaveTeam_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamRequestLeaveTeam_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_LEAVE_TEAM_C2S];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamRequestLeaveTeam_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamRequestLeaveTeam_C2S)
  return false;
#undef DO_
}

void MsgTeamRequestLeaveTeam_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamRequestLeaveTeam_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_LEAVE_TEAM_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamRequestLeaveTeam_C2S)
}

::google::protobuf::uint8* MsgTeamRequestLeaveTeam_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamRequestLeaveTeam_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_LEAVE_TEAM_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamRequestLeaveTeam_C2S)
  return target;
}

int MsgTeamRequestLeaveTeam_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_LEAVE_TEAM_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamRequestLeaveTeam_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamRequestLeaveTeam_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamRequestLeaveTeam_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamRequestLeaveTeam_C2S::MergeFrom(const MsgTeamRequestLeaveTeam_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamRequestLeaveTeam_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamRequestLeaveTeam_C2S::CopyFrom(const MsgTeamRequestLeaveTeam_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamRequestLeaveTeam_C2S::IsInitialized() const {

  return true;
}

void MsgTeamRequestLeaveTeam_C2S::Swap(MsgTeamRequestLeaveTeam_C2S* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamRequestLeaveTeam_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamRequestLeaveTeam_C2S_descriptor_;
  metadata.reflection = MsgTeamRequestLeaveTeam_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamRequestLeaveTeamRs_S2C::kSerialIDFieldNumber;
const int MsgTeamRequestLeaveTeamRs_S2C::kMsgTypeFieldNumber;
const int MsgTeamRequestLeaveTeamRs_S2C::kIggidFieldNumber;
const int MsgTeamRequestLeaveTeamRs_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

MsgTeamRequestLeaveTeamRs_S2C::MsgTeamRequestLeaveTeamRs_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamRequestLeaveTeamRs_S2C)
}

void MsgTeamRequestLeaveTeamRs_S2C::InitAsDefaultInstance() {
}

MsgTeamRequestLeaveTeamRs_S2C::MsgTeamRequestLeaveTeamRs_S2C(const MsgTeamRequestLeaveTeamRs_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamRequestLeaveTeamRs_S2C)
}

void MsgTeamRequestLeaveTeamRs_S2C::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2107;
  iggid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamRequestLeaveTeamRs_S2C::~MsgTeamRequestLeaveTeamRs_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamRequestLeaveTeamRs_S2C)
  SharedDtor();
}

void MsgTeamRequestLeaveTeamRs_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamRequestLeaveTeamRs_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamRequestLeaveTeamRs_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamRequestLeaveTeamRs_S2C_descriptor_;
}

const MsgTeamRequestLeaveTeamRs_S2C& MsgTeamRequestLeaveTeamRs_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamRequestLeaveTeamRs_S2C* MsgTeamRequestLeaveTeamRs_S2C::default_instance_ = NULL;

MsgTeamRequestLeaveTeamRs_S2C* MsgTeamRequestLeaveTeamRs_S2C::New() const {
  return new MsgTeamRequestLeaveTeamRs_S2C;
}

void MsgTeamRequestLeaveTeamRs_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamRequestLeaveTeamRs_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, result_);
    serialid_ = 0;
    msgtype_ = 2107;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamRequestLeaveTeamRs_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamRequestLeaveTeamRs_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_LEAVE_TEAM_RS_S2C];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .MsgPB.LEAVE_TEAM_RESULT result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::LEAVE_TEAM_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::LEAVE_TEAM_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamRequestLeaveTeamRs_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamRequestLeaveTeamRs_S2C)
  return false;
#undef DO_
}

void MsgTeamRequestLeaveTeamRs_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamRequestLeaveTeamRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_LEAVE_TEAM_RS_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional .MsgPB.LEAVE_TEAM_RESULT result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamRequestLeaveTeamRs_S2C)
}

::google::protobuf::uint8* MsgTeamRequestLeaveTeamRs_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamRequestLeaveTeamRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_LEAVE_TEAM_RS_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional .MsgPB.LEAVE_TEAM_RESULT result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamRequestLeaveTeamRs_S2C)
  return target;
}

int MsgTeamRequestLeaveTeamRs_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REQUEST_LEAVE_TEAM_RS_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.LEAVE_TEAM_RESULT result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamRequestLeaveTeamRs_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamRequestLeaveTeamRs_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamRequestLeaveTeamRs_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamRequestLeaveTeamRs_S2C::MergeFrom(const MsgTeamRequestLeaveTeamRs_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamRequestLeaveTeamRs_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamRequestLeaveTeamRs_S2C::CopyFrom(const MsgTeamRequestLeaveTeamRs_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamRequestLeaveTeamRs_S2C::IsInitialized() const {

  return true;
}

void MsgTeamRequestLeaveTeamRs_S2C::Swap(MsgTeamRequestLeaveTeamRs_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamRequestLeaveTeamRs_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamRequestLeaveTeamRs_S2C_descriptor_;
  metadata.reflection = MsgTeamRequestLeaveTeamRs_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamSetLeader_C2S::kSerialIDFieldNumber;
const int MsgTeamSetLeader_C2S::kMsgTypeFieldNumber;
const int MsgTeamSetLeader_C2S::kIggidFieldNumber;
const int MsgTeamSetLeader_C2S::kNewLeaderIggidFieldNumber;
#endif  // !_MSC_VER

MsgTeamSetLeader_C2S::MsgTeamSetLeader_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamSetLeader_C2S)
}

void MsgTeamSetLeader_C2S::InitAsDefaultInstance() {
}

MsgTeamSetLeader_C2S::MsgTeamSetLeader_C2S(const MsgTeamSetLeader_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamSetLeader_C2S)
}

void MsgTeamSetLeader_C2S::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 30009;
  iggid_ = GOOGLE_LONGLONG(0);
  new_leader_iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamSetLeader_C2S::~MsgTeamSetLeader_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamSetLeader_C2S)
  SharedDtor();
}

void MsgTeamSetLeader_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamSetLeader_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamSetLeader_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamSetLeader_C2S_descriptor_;
}

const MsgTeamSetLeader_C2S& MsgTeamSetLeader_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamSetLeader_C2S* MsgTeamSetLeader_C2S::default_instance_ = NULL;

MsgTeamSetLeader_C2S* MsgTeamSetLeader_C2S::New() const {
  return new MsgTeamSetLeader_C2S;
}

void MsgTeamSetLeader_C2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamSetLeader_C2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, new_leader_iggid_);
    serialid_ = 0;
    msgtype_ = 30009;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamSetLeader_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamSetLeader_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SET_LEADER_C2S];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_new_leader_iggid;
        break;
      }

      // optional int64 new_leader_iggid = 4;
      case 4: {
        if (tag == 32) {
         parse_new_leader_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_leader_iggid_)));
          set_has_new_leader_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamSetLeader_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamSetLeader_C2S)
  return false;
#undef DO_
}

void MsgTeamSetLeader_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamSetLeader_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SET_LEADER_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int64 new_leader_iggid = 4;
  if (has_new_leader_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->new_leader_iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamSetLeader_C2S)
}

::google::protobuf::uint8* MsgTeamSetLeader_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamSetLeader_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SET_LEADER_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int64 new_leader_iggid = 4;
  if (has_new_leader_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->new_leader_iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamSetLeader_C2S)
  return target;
}

int MsgTeamSetLeader_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SET_LEADER_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 new_leader_iggid = 4;
    if (has_new_leader_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_leader_iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamSetLeader_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamSetLeader_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamSetLeader_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamSetLeader_C2S::MergeFrom(const MsgTeamSetLeader_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_new_leader_iggid()) {
      set_new_leader_iggid(from.new_leader_iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamSetLeader_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamSetLeader_C2S::CopyFrom(const MsgTeamSetLeader_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamSetLeader_C2S::IsInitialized() const {

  return true;
}

void MsgTeamSetLeader_C2S::Swap(MsgTeamSetLeader_C2S* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(new_leader_iggid_, other->new_leader_iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamSetLeader_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamSetLeader_C2S_descriptor_;
  metadata.reflection = MsgTeamSetLeader_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamSetLeaderRs_S2C::kSerialIDFieldNumber;
const int MsgTeamSetLeaderRs_S2C::kMsgTypeFieldNumber;
const int MsgTeamSetLeaderRs_S2C::kIggidFieldNumber;
const int MsgTeamSetLeaderRs_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

MsgTeamSetLeaderRs_S2C::MsgTeamSetLeaderRs_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamSetLeaderRs_S2C)
}

void MsgTeamSetLeaderRs_S2C::InitAsDefaultInstance() {
}

MsgTeamSetLeaderRs_S2C::MsgTeamSetLeaderRs_S2C(const MsgTeamSetLeaderRs_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamSetLeaderRs_S2C)
}

void MsgTeamSetLeaderRs_S2C::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2109;
  iggid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamSetLeaderRs_S2C::~MsgTeamSetLeaderRs_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamSetLeaderRs_S2C)
  SharedDtor();
}

void MsgTeamSetLeaderRs_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamSetLeaderRs_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamSetLeaderRs_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamSetLeaderRs_S2C_descriptor_;
}

const MsgTeamSetLeaderRs_S2C& MsgTeamSetLeaderRs_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamSetLeaderRs_S2C* MsgTeamSetLeaderRs_S2C::default_instance_ = NULL;

MsgTeamSetLeaderRs_S2C* MsgTeamSetLeaderRs_S2C::New() const {
  return new MsgTeamSetLeaderRs_S2C;
}

void MsgTeamSetLeaderRs_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamSetLeaderRs_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, result_);
    serialid_ = 0;
    msgtype_ = 2109;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamSetLeaderRs_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamSetLeaderRs_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SET_LEADER_RS_S2C];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .MsgPB.SET_TEAMLEADER_RESULT result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::SET_TEAMLEADER_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::SET_TEAMLEADER_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamSetLeaderRs_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamSetLeaderRs_S2C)
  return false;
#undef DO_
}

void MsgTeamSetLeaderRs_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamSetLeaderRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SET_LEADER_RS_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional .MsgPB.SET_TEAMLEADER_RESULT result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamSetLeaderRs_S2C)
}

::google::protobuf::uint8* MsgTeamSetLeaderRs_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamSetLeaderRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SET_LEADER_RS_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional .MsgPB.SET_TEAMLEADER_RESULT result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamSetLeaderRs_S2C)
  return target;
}

int MsgTeamSetLeaderRs_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SET_LEADER_RS_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.SET_TEAMLEADER_RESULT result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamSetLeaderRs_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamSetLeaderRs_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamSetLeaderRs_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamSetLeaderRs_S2C::MergeFrom(const MsgTeamSetLeaderRs_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamSetLeaderRs_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamSetLeaderRs_S2C::CopyFrom(const MsgTeamSetLeaderRs_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamSetLeaderRs_S2C::IsInitialized() const {

  return true;
}

void MsgTeamSetLeaderRs_S2C::Swap(MsgTeamSetLeaderRs_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamSetLeaderRs_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamSetLeaderRs_S2C_descriptor_;
  metadata.reflection = MsgTeamSetLeaderRs_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamRemovePlayer_C2S::kSerialIDFieldNumber;
const int MsgTeamRemovePlayer_C2S::kMsgTypeFieldNumber;
const int MsgTeamRemovePlayer_C2S::kIggidFieldNumber;
const int MsgTeamRemovePlayer_C2S::kMemberIggidFieldNumber;
#endif  // !_MSC_VER

MsgTeamRemovePlayer_C2S::MsgTeamRemovePlayer_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamRemovePlayer_C2S)
}

void MsgTeamRemovePlayer_C2S::InitAsDefaultInstance() {
}

MsgTeamRemovePlayer_C2S::MsgTeamRemovePlayer_C2S(const MsgTeamRemovePlayer_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamRemovePlayer_C2S)
}

void MsgTeamRemovePlayer_C2S::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 30010;
  iggid_ = GOOGLE_LONGLONG(0);
  member_iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamRemovePlayer_C2S::~MsgTeamRemovePlayer_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamRemovePlayer_C2S)
  SharedDtor();
}

void MsgTeamRemovePlayer_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamRemovePlayer_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamRemovePlayer_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamRemovePlayer_C2S_descriptor_;
}

const MsgTeamRemovePlayer_C2S& MsgTeamRemovePlayer_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamRemovePlayer_C2S* MsgTeamRemovePlayer_C2S::default_instance_ = NULL;

MsgTeamRemovePlayer_C2S* MsgTeamRemovePlayer_C2S::New() const {
  return new MsgTeamRemovePlayer_C2S;
}

void MsgTeamRemovePlayer_C2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamRemovePlayer_C2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, member_iggid_);
    serialid_ = 0;
    msgtype_ = 30010;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamRemovePlayer_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamRemovePlayer_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REMOVE_PLAYER_C2S];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_member_iggid;
        break;
      }

      // optional int64 member_iggid = 4;
      case 4: {
        if (tag == 32) {
         parse_member_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &member_iggid_)));
          set_has_member_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamRemovePlayer_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamRemovePlayer_C2S)
  return false;
#undef DO_
}

void MsgTeamRemovePlayer_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamRemovePlayer_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REMOVE_PLAYER_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int64 member_iggid = 4;
  if (has_member_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->member_iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamRemovePlayer_C2S)
}

::google::protobuf::uint8* MsgTeamRemovePlayer_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamRemovePlayer_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REMOVE_PLAYER_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int64 member_iggid = 4;
  if (has_member_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->member_iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamRemovePlayer_C2S)
  return target;
}

int MsgTeamRemovePlayer_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REMOVE_PLAYER_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 member_iggid = 4;
    if (has_member_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->member_iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamRemovePlayer_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamRemovePlayer_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamRemovePlayer_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamRemovePlayer_C2S::MergeFrom(const MsgTeamRemovePlayer_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_member_iggid()) {
      set_member_iggid(from.member_iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamRemovePlayer_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamRemovePlayer_C2S::CopyFrom(const MsgTeamRemovePlayer_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamRemovePlayer_C2S::IsInitialized() const {

  return true;
}

void MsgTeamRemovePlayer_C2S::Swap(MsgTeamRemovePlayer_C2S* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(member_iggid_, other->member_iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamRemovePlayer_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamRemovePlayer_C2S_descriptor_;
  metadata.reflection = MsgTeamRemovePlayer_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamRemovePlayerRs_S2C::kSerialIDFieldNumber;
const int MsgTeamRemovePlayerRs_S2C::kMsgTypeFieldNumber;
const int MsgTeamRemovePlayerRs_S2C::kIggidFieldNumber;
const int MsgTeamRemovePlayerRs_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

MsgTeamRemovePlayerRs_S2C::MsgTeamRemovePlayerRs_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamRemovePlayerRs_S2C)
}

void MsgTeamRemovePlayerRs_S2C::InitAsDefaultInstance() {
}

MsgTeamRemovePlayerRs_S2C::MsgTeamRemovePlayerRs_S2C(const MsgTeamRemovePlayerRs_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamRemovePlayerRs_S2C)
}

void MsgTeamRemovePlayerRs_S2C::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2111;
  iggid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamRemovePlayerRs_S2C::~MsgTeamRemovePlayerRs_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamRemovePlayerRs_S2C)
  SharedDtor();
}

void MsgTeamRemovePlayerRs_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamRemovePlayerRs_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamRemovePlayerRs_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamRemovePlayerRs_S2C_descriptor_;
}

const MsgTeamRemovePlayerRs_S2C& MsgTeamRemovePlayerRs_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamRemovePlayerRs_S2C* MsgTeamRemovePlayerRs_S2C::default_instance_ = NULL;

MsgTeamRemovePlayerRs_S2C* MsgTeamRemovePlayerRs_S2C::New() const {
  return new MsgTeamRemovePlayerRs_S2C;
}

void MsgTeamRemovePlayerRs_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamRemovePlayerRs_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, result_);
    serialid_ = 0;
    msgtype_ = 2111;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamRemovePlayerRs_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamRemovePlayerRs_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REMOVE_PLAYER_RS_S2C];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .MsgPB.REMOVE_TEAMMEMBER_RESULT result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::REMOVE_TEAMMEMBER_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::REMOVE_TEAMMEMBER_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamRemovePlayerRs_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamRemovePlayerRs_S2C)
  return false;
#undef DO_
}

void MsgTeamRemovePlayerRs_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamRemovePlayerRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REMOVE_PLAYER_RS_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional .MsgPB.REMOVE_TEAMMEMBER_RESULT result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamRemovePlayerRs_S2C)
}

::google::protobuf::uint8* MsgTeamRemovePlayerRs_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamRemovePlayerRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REMOVE_PLAYER_RS_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional .MsgPB.REMOVE_TEAMMEMBER_RESULT result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamRemovePlayerRs_S2C)
  return target;
}

int MsgTeamRemovePlayerRs_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_REMOVE_PLAYER_RS_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.REMOVE_TEAMMEMBER_RESULT result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamRemovePlayerRs_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamRemovePlayerRs_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamRemovePlayerRs_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamRemovePlayerRs_S2C::MergeFrom(const MsgTeamRemovePlayerRs_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamRemovePlayerRs_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamRemovePlayerRs_S2C::CopyFrom(const MsgTeamRemovePlayerRs_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamRemovePlayerRs_S2C::IsInitialized() const {

  return true;
}

void MsgTeamRemovePlayerRs_S2C::Swap(MsgTeamRemovePlayerRs_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamRemovePlayerRs_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamRemovePlayerRs_S2C_descriptor_;
  metadata.reflection = MsgTeamRemovePlayerRs_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamAutoJoinTeam_C2S::kSerialIDFieldNumber;
const int MsgTeamAutoJoinTeam_C2S::kMsgTypeFieldNumber;
const int MsgTeamAutoJoinTeam_C2S::kIggidFieldNumber;
const int MsgTeamAutoJoinTeam_C2S::kMapdataidFieldNumber;
#endif  // !_MSC_VER

MsgTeamAutoJoinTeam_C2S::MsgTeamAutoJoinTeam_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamAutoJoinTeam_C2S)
}

void MsgTeamAutoJoinTeam_C2S::InitAsDefaultInstance() {
}

MsgTeamAutoJoinTeam_C2S::MsgTeamAutoJoinTeam_C2S(const MsgTeamAutoJoinTeam_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamAutoJoinTeam_C2S)
}

void MsgTeamAutoJoinTeam_C2S::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 30011;
  iggid_ = GOOGLE_LONGLONG(0);
  mapdataid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamAutoJoinTeam_C2S::~MsgTeamAutoJoinTeam_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamAutoJoinTeam_C2S)
  SharedDtor();
}

void MsgTeamAutoJoinTeam_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamAutoJoinTeam_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamAutoJoinTeam_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamAutoJoinTeam_C2S_descriptor_;
}

const MsgTeamAutoJoinTeam_C2S& MsgTeamAutoJoinTeam_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamAutoJoinTeam_C2S* MsgTeamAutoJoinTeam_C2S::default_instance_ = NULL;

MsgTeamAutoJoinTeam_C2S* MsgTeamAutoJoinTeam_C2S::New() const {
  return new MsgTeamAutoJoinTeam_C2S;
}

void MsgTeamAutoJoinTeam_C2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamAutoJoinTeam_C2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, mapdataid_);
    serialid_ = 0;
    msgtype_ = 30011;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamAutoJoinTeam_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamAutoJoinTeam_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_AUTO_JOIN_TEAM_C2S];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapdataid;
        break;
      }

      // optional int32 mapdataid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapdataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapdataid_)));
          set_has_mapdataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamAutoJoinTeam_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamAutoJoinTeam_C2S)
  return false;
#undef DO_
}

void MsgTeamAutoJoinTeam_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamAutoJoinTeam_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_AUTO_JOIN_TEAM_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int32 mapdataid = 4;
  if (has_mapdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapdataid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamAutoJoinTeam_C2S)
}

::google::protobuf::uint8* MsgTeamAutoJoinTeam_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamAutoJoinTeam_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_AUTO_JOIN_TEAM_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int32 mapdataid = 4;
  if (has_mapdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapdataid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamAutoJoinTeam_C2S)
  return target;
}

int MsgTeamAutoJoinTeam_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_AUTO_JOIN_TEAM_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapdataid = 4;
    if (has_mapdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapdataid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamAutoJoinTeam_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamAutoJoinTeam_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamAutoJoinTeam_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamAutoJoinTeam_C2S::MergeFrom(const MsgTeamAutoJoinTeam_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapdataid()) {
      set_mapdataid(from.mapdataid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamAutoJoinTeam_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamAutoJoinTeam_C2S::CopyFrom(const MsgTeamAutoJoinTeam_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamAutoJoinTeam_C2S::IsInitialized() const {

  return true;
}

void MsgTeamAutoJoinTeam_C2S::Swap(MsgTeamAutoJoinTeam_C2S* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapdataid_, other->mapdataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamAutoJoinTeam_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamAutoJoinTeam_C2S_descriptor_;
  metadata.reflection = MsgTeamAutoJoinTeam_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamAutoJoinTeamRs_S2C::kSerialIDFieldNumber;
const int MsgTeamAutoJoinTeamRs_S2C::kMsgTypeFieldNumber;
const int MsgTeamAutoJoinTeamRs_S2C::kIggidFieldNumber;
const int MsgTeamAutoJoinTeamRs_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

MsgTeamAutoJoinTeamRs_S2C::MsgTeamAutoJoinTeamRs_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamAutoJoinTeamRs_S2C)
}

void MsgTeamAutoJoinTeamRs_S2C::InitAsDefaultInstance() {
}

MsgTeamAutoJoinTeamRs_S2C::MsgTeamAutoJoinTeamRs_S2C(const MsgTeamAutoJoinTeamRs_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamAutoJoinTeamRs_S2C)
}

void MsgTeamAutoJoinTeamRs_S2C::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2113;
  iggid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamAutoJoinTeamRs_S2C::~MsgTeamAutoJoinTeamRs_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamAutoJoinTeamRs_S2C)
  SharedDtor();
}

void MsgTeamAutoJoinTeamRs_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamAutoJoinTeamRs_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamAutoJoinTeamRs_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamAutoJoinTeamRs_S2C_descriptor_;
}

const MsgTeamAutoJoinTeamRs_S2C& MsgTeamAutoJoinTeamRs_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamAutoJoinTeamRs_S2C* MsgTeamAutoJoinTeamRs_S2C::default_instance_ = NULL;

MsgTeamAutoJoinTeamRs_S2C* MsgTeamAutoJoinTeamRs_S2C::New() const {
  return new MsgTeamAutoJoinTeamRs_S2C;
}

void MsgTeamAutoJoinTeamRs_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamAutoJoinTeamRs_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, result_);
    serialid_ = 0;
    msgtype_ = 2113;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamAutoJoinTeamRs_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamAutoJoinTeamRs_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_AUTO_JOIN_TEAM_RS_S2C];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .MsgPB.AUTO_JOINTEAM_RESULT result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::AUTO_JOINTEAM_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::AUTO_JOINTEAM_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamAutoJoinTeamRs_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamAutoJoinTeamRs_S2C)
  return false;
#undef DO_
}

void MsgTeamAutoJoinTeamRs_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamAutoJoinTeamRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_AUTO_JOIN_TEAM_RS_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional .MsgPB.AUTO_JOINTEAM_RESULT result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamAutoJoinTeamRs_S2C)
}

::google::protobuf::uint8* MsgTeamAutoJoinTeamRs_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamAutoJoinTeamRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_AUTO_JOIN_TEAM_RS_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional .MsgPB.AUTO_JOINTEAM_RESULT result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamAutoJoinTeamRs_S2C)
  return target;
}

int MsgTeamAutoJoinTeamRs_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_AUTO_JOIN_TEAM_RS_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.AUTO_JOINTEAM_RESULT result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamAutoJoinTeamRs_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamAutoJoinTeamRs_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamAutoJoinTeamRs_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamAutoJoinTeamRs_S2C::MergeFrom(const MsgTeamAutoJoinTeamRs_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamAutoJoinTeamRs_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamAutoJoinTeamRs_S2C::CopyFrom(const MsgTeamAutoJoinTeamRs_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamAutoJoinTeamRs_S2C::IsInitialized() const {

  return true;
}

void MsgTeamAutoJoinTeamRs_S2C::Swap(MsgTeamAutoJoinTeamRs_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamAutoJoinTeamRs_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamAutoJoinTeamRs_S2C_descriptor_;
  metadata.reflection = MsgTeamAutoJoinTeamRs_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamNotifyTeamDisbanded_S2C::kSerialIDFieldNumber;
const int MsgTeamNotifyTeamDisbanded_S2C::kMsgTypeFieldNumber;
const int MsgTeamNotifyTeamDisbanded_S2C::kIggidFieldNumber;
const int MsgTeamNotifyTeamDisbanded_S2C::kResonFieldNumber;
#endif  // !_MSC_VER

MsgTeamNotifyTeamDisbanded_S2C::MsgTeamNotifyTeamDisbanded_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamNotifyTeamDisbanded_S2C)
}

void MsgTeamNotifyTeamDisbanded_S2C::InitAsDefaultInstance() {
}

MsgTeamNotifyTeamDisbanded_S2C::MsgTeamNotifyTeamDisbanded_S2C(const MsgTeamNotifyTeamDisbanded_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamNotifyTeamDisbanded_S2C)
}

void MsgTeamNotifyTeamDisbanded_S2C::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2114;
  iggid_ = GOOGLE_LONGLONG(0);
  reson_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamNotifyTeamDisbanded_S2C::~MsgTeamNotifyTeamDisbanded_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamNotifyTeamDisbanded_S2C)
  SharedDtor();
}

void MsgTeamNotifyTeamDisbanded_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamNotifyTeamDisbanded_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamNotifyTeamDisbanded_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamNotifyTeamDisbanded_S2C_descriptor_;
}

const MsgTeamNotifyTeamDisbanded_S2C& MsgTeamNotifyTeamDisbanded_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamNotifyTeamDisbanded_S2C* MsgTeamNotifyTeamDisbanded_S2C::default_instance_ = NULL;

MsgTeamNotifyTeamDisbanded_S2C* MsgTeamNotifyTeamDisbanded_S2C::New() const {
  return new MsgTeamNotifyTeamDisbanded_S2C;
}

void MsgTeamNotifyTeamDisbanded_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamNotifyTeamDisbanded_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, reson_);
    serialid_ = 0;
    msgtype_ = 2114;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamNotifyTeamDisbanded_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamNotifyTeamDisbanded_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_NOTIFY_TEAM_DISBANDED_S2C];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reson;
        break;
      }

      // optional .MsgPB.TEAM_DISBANDED_REASON reson = 4;
      case 4: {
        if (tag == 32) {
         parse_reson:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::TEAM_DISBANDED_REASON_IsValid(value)) {
            set_reson(static_cast< ::MsgPB::TEAM_DISBANDED_REASON >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamNotifyTeamDisbanded_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamNotifyTeamDisbanded_S2C)
  return false;
#undef DO_
}

void MsgTeamNotifyTeamDisbanded_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamNotifyTeamDisbanded_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_NOTIFY_TEAM_DISBANDED_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional .MsgPB.TEAM_DISBANDED_REASON reson = 4;
  if (has_reson()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reson(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamNotifyTeamDisbanded_S2C)
}

::google::protobuf::uint8* MsgTeamNotifyTeamDisbanded_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamNotifyTeamDisbanded_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_NOTIFY_TEAM_DISBANDED_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional .MsgPB.TEAM_DISBANDED_REASON reson = 4;
  if (has_reson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reson(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamNotifyTeamDisbanded_S2C)
  return target;
}

int MsgTeamNotifyTeamDisbanded_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_NOTIFY_TEAM_DISBANDED_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.TEAM_DISBANDED_REASON reson = 4;
    if (has_reson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reson());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamNotifyTeamDisbanded_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamNotifyTeamDisbanded_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamNotifyTeamDisbanded_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamNotifyTeamDisbanded_S2C::MergeFrom(const MsgTeamNotifyTeamDisbanded_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_reson()) {
      set_reson(from.reson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamNotifyTeamDisbanded_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamNotifyTeamDisbanded_S2C::CopyFrom(const MsgTeamNotifyTeamDisbanded_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamNotifyTeamDisbanded_S2C::IsInitialized() const {

  return true;
}

void MsgTeamNotifyTeamDisbanded_S2C::Swap(MsgTeamNotifyTeamDisbanded_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(reson_, other->reson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamNotifyTeamDisbanded_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamNotifyTeamDisbanded_S2C_descriptor_;
  metadata.reflection = MsgTeamNotifyTeamDisbanded_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamDungeonReadyToGo_S2C::kSerialIDFieldNumber;
const int MsgTeamDungeonReadyToGo_S2C::kMsgTypeFieldNumber;
const int MsgTeamDungeonReadyToGo_S2C::kIggidFieldNumber;
const int MsgTeamDungeonReadyToGo_S2C::kTeamidFieldNumber;
const int MsgTeamDungeonReadyToGo_S2C::kMapdataidFieldNumber;
const int MsgTeamDungeonReadyToGo_S2C::kCountdownFieldNumber;
#endif  // !_MSC_VER

MsgTeamDungeonReadyToGo_S2C::MsgTeamDungeonReadyToGo_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamDungeonReadyToGo_S2C)
}

void MsgTeamDungeonReadyToGo_S2C::InitAsDefaultInstance() {
}

MsgTeamDungeonReadyToGo_S2C::MsgTeamDungeonReadyToGo_S2C(const MsgTeamDungeonReadyToGo_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamDungeonReadyToGo_S2C)
}

void MsgTeamDungeonReadyToGo_S2C::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2115;
  iggid_ = GOOGLE_LONGLONG(0);
  teamid_ = 0;
  mapdataid_ = 0;
  countdown_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamDungeonReadyToGo_S2C::~MsgTeamDungeonReadyToGo_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamDungeonReadyToGo_S2C)
  SharedDtor();
}

void MsgTeamDungeonReadyToGo_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamDungeonReadyToGo_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamDungeonReadyToGo_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamDungeonReadyToGo_S2C_descriptor_;
}

const MsgTeamDungeonReadyToGo_S2C& MsgTeamDungeonReadyToGo_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamDungeonReadyToGo_S2C* MsgTeamDungeonReadyToGo_S2C::default_instance_ = NULL;

MsgTeamDungeonReadyToGo_S2C* MsgTeamDungeonReadyToGo_S2C::New() const {
  return new MsgTeamDungeonReadyToGo_S2C;
}

void MsgTeamDungeonReadyToGo_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamDungeonReadyToGo_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(iggid_, countdown_);
    serialid_ = 0;
    msgtype_ = 2115;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamDungeonReadyToGo_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamDungeonReadyToGo_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_DUNGEON_READY_TO_GO_S2C];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 4;
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapdataid;
        break;
      }

      // optional int32 mapdataid = 5;
      case 5: {
        if (tag == 40) {
         parse_mapdataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapdataid_)));
          set_has_mapdataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_countdown;
        break;
      }

      // optional int32 countdown = 6;
      case 6: {
        if (tag == 48) {
         parse_countdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamDungeonReadyToGo_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamDungeonReadyToGo_S2C)
  return false;
#undef DO_
}

void MsgTeamDungeonReadyToGo_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamDungeonReadyToGo_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_DUNGEON_READY_TO_GO_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int32 teamid = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamid(), output);
  }

  // optional int32 mapdataid = 5;
  if (has_mapdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapdataid(), output);
  }

  // optional int32 countdown = 6;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->countdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamDungeonReadyToGo_S2C)
}

::google::protobuf::uint8* MsgTeamDungeonReadyToGo_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamDungeonReadyToGo_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_DUNGEON_READY_TO_GO_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int32 teamid = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamid(), target);
  }

  // optional int32 mapdataid = 5;
  if (has_mapdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapdataid(), target);
  }

  // optional int32 countdown = 6;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->countdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamDungeonReadyToGo_S2C)
  return target;
}

int MsgTeamDungeonReadyToGo_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_DUNGEON_READY_TO_GO_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int32 mapdataid = 5;
    if (has_mapdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapdataid());
    }

    // optional int32 countdown = 6;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamDungeonReadyToGo_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamDungeonReadyToGo_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamDungeonReadyToGo_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamDungeonReadyToGo_S2C::MergeFrom(const MsgTeamDungeonReadyToGo_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mapdataid()) {
      set_mapdataid(from.mapdataid());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamDungeonReadyToGo_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamDungeonReadyToGo_S2C::CopyFrom(const MsgTeamDungeonReadyToGo_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamDungeonReadyToGo_S2C::IsInitialized() const {

  return true;
}

void MsgTeamDungeonReadyToGo_S2C::Swap(MsgTeamDungeonReadyToGo_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(teamid_, other->teamid_);
    std::swap(mapdataid_, other->mapdataid_);
    std::swap(countdown_, other->countdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamDungeonReadyToGo_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamDungeonReadyToGo_S2C_descriptor_;
  metadata.reflection = MsgTeamDungeonReadyToGo_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamInfo_S2C::kSerialIDFieldNumber;
const int MsgTeamInfo_S2C::kMsgTypeFieldNumber;
const int MsgTeamInfo_S2C::kIggidFieldNumber;
const int MsgTeamInfo_S2C::kTeamIDFieldNumber;
const int MsgTeamInfo_S2C::kMapDataIDFieldNumber;
const int MsgTeamInfo_S2C::kLeaderIggidFieldNumber;
const int MsgTeamInfo_S2C::kStartTimeFieldNumber;
const int MsgTeamInfo_S2C::kEndTimeFieldNumber;
const int MsgTeamInfo_S2C::kTeamChatJIDFieldNumber;
const int MsgTeamInfo_S2C::kOpenJoinFieldNumber;
const int MsgTeamInfo_S2C::kTeamStatusFieldNumber;
#endif  // !_MSC_VER

MsgTeamInfo_S2C::MsgTeamInfo_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamInfo_S2C)
}

void MsgTeamInfo_S2C::InitAsDefaultInstance() {
}

MsgTeamInfo_S2C::MsgTeamInfo_S2C(const MsgTeamInfo_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamInfo_S2C)
}

void MsgTeamInfo_S2C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2130;
  iggid_ = GOOGLE_LONGLONG(0);
  teamid_ = 0;
  mapdataid_ = 0;
  leaderiggid_ = GOOGLE_LONGLONG(0);
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  teamchatjid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_join_ = 0;
  team_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamInfo_S2C::~MsgTeamInfo_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamInfo_S2C)
  SharedDtor();
}

void MsgTeamInfo_S2C::SharedDtor() {
  if (teamchatjid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamchatjid_;
  }
  if (this != default_instance_) {
  }
}

void MsgTeamInfo_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamInfo_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamInfo_S2C_descriptor_;
}

const MsgTeamInfo_S2C& MsgTeamInfo_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamInfo_S2C* MsgTeamInfo_S2C::default_instance_ = NULL;

MsgTeamInfo_S2C* MsgTeamInfo_S2C::New() const {
  return new MsgTeamInfo_S2C;
}

void MsgTeamInfo_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamInfo_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(iggid_, end_time_);
    serialid_ = 0;
    msgtype_ = 2130;
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(open_join_, team_status_);
    if (has_teamchatjid()) {
      if (teamchatjid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        teamchatjid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamInfo_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamInfo_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_INFO];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TeamID;
        break;
      }

      // optional int32 TeamID = 4;
      case 4: {
        if (tag == 32) {
         parse_TeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MapDataID;
        break;
      }

      // optional int32 MapDataID = 5;
      case 5: {
        if (tag == 40) {
         parse_MapDataID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapdataid_)));
          set_has_mapdataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_LeaderIggid;
        break;
      }

      // optional int64 LeaderIggid = 6;
      case 6: {
        if (tag == 48) {
         parse_LeaderIggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leaderiggid_)));
          set_has_leaderiggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 7;
      case 7: {
        if (tag == 56) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 8;
      case 8: {
        if (tag == 64) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_teamChatJID;
        break;
      }

      // optional string teamChatJID = 9;
      case 9: {
        if (tag == 74) {
         parse_teamChatJID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamchatjid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamchatjid().data(), this->teamchatjid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "teamchatjid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_open_join;
        break;
      }

      // optional int32 open_join = 10;
      case 10: {
        if (tag == 80) {
         parse_open_join:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_join_)));
          set_has_open_join();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_team_status;
        break;
      }

      // optional .MsgPB.PB_TEAM_STATUS team_status = 11;
      case 11: {
        if (tag == 88) {
         parse_team_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::PB_TEAM_STATUS_IsValid(value)) {
            set_team_status(static_cast< ::MsgPB::PB_TEAM_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamInfo_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamInfo_S2C)
  return false;
#undef DO_
}

void MsgTeamInfo_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamInfo_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_INFO];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int32 TeamID = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamid(), output);
  }

  // optional int32 MapDataID = 5;
  if (has_mapdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapdataid(), output);
  }

  // optional int64 LeaderIggid = 6;
  if (has_leaderiggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->leaderiggid(), output);
  }

  // optional int64 start_time = 7;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->start_time(), output);
  }

  // optional int64 end_time = 8;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->end_time(), output);
  }

  // optional string teamChatJID = 9;
  if (has_teamchatjid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamchatjid().data(), this->teamchatjid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamchatjid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->teamchatjid(), output);
  }

  // optional int32 open_join = 10;
  if (has_open_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->open_join(), output);
  }

  // optional .MsgPB.PB_TEAM_STATUS team_status = 11;
  if (has_team_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->team_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamInfo_S2C)
}

::google::protobuf::uint8* MsgTeamInfo_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamInfo_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_INFO];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int32 TeamID = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamid(), target);
  }

  // optional int32 MapDataID = 5;
  if (has_mapdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapdataid(), target);
  }

  // optional int64 LeaderIggid = 6;
  if (has_leaderiggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->leaderiggid(), target);
  }

  // optional int64 start_time = 7;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->start_time(), target);
  }

  // optional int64 end_time = 8;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->end_time(), target);
  }

  // optional string teamChatJID = 9;
  if (has_teamchatjid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamchatjid().data(), this->teamchatjid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamchatjid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->teamchatjid(), target);
  }

  // optional int32 open_join = 10;
  if (has_open_join()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->open_join(), target);
  }

  // optional .MsgPB.PB_TEAM_STATUS team_status = 11;
  if (has_team_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->team_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamInfo_S2C)
  return target;
}

int MsgTeamInfo_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_INFO];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 TeamID = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int32 MapDataID = 5;
    if (has_mapdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapdataid());
    }

    // optional int64 LeaderIggid = 6;
    if (has_leaderiggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leaderiggid());
    }

    // optional int64 start_time = 7;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 8;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string teamChatJID = 9;
    if (has_teamchatjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamchatjid());
    }

    // optional int32 open_join = 10;
    if (has_open_join()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_join());
    }

    // optional .MsgPB.PB_TEAM_STATUS team_status = 11;
    if (has_team_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamInfo_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamInfo_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamInfo_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamInfo_S2C::MergeFrom(const MsgTeamInfo_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mapdataid()) {
      set_mapdataid(from.mapdataid());
    }
    if (from.has_leaderiggid()) {
      set_leaderiggid(from.leaderiggid());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_teamchatjid()) {
      set_teamchatjid(from.teamchatjid());
    }
    if (from.has_open_join()) {
      set_open_join(from.open_join());
    }
    if (from.has_team_status()) {
      set_team_status(from.team_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamInfo_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamInfo_S2C::CopyFrom(const MsgTeamInfo_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamInfo_S2C::IsInitialized() const {

  return true;
}

void MsgTeamInfo_S2C::Swap(MsgTeamInfo_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(teamid_, other->teamid_);
    std::swap(mapdataid_, other->mapdataid_);
    std::swap(leaderiggid_, other->leaderiggid_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(teamchatjid_, other->teamchatjid_);
    std::swap(open_join_, other->open_join_);
    std::swap(team_status_, other->team_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamInfo_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamInfo_S2C_descriptor_;
  metadata.reflection = MsgTeamInfo_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamPlayerInfo::kIggidFieldNumber;
const int MsgTeamPlayerInfo::kLvFieldNumber;
const int MsgTeamPlayerInfo::kNicknameFieldNumber;
const int MsgTeamPlayerInfo::kGenderFieldNumber;
const int MsgTeamPlayerInfo::kSkincolorFieldNumber;
const int MsgTeamPlayerInfo::kHairFieldNumber;
const int MsgTeamPlayerInfo::kHaircolorFieldNumber;
const int MsgTeamPlayerInfo::kItemdataFieldNumber;
const int MsgTeamPlayerInfo::kPosFieldNumber;
#endif  // !_MSC_VER

MsgTeamPlayerInfo::MsgTeamPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamPlayerInfo)
}

void MsgTeamPlayerInfo::InitAsDefaultInstance() {
}

MsgTeamPlayerInfo::MsgTeamPlayerInfo(const MsgTeamPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamPlayerInfo)
}

void MsgTeamPlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  skincolor_ = 0;
  hair_ = 0;
  haircolor_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamPlayerInfo::~MsgTeamPlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamPlayerInfo)
  SharedDtor();
}

void MsgTeamPlayerInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void MsgTeamPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamPlayerInfo_descriptor_;
}

const MsgTeamPlayerInfo& MsgTeamPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamPlayerInfo* MsgTeamPlayerInfo::default_instance_ = NULL;

MsgTeamPlayerInfo* MsgTeamPlayerInfo::New() const {
  return new MsgTeamPlayerInfo;
}

void MsgTeamPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(lv_, hair_);
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    haircolor_ = 0;
  }
  pos_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iggid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (tag == 16) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional int32 gender = 4;
      case 4: {
        if (tag == 32) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skincolor;
        break;
      }

      // optional int32 skincolor = 5;
      case 5: {
        if (tag == 40) {
         parse_skincolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skincolor_)));
          set_has_skincolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hair;
        break;
      }

      // optional int32 hair = 6;
      case 6: {
        if (tag == 48) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_haircolor;
        break;
      }

      // optional int32 haircolor = 7;
      case 7: {
        if (tag == 56) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_itemdata;
        break;
      }

      // repeated .MsgPB.MsgItemCommonData itemdata = 8;
      case 8: {
        if (tag == 66) {
         parse_itemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_itemdata;
        if (input->ExpectTag(72)) goto parse_pos;
        break;
      }

      // optional int32 pos = 9;
      case 9: {
        if (tag == 72) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamPlayerInfo)
  return false;
#undef DO_
}

void MsgTeamPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamPlayerInfo)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iggid(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional int32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gender(), output);
  }

  // optional int32 skincolor = 5;
  if (has_skincolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skincolor(), output);
  }

  // optional int32 hair = 6;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hair(), output);
  }

  // optional int32 haircolor = 7;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->haircolor(), output);
  }

  // repeated .MsgPB.MsgItemCommonData itemdata = 8;
  for (int i = 0; i < this->itemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->itemdata(i), output);
  }

  // optional int32 pos = 9;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamPlayerInfo)
}

::google::protobuf::uint8* MsgTeamPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamPlayerInfo)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iggid(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gender(), target);
  }

  // optional int32 skincolor = 5;
  if (has_skincolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skincolor(), target);
  }

  // optional int32 hair = 6;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hair(), target);
  }

  // optional int32 haircolor = 7;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->haircolor(), target);
  }

  // repeated .MsgPB.MsgItemCommonData itemdata = 8;
  for (int i = 0; i < this->itemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->itemdata(i), target);
  }

  // optional int32 pos = 9;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamPlayerInfo)
  return target;
}

int MsgTeamPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iggid = 1;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 skincolor = 5;
    if (has_skincolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skincolor());
    }

    // optional int32 hair = 6;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // optional int32 haircolor = 7;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haircolor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pos = 9;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  // repeated .MsgPB.MsgItemCommonData itemdata = 8;
  total_size += 1 * this->itemdata_size();
  for (int i = 0; i < this->itemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamPlayerInfo::MergeFrom(const MsgTeamPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdata_.MergeFrom(from.itemdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_skincolor()) {
      set_skincolor(from.skincolor());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamPlayerInfo::CopyFrom(const MsgTeamPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamPlayerInfo::IsInitialized() const {

  return true;
}

void MsgTeamPlayerInfo::Swap(MsgTeamPlayerInfo* other) {
  if (other != this) {
    std::swap(iggid_, other->iggid_);
    std::swap(lv_, other->lv_);
    std::swap(nickname_, other->nickname_);
    std::swap(gender_, other->gender_);
    std::swap(skincolor_, other->skincolor_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    itemdata_.Swap(&other->itemdata_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamPlayerInfo_descriptor_;
  metadata.reflection = MsgTeamPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamMember_S2C::kMsgTypeFieldNumber;
const int MsgTeamMember_S2C::kIggidFieldNumber;
const int MsgTeamMember_S2C::kPlayerinfosFieldNumber;
#endif  // !_MSC_VER

MsgTeamMember_S2C::MsgTeamMember_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamMember_S2C)
}

void MsgTeamMember_S2C::InitAsDefaultInstance() {
}

MsgTeamMember_S2C::MsgTeamMember_S2C(const MsgTeamMember_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamMember_S2C)
}

void MsgTeamMember_S2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2131;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamMember_S2C::~MsgTeamMember_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamMember_S2C)
  SharedDtor();
}

void MsgTeamMember_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamMember_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamMember_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamMember_S2C_descriptor_;
}

const MsgTeamMember_S2C& MsgTeamMember_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamMember_S2C* MsgTeamMember_S2C::default_instance_ = NULL;

MsgTeamMember_S2C* MsgTeamMember_S2C::New() const {
  return new MsgTeamMember_S2C;
}

void MsgTeamMember_S2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 2131;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  playerinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamMember_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamMember_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_MEMBER];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerinfos;
        break;
      }

      // repeated .MsgPB.MsgTeamPlayerInfo playerinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_playerinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamMember_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamMember_S2C)
  return false;
#undef DO_
}

void MsgTeamMember_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamMember_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_MEMBER];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // repeated .MsgPB.MsgTeamPlayerInfo playerinfos = 3;
  for (int i = 0; i < this->playerinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamMember_S2C)
}

::google::protobuf::uint8* MsgTeamMember_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamMember_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_MEMBER];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // repeated .MsgPB.MsgTeamPlayerInfo playerinfos = 3;
  for (int i = 0; i < this->playerinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamMember_S2C)
  return target;
}

int MsgTeamMember_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_MEMBER];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  // repeated .MsgPB.MsgTeamPlayerInfo playerinfos = 3;
  total_size += 1 * this->playerinfos_size();
  for (int i = 0; i < this->playerinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamMember_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamMember_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamMember_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamMember_S2C::MergeFrom(const MsgTeamMember_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfos_.MergeFrom(from.playerinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamMember_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamMember_S2C::CopyFrom(const MsgTeamMember_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamMember_S2C::IsInitialized() const {

  return true;
}

void MsgTeamMember_S2C::Swap(MsgTeamMember_S2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    playerinfos_.Swap(&other->playerinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamMember_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamMember_S2C_descriptor_;
  metadata.reflection = MsgTeamMember_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamInvite_C2S::kSerialIDFieldNumber;
const int MsgTeamInvite_C2S::kMsgTypeFieldNumber;
const int MsgTeamInvite_C2S::kIggidFieldNumber;
const int MsgTeamInvite_C2S::kTargetIggidsFieldNumber;
#endif  // !_MSC_VER

MsgTeamInvite_C2S::MsgTeamInvite_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamInvite_C2S)
}

void MsgTeamInvite_C2S::InitAsDefaultInstance() {
}

MsgTeamInvite_C2S::MsgTeamInvite_C2S(const MsgTeamInvite_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamInvite_C2S)
}

void MsgTeamInvite_C2S::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 30013;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamInvite_C2S::~MsgTeamInvite_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamInvite_C2S)
  SharedDtor();
}

void MsgTeamInvite_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamInvite_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamInvite_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamInvite_C2S_descriptor_;
}

const MsgTeamInvite_C2S& MsgTeamInvite_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamInvite_C2S* MsgTeamInvite_C2S::default_instance_ = NULL;

MsgTeamInvite_C2S* MsgTeamInvite_C2S::New() const {
  return new MsgTeamInvite_C2S;
}

void MsgTeamInvite_C2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    serialid_ = 0;
    msgtype_ = 30013;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  target_iggids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamInvite_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamInvite_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_INVITE_C2S];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target_iggids;
        break;
      }

      // repeated int64 target_iggids = 4;
      case 4: {
        if (tag == 32) {
         parse_target_iggids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_target_iggids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_target_iggids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target_iggids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamInvite_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamInvite_C2S)
  return false;
#undef DO_
}

void MsgTeamInvite_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamInvite_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_INVITE_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // repeated int64 target_iggids = 4;
  for (int i = 0; i < this->target_iggids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->target_iggids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamInvite_C2S)
}

::google::protobuf::uint8* MsgTeamInvite_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamInvite_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_INVITE_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // repeated int64 target_iggids = 4;
  for (int i = 0; i < this->target_iggids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->target_iggids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamInvite_C2S)
  return target;
}

int MsgTeamInvite_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_INVITE_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  // repeated int64 target_iggids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->target_iggids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->target_iggids(i));
    }
    total_size += 1 * this->target_iggids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamInvite_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamInvite_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamInvite_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamInvite_C2S::MergeFrom(const MsgTeamInvite_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_iggids_.MergeFrom(from.target_iggids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamInvite_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamInvite_C2S::CopyFrom(const MsgTeamInvite_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamInvite_C2S::IsInitialized() const {

  return true;
}

void MsgTeamInvite_C2S::Swap(MsgTeamInvite_C2S* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    target_iggids_.Swap(&other->target_iggids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamInvite_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamInvite_C2S_descriptor_;
  metadata.reflection = MsgTeamInvite_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamInviteRs_S2C::kSerialIDFieldNumber;
const int MsgTeamInviteRs_S2C::kMsgTypeFieldNumber;
const int MsgTeamInviteRs_S2C::kIggidFieldNumber;
const int MsgTeamInviteRs_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

MsgTeamInviteRs_S2C::MsgTeamInviteRs_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamInviteRs_S2C)
}

void MsgTeamInviteRs_S2C::InitAsDefaultInstance() {
}

MsgTeamInviteRs_S2C::MsgTeamInviteRs_S2C(const MsgTeamInviteRs_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamInviteRs_S2C)
}

void MsgTeamInviteRs_S2C::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2117;
  iggid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamInviteRs_S2C::~MsgTeamInviteRs_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamInviteRs_S2C)
  SharedDtor();
}

void MsgTeamInviteRs_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamInviteRs_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamInviteRs_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamInviteRs_S2C_descriptor_;
}

const MsgTeamInviteRs_S2C& MsgTeamInviteRs_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamInviteRs_S2C* MsgTeamInviteRs_S2C::default_instance_ = NULL;

MsgTeamInviteRs_S2C* MsgTeamInviteRs_S2C::New() const {
  return new MsgTeamInviteRs_S2C;
}

void MsgTeamInviteRs_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamInviteRs_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, result_);
    serialid_ = 0;
    msgtype_ = 2117;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamInviteRs_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamInviteRs_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_INVITE_RS_S2C];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .MsgPB.TEAM_INVITE_RESULT result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::TEAM_INVITE_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::TEAM_INVITE_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamInviteRs_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamInviteRs_S2C)
  return false;
#undef DO_
}

void MsgTeamInviteRs_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamInviteRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_INVITE_RS_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional .MsgPB.TEAM_INVITE_RESULT result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamInviteRs_S2C)
}

::google::protobuf::uint8* MsgTeamInviteRs_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamInviteRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_INVITE_RS_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional .MsgPB.TEAM_INVITE_RESULT result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamInviteRs_S2C)
  return target;
}

int MsgTeamInviteRs_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_INVITE_RS_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.TEAM_INVITE_RESULT result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamInviteRs_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamInviteRs_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamInviteRs_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamInviteRs_S2C::MergeFrom(const MsgTeamInviteRs_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamInviteRs_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamInviteRs_S2C::CopyFrom(const MsgTeamInviteRs_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamInviteRs_S2C::IsInitialized() const {

  return true;
}

void MsgTeamInviteRs_S2C::Swap(MsgTeamInviteRs_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamInviteRs_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamInviteRs_S2C_descriptor_;
  metadata.reflection = MsgTeamInviteRs_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamInviteNotify_S2C::kMsgTypeFieldNumber;
const int MsgTeamInviteNotify_S2C::kIggidFieldNumber;
const int MsgTeamInviteNotify_S2C::kTeamidFieldNumber;
const int MsgTeamInviteNotify_S2C::kNicknameFieldNumber;
const int MsgTeamInviteNotify_S2C::kMapdataidFieldNumber;
const int MsgTeamInviteNotify_S2C::kGenderFieldNumber;
#endif  // !_MSC_VER

MsgTeamInviteNotify_S2C::MsgTeamInviteNotify_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamInviteNotify_S2C)
}

void MsgTeamInviteNotify_S2C::InitAsDefaultInstance() {
}

MsgTeamInviteNotify_S2C::MsgTeamInviteNotify_S2C(const MsgTeamInviteNotify_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamInviteNotify_S2C)
}

void MsgTeamInviteNotify_S2C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 2118;
  iggid_ = GOOGLE_LONGLONG(0);
  teamid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapdataid_ = 0;
  gender_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamInviteNotify_S2C::~MsgTeamInviteNotify_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamInviteNotify_S2C)
  SharedDtor();
}

void MsgTeamInviteNotify_S2C::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void MsgTeamInviteNotify_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamInviteNotify_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamInviteNotify_S2C_descriptor_;
}

const MsgTeamInviteNotify_S2C& MsgTeamInviteNotify_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamInviteNotify_S2C* MsgTeamInviteNotify_S2C::default_instance_ = NULL;

MsgTeamInviteNotify_S2C* MsgTeamInviteNotify_S2C::New() const {
  return new MsgTeamInviteNotify_S2C;
}

void MsgTeamInviteNotify_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamInviteNotify_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(mapdataid_, gender_);
    msgtype_ = 2118;
    iggid_ = GOOGLE_LONGLONG(0);
    teamid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamInviteNotify_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamInviteNotify_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_INVITE_NOTIFY_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 3;
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapdataid;
        break;
      }

      // optional int32 mapdataid = 5;
      case 5: {
        if (tag == 40) {
         parse_mapdataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapdataid_)));
          set_has_mapdataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gender;
        break;
      }

      // optional int32 gender = 6;
      case 6: {
        if (tag == 48) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamInviteNotify_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamInviteNotify_S2C)
  return false;
#undef DO_
}

void MsgTeamInviteNotify_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamInviteNotify_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_INVITE_NOTIFY_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teamid(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional int32 mapdataid = 5;
  if (has_mapdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapdataid(), output);
  }

  // optional int32 gender = 6;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamInviteNotify_S2C)
}

::google::protobuf::uint8* MsgTeamInviteNotify_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamInviteNotify_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_INVITE_NOTIFY_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->teamid(), target);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional int32 mapdataid = 5;
  if (has_mapdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapdataid(), target);
  }

  // optional int32 gender = 6;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamInviteNotify_S2C)
  return target;
}

int MsgTeamInviteNotify_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_INVITE_NOTIFY_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 mapdataid = 5;
    if (has_mapdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapdataid());
    }

    // optional int32 gender = 6;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamInviteNotify_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamInviteNotify_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamInviteNotify_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamInviteNotify_S2C::MergeFrom(const MsgTeamInviteNotify_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_mapdataid()) {
      set_mapdataid(from.mapdataid());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamInviteNotify_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamInviteNotify_S2C::CopyFrom(const MsgTeamInviteNotify_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamInviteNotify_S2C::IsInitialized() const {

  return true;
}

void MsgTeamInviteNotify_S2C::Swap(MsgTeamInviteNotify_S2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(teamid_, other->teamid_);
    std::swap(nickname_, other->nickname_);
    std::swap(mapdataid_, other->mapdataid_);
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamInviteNotify_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamInviteNotify_S2C_descriptor_;
  metadata.reflection = MsgTeamInviteNotify_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamAccept_C2S::kSerialIDFieldNumber;
const int MsgTeamAccept_C2S::kMsgTypeFieldNumber;
const int MsgTeamAccept_C2S::kIggidFieldNumber;
const int MsgTeamAccept_C2S::kTeamidFieldNumber;
const int MsgTeamAccept_C2S::kMapdataidFieldNumber;
#endif  // !_MSC_VER

MsgTeamAccept_C2S::MsgTeamAccept_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamAccept_C2S)
}

void MsgTeamAccept_C2S::InitAsDefaultInstance() {
}

MsgTeamAccept_C2S::MsgTeamAccept_C2S(const MsgTeamAccept_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamAccept_C2S)
}

void MsgTeamAccept_C2S::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 30014;
  iggid_ = GOOGLE_LONGLONG(0);
  teamid_ = 0;
  mapdataid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamAccept_C2S::~MsgTeamAccept_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamAccept_C2S)
  SharedDtor();
}

void MsgTeamAccept_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamAccept_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamAccept_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamAccept_C2S_descriptor_;
}

const MsgTeamAccept_C2S& MsgTeamAccept_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamAccept_C2S* MsgTeamAccept_C2S::default_instance_ = NULL;

MsgTeamAccept_C2S* MsgTeamAccept_C2S::New() const {
  return new MsgTeamAccept_C2S;
}

void MsgTeamAccept_C2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamAccept_C2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(iggid_, mapdataid_);
    serialid_ = 0;
    msgtype_ = 30014;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamAccept_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamAccept_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_ACCEPT_C2S];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 4;
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapdataid;
        break;
      }

      // optional int32 mapdataid = 5;
      case 5: {
        if (tag == 40) {
         parse_mapdataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapdataid_)));
          set_has_mapdataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamAccept_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamAccept_C2S)
  return false;
#undef DO_
}

void MsgTeamAccept_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamAccept_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_ACCEPT_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int32 teamid = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamid(), output);
  }

  // optional int32 mapdataid = 5;
  if (has_mapdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapdataid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamAccept_C2S)
}

::google::protobuf::uint8* MsgTeamAccept_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamAccept_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_ACCEPT_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int32 teamid = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamid(), target);
  }

  // optional int32 mapdataid = 5;
  if (has_mapdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapdataid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamAccept_C2S)
  return target;
}

int MsgTeamAccept_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_ACCEPT_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int32 mapdataid = 5;
    if (has_mapdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapdataid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamAccept_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamAccept_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamAccept_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamAccept_C2S::MergeFrom(const MsgTeamAccept_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mapdataid()) {
      set_mapdataid(from.mapdataid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamAccept_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamAccept_C2S::CopyFrom(const MsgTeamAccept_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamAccept_C2S::IsInitialized() const {

  return true;
}

void MsgTeamAccept_C2S::Swap(MsgTeamAccept_C2S* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(teamid_, other->teamid_);
    std::swap(mapdataid_, other->mapdataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamAccept_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamAccept_C2S_descriptor_;
  metadata.reflection = MsgTeamAccept_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamAcceptRs_S2C::kSerialIDFieldNumber;
const int MsgTeamAcceptRs_S2C::kMsgTypeFieldNumber;
const int MsgTeamAcceptRs_S2C::kIggidFieldNumber;
const int MsgTeamAcceptRs_S2C::kResultFieldNumber;
const int MsgTeamAcceptRs_S2C::kTeamidFieldNumber;
const int MsgTeamAcceptRs_S2C::kMapdataidFieldNumber;
#endif  // !_MSC_VER

MsgTeamAcceptRs_S2C::MsgTeamAcceptRs_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamAcceptRs_S2C)
}

void MsgTeamAcceptRs_S2C::InitAsDefaultInstance() {
}

MsgTeamAcceptRs_S2C::MsgTeamAcceptRs_S2C(const MsgTeamAcceptRs_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamAcceptRs_S2C)
}

void MsgTeamAcceptRs_S2C::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2120;
  iggid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  teamid_ = 0;
  mapdataid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamAcceptRs_S2C::~MsgTeamAcceptRs_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamAcceptRs_S2C)
  SharedDtor();
}

void MsgTeamAcceptRs_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamAcceptRs_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamAcceptRs_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamAcceptRs_S2C_descriptor_;
}

const MsgTeamAcceptRs_S2C& MsgTeamAcceptRs_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamAcceptRs_S2C* MsgTeamAcceptRs_S2C::default_instance_ = NULL;

MsgTeamAcceptRs_S2C* MsgTeamAcceptRs_S2C::New() const {
  return new MsgTeamAcceptRs_S2C;
}

void MsgTeamAcceptRs_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamAcceptRs_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(iggid_, mapdataid_);
    serialid_ = 0;
    msgtype_ = 2120;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamAcceptRs_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamAcceptRs_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_ACCEPT_RS_S2C];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .MsgPB.TEAM_ACCEPT_RESULT result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::TEAM_ACCEPT_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::TEAM_ACCEPT_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 5;
      case 5: {
        if (tag == 40) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mapdataid;
        break;
      }

      // optional int32 mapdataid = 6;
      case 6: {
        if (tag == 48) {
         parse_mapdataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapdataid_)));
          set_has_mapdataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamAcceptRs_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamAcceptRs_S2C)
  return false;
#undef DO_
}

void MsgTeamAcceptRs_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamAcceptRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_ACCEPT_RS_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional .MsgPB.TEAM_ACCEPT_RESULT result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // optional int32 teamid = 5;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->teamid(), output);
  }

  // optional int32 mapdataid = 6;
  if (has_mapdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mapdataid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamAcceptRs_S2C)
}

::google::protobuf::uint8* MsgTeamAcceptRs_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamAcceptRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_ACCEPT_RS_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional .MsgPB.TEAM_ACCEPT_RESULT result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // optional int32 teamid = 5;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->teamid(), target);
  }

  // optional int32 mapdataid = 6;
  if (has_mapdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mapdataid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamAcceptRs_S2C)
  return target;
}

int MsgTeamAcceptRs_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_ACCEPT_RS_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.TEAM_ACCEPT_RESULT result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 teamid = 5;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int32 mapdataid = 6;
    if (has_mapdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapdataid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamAcceptRs_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamAcceptRs_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamAcceptRs_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamAcceptRs_S2C::MergeFrom(const MsgTeamAcceptRs_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mapdataid()) {
      set_mapdataid(from.mapdataid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamAcceptRs_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamAcceptRs_S2C::CopyFrom(const MsgTeamAcceptRs_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamAcceptRs_S2C::IsInitialized() const {

  return true;
}

void MsgTeamAcceptRs_S2C::Swap(MsgTeamAcceptRs_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(result_, other->result_);
    std::swap(teamid_, other->teamid_);
    std::swap(mapdataid_, other->mapdataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamAcceptRs_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamAcceptRs_S2C_descriptor_;
  metadata.reflection = MsgTeamAcceptRs_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamSelectDungeon_C2S::kSerialIDFieldNumber;
const int MsgTeamSelectDungeon_C2S::kMsgTypeFieldNumber;
const int MsgTeamSelectDungeon_C2S::kIggidFieldNumber;
const int MsgTeamSelectDungeon_C2S::kMapdataidFieldNumber;
#endif  // !_MSC_VER

MsgTeamSelectDungeon_C2S::MsgTeamSelectDungeon_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamSelectDungeon_C2S)
}

void MsgTeamSelectDungeon_C2S::InitAsDefaultInstance() {
}

MsgTeamSelectDungeon_C2S::MsgTeamSelectDungeon_C2S(const MsgTeamSelectDungeon_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamSelectDungeon_C2S)
}

void MsgTeamSelectDungeon_C2S::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 30012;
  iggid_ = GOOGLE_LONGLONG(0);
  mapdataid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamSelectDungeon_C2S::~MsgTeamSelectDungeon_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamSelectDungeon_C2S)
  SharedDtor();
}

void MsgTeamSelectDungeon_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamSelectDungeon_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamSelectDungeon_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamSelectDungeon_C2S_descriptor_;
}

const MsgTeamSelectDungeon_C2S& MsgTeamSelectDungeon_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamSelectDungeon_C2S* MsgTeamSelectDungeon_C2S::default_instance_ = NULL;

MsgTeamSelectDungeon_C2S* MsgTeamSelectDungeon_C2S::New() const {
  return new MsgTeamSelectDungeon_C2S;
}

void MsgTeamSelectDungeon_C2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamSelectDungeon_C2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, mapdataid_);
    serialid_ = 0;
    msgtype_ = 30012;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamSelectDungeon_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamSelectDungeon_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SELECT_DUNGEON_C2S];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapdataid;
        break;
      }

      // optional int32 mapdataid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapdataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapdataid_)));
          set_has_mapdataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamSelectDungeon_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamSelectDungeon_C2S)
  return false;
#undef DO_
}

void MsgTeamSelectDungeon_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamSelectDungeon_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SELECT_DUNGEON_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int32 mapdataid = 4;
  if (has_mapdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapdataid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamSelectDungeon_C2S)
}

::google::protobuf::uint8* MsgTeamSelectDungeon_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamSelectDungeon_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SELECT_DUNGEON_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int32 mapdataid = 4;
  if (has_mapdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapdataid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamSelectDungeon_C2S)
  return target;
}

int MsgTeamSelectDungeon_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SELECT_DUNGEON_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapdataid = 4;
    if (has_mapdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapdataid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamSelectDungeon_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamSelectDungeon_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamSelectDungeon_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamSelectDungeon_C2S::MergeFrom(const MsgTeamSelectDungeon_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapdataid()) {
      set_mapdataid(from.mapdataid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamSelectDungeon_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamSelectDungeon_C2S::CopyFrom(const MsgTeamSelectDungeon_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamSelectDungeon_C2S::IsInitialized() const {

  return true;
}

void MsgTeamSelectDungeon_C2S::Swap(MsgTeamSelectDungeon_C2S* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapdataid_, other->mapdataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamSelectDungeon_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamSelectDungeon_C2S_descriptor_;
  metadata.reflection = MsgTeamSelectDungeon_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamSelectDungeonRs_S2C::kSerialIDFieldNumber;
const int MsgTeamSelectDungeonRs_S2C::kMsgTypeFieldNumber;
const int MsgTeamSelectDungeonRs_S2C::kIggidFieldNumber;
const int MsgTeamSelectDungeonRs_S2C::kResultFieldNumber;
const int MsgTeamSelectDungeonRs_S2C::kErrMemIggidFieldNumber;
#endif  // !_MSC_VER

MsgTeamSelectDungeonRs_S2C::MsgTeamSelectDungeonRs_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamSelectDungeonRs_S2C)
}

void MsgTeamSelectDungeonRs_S2C::InitAsDefaultInstance() {
}

MsgTeamSelectDungeonRs_S2C::MsgTeamSelectDungeonRs_S2C(const MsgTeamSelectDungeonRs_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamSelectDungeonRs_S2C)
}

void MsgTeamSelectDungeonRs_S2C::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2122;
  iggid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamSelectDungeonRs_S2C::~MsgTeamSelectDungeonRs_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamSelectDungeonRs_S2C)
  SharedDtor();
}

void MsgTeamSelectDungeonRs_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamSelectDungeonRs_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamSelectDungeonRs_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamSelectDungeonRs_S2C_descriptor_;
}

const MsgTeamSelectDungeonRs_S2C& MsgTeamSelectDungeonRs_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamSelectDungeonRs_S2C* MsgTeamSelectDungeonRs_S2C::default_instance_ = NULL;

MsgTeamSelectDungeonRs_S2C* MsgTeamSelectDungeonRs_S2C::New() const {
  return new MsgTeamSelectDungeonRs_S2C;
}

void MsgTeamSelectDungeonRs_S2C::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    serialid_ = 0;
    msgtype_ = 2122;
    iggid_ = GOOGLE_LONGLONG(0);
    result_ = 0;
  }
  err_mem_iggid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamSelectDungeonRs_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamSelectDungeonRs_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SELECT_DUNGEON_RS_S2C];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .MsgPB.TEAM_SELECT_DUNGEON_RESULT result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::TEAM_SELECT_DUNGEON_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::TEAM_SELECT_DUNGEON_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_err_mem_iggid;
        break;
      }

      // repeated int64 err_mem_iggid = 5;
      case 5: {
        if (tag == 40) {
         parse_err_mem_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_err_mem_iggid())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_err_mem_iggid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_err_mem_iggid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamSelectDungeonRs_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamSelectDungeonRs_S2C)
  return false;
#undef DO_
}

void MsgTeamSelectDungeonRs_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamSelectDungeonRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SELECT_DUNGEON_RS_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional .MsgPB.TEAM_SELECT_DUNGEON_RESULT result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // repeated int64 err_mem_iggid = 5;
  for (int i = 0; i < this->err_mem_iggid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->err_mem_iggid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamSelectDungeonRs_S2C)
}

::google::protobuf::uint8* MsgTeamSelectDungeonRs_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamSelectDungeonRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SELECT_DUNGEON_RS_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional .MsgPB.TEAM_SELECT_DUNGEON_RESULT result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // repeated int64 err_mem_iggid = 5;
  for (int i = 0; i < this->err_mem_iggid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->err_mem_iggid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamSelectDungeonRs_S2C)
  return target;
}

int MsgTeamSelectDungeonRs_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_SELECT_DUNGEON_RS_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.TEAM_SELECT_DUNGEON_RESULT result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated int64 err_mem_iggid = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->err_mem_iggid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->err_mem_iggid(i));
    }
    total_size += 1 * this->err_mem_iggid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamSelectDungeonRs_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamSelectDungeonRs_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamSelectDungeonRs_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamSelectDungeonRs_S2C::MergeFrom(const MsgTeamSelectDungeonRs_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  err_mem_iggid_.MergeFrom(from.err_mem_iggid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamSelectDungeonRs_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamSelectDungeonRs_S2C::CopyFrom(const MsgTeamSelectDungeonRs_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamSelectDungeonRs_S2C::IsInitialized() const {

  return true;
}

void MsgTeamSelectDungeonRs_S2C::Swap(MsgTeamSelectDungeonRs_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(result_, other->result_);
    err_mem_iggid_.Swap(&other->err_mem_iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamSelectDungeonRs_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamSelectDungeonRs_S2C_descriptor_;
  metadata.reflection = MsgTeamSelectDungeonRs_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamError::kSerialIDFieldNumber;
const int MsgTeamError::kMsgTypeFieldNumber;
const int MsgTeamError::kIggidFieldNumber;
const int MsgTeamError::kResFieldNumber;
#endif  // !_MSC_VER

MsgTeamError::MsgTeamError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamError)
}

void MsgTeamError::InitAsDefaultInstance() {
}

MsgTeamError::MsgTeamError(const MsgTeamError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamError)
}

void MsgTeamError::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2123;
  iggid_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamError::~MsgTeamError() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamError)
  SharedDtor();
}

void MsgTeamError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamError_descriptor_;
}

const MsgTeamError& MsgTeamError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamError* MsgTeamError::default_instance_ = NULL;

MsgTeamError* MsgTeamError::New() const {
  return new MsgTeamError;
}

void MsgTeamError::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamError*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, res_);
    serialid_ = 0;
    msgtype_ = 2123;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_ERROR];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_res;
        break;
      }

      // optional .MsgPB.TEAM_DUNGEON_RESULT res = 4;
      case 4: {
        if (tag == 32) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::TEAM_DUNGEON_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::TEAM_DUNGEON_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamError)
  return false;
#undef DO_
}

void MsgTeamError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamError)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_ERROR];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional .MsgPB.TEAM_DUNGEON_RESULT res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamError)
}

::google::protobuf::uint8* MsgTeamError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamError)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_ERROR];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional .MsgPB.TEAM_DUNGEON_RESULT res = 4;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamError)
  return target;
}

int MsgTeamError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_TEAM_ERROR];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.TEAM_DUNGEON_RESULT res = 4;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamError::MergeFrom(const MsgTeamError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamError::CopyFrom(const MsgTeamError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamError::IsInitialized() const {

  return true;
}

void MsgTeamError::Swap(MsgTeamError* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamError_descriptor_;
  metadata.reflection = MsgTeamError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamMapInfoSync_MS2MC::kMsgTypeFieldNumber;
const int MsgTeamMapInfoSync_MS2MC::kTeamidFieldNumber;
const int MsgTeamMapInfoSync_MS2MC::kTypeFieldNumber;
const int MsgTeamMapInfoSync_MS2MC::kValFieldNumber;
const int MsgTeamMapInfoSync_MS2MC::kMapuuidFieldNumber;
#endif  // !_MSC_VER

MsgTeamMapInfoSync_MS2MC::MsgTeamMapInfoSync_MS2MC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamMapInfoSync_MS2MC)
}

void MsgTeamMapInfoSync_MS2MC::InitAsDefaultInstance() {
}

MsgTeamMapInfoSync_MS2MC::MsgTeamMapInfoSync_MS2MC(const MsgTeamMapInfoSync_MS2MC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamMapInfoSync_MS2MC)
}

void MsgTeamMapInfoSync_MS2MC::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2124;
  teamid_ = 0;
  type_ = 0;
  val_ = 0;
  mapuuid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamMapInfoSync_MS2MC::~MsgTeamMapInfoSync_MS2MC() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamMapInfoSync_MS2MC)
  SharedDtor();
}

void MsgTeamMapInfoSync_MS2MC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamMapInfoSync_MS2MC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamMapInfoSync_MS2MC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamMapInfoSync_MS2MC_descriptor_;
}

const MsgTeamMapInfoSync_MS2MC& MsgTeamMapInfoSync_MS2MC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamMapInfoSync_MS2MC* MsgTeamMapInfoSync_MS2MC::default_instance_ = NULL;

MsgTeamMapInfoSync_MS2MC* MsgTeamMapInfoSync_MS2MC::New() const {
  return new MsgTeamMapInfoSync_MS2MC;
}

void MsgTeamMapInfoSync_MS2MC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamMapInfoSync_MS2MC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(teamid_, mapuuid_);
    msgtype_ = 2124;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamMapInfoSync_MS2MC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamMapInfoSync_MS2MC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_MAP_INFO_SYNC_MS2MC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 2;
      case 2: {
        if (tag == 16) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_val;
        break;
      }

      // optional int32 val = 4;
      case 4: {
        if (tag == 32) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapuuid;
        break;
      }

      // optional int64 mapuuid = 5;
      case 5: {
        if (tag == 40) {
         parse_mapuuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapuuid_)));
          set_has_mapuuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamMapInfoSync_MS2MC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamMapInfoSync_MS2MC)
  return false;
#undef DO_
}

void MsgTeamMapInfoSync_MS2MC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamMapInfoSync_MS2MC)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_MAP_INFO_SYNC_MS2MC];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 teamid = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 val = 4;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->val(), output);
  }

  // optional int64 mapuuid = 5;
  if (has_mapuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->mapuuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamMapInfoSync_MS2MC)
}

::google::protobuf::uint8* MsgTeamMapInfoSync_MS2MC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamMapInfoSync_MS2MC)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_MAP_INFO_SYNC_MS2MC];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 teamid = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teamid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 val = 4;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->val(), target);
  }

  // optional int64 mapuuid = 5;
  if (has_mapuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->mapuuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamMapInfoSync_MS2MC)
  return target;
}

int MsgTeamMapInfoSync_MS2MC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_MAP_INFO_SYNC_MS2MC];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 teamid = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 val = 4;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }

    // optional int64 mapuuid = 5;
    if (has_mapuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapuuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamMapInfoSync_MS2MC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamMapInfoSync_MS2MC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamMapInfoSync_MS2MC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamMapInfoSync_MS2MC::MergeFrom(const MsgTeamMapInfoSync_MS2MC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_mapuuid()) {
      set_mapuuid(from.mapuuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamMapInfoSync_MS2MC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamMapInfoSync_MS2MC::CopyFrom(const MsgTeamMapInfoSync_MS2MC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamMapInfoSync_MS2MC::IsInitialized() const {

  return true;
}

void MsgTeamMapInfoSync_MS2MC::Swap(MsgTeamMapInfoSync_MS2MC* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(teamid_, other->teamid_);
    std::swap(type_, other->type_);
    std::swap(val_, other->val_);
    std::swap(mapuuid_, other->mapuuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamMapInfoSync_MS2MC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamMapInfoSync_MS2MC_descriptor_;
  metadata.reflection = MsgTeamMapInfoSync_MS2MC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamCheckItemCount_MC2MS::kMsgTypeFieldNumber;
const int MsgTeamCheckItemCount_MC2MS::kIggidFieldNumber;
const int MsgTeamCheckItemCount_MC2MS::kItemDataidFieldNumber;
#endif  // !_MSC_VER

MsgTeamCheckItemCount_MC2MS::MsgTeamCheckItemCount_MC2MS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamCheckItemCount_MC2MS)
}

void MsgTeamCheckItemCount_MC2MS::InitAsDefaultInstance() {
}

MsgTeamCheckItemCount_MC2MS::MsgTeamCheckItemCount_MC2MS(const MsgTeamCheckItemCount_MC2MS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamCheckItemCount_MC2MS)
}

void MsgTeamCheckItemCount_MC2MS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2125;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamCheckItemCount_MC2MS::~MsgTeamCheckItemCount_MC2MS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamCheckItemCount_MC2MS)
  SharedDtor();
}

void MsgTeamCheckItemCount_MC2MS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamCheckItemCount_MC2MS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamCheckItemCount_MC2MS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamCheckItemCount_MC2MS_descriptor_;
}

const MsgTeamCheckItemCount_MC2MS& MsgTeamCheckItemCount_MC2MS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamCheckItemCount_MC2MS* MsgTeamCheckItemCount_MC2MS::default_instance_ = NULL;

MsgTeamCheckItemCount_MC2MS* MsgTeamCheckItemCount_MC2MS::New() const {
  return new MsgTeamCheckItemCount_MC2MS;
}

void MsgTeamCheckItemCount_MC2MS::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 2125;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  item_dataid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamCheckItemCount_MC2MS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamCheckItemCount_MC2MS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_CHECK_ITEM_COUNT_MC2MS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_dataid;
        break;
      }

      // repeated int32 item_dataid = 4;
      case 4: {
        if (tag == 32) {
         parse_item_dataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_item_dataid())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_dataid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_dataid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamCheckItemCount_MC2MS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamCheckItemCount_MC2MS)
  return false;
#undef DO_
}

void MsgTeamCheckItemCount_MC2MS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamCheckItemCount_MC2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_CHECK_ITEM_COUNT_MC2MS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // repeated int32 item_dataid = 4;
  for (int i = 0; i < this->item_dataid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->item_dataid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamCheckItemCount_MC2MS)
}

::google::protobuf::uint8* MsgTeamCheckItemCount_MC2MS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamCheckItemCount_MC2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_CHECK_ITEM_COUNT_MC2MS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // repeated int32 item_dataid = 4;
  for (int i = 0; i < this->item_dataid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->item_dataid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamCheckItemCount_MC2MS)
  return target;
}

int MsgTeamCheckItemCount_MC2MS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_CHECK_ITEM_COUNT_MC2MS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  // repeated int32 item_dataid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_dataid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_dataid(i));
    }
    total_size += 1 * this->item_dataid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamCheckItemCount_MC2MS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamCheckItemCount_MC2MS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamCheckItemCount_MC2MS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamCheckItemCount_MC2MS::MergeFrom(const MsgTeamCheckItemCount_MC2MS& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_dataid_.MergeFrom(from.item_dataid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamCheckItemCount_MC2MS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamCheckItemCount_MC2MS::CopyFrom(const MsgTeamCheckItemCount_MC2MS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamCheckItemCount_MC2MS::IsInitialized() const {

  return true;
}

void MsgTeamCheckItemCount_MC2MS::Swap(MsgTeamCheckItemCount_MC2MS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    item_dataid_.Swap(&other->item_dataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamCheckItemCount_MC2MS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamCheckItemCount_MC2MS_descriptor_;
  metadata.reflection = MsgTeamCheckItemCount_MC2MS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kItemDataidFieldNumber;
const int ItemInfo::kItemCountFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.ItemInfo)
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.ItemInfo)
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  item_dataid_ = 0;
  item_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.ItemInfo)
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_dataid_, item_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_dataid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_dataid_)));
          set_has_item_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional int32 item_count = 2;
      case 2: {
        if (tag == 16) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.ItemInfo)
  return false;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.ItemInfo)
  // optional int32 item_dataid = 1;
  if (has_item_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_dataid(), output);
  }

  // optional int32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.ItemInfo)
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.ItemInfo)
  // optional int32 item_dataid = 1;
  if (has_item_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_dataid(), target);
  }

  // optional int32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.ItemInfo)
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_dataid = 1;
    if (has_item_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_dataid());
    }

    // optional int32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_dataid()) {
      set_item_dataid(from.item_dataid());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(item_dataid_, other->item_dataid_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamIteamCount_MC2MS::kMsgTypeFieldNumber;
const int MsgTeamIteamCount_MC2MS::kIggidFieldNumber;
const int MsgTeamIteamCount_MC2MS::kItemInfoFieldNumber;
#endif  // !_MSC_VER

MsgTeamIteamCount_MC2MS::MsgTeamIteamCount_MC2MS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamIteamCount_MC2MS)
}

void MsgTeamIteamCount_MC2MS::InitAsDefaultInstance() {
}

MsgTeamIteamCount_MC2MS::MsgTeamIteamCount_MC2MS(const MsgTeamIteamCount_MC2MS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamIteamCount_MC2MS)
}

void MsgTeamIteamCount_MC2MS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2126;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamIteamCount_MC2MS::~MsgTeamIteamCount_MC2MS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamIteamCount_MC2MS)
  SharedDtor();
}

void MsgTeamIteamCount_MC2MS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamIteamCount_MC2MS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamIteamCount_MC2MS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamIteamCount_MC2MS_descriptor_;
}

const MsgTeamIteamCount_MC2MS& MsgTeamIteamCount_MC2MS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamIteamCount_MC2MS* MsgTeamIteamCount_MC2MS::default_instance_ = NULL;

MsgTeamIteamCount_MC2MS* MsgTeamIteamCount_MC2MS::New() const {
  return new MsgTeamIteamCount_MC2MS;
}

void MsgTeamIteamCount_MC2MS::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 2126;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  item_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamIteamCount_MC2MS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamIteamCount_MC2MS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_ITEM_COUNT_MC2MS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item_info;
        break;
      }

      // repeated .MsgPB.ItemInfo item_info = 3;
      case 3: {
        if (tag == 26) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamIteamCount_MC2MS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamIteamCount_MC2MS)
  return false;
#undef DO_
}

void MsgTeamIteamCount_MC2MS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamIteamCount_MC2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_ITEM_COUNT_MC2MS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // repeated .MsgPB.ItemInfo item_info = 3;
  for (int i = 0; i < this->item_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamIteamCount_MC2MS)
}

::google::protobuf::uint8* MsgTeamIteamCount_MC2MS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamIteamCount_MC2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_ITEM_COUNT_MC2MS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // repeated .MsgPB.ItemInfo item_info = 3;
  for (int i = 0; i < this->item_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamIteamCount_MC2MS)
  return target;
}

int MsgTeamIteamCount_MC2MS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_ITEM_COUNT_MC2MS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  // repeated .MsgPB.ItemInfo item_info = 3;
  total_size += 1 * this->item_info_size();
  for (int i = 0; i < this->item_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamIteamCount_MC2MS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamIteamCount_MC2MS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamIteamCount_MC2MS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamIteamCount_MC2MS::MergeFrom(const MsgTeamIteamCount_MC2MS& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_info_.MergeFrom(from.item_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamIteamCount_MC2MS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamIteamCount_MC2MS::CopyFrom(const MsgTeamIteamCount_MC2MS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamIteamCount_MC2MS::IsInitialized() const {

  return true;
}

void MsgTeamIteamCount_MC2MS::Swap(MsgTeamIteamCount_MC2MS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    item_info_.Swap(&other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamIteamCount_MC2MS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamIteamCount_MC2MS_descriptor_;
  metadata.reflection = MsgTeamIteamCount_MC2MS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamSetOpenJoin_C2MC::kMsgTypeFieldNumber;
const int MsgTeamSetOpenJoin_C2MC::kIggidFieldNumber;
const int MsgTeamSetOpenJoin_C2MC::kOpenJoinFieldNumber;
#endif  // !_MSC_VER

MsgTeamSetOpenJoin_C2MC::MsgTeamSetOpenJoin_C2MC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamSetOpenJoin_C2MC)
}

void MsgTeamSetOpenJoin_C2MC::InitAsDefaultInstance() {
}

MsgTeamSetOpenJoin_C2MC::MsgTeamSetOpenJoin_C2MC(const MsgTeamSetOpenJoin_C2MC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamSetOpenJoin_C2MC)
}

void MsgTeamSetOpenJoin_C2MC::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 30015;
  iggid_ = GOOGLE_LONGLONG(0);
  open_join_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamSetOpenJoin_C2MC::~MsgTeamSetOpenJoin_C2MC() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamSetOpenJoin_C2MC)
  SharedDtor();
}

void MsgTeamSetOpenJoin_C2MC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamSetOpenJoin_C2MC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamSetOpenJoin_C2MC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamSetOpenJoin_C2MC_descriptor_;
}

const MsgTeamSetOpenJoin_C2MC& MsgTeamSetOpenJoin_C2MC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamSetOpenJoin_C2MC* MsgTeamSetOpenJoin_C2MC::default_instance_ = NULL;

MsgTeamSetOpenJoin_C2MC* MsgTeamSetOpenJoin_C2MC::New() const {
  return new MsgTeamSetOpenJoin_C2MC;
}

void MsgTeamSetOpenJoin_C2MC::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 30015;
    iggid_ = GOOGLE_LONGLONG(0);
    open_join_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamSetOpenJoin_C2MC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamSetOpenJoin_C2MC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_SET_OPEN_JOIN_C2MC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_open_join;
        break;
      }

      // optional int32 open_join = 3;
      case 3: {
        if (tag == 24) {
         parse_open_join:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_join_)));
          set_has_open_join();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamSetOpenJoin_C2MC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamSetOpenJoin_C2MC)
  return false;
#undef DO_
}

void MsgTeamSetOpenJoin_C2MC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamSetOpenJoin_C2MC)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_SET_OPEN_JOIN_C2MC];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 open_join = 3;
  if (has_open_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->open_join(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamSetOpenJoin_C2MC)
}

::google::protobuf::uint8* MsgTeamSetOpenJoin_C2MC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamSetOpenJoin_C2MC)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_SET_OPEN_JOIN_C2MC];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 open_join = 3;
  if (has_open_join()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->open_join(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamSetOpenJoin_C2MC)
  return target;
}

int MsgTeamSetOpenJoin_C2MC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_SET_OPEN_JOIN_C2MC];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 open_join = 3;
    if (has_open_join()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_join());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamSetOpenJoin_C2MC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamSetOpenJoin_C2MC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamSetOpenJoin_C2MC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamSetOpenJoin_C2MC::MergeFrom(const MsgTeamSetOpenJoin_C2MC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_open_join()) {
      set_open_join(from.open_join());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamSetOpenJoin_C2MC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamSetOpenJoin_C2MC::CopyFrom(const MsgTeamSetOpenJoin_C2MC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamSetOpenJoin_C2MC::IsInitialized() const {

  return true;
}

void MsgTeamSetOpenJoin_C2MC::Swap(MsgTeamSetOpenJoin_C2MC* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(open_join_, other->open_join_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamSetOpenJoin_C2MC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamSetOpenJoin_C2MC_descriptor_;
  metadata.reflection = MsgTeamSetOpenJoin_C2MC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamRemovePlayerNotify_MC2C::kMsgTypeFieldNumber;
const int MsgTeamRemovePlayerNotify_MC2C::kTeamidFieldNumber;
const int MsgTeamRemovePlayerNotify_MC2C::kRemoveIggidFieldNumber;
#endif  // !_MSC_VER

MsgTeamRemovePlayerNotify_MC2C::MsgTeamRemovePlayerNotify_MC2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamRemovePlayerNotify_MC2C)
}

void MsgTeamRemovePlayerNotify_MC2C::InitAsDefaultInstance() {
}

MsgTeamRemovePlayerNotify_MC2C::MsgTeamRemovePlayerNotify_MC2C(const MsgTeamRemovePlayerNotify_MC2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamRemovePlayerNotify_MC2C)
}

void MsgTeamRemovePlayerNotify_MC2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2128;
  teamid_ = 0;
  remove_iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamRemovePlayerNotify_MC2C::~MsgTeamRemovePlayerNotify_MC2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamRemovePlayerNotify_MC2C)
  SharedDtor();
}

void MsgTeamRemovePlayerNotify_MC2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamRemovePlayerNotify_MC2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamRemovePlayerNotify_MC2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamRemovePlayerNotify_MC2C_descriptor_;
}

const MsgTeamRemovePlayerNotify_MC2C& MsgTeamRemovePlayerNotify_MC2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamRemovePlayerNotify_MC2C* MsgTeamRemovePlayerNotify_MC2C::default_instance_ = NULL;

MsgTeamRemovePlayerNotify_MC2C* MsgTeamRemovePlayerNotify_MC2C::New() const {
  return new MsgTeamRemovePlayerNotify_MC2C;
}

void MsgTeamRemovePlayerNotify_MC2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamRemovePlayerNotify_MC2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(teamid_, remove_iggid_);
    msgtype_ = 2128;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamRemovePlayerNotify_MC2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamRemovePlayerNotify_MC2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_REMOVE_PLAYER_NOTIFY_MC2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 2;
      case 2: {
        if (tag == 16) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_remove_iggid;
        break;
      }

      // optional int64 remove_iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_remove_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remove_iggid_)));
          set_has_remove_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamRemovePlayerNotify_MC2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamRemovePlayerNotify_MC2C)
  return false;
#undef DO_
}

void MsgTeamRemovePlayerNotify_MC2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamRemovePlayerNotify_MC2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_REMOVE_PLAYER_NOTIFY_MC2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 teamid = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  // optional int64 remove_iggid = 3;
  if (has_remove_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->remove_iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamRemovePlayerNotify_MC2C)
}

::google::protobuf::uint8* MsgTeamRemovePlayerNotify_MC2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamRemovePlayerNotify_MC2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_REMOVE_PLAYER_NOTIFY_MC2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 teamid = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teamid(), target);
  }

  // optional int64 remove_iggid = 3;
  if (has_remove_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->remove_iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamRemovePlayerNotify_MC2C)
  return target;
}

int MsgTeamRemovePlayerNotify_MC2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_REMOVE_PLAYER_NOTIFY_MC2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 teamid = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int64 remove_iggid = 3;
    if (has_remove_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->remove_iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamRemovePlayerNotify_MC2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamRemovePlayerNotify_MC2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamRemovePlayerNotify_MC2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamRemovePlayerNotify_MC2C::MergeFrom(const MsgTeamRemovePlayerNotify_MC2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_remove_iggid()) {
      set_remove_iggid(from.remove_iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamRemovePlayerNotify_MC2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamRemovePlayerNotify_MC2C::CopyFrom(const MsgTeamRemovePlayerNotify_MC2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamRemovePlayerNotify_MC2C::IsInitialized() const {

  return true;
}

void MsgTeamRemovePlayerNotify_MC2C::Swap(MsgTeamRemovePlayerNotify_MC2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(teamid_, other->teamid_);
    std::swap(remove_iggid_, other->remove_iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamRemovePlayerNotify_MC2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamRemovePlayerNotify_MC2C_descriptor_;
  metadata.reflection = MsgTeamRemovePlayerNotify_MC2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamAutoJoinCancel_C2MC::kMsgTypeFieldNumber;
const int MsgTeamAutoJoinCancel_C2MC::kIggidFieldNumber;
const int MsgTeamAutoJoinCancel_C2MC::kSerialIDFieldNumber;
#endif  // !_MSC_VER

MsgTeamAutoJoinCancel_C2MC::MsgTeamAutoJoinCancel_C2MC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamAutoJoinCancel_C2MC)
}

void MsgTeamAutoJoinCancel_C2MC::InitAsDefaultInstance() {
}

MsgTeamAutoJoinCancel_C2MC::MsgTeamAutoJoinCancel_C2MC(const MsgTeamAutoJoinCancel_C2MC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamAutoJoinCancel_C2MC)
}

void MsgTeamAutoJoinCancel_C2MC::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 30016;
  iggid_ = GOOGLE_LONGLONG(0);
  serialid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamAutoJoinCancel_C2MC::~MsgTeamAutoJoinCancel_C2MC() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamAutoJoinCancel_C2MC)
  SharedDtor();
}

void MsgTeamAutoJoinCancel_C2MC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamAutoJoinCancel_C2MC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamAutoJoinCancel_C2MC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamAutoJoinCancel_C2MC_descriptor_;
}

const MsgTeamAutoJoinCancel_C2MC& MsgTeamAutoJoinCancel_C2MC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamAutoJoinCancel_C2MC* MsgTeamAutoJoinCancel_C2MC::default_instance_ = NULL;

MsgTeamAutoJoinCancel_C2MC* MsgTeamAutoJoinCancel_C2MC::New() const {
  return new MsgTeamAutoJoinCancel_C2MC;
}

void MsgTeamAutoJoinCancel_C2MC::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 30016;
    iggid_ = GOOGLE_LONGLONG(0);
    serialid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamAutoJoinCancel_C2MC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamAutoJoinCancel_C2MC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_AUTO_JOIN_CANCEL_C2MC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SerialID;
        break;
      }

      // optional int32 SerialID = 3;
      case 3: {
        if (tag == 24) {
         parse_SerialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamAutoJoinCancel_C2MC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamAutoJoinCancel_C2MC)
  return false;
#undef DO_
}

void MsgTeamAutoJoinCancel_C2MC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamAutoJoinCancel_C2MC)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_AUTO_JOIN_CANCEL_C2MC];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 SerialID = 3;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamAutoJoinCancel_C2MC)
}

::google::protobuf::uint8* MsgTeamAutoJoinCancel_C2MC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamAutoJoinCancel_C2MC)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_AUTO_JOIN_CANCEL_C2MC];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 SerialID = 3;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamAutoJoinCancel_C2MC)
  return target;
}

int MsgTeamAutoJoinCancel_C2MC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_AUTO_JOIN_CANCEL_C2MC];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 SerialID = 3;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamAutoJoinCancel_C2MC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamAutoJoinCancel_C2MC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamAutoJoinCancel_C2MC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamAutoJoinCancel_C2MC::MergeFrom(const MsgTeamAutoJoinCancel_C2MC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamAutoJoinCancel_C2MC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamAutoJoinCancel_C2MC::CopyFrom(const MsgTeamAutoJoinCancel_C2MC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamAutoJoinCancel_C2MC::IsInitialized() const {

  return true;
}

void MsgTeamAutoJoinCancel_C2MC::Swap(MsgTeamAutoJoinCancel_C2MC* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(serialid_, other->serialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamAutoJoinCancel_C2MC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamAutoJoinCancel_C2MC_descriptor_;
  metadata.reflection = MsgTeamAutoJoinCancel_C2MC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamAutoJoinCancelRes_MC2C::kMsgTypeFieldNumber;
const int MsgTeamAutoJoinCancelRes_MC2C::kIggidFieldNumber;
const int MsgTeamAutoJoinCancelRes_MC2C::kResFieldNumber;
#endif  // !_MSC_VER

MsgTeamAutoJoinCancelRes_MC2C::MsgTeamAutoJoinCancelRes_MC2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamAutoJoinCancelRes_MC2C)
}

void MsgTeamAutoJoinCancelRes_MC2C::InitAsDefaultInstance() {
}

MsgTeamAutoJoinCancelRes_MC2C::MsgTeamAutoJoinCancelRes_MC2C(const MsgTeamAutoJoinCancelRes_MC2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamAutoJoinCancelRes_MC2C)
}

void MsgTeamAutoJoinCancelRes_MC2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2132;
  iggid_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamAutoJoinCancelRes_MC2C::~MsgTeamAutoJoinCancelRes_MC2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamAutoJoinCancelRes_MC2C)
  SharedDtor();
}

void MsgTeamAutoJoinCancelRes_MC2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamAutoJoinCancelRes_MC2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamAutoJoinCancelRes_MC2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamAutoJoinCancelRes_MC2C_descriptor_;
}

const MsgTeamAutoJoinCancelRes_MC2C& MsgTeamAutoJoinCancelRes_MC2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamAutoJoinCancelRes_MC2C* MsgTeamAutoJoinCancelRes_MC2C::default_instance_ = NULL;

MsgTeamAutoJoinCancelRes_MC2C* MsgTeamAutoJoinCancelRes_MC2C::New() const {
  return new MsgTeamAutoJoinCancelRes_MC2C;
}

void MsgTeamAutoJoinCancelRes_MC2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 2132;
    iggid_ = GOOGLE_LONGLONG(0);
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamAutoJoinCancelRes_MC2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamAutoJoinCancelRes_MC2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_AUTO_JOIN_CANCEL_RES_MC2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }

      // optional .MsgPB.TEAM_DUNGEON_RESULT res = 3;
      case 3: {
        if (tag == 24) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::TEAM_DUNGEON_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::TEAM_DUNGEON_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamAutoJoinCancelRes_MC2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamAutoJoinCancelRes_MC2C)
  return false;
#undef DO_
}

void MsgTeamAutoJoinCancelRes_MC2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamAutoJoinCancelRes_MC2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_AUTO_JOIN_CANCEL_RES_MC2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.TEAM_DUNGEON_RESULT res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamAutoJoinCancelRes_MC2C)
}

::google::protobuf::uint8* MsgTeamAutoJoinCancelRes_MC2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamAutoJoinCancelRes_MC2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_AUTO_JOIN_CANCEL_RES_MC2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.TEAM_DUNGEON_RESULT res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamAutoJoinCancelRes_MC2C)
  return target;
}

int MsgTeamAutoJoinCancelRes_MC2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_AUTO_JOIN_CANCEL_RES_MC2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.TEAM_DUNGEON_RESULT res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamAutoJoinCancelRes_MC2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamAutoJoinCancelRes_MC2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamAutoJoinCancelRes_MC2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamAutoJoinCancelRes_MC2C::MergeFrom(const MsgTeamAutoJoinCancelRes_MC2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamAutoJoinCancelRes_MC2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamAutoJoinCancelRes_MC2C::CopyFrom(const MsgTeamAutoJoinCancelRes_MC2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamAutoJoinCancelRes_MC2C::IsInitialized() const {

  return true;
}

void MsgTeamAutoJoinCancelRes_MC2C::Swap(MsgTeamAutoJoinCancelRes_MC2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamAutoJoinCancelRes_MC2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamAutoJoinCancelRes_MC2C_descriptor_;
  metadata.reflection = MsgTeamAutoJoinCancelRes_MC2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamRefuseInvite_C2S::kMsgTypeFieldNumber;
const int MsgTeamRefuseInvite_C2S::kIggidFieldNumber;
const int MsgTeamRefuseInvite_C2S::kTeamidFieldNumber;
#endif  // !_MSC_VER

MsgTeamRefuseInvite_C2S::MsgTeamRefuseInvite_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamRefuseInvite_C2S)
}

void MsgTeamRefuseInvite_C2S::InitAsDefaultInstance() {
}

MsgTeamRefuseInvite_C2S::MsgTeamRefuseInvite_C2S(const MsgTeamRefuseInvite_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamRefuseInvite_C2S)
}

void MsgTeamRefuseInvite_C2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2133;
  iggid_ = GOOGLE_LONGLONG(0);
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamRefuseInvite_C2S::~MsgTeamRefuseInvite_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamRefuseInvite_C2S)
  SharedDtor();
}

void MsgTeamRefuseInvite_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamRefuseInvite_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamRefuseInvite_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamRefuseInvite_C2S_descriptor_;
}

const MsgTeamRefuseInvite_C2S& MsgTeamRefuseInvite_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamRefuseInvite_C2S* MsgTeamRefuseInvite_C2S::default_instance_ = NULL;

MsgTeamRefuseInvite_C2S* MsgTeamRefuseInvite_C2S::New() const {
  return new MsgTeamRefuseInvite_C2S;
}

void MsgTeamRefuseInvite_C2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 2133;
    iggid_ = GOOGLE_LONGLONG(0);
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamRefuseInvite_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamRefuseInvite_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_REFUSE_INVITE_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 3;
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamRefuseInvite_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamRefuseInvite_C2S)
  return false;
#undef DO_
}

void MsgTeamRefuseInvite_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamRefuseInvite_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_REFUSE_INVITE_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamRefuseInvite_C2S)
}

::google::protobuf::uint8* MsgTeamRefuseInvite_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamRefuseInvite_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_REFUSE_INVITE_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamRefuseInvite_C2S)
  return target;
}

int MsgTeamRefuseInvite_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_REFUSE_INVITE_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamRefuseInvite_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamRefuseInvite_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamRefuseInvite_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamRefuseInvite_C2S::MergeFrom(const MsgTeamRefuseInvite_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamRefuseInvite_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamRefuseInvite_C2S::CopyFrom(const MsgTeamRefuseInvite_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamRefuseInvite_C2S::IsInitialized() const {

  return true;
}

void MsgTeamRefuseInvite_C2S::Swap(MsgTeamRefuseInvite_C2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamRefuseInvite_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamRefuseInvite_C2S_descriptor_;
  metadata.reflection = MsgTeamRefuseInvite_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTeamRefuseInvite_S2C::kMsgTypeFieldNumber;
const int MsgTeamRefuseInvite_S2C::kIggidFieldNumber;
const int MsgTeamRefuseInvite_S2C::kTeamidFieldNumber;
const int MsgTeamRefuseInvite_S2C::kIggidRefuseFieldNumber;
#endif  // !_MSC_VER

MsgTeamRefuseInvite_S2C::MsgTeamRefuseInvite_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTeamRefuseInvite_S2C)
}

void MsgTeamRefuseInvite_S2C::InitAsDefaultInstance() {
}

MsgTeamRefuseInvite_S2C::MsgTeamRefuseInvite_S2C(const MsgTeamRefuseInvite_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTeamRefuseInvite_S2C)
}

void MsgTeamRefuseInvite_S2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2134;
  iggid_ = GOOGLE_LONGLONG(0);
  teamid_ = 0;
  iggid_refuse_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamRefuseInvite_S2C::~MsgTeamRefuseInvite_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTeamRefuseInvite_S2C)
  SharedDtor();
}

void MsgTeamRefuseInvite_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTeamRefuseInvite_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTeamRefuseInvite_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamRefuseInvite_S2C_descriptor_;
}

const MsgTeamRefuseInvite_S2C& MsgTeamRefuseInvite_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTeam_2eproto();
  return *default_instance_;
}

MsgTeamRefuseInvite_S2C* MsgTeamRefuseInvite_S2C::default_instance_ = NULL;

MsgTeamRefuseInvite_S2C* MsgTeamRefuseInvite_S2C::New() const {
  return new MsgTeamRefuseInvite_S2C;
}

void MsgTeamRefuseInvite_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTeamRefuseInvite_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(teamid_, iggid_refuse_);
    msgtype_ = 2134;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamRefuseInvite_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTeamRefuseInvite_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_REFUSE_INVITE_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 3;
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iggid_refuse;
        break;
      }

      // optional int64 iggid_refuse = 4;
      case 4: {
        if (tag == 32) {
         parse_iggid_refuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_refuse_)));
          set_has_iggid_refuse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTeamRefuseInvite_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTeamRefuseInvite_S2C)
  return false;
#undef DO_
}

void MsgTeamRefuseInvite_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTeamRefuseInvite_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_REFUSE_INVITE_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teamid(), output);
  }

  // optional int64 iggid_refuse = 4;
  if (has_iggid_refuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->iggid_refuse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTeamRefuseInvite_S2C)
}

::google::protobuf::uint8* MsgTeamRefuseInvite_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTeamRefuseInvite_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_REFUSE_INVITE_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->teamid(), target);
  }

  // optional int64 iggid_refuse = 4;
  if (has_iggid_refuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->iggid_refuse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTeamRefuseInvite_S2C)
  return target;
}

int MsgTeamRefuseInvite_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TEAM_REFUSE_INVITE_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int64 iggid_refuse = 4;
    if (has_iggid_refuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid_refuse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTeamRefuseInvite_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamRefuseInvite_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamRefuseInvite_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamRefuseInvite_S2C::MergeFrom(const MsgTeamRefuseInvite_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_iggid_refuse()) {
      set_iggid_refuse(from.iggid_refuse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamRefuseInvite_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamRefuseInvite_S2C::CopyFrom(const MsgTeamRefuseInvite_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamRefuseInvite_S2C::IsInitialized() const {

  return true;
}

void MsgTeamRefuseInvite_S2C::Swap(MsgTeamRefuseInvite_S2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(teamid_, other->teamid_);
    std::swap(iggid_refuse_, other->iggid_refuse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamRefuseInvite_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamRefuseInvite_S2C_descriptor_;
  metadata.reflection = MsgTeamRefuseInvite_S2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
