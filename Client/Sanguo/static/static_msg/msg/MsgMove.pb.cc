// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgMove.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgMove.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgMovePath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMovePath_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgMovePath_PATHTYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgMovePathG2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMovePathG2C_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgMove_2eproto() {
  protobuf_AddDesc_MsgMove_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgMove.proto");
  GOOGLE_CHECK(file != NULL);
  MsgMovePath_descriptor_ = file->message_type(0);
  static const int MsgMovePath_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMovePath, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMovePath, pathtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMovePath, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMovePath, targetobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMovePath, servertimems_),
  };
  MsgMovePath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMovePath_descriptor_,
      MsgMovePath::default_instance_,
      MsgMovePath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMovePath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMovePath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMovePath));
  MsgMovePath_PATHTYPE_descriptor_ = MsgMovePath_descriptor_->enum_type(0);
  MsgMovePathG2C_descriptor_ = file->message_type(1);
  static const int MsgMovePathG2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMovePathG2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMovePathG2C, mapobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMovePathG2C, movepath_),
  };
  MsgMovePathG2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMovePathG2C_descriptor_,
      MsgMovePathG2C::default_instance_,
      MsgMovePathG2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMovePathG2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMovePathG2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMovePathG2C));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgMove_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMovePath_descriptor_, &MsgMovePath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMovePathG2C_descriptor_, &MsgMovePathG2C::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgMove_2eproto() {
  delete MsgMovePath::default_instance_;
  delete MsgMovePath_reflection_;
  delete MsgMovePathG2C::default_instance_;
  delete MsgMovePathG2C_reflection_;
}

void protobuf_AddDesc_MsgMove_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgGameDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMsgMove.proto\022\005MsgPB\032\rMsgType.proto\032\020M"
    "sgGameDef.proto\"\370\001\n\013MsgMovePath\022\034\n\003pos\030\001"
    " \001(\0132\017.MsgPB.MsgPoint\022-\n\010pathType\030\002 \001(\0162"
    "\033.MsgPB.MsgMovePath.PATHTYPE\022\037\n\006points\030\003"
    " \003(\0132\017.MsgPB.MsgPoint\022\026\n\016targetObjectId\030"
    "\004 \001(\005\022\024\n\014serverTimeMS\030\005 \001(\003\"M\n\010PATHTYPE\022"
    "\010\n\004NONE\020\000\022\t\n\005POINT\020\001\022\n\n\006TARGET\020\002\022\010\n\004LOOP"
    "\020\003\022\010\n\004FALL\020\004\022\014\n\010TELEPORT\020\005\"\201\001\n\016MsgMovePa"
    "thG2C\0224\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:"
    "\022_MSG_MOVE_PATH_G2C\022\023\n\013mapObjectId\030\002 \001(\005"
    "\022$\n\010movePath\030\003 \001(\0132\022.MsgPB.MsgMovePath", 438);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgMove.proto", &protobuf_RegisterTypes);
  MsgMovePath::default_instance_ = new MsgMovePath();
  MsgMovePathG2C::default_instance_ = new MsgMovePathG2C();
  MsgMovePath::default_instance_->InitAsDefaultInstance();
  MsgMovePathG2C::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgMove_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgMove_2eproto {
  StaticDescriptorInitializer_MsgMove_2eproto() {
    protobuf_AddDesc_MsgMove_2eproto();
  }
} static_descriptor_initializer_MsgMove_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgMovePath_PATHTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMovePath_PATHTYPE_descriptor_;
}
bool MsgMovePath_PATHTYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgMovePath_PATHTYPE MsgMovePath::NONE;
const MsgMovePath_PATHTYPE MsgMovePath::POINT;
const MsgMovePath_PATHTYPE MsgMovePath::TARGET;
const MsgMovePath_PATHTYPE MsgMovePath::LOOP;
const MsgMovePath_PATHTYPE MsgMovePath::FALL;
const MsgMovePath_PATHTYPE MsgMovePath::TELEPORT;
const MsgMovePath_PATHTYPE MsgMovePath::PATHTYPE_MIN;
const MsgMovePath_PATHTYPE MsgMovePath::PATHTYPE_MAX;
const int MsgMovePath::PATHTYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgMovePath::kPosFieldNumber;
const int MsgMovePath::kPathTypeFieldNumber;
const int MsgMovePath::kPointsFieldNumber;
const int MsgMovePath::kTargetObjectIdFieldNumber;
const int MsgMovePath::kServerTimeMSFieldNumber;
#endif  // !_MSC_VER

MsgMovePath::MsgMovePath()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMovePath)
}

void MsgMovePath::InitAsDefaultInstance() {
  pos_ = const_cast< ::MsgPB::MsgPoint*>(&::MsgPB::MsgPoint::default_instance());
}

MsgMovePath::MsgMovePath(const MsgMovePath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMovePath)
}

void MsgMovePath::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  pathtype_ = 0;
  targetobjectid_ = 0;
  servertimems_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMovePath::~MsgMovePath() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMovePath)
  SharedDtor();
}

void MsgMovePath::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void MsgMovePath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMovePath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMovePath_descriptor_;
}

const MsgMovePath& MsgMovePath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMove_2eproto();
  return *default_instance_;
}

MsgMovePath* MsgMovePath::default_instance_ = NULL;

MsgMovePath* MsgMovePath::New() const {
  return new MsgMovePath;
}

void MsgMovePath::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMovePath*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(pathtype_, servertimems_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::MsgPB::MsgPoint::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMovePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMovePath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.MsgPoint pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pathType;
        break;
      }

      // optional .MsgPB.MsgMovePath.PATHTYPE pathType = 2;
      case 2: {
        if (tag == 16) {
         parse_pathType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgMovePath_PATHTYPE_IsValid(value)) {
            set_pathtype(static_cast< ::MsgPB::MsgMovePath_PATHTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_points;
        break;
      }

      // repeated .MsgPB.MsgPoint points = 3;
      case 3: {
        if (tag == 26) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_points;
        if (input->ExpectTag(32)) goto parse_targetObjectId;
        break;
      }

      // optional int32 targetObjectId = 4;
      case 4: {
        if (tag == 32) {
         parse_targetObjectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetobjectid_)));
          set_has_targetobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_serverTimeMS;
        break;
      }

      // optional int64 serverTimeMS = 5;
      case 5: {
        if (tag == 40) {
         parse_serverTimeMS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertimems_)));
          set_has_servertimems();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMovePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMovePath)
  return false;
#undef DO_
}

void MsgMovePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMovePath)
  // optional .MsgPB.MsgPoint pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(), output);
  }

  // optional .MsgPB.MsgMovePath.PATHTYPE pathType = 2;
  if (has_pathtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pathtype(), output);
  }

  // repeated .MsgPB.MsgPoint points = 3;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->points(i), output);
  }

  // optional int32 targetObjectId = 4;
  if (has_targetobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetobjectid(), output);
  }

  // optional int64 serverTimeMS = 5;
  if (has_servertimems()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->servertimems(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMovePath)
}

::google::protobuf::uint8* MsgMovePath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMovePath)
  // optional .MsgPB.MsgPoint pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(), target);
  }

  // optional .MsgPB.MsgMovePath.PATHTYPE pathType = 2;
  if (has_pathtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pathtype(), target);
  }

  // repeated .MsgPB.MsgPoint points = 3;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->points(i), target);
  }

  // optional int32 targetObjectId = 4;
  if (has_targetobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetobjectid(), target);
  }

  // optional int64 serverTimeMS = 5;
  if (has_servertimems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->servertimems(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMovePath)
  return target;
}

int MsgMovePath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.MsgPoint pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .MsgPB.MsgMovePath.PATHTYPE pathType = 2;
    if (has_pathtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pathtype());
    }

    // optional int32 targetObjectId = 4;
    if (has_targetobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetobjectid());
    }

    // optional int64 serverTimeMS = 5;
    if (has_servertimems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertimems());
    }

  }
  // repeated .MsgPB.MsgPoint points = 3;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMovePath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMovePath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMovePath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMovePath::MergeFrom(const MsgMovePath& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::MsgPB::MsgPoint::MergeFrom(from.pos());
    }
    if (from.has_pathtype()) {
      set_pathtype(from.pathtype());
    }
    if (from.has_targetobjectid()) {
      set_targetobjectid(from.targetobjectid());
    }
    if (from.has_servertimems()) {
      set_servertimems(from.servertimems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMovePath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMovePath::CopyFrom(const MsgMovePath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMovePath::IsInitialized() const {

  return true;
}

void MsgMovePath::Swap(MsgMovePath* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(pathtype_, other->pathtype_);
    points_.Swap(&other->points_);
    std::swap(targetobjectid_, other->targetobjectid_);
    std::swap(servertimems_, other->servertimems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMovePath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMovePath_descriptor_;
  metadata.reflection = MsgMovePath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMovePathG2C::kMsgTypeFieldNumber;
const int MsgMovePathG2C::kMapObjectIdFieldNumber;
const int MsgMovePathG2C::kMovePathFieldNumber;
#endif  // !_MSC_VER

MsgMovePathG2C::MsgMovePathG2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMovePathG2C)
}

void MsgMovePathG2C::InitAsDefaultInstance() {
  movepath_ = const_cast< ::MsgPB::MsgMovePath*>(&::MsgPB::MsgMovePath::default_instance());
}

MsgMovePathG2C::MsgMovePathG2C(const MsgMovePathG2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMovePathG2C)
}

void MsgMovePathG2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1750;
  mapobjectid_ = 0;
  movepath_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMovePathG2C::~MsgMovePathG2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMovePathG2C)
  SharedDtor();
}

void MsgMovePathG2C::SharedDtor() {
  if (this != default_instance_) {
    delete movepath_;
  }
}

void MsgMovePathG2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMovePathG2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMovePathG2C_descriptor_;
}

const MsgMovePathG2C& MsgMovePathG2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMove_2eproto();
  return *default_instance_;
}

MsgMovePathG2C* MsgMovePathG2C::default_instance_ = NULL;

MsgMovePathG2C* MsgMovePathG2C::New() const {
  return new MsgMovePathG2C;
}

void MsgMovePathG2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1750;
    mapobjectid_ = 0;
    if (has_movepath()) {
      if (movepath_ != NULL) movepath_->::MsgPB::MsgMovePath::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMovePathG2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMovePathG2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MOVE_PATH_G2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapObjectId;
        break;
      }

      // optional int32 mapObjectId = 2;
      case 2: {
        if (tag == 16) {
         parse_mapObjectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapobjectid_)));
          set_has_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_movePath;
        break;
      }

      // optional .MsgPB.MsgMovePath movePath = 3;
      case 3: {
        if (tag == 26) {
         parse_movePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movepath()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMovePathG2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMovePathG2C)
  return false;
#undef DO_
}

void MsgMovePathG2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMovePathG2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MOVE_PATH_G2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 mapObjectId = 2;
  if (has_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapobjectid(), output);
  }

  // optional .MsgPB.MsgMovePath movePath = 3;
  if (has_movepath()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->movepath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMovePathG2C)
}

::google::protobuf::uint8* MsgMovePathG2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMovePathG2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MOVE_PATH_G2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 mapObjectId = 2;
  if (has_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapobjectid(), target);
  }

  // optional .MsgPB.MsgMovePath movePath = 3;
  if (has_movepath()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->movepath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMovePathG2C)
  return target;
}

int MsgMovePathG2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MOVE_PATH_G2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 mapObjectId = 2;
    if (has_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapobjectid());
    }

    // optional .MsgPB.MsgMovePath movePath = 3;
    if (has_movepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movepath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMovePathG2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMovePathG2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMovePathG2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMovePathG2C::MergeFrom(const MsgMovePathG2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_mapobjectid()) {
      set_mapobjectid(from.mapobjectid());
    }
    if (from.has_movepath()) {
      mutable_movepath()->::MsgPB::MsgMovePath::MergeFrom(from.movepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMovePathG2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMovePathG2C::CopyFrom(const MsgMovePathG2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMovePathG2C::IsInitialized() const {

  return true;
}

void MsgMovePathG2C::Swap(MsgMovePathG2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(mapobjectid_, other->mapobjectid_);
    std::swap(movepath_, other->movepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMovePathG2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMovePathG2C_descriptor_;
  metadata.reflection = MsgMovePathG2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
