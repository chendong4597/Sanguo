// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgPvPRandMap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgPvPRandMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* RandRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPvPRandRoomLst_MS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPvPRandRoomLst_MS2C_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgPvPRandMap_2eproto() {
  protobuf_AddDesc_MsgPvPRandMap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgPvPRandMap.proto");
  GOOGLE_CHECK(file != NULL);
  RandRoomInfo_descriptor_ = file->message_type(0);
  static const int RandRoomInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandRoomInfo, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandRoomInfo, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandRoomInfo, file_name_),
  };
  RandRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandRoomInfo_descriptor_,
      RandRoomInfo::default_instance_,
      RandRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandRoomInfo));
  MsgPvPRandRoomLst_MS2C_descriptor_ = file->message_type(1);
  static const int MsgPvPRandRoomLst_MS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandRoomLst_MS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandRoomLst_MS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandRoomLst_MS2C, room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandRoomLst_MS2C, mapfilename_),
  };
  MsgPvPRandRoomLst_MS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPvPRandRoomLst_MS2C_descriptor_,
      MsgPvPRandRoomLst_MS2C::default_instance_,
      MsgPvPRandRoomLst_MS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandRoomLst_MS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandRoomLst_MS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPvPRandRoomLst_MS2C));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgPvPRandMap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandRoomInfo_descriptor_, &RandRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPvPRandRoomLst_MS2C_descriptor_, &MsgPvPRandRoomLst_MS2C::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgPvPRandMap_2eproto() {
  delete RandRoomInfo::default_instance_;
  delete RandRoomInfo_reflection_;
  delete MsgPvPRandRoomLst_MS2C::default_instance_;
  delete MsgPvPRandRoomLst_MS2C_reflection_;
}

void protobuf_AddDesc_MsgPvPRandMap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MsgPvPRandMap.proto\022\005MsgPB\032\rMsgType.pr"
    "oto\"\?\n\014RandRoomInfo\022\r\n\005pos_x\030\001 \001(\005\022\r\n\005po"
    "s_y\030\002 \001(\005\022\021\n\tfile_name\030\003 \001(\t\"\243\001\n\026MsgPvPR"
    "andRoomLst_MS2C\022=\n\007msgType\030\001 \001(\0162\017.MsgPB"
    ".EMsgType:\033_MSG_PVP_RAND_ROOM_LST_MS2C\022\r"
    "\n\005iggid\030\002 \001(\003\022&\n\troom_info\030\003 \003(\0132\023.MsgPB"
    ".RandRoomInfo\022\023\n\013mapfilename\030\004 \001(\t", 274);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgPvPRandMap.proto", &protobuf_RegisterTypes);
  RandRoomInfo::default_instance_ = new RandRoomInfo();
  MsgPvPRandRoomLst_MS2C::default_instance_ = new MsgPvPRandRoomLst_MS2C();
  RandRoomInfo::default_instance_->InitAsDefaultInstance();
  MsgPvPRandRoomLst_MS2C::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgPvPRandMap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgPvPRandMap_2eproto {
  StaticDescriptorInitializer_MsgPvPRandMap_2eproto() {
    protobuf_AddDesc_MsgPvPRandMap_2eproto();
  }
} static_descriptor_initializer_MsgPvPRandMap_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RandRoomInfo::kPosXFieldNumber;
const int RandRoomInfo::kPosYFieldNumber;
const int RandRoomInfo::kFileNameFieldNumber;
#endif  // !_MSC_VER

RandRoomInfo::RandRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.RandRoomInfo)
}

void RandRoomInfo::InitAsDefaultInstance() {
}

RandRoomInfo::RandRoomInfo(const RandRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.RandRoomInfo)
}

void RandRoomInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandRoomInfo::~RandRoomInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.RandRoomInfo)
  SharedDtor();
}

void RandRoomInfo::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void RandRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandRoomInfo_descriptor_;
}

const RandRoomInfo& RandRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPvPRandMap_2eproto();
  return *default_instance_;
}

RandRoomInfo* RandRoomInfo::default_instance_ = NULL;

RandRoomInfo* RandRoomInfo::New() const {
  return new RandRoomInfo;
}

void RandRoomInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RandRoomInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(pos_x_, pos_y_);
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.RandRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos_x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 2;
      case 2: {
        if (tag == 16) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // optional string file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.RandRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.RandRoomInfo)
  return false;
#undef DO_
}

void RandRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.RandRoomInfo)
  // optional int32 pos_x = 1;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos_x(), output);
  }

  // optional int32 pos_y = 2;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_y(), output);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.RandRoomInfo)
}

::google::protobuf::uint8* RandRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.RandRoomInfo)
  // optional int32 pos_x = 1;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos_x(), target);
  }

  // optional int32 pos_y = 2;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_y(), target);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.RandRoomInfo)
  return target;
}

int RandRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos_x = 1;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 2;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandRoomInfo::MergeFrom(const RandRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandRoomInfo::CopyFrom(const RandRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandRoomInfo::IsInitialized() const {

  return true;
}

void RandRoomInfo::Swap(RandRoomInfo* other) {
  if (other != this) {
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandRoomInfo_descriptor_;
  metadata.reflection = RandRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPvPRandRoomLst_MS2C::kMsgTypeFieldNumber;
const int MsgPvPRandRoomLst_MS2C::kIggidFieldNumber;
const int MsgPvPRandRoomLst_MS2C::kRoomInfoFieldNumber;
const int MsgPvPRandRoomLst_MS2C::kMapfilenameFieldNumber;
#endif  // !_MSC_VER

MsgPvPRandRoomLst_MS2C::MsgPvPRandRoomLst_MS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPvPRandRoomLst_MS2C)
}

void MsgPvPRandRoomLst_MS2C::InitAsDefaultInstance() {
}

MsgPvPRandRoomLst_MS2C::MsgPvPRandRoomLst_MS2C(const MsgPvPRandRoomLst_MS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPvPRandRoomLst_MS2C)
}

void MsgPvPRandRoomLst_MS2C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 2502;
  iggid_ = GOOGLE_LONGLONG(0);
  mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPvPRandRoomLst_MS2C::~MsgPvPRandRoomLst_MS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPvPRandRoomLst_MS2C)
  SharedDtor();
}

void MsgPvPRandRoomLst_MS2C::SharedDtor() {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapfilename_;
  }
  if (this != default_instance_) {
  }
}

void MsgPvPRandRoomLst_MS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPvPRandRoomLst_MS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPvPRandRoomLst_MS2C_descriptor_;
}

const MsgPvPRandRoomLst_MS2C& MsgPvPRandRoomLst_MS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPvPRandMap_2eproto();
  return *default_instance_;
}

MsgPvPRandRoomLst_MS2C* MsgPvPRandRoomLst_MS2C::default_instance_ = NULL;

MsgPvPRandRoomLst_MS2C* MsgPvPRandRoomLst_MS2C::New() const {
  return new MsgPvPRandRoomLst_MS2C;
}

void MsgPvPRandRoomLst_MS2C::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    msgtype_ = 2502;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_mapfilename()) {
      if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mapfilename_->clear();
      }
    }
  }
  room_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPvPRandRoomLst_MS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPvPRandRoomLst_MS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ROOM_LST_MS2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_info;
        break;
      }

      // repeated .MsgPB.RandRoomInfo room_info = 3;
      case 3: {
        if (tag == 26) {
         parse_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_info;
        if (input->ExpectTag(34)) goto parse_mapfilename;
        break;
      }

      // optional string mapfilename = 4;
      case 4: {
        if (tag == 34) {
         parse_mapfilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapfilename().data(), this->mapfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPvPRandRoomLst_MS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPvPRandRoomLst_MS2C)
  return false;
#undef DO_
}

void MsgPvPRandRoomLst_MS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPvPRandRoomLst_MS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ROOM_LST_MS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // repeated .MsgPB.RandRoomInfo room_info = 3;
  for (int i = 0; i < this->room_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_info(i), output);
  }

  // optional string mapfilename = 4;
  if (has_mapfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapfilename().data(), this->mapfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mapfilename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPvPRandRoomLst_MS2C)
}

::google::protobuf::uint8* MsgPvPRandRoomLst_MS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPvPRandRoomLst_MS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ROOM_LST_MS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // repeated .MsgPB.RandRoomInfo room_info = 3;
  for (int i = 0; i < this->room_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_info(i), target);
  }

  // optional string mapfilename = 4;
  if (has_mapfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapfilename().data(), this->mapfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mapfilename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPvPRandRoomLst_MS2C)
  return target;
}

int MsgPvPRandRoomLst_MS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ROOM_LST_MS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string mapfilename = 4;
    if (has_mapfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapfilename());
    }

  }
  // repeated .MsgPB.RandRoomInfo room_info = 3;
  total_size += 1 * this->room_info_size();
  for (int i = 0; i < this->room_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPvPRandRoomLst_MS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPvPRandRoomLst_MS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPvPRandRoomLst_MS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPvPRandRoomLst_MS2C::MergeFrom(const MsgPvPRandRoomLst_MS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_info_.MergeFrom(from.room_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapfilename()) {
      set_mapfilename(from.mapfilename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPvPRandRoomLst_MS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPvPRandRoomLst_MS2C::CopyFrom(const MsgPvPRandRoomLst_MS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPvPRandRoomLst_MS2C::IsInitialized() const {

  return true;
}

void MsgPvPRandRoomLst_MS2C::Swap(MsgPvPRandRoomLst_MS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    room_info_.Swap(&other->room_info_);
    std::swap(mapfilename_, other->mapfilename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPvPRandRoomLst_MS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPvPRandRoomLst_MS2C_descriptor_;
  metadata.reflection = MsgPvPRandRoomLst_MS2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
