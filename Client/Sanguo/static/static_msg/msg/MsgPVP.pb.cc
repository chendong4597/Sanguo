// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgPVP.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgPVP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgPlayerPvpData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerPvpData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRequestPvpMatchS2MS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRequestPvpMatchS2MS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRequestPvpMatchResultMS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRequestPvpMatchResultMS2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNotifyPvpReadyMS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNotifyPvpReadyMS2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNotifyPvpNotenoughPlayerMS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNotifyPvpNotenoughPlayerMS2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPvpMatchBestMapServerMS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPvpMatchBestMapServerMS2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPCreateMapMS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPCreateMapMS2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPCreateMapResultS2MS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPCreateMapResultS2MS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStartEnterWarPostion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStartEnterWarPostion_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPRankC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPRankC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPRankS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPRankS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPOutS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPOutS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPGasS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPGasS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPRewardS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPRewardS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPDiscardWeaponC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPDiscardWeaponC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPDiscardWeaponS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPDiscardWeaponS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPChangeWeaponC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPChangeWeaponC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPChangeWeaponS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPChangeWeaponS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPChoiceWeaponC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPChoiceWeaponC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPVPChoiceWeaponS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPVPChoiceWeaponS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ENUM_PVP_MATCH_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ENUM_CREATE_PVP_MAP_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_RANK_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PVP_WEAPON_RESULT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgPVP_2eproto() {
  protobuf_AddDesc_MsgPVP_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgPVP.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPlayerPvpData_descriptor_ = file->message_type(0);
  static const int MsgPlayerPvpData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPvpData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPvpData, killscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPvpData, rankscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPvpData, segment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPvpData, pvpcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPvpData, pvptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPvpData, ranklow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPvpData, dirty_),
  };
  MsgPlayerPvpData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerPvpData_descriptor_,
      MsgPlayerPvpData::default_instance_,
      MsgPlayerPvpData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPvpData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPvpData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerPvpData));
  MsgRequestPvpMatchS2MS_descriptor_ = file->message_type(1);
  static const int MsgRequestPvpMatchS2MS_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestPvpMatchS2MS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestPvpMatchS2MS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestPvpMatchS2MS, iping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestPvpMatchS2MS, iscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestPvpMatchS2MS, iranklow_),
  };
  MsgRequestPvpMatchS2MS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRequestPvpMatchS2MS_descriptor_,
      MsgRequestPvpMatchS2MS::default_instance_,
      MsgRequestPvpMatchS2MS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestPvpMatchS2MS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestPvpMatchS2MS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRequestPvpMatchS2MS));
  MsgRequestPvpMatchResultMS2S_descriptor_ = file->message_type(2);
  static const int MsgRequestPvpMatchResultMS2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestPvpMatchResultMS2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestPvpMatchResultMS2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestPvpMatchResultMS2S, result_),
  };
  MsgRequestPvpMatchResultMS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRequestPvpMatchResultMS2S_descriptor_,
      MsgRequestPvpMatchResultMS2S::default_instance_,
      MsgRequestPvpMatchResultMS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestPvpMatchResultMS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestPvpMatchResultMS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRequestPvpMatchResultMS2S));
  MsgNotifyPvpReadyMS2S_descriptor_ = file->message_type(3);
  static const int MsgNotifyPvpReadyMS2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPvpReadyMS2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPvpReadyMS2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPvpReadyMS2S, countdownsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPvpReadyMS2S, playernum_),
  };
  MsgNotifyPvpReadyMS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNotifyPvpReadyMS2S_descriptor_,
      MsgNotifyPvpReadyMS2S::default_instance_,
      MsgNotifyPvpReadyMS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPvpReadyMS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPvpReadyMS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNotifyPvpReadyMS2S));
  MsgNotifyPvpNotenoughPlayerMS2S_descriptor_ = file->message_type(4);
  static const int MsgNotifyPvpNotenoughPlayerMS2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPvpNotenoughPlayerMS2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPvpNotenoughPlayerMS2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPvpNotenoughPlayerMS2S, playernum_),
  };
  MsgNotifyPvpNotenoughPlayerMS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNotifyPvpNotenoughPlayerMS2S_descriptor_,
      MsgNotifyPvpNotenoughPlayerMS2S::default_instance_,
      MsgNotifyPvpNotenoughPlayerMS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPvpNotenoughPlayerMS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPvpNotenoughPlayerMS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNotifyPvpNotenoughPlayerMS2S));
  MsgPvpMatchBestMapServerMS2S_descriptor_ = file->message_type(5);
  static const int MsgPvpMatchBestMapServerMS2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpMatchBestMapServerMS2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpMatchBestMapServerMS2S, queueindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpMatchBestMapServerMS2S, opertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpMatchBestMapServerMS2S, idarea_),
  };
  MsgPvpMatchBestMapServerMS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPvpMatchBestMapServerMS2S_descriptor_,
      MsgPvpMatchBestMapServerMS2S::default_instance_,
      MsgPvpMatchBestMapServerMS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpMatchBestMapServerMS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvpMatchBestMapServerMS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPvpMatchBestMapServerMS2S));
  MsgPVPCreateMapMS2S_descriptor_ = file->message_type(6);
  static const int MsgPVPCreateMapMS2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapMS2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapMS2S, queueindex_),
  };
  MsgPVPCreateMapMS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPCreateMapMS2S_descriptor_,
      MsgPVPCreateMapMS2S::default_instance_,
      MsgPVPCreateMapMS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapMS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapMS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPCreateMapMS2S));
  MsgPVPCreateMapResultS2MS_descriptor_ = file->message_type(7);
  static const int MsgPVPCreateMapResultS2MS_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapResultS2MS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapResultS2MS, queueindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapResultS2MS, mapuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapResultS2MS, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapResultS2MS, mapserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapResultS2MS, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapResultS2MS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapResultS2MS, mapfilename_),
  };
  MsgPVPCreateMapResultS2MS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPCreateMapResultS2MS_descriptor_,
      MsgPVPCreateMapResultS2MS::default_instance_,
      MsgPVPCreateMapResultS2MS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapResultS2MS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPCreateMapResultS2MS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPCreateMapResultS2MS));
  MsgStartEnterWarPostion_descriptor_ = file->message_type(8);
  static const int MsgStartEnterWarPostion_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartEnterWarPostion, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartEnterWarPostion, queueindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartEnterWarPostion, mapuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartEnterWarPostion, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartEnterWarPostion, mapserverid_),
  };
  MsgStartEnterWarPostion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStartEnterWarPostion_descriptor_,
      MsgStartEnterWarPostion::default_instance_,
      MsgStartEnterWarPostion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartEnterWarPostion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartEnterWarPostion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStartEnterWarPostion));
  MsgPVPRankC2S_descriptor_ = file->message_type(9);
  static const int MsgPVPRankC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRankC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRankC2S, iggid_),
  };
  MsgPVPRankC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPRankC2S_descriptor_,
      MsgPVPRankC2S::default_instance_,
      MsgPVPRankC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRankC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRankC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPRankC2S));
  RankInfo_descriptor_ = file->message_type(10);
  static const int RankInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, name_),
  };
  RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankInfo_descriptor_,
      RankInfo::default_instance_,
      RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankInfo));
  MsgPVPRankS2C_descriptor_ = file->message_type(11);
  static const int MsgPVPRankS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRankS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRankS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRankS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRankS2C, rankobjs_),
  };
  MsgPVPRankS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPRankS2C_descriptor_,
      MsgPVPRankS2C::default_instance_,
      MsgPVPRankS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRankS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRankS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPRankS2C));
  MsgPVPOutS2C_descriptor_ = file->message_type(12);
  static const int MsgPVPOutS2C_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPOutS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPOutS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPOutS2C, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPOutS2C, killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPOutS2C, deader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPOutS2C, idweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPOutS2C, idmob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPOutS2C, idobjkiller_),
  };
  MsgPVPOutS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPOutS2C_descriptor_,
      MsgPVPOutS2C::default_instance_,
      MsgPVPOutS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPOutS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPOutS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPOutS2C));
  MsgPVPStart_descriptor_ = file->message_type(13);
  static const int MsgPVPStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPStart, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPStart, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPStart, total_),
  };
  MsgPVPStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPStart_descriptor_,
      MsgPVPStart::default_instance_,
      MsgPVPStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPStart));
  MsgPVPGasS2C_descriptor_ = file->message_type(14);
  static const int MsgPVPGasS2C_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPGasS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPGasS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPGasS2C, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPGasS2C, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPGasS2C, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPGasS2C, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPGasS2C, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPGasS2C, radius_min_),
  };
  MsgPVPGasS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPGasS2C_descriptor_,
      MsgPVPGasS2C::default_instance_,
      MsgPVPGasS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPGasS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPGasS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPGasS2C));
  MsgPVPRewardS2C_descriptor_ = file->message_type(15);
  static const int MsgPVPRewardS2C_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, resourse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, segment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, killscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, rankscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, resscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, totalkillscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, totalrankscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, totaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, totalpvpcoin_),
  };
  MsgPVPRewardS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPRewardS2C_descriptor_,
      MsgPVPRewardS2C::default_instance_,
      MsgPVPRewardS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPRewardS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPRewardS2C));
  MsgPVPDiscardWeaponC2S_descriptor_ = file->message_type(16);
  static const int MsgPVPDiscardWeaponC2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPDiscardWeaponC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPDiscardWeaponC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPDiscardWeaponC2S, index_),
  };
  MsgPVPDiscardWeaponC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPDiscardWeaponC2S_descriptor_,
      MsgPVPDiscardWeaponC2S::default_instance_,
      MsgPVPDiscardWeaponC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPDiscardWeaponC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPDiscardWeaponC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPDiscardWeaponC2S));
  MsgPVPDiscardWeaponS2C_descriptor_ = file->message_type(17);
  static const int MsgPVPDiscardWeaponS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPDiscardWeaponS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPDiscardWeaponS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPDiscardWeaponS2C, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPDiscardWeaponS2C, res_),
  };
  MsgPVPDiscardWeaponS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPDiscardWeaponS2C_descriptor_,
      MsgPVPDiscardWeaponS2C::default_instance_,
      MsgPVPDiscardWeaponS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPDiscardWeaponS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPDiscardWeaponS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPDiscardWeaponS2C));
  MsgPVPChangeWeaponC2S_descriptor_ = file->message_type(18);
  static const int MsgPVPChangeWeaponC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChangeWeaponC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChangeWeaponC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChangeWeaponC2S, index1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChangeWeaponC2S, index2_),
  };
  MsgPVPChangeWeaponC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPChangeWeaponC2S_descriptor_,
      MsgPVPChangeWeaponC2S::default_instance_,
      MsgPVPChangeWeaponC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChangeWeaponC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChangeWeaponC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPChangeWeaponC2S));
  MsgPVPChangeWeaponS2C_descriptor_ = file->message_type(19);
  static const int MsgPVPChangeWeaponS2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChangeWeaponS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChangeWeaponS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChangeWeaponS2C, index1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChangeWeaponS2C, index2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChangeWeaponS2C, res_),
  };
  MsgPVPChangeWeaponS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPChangeWeaponS2C_descriptor_,
      MsgPVPChangeWeaponS2C::default_instance_,
      MsgPVPChangeWeaponS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChangeWeaponS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChangeWeaponS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPChangeWeaponS2C));
  MsgPVPChoiceWeaponC2S_descriptor_ = file->message_type(20);
  static const int MsgPVPChoiceWeaponC2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChoiceWeaponC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChoiceWeaponC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChoiceWeaponC2S, index_),
  };
  MsgPVPChoiceWeaponC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPChoiceWeaponC2S_descriptor_,
      MsgPVPChoiceWeaponC2S::default_instance_,
      MsgPVPChoiceWeaponC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChoiceWeaponC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChoiceWeaponC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPChoiceWeaponC2S));
  MsgPVPChoiceWeaponS2C_descriptor_ = file->message_type(21);
  static const int MsgPVPChoiceWeaponS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChoiceWeaponS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChoiceWeaponS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChoiceWeaponS2C, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChoiceWeaponS2C, res_),
  };
  MsgPVPChoiceWeaponS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPVPChoiceWeaponS2C_descriptor_,
      MsgPVPChoiceWeaponS2C::default_instance_,
      MsgPVPChoiceWeaponS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChoiceWeaponS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPVPChoiceWeaponS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPVPChoiceWeaponS2C));
  ENUM_PVP_MATCH_RESULT_descriptor_ = file->enum_type(0);
  ENUM_CREATE_PVP_MAP_RESULT_descriptor_ = file->enum_type(1);
  MSG_RANK_RESULT_descriptor_ = file->enum_type(2);
  PVP_WEAPON_RESULT_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgPVP_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerPvpData_descriptor_, &MsgPlayerPvpData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRequestPvpMatchS2MS_descriptor_, &MsgRequestPvpMatchS2MS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRequestPvpMatchResultMS2S_descriptor_, &MsgRequestPvpMatchResultMS2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNotifyPvpReadyMS2S_descriptor_, &MsgNotifyPvpReadyMS2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNotifyPvpNotenoughPlayerMS2S_descriptor_, &MsgNotifyPvpNotenoughPlayerMS2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPvpMatchBestMapServerMS2S_descriptor_, &MsgPvpMatchBestMapServerMS2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPCreateMapMS2S_descriptor_, &MsgPVPCreateMapMS2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPCreateMapResultS2MS_descriptor_, &MsgPVPCreateMapResultS2MS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStartEnterWarPostion_descriptor_, &MsgStartEnterWarPostion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPRankC2S_descriptor_, &MsgPVPRankC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankInfo_descriptor_, &RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPRankS2C_descriptor_, &MsgPVPRankS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPOutS2C_descriptor_, &MsgPVPOutS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPStart_descriptor_, &MsgPVPStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPGasS2C_descriptor_, &MsgPVPGasS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPRewardS2C_descriptor_, &MsgPVPRewardS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPDiscardWeaponC2S_descriptor_, &MsgPVPDiscardWeaponC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPDiscardWeaponS2C_descriptor_, &MsgPVPDiscardWeaponS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPChangeWeaponC2S_descriptor_, &MsgPVPChangeWeaponC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPChangeWeaponS2C_descriptor_, &MsgPVPChangeWeaponS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPChoiceWeaponC2S_descriptor_, &MsgPVPChoiceWeaponC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPVPChoiceWeaponS2C_descriptor_, &MsgPVPChoiceWeaponS2C::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgPVP_2eproto() {
  delete MsgPlayerPvpData::default_instance_;
  delete MsgPlayerPvpData_reflection_;
  delete MsgRequestPvpMatchS2MS::default_instance_;
  delete MsgRequestPvpMatchS2MS_reflection_;
  delete MsgRequestPvpMatchResultMS2S::default_instance_;
  delete MsgRequestPvpMatchResultMS2S_reflection_;
  delete MsgNotifyPvpReadyMS2S::default_instance_;
  delete MsgNotifyPvpReadyMS2S_reflection_;
  delete MsgNotifyPvpNotenoughPlayerMS2S::default_instance_;
  delete MsgNotifyPvpNotenoughPlayerMS2S_reflection_;
  delete MsgPvpMatchBestMapServerMS2S::default_instance_;
  delete MsgPvpMatchBestMapServerMS2S_reflection_;
  delete MsgPVPCreateMapMS2S::default_instance_;
  delete MsgPVPCreateMapMS2S_reflection_;
  delete MsgPVPCreateMapResultS2MS::default_instance_;
  delete MsgPVPCreateMapResultS2MS_reflection_;
  delete MsgStartEnterWarPostion::default_instance_;
  delete MsgStartEnterWarPostion_reflection_;
  delete MsgPVPRankC2S::default_instance_;
  delete MsgPVPRankC2S_reflection_;
  delete RankInfo::default_instance_;
  delete RankInfo_reflection_;
  delete MsgPVPRankS2C::default_instance_;
  delete MsgPVPRankS2C_reflection_;
  delete MsgPVPOutS2C::default_instance_;
  delete MsgPVPOutS2C_reflection_;
  delete MsgPVPStart::default_instance_;
  delete MsgPVPStart_reflection_;
  delete MsgPVPGasS2C::default_instance_;
  delete MsgPVPGasS2C_reflection_;
  delete MsgPVPRewardS2C::default_instance_;
  delete MsgPVPRewardS2C_reflection_;
  delete MsgPVPDiscardWeaponC2S::default_instance_;
  delete MsgPVPDiscardWeaponC2S_reflection_;
  delete MsgPVPDiscardWeaponS2C::default_instance_;
  delete MsgPVPDiscardWeaponS2C_reflection_;
  delete MsgPVPChangeWeaponC2S::default_instance_;
  delete MsgPVPChangeWeaponC2S_reflection_;
  delete MsgPVPChangeWeaponS2C::default_instance_;
  delete MsgPVPChangeWeaponS2C_reflection_;
  delete MsgPVPChoiceWeaponC2S::default_instance_;
  delete MsgPVPChoiceWeaponC2S_reflection_;
  delete MsgPVPChoiceWeaponS2C::default_instance_;
  delete MsgPVPChoiceWeaponS2C_reflection_;
}

void protobuf_AddDesc_MsgPVP_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014MsgPVP.proto\022\005MsgPB\032\rMsgType.proto\"\232\001\n"
    "\020MsgPlayerPvpData\022\r\n\005score\030\001 \001(\005\022\021\n\tkill"
    "score\030\002 \001(\005\022\021\n\trankscore\030\003 \001(\005\022\017\n\007segmen"
    "t\030\004 \001(\005\022\017\n\007pvpcoin\030\005 \001(\005\022\017\n\007pvptime\030\006 \001("
    "\005\022\017\n\007ranklow\030\007 \001(\005\022\r\n\005dirty\030\010 \001(\003\"\227\001\n\026Ms"
    "gRequestPvpMatchS2MS\022=\n\007msgType\030\001 \001(\0162\017."
    "MsgPB.EMsgType:\033_MSG_REQUEST_PVP_MATCH_S"
    "2MS\022\r\n\005iggid\030\002 \001(\003\022\r\n\005iPing\030\003 \001(\005\022\016\n\006iSc"
    "ore\030\004 \001(\005\022\020\n\010iRankLow\030\005 \001(\005\"\241\001\n\034MsgReque"
    "stPvpMatchResultMS2S\022D\n\007msgType\030\001 \001(\0162\017."
    "MsgPB.EMsgType:\"_MSG_REQUEST_PVP_MATCH_R"
    "ESULT_MS2S\022\r\n\005iggid\030\002 \001(\003\022,\n\006result\030\003 \001("
    "\0162\034.MsgPB.ENUM_PVP_MATCH_RESULT\"\215\001\n\025MsgN"
    "otifyPvpReadyMS2S\022<\n\007msgType\030\001 \001(\0162\017.Msg"
    "PB.EMsgType:\032_MSG_NOTIFY_PVP_READY_MS2S\022"
    "\r\n\005iggid\030\002 \001(\003\022\024\n\014countdownSec\030\003 \001(\005\022\021\n\t"
    "playerNum\030\004 \001(\005\"\213\001\n\037MsgNotifyPvpNotenoug"
    "hPlayerMS2S\022F\n\007msgType\030\001 \001(\0162\017.MsgPB.EMs"
    "gType:$_MSG_NOTIFY_PVP_NOTENOUGHPLAYER_M"
    "S2S\022\r\n\005iggid\030\002 \001(\003\022\021\n\tplayerNum\030\003 \001(\005\"\233\001"
    "\n\034MsgPvpMatchBestMapServerMS2S\022E\n\007msgTyp"
    "e\030\001 \001(\0162\017.MsgPB.EMsgType:#_MSG_PVP_MATCH"
    "_BEST_MAP_SERVER_MS2S\022\022\n\nqueueIndex\030\002 \001("
    "\003\022\020\n\010operType\030\003 \001(\005\022\016\n\006idArea\030\004 \001(\r\"e\n\023M"
    "sgPVPCreateMapMS2S\022:\n\007msgType\030\001 \001(\0162\017.Ms"
    "gPB.EMsgType:\030_MSG_PVP_CREATE_MAP_MS2S\022\022"
    "\n\nqueueIndex\030\002 \001(\003\"\376\001\n\031MsgPVPCreateMapRe"
    "sultS2MS\022A\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTy"
    "pe:\037_MSG_PVP_CREATE_MAP_RESULT_S2MS\022\022\n\nq"
    "ueueIndex\030\002 \001(\003\022\017\n\007mapuuid\030\003 \001(\003\022\r\n\005mapi"
    "d\030\004 \001(\005\022\023\n\013mapserverId\030\005 \001(\005\0221\n\006result\030\006"
    " \001(\0162!.MsgPB.ENUM_CREATE_PVP_MAP_RESULT\022"
    "\r\n\005iggid\030\007 \001(\003\022\023\n\013mapfilename\030\010 \001(\t\"\242\001\n\027"
    "MsgStartEnterWarPostion\022>\n\007msgType\030\001 \001(\016"
    "2\017.MsgPB.EMsgType:\034_MSG_START_ENTER_WAR_"
    "POSTION\022\022\n\nqueueIndex\030\002 \001(\003\022\017\n\007mapuuid\030\003"
    " \001(\003\022\r\n\005mapid\030\004 \001(\005\022\023\n\013mapserverId\030\005 \001(\005"
    "\"S\n\rMsgPVPRankC2S\0223\n\007msgType\030\001 \001(\0162\017.Msg"
    "PB.EMsgType:\021_MSG_PVP_RANK_C2S\022\r\n\005iggid\030"
    "\002 \001(\003\"A\n\010RankInfo\022\r\n\005iggid\030\001 \001(\003\022\n\n\002lv\030\002"
    " \001(\005\022\014\n\004face\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\"\233\001\n\rMsg"
    "PVPRankS2C\0223\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsg"
    "Type:\021_MSG_PVP_RANK_S2C\022\r\n\005iggid\030\002 \001(\003\022#"
    "\n\003res\030\003 \001(\0162\026.MsgPB.MSG_RANK_RESULT\022!\n\010r"
    "ankobjs\030\004 \003(\0132\017.MsgPB.RankInfo\"\265\001\n\014MsgPV"
    "POutS2C\0222\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTyp"
    "e:\020_MSG_PVP_OUT_S2C\022\r\n\005iggid\030\002 \001(\003\022\014\n\004ra"
    "nk\030\003 \001(\005\022\016\n\006killer\030\004 \001(\t\022\016\n\006deader\030\005 \001(\t"
    "\022\020\n\010idWeapon\030\006 \001(\005\022\r\n\005idMob\030\007 \001(\005\022\023\n\013idO"
    "bjKiller\030\010 \001(\005\"a\n\013MsgPVPStart\0224\n\007msgType"
    "\030\001 \001(\0162\017.MsgPB.EMsgType:\022_MSG_PVP_START_"
    "S2C\022\r\n\005iggid\030\002 \001(\003\022\r\n\005total\030\003 \001(\005\"\262\001\n\014Ms"
    "gPVPGasS2C\0222\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsg"
    "Type:\020_MSG_PVP_GAS_S2C\022\r\n\005iggid\030\002 \001(\003\022\020\n"
    "\010opentime\030\003 \001(\003\022\014\n\004posx\030\004 \001(\005\022\014\n\004posy\030\005 "
    "\001(\005\022\016\n\006radius\030\006 \001(\005\022\r\n\005speed\030\007 \001(\005\022\022\n\nra"
    "dius_min\030\010 \001(\005\"\352\002\n\017MsgPVPRewardS2C\0225\n\007ms"
    "gType\030\001 \001(\0162\017.MsgPB.EMsgType:\023_MSG_PVP_R"
    "EWARD_S2C\022\r\n\005iggid\030\002 \001(\003\022\r\n\005total\030\003 \001(\005\022"
    "\014\n\004rank\030\004 \001(\005\022\017\n\007killNum\030\005 \001(\005\022\020\n\010resour"
    "se\030\006 \001(\005\022\014\n\004coin\030\007 \001(\005\022\r\n\005score\030\010 \001(\005\022\017\n"
    "\007segment\030\t \001(\005\022\021\n\tkillScore\030\n \001(\005\022\021\n\tran"
    "kScore\030\013 \001(\005\022\020\n\010resScore\030\014 \001(\005\022\022\n\ntotalS"
    "core\030\r \001(\005\022\026\n\016totalKillScore\030\016 \001(\005\022\026\n\016to"
    "talRankScore\030\017 \001(\005\022\021\n\ttotalTime\030\020 \001(\005\022\024\n"
    "\014totalPvpCoin\030\021 \001(\005\"u\n\026MsgPVPDiscardWeap"
    "onC2S\022=\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:"
    "\033_MSG_PVP_DISCARD_WEAPON_C2S\022\r\n\005iggid\030\002 "
    "\001(\003\022\r\n\005index\030\003 \001(\005\"\234\001\n\026MsgPVPDiscardWeap"
    "onS2C\022=\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:"
    "\033_MSG_PVP_DISCARD_WEAPON_S2C\022\r\n\005iggid\030\002 "
    "\001(\003\022\r\n\005index\030\003 \001(\005\022%\n\003res\030\004 \001(\0162\030.MsgPB."
    "PVP_WEAPON_RESULT\"\204\001\n\025MsgPVPChangeWeapon"
    "C2S\022<\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\032_"
    "MSG_PVP_CHANGE_WEAPON_C2S\022\r\n\005iggid\030\002 \001(\003"
    "\022\016\n\006index1\030\003 \001(\005\022\016\n\006index2\030\004 \001(\005\"\253\001\n\025Msg"
    "PVPChangeWeaponS2C\022<\n\007msgType\030\001 \001(\0162\017.Ms"
    "gPB.EMsgType:\032_MSG_PVP_CHANGE_WEAPON_S2C"
    "\022\r\n\005iggid\030\002 \001(\003\022\016\n\006index1\030\003 \001(\005\022\016\n\006index"
    "2\030\004 \001(\005\022%\n\003res\030\005 \001(\0162\030.MsgPB.PVP_WEAPON_"
    "RESULT\"s\n\025MsgPVPChoiceWeaponC2S\022<\n\007msgTy"
    "pe\030\001 \001(\0162\017.MsgPB.EMsgType:\032_MSG_PVP_CHOI"
    "CE_WEAPON_C2S\022\r\n\005iggid\030\002 \001(\003\022\r\n\005index\030\003 "
    "\001(\005\"\232\001\n\025MsgPVPChoiceWeaponS2C\022<\n\007msgType"
    "\030\001 \001(\0162\017.MsgPB.EMsgType:\032_MSG_PVP_CHOICE"
    "_WEAPON_S2C\022\r\n\005iggid\030\002 \001(\003\022\r\n\005index\030\003 \001("
    "\005\022%\n\003res\030\004 \001(\0162\030.MsgPB.PVP_WEAPON_RESULT"
    "*\254\001\n\025ENUM_PVP_MATCH_RESULT\022\031\n\025PVP_MATCH_"
    "RESULT_NULL\020\000\022\034\n\030PVP_MATCH_RESULT_SUCCES"
    "S\020\001\022 \n\034PVP_MATCH_RESULT_MAPID_ERROR\020\002\022\035\n"
    "\031PVP_MATCH_CREATEMAP_ERROR\020\003\022\031\n\025PVP_MATC"
    "H_QUEUE_ERROR\020\004*\250\002\n\032ENUM_CREATE_PVP_MAP_"
    "RESULT\022\036\n\032CREATE_PVP_MAP_RESULT_NULL\020\000\022!"
    "\n\035CREATE_PVP_MAP_RESULT_SUCCESS\020\001\022&\n\"CRE"
    "ATE_PVP_MAP_RESULT_MAPMGR_ERROR\020\002\022%\n!CRE"
    "ATE_PVP_MAP_RESULT_MAPID_ERROR\020\003\022)\n%CREA"
    "TE_PVP_MAP_RESULT_CREATEMAP_ERROR\020\004\022%\n!C"
    "REATE_PVP_MAP_RESULT_QUEUE_ERROR\020\005\022&\n\"CR"
    "EATE_PVP_MAP_RESULT_CHOICE_ERROR\020\006*_\n\017MS"
    "G_RANK_RESULT\022\027\n\023MSG_RANK_RESULT_ERR\020\000\022\026"
    "\n\022MSG_RANK_RESULT_OK\020\001\022\033\n\027MSG_RANK_RESUL"
    "T_NOT_END\020\002*e\n\021PVP_WEAPON_RESULT\022\031\n\025PVP_"
    "WEAPON_RESULT_ERR\020\000\022\030\n\024PVP_WEAPON_RESULT"
    "_OK\020\001\022\033\n\027PVP_WEAPON_RESULT_EMPTY\020\002", 4154);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgPVP.proto", &protobuf_RegisterTypes);
  MsgPlayerPvpData::default_instance_ = new MsgPlayerPvpData();
  MsgRequestPvpMatchS2MS::default_instance_ = new MsgRequestPvpMatchS2MS();
  MsgRequestPvpMatchResultMS2S::default_instance_ = new MsgRequestPvpMatchResultMS2S();
  MsgNotifyPvpReadyMS2S::default_instance_ = new MsgNotifyPvpReadyMS2S();
  MsgNotifyPvpNotenoughPlayerMS2S::default_instance_ = new MsgNotifyPvpNotenoughPlayerMS2S();
  MsgPvpMatchBestMapServerMS2S::default_instance_ = new MsgPvpMatchBestMapServerMS2S();
  MsgPVPCreateMapMS2S::default_instance_ = new MsgPVPCreateMapMS2S();
  MsgPVPCreateMapResultS2MS::default_instance_ = new MsgPVPCreateMapResultS2MS();
  MsgStartEnterWarPostion::default_instance_ = new MsgStartEnterWarPostion();
  MsgPVPRankC2S::default_instance_ = new MsgPVPRankC2S();
  RankInfo::default_instance_ = new RankInfo();
  MsgPVPRankS2C::default_instance_ = new MsgPVPRankS2C();
  MsgPVPOutS2C::default_instance_ = new MsgPVPOutS2C();
  MsgPVPStart::default_instance_ = new MsgPVPStart();
  MsgPVPGasS2C::default_instance_ = new MsgPVPGasS2C();
  MsgPVPRewardS2C::default_instance_ = new MsgPVPRewardS2C();
  MsgPVPDiscardWeaponC2S::default_instance_ = new MsgPVPDiscardWeaponC2S();
  MsgPVPDiscardWeaponS2C::default_instance_ = new MsgPVPDiscardWeaponS2C();
  MsgPVPChangeWeaponC2S::default_instance_ = new MsgPVPChangeWeaponC2S();
  MsgPVPChangeWeaponS2C::default_instance_ = new MsgPVPChangeWeaponS2C();
  MsgPVPChoiceWeaponC2S::default_instance_ = new MsgPVPChoiceWeaponC2S();
  MsgPVPChoiceWeaponS2C::default_instance_ = new MsgPVPChoiceWeaponS2C();
  MsgPlayerPvpData::default_instance_->InitAsDefaultInstance();
  MsgRequestPvpMatchS2MS::default_instance_->InitAsDefaultInstance();
  MsgRequestPvpMatchResultMS2S::default_instance_->InitAsDefaultInstance();
  MsgNotifyPvpReadyMS2S::default_instance_->InitAsDefaultInstance();
  MsgNotifyPvpNotenoughPlayerMS2S::default_instance_->InitAsDefaultInstance();
  MsgPvpMatchBestMapServerMS2S::default_instance_->InitAsDefaultInstance();
  MsgPVPCreateMapMS2S::default_instance_->InitAsDefaultInstance();
  MsgPVPCreateMapResultS2MS::default_instance_->InitAsDefaultInstance();
  MsgStartEnterWarPostion::default_instance_->InitAsDefaultInstance();
  MsgPVPRankC2S::default_instance_->InitAsDefaultInstance();
  RankInfo::default_instance_->InitAsDefaultInstance();
  MsgPVPRankS2C::default_instance_->InitAsDefaultInstance();
  MsgPVPOutS2C::default_instance_->InitAsDefaultInstance();
  MsgPVPStart::default_instance_->InitAsDefaultInstance();
  MsgPVPGasS2C::default_instance_->InitAsDefaultInstance();
  MsgPVPRewardS2C::default_instance_->InitAsDefaultInstance();
  MsgPVPDiscardWeaponC2S::default_instance_->InitAsDefaultInstance();
  MsgPVPDiscardWeaponS2C::default_instance_->InitAsDefaultInstance();
  MsgPVPChangeWeaponC2S::default_instance_->InitAsDefaultInstance();
  MsgPVPChangeWeaponS2C::default_instance_->InitAsDefaultInstance();
  MsgPVPChoiceWeaponC2S::default_instance_->InitAsDefaultInstance();
  MsgPVPChoiceWeaponS2C::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgPVP_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgPVP_2eproto {
  StaticDescriptorInitializer_MsgPVP_2eproto() {
    protobuf_AddDesc_MsgPVP_2eproto();
  }
} static_descriptor_initializer_MsgPVP_2eproto_;
const ::google::protobuf::EnumDescriptor* ENUM_PVP_MATCH_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ENUM_PVP_MATCH_RESULT_descriptor_;
}
bool ENUM_PVP_MATCH_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ENUM_CREATE_PVP_MAP_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ENUM_CREATE_PVP_MAP_RESULT_descriptor_;
}
bool ENUM_CREATE_PVP_MAP_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MSG_RANK_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_RANK_RESULT_descriptor_;
}
bool MSG_RANK_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PVP_WEAPON_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP_WEAPON_RESULT_descriptor_;
}
bool PVP_WEAPON_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerPvpData::kScoreFieldNumber;
const int MsgPlayerPvpData::kKillscoreFieldNumber;
const int MsgPlayerPvpData::kRankscoreFieldNumber;
const int MsgPlayerPvpData::kSegmentFieldNumber;
const int MsgPlayerPvpData::kPvpcoinFieldNumber;
const int MsgPlayerPvpData::kPvptimeFieldNumber;
const int MsgPlayerPvpData::kRanklowFieldNumber;
const int MsgPlayerPvpData::kDirtyFieldNumber;
#endif  // !_MSC_VER

MsgPlayerPvpData::MsgPlayerPvpData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerPvpData)
}

void MsgPlayerPvpData::InitAsDefaultInstance() {
}

MsgPlayerPvpData::MsgPlayerPvpData(const MsgPlayerPvpData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerPvpData)
}

void MsgPlayerPvpData::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  killscore_ = 0;
  rankscore_ = 0;
  segment_ = 0;
  pvpcoin_ = 0;
  pvptime_ = 0;
  ranklow_ = 0;
  dirty_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerPvpData::~MsgPlayerPvpData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerPvpData)
  SharedDtor();
}

void MsgPlayerPvpData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerPvpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerPvpData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerPvpData_descriptor_;
}

const MsgPlayerPvpData& MsgPlayerPvpData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPlayerPvpData* MsgPlayerPvpData::default_instance_ = NULL;

MsgPlayerPvpData* MsgPlayerPvpData::New() const {
  return new MsgPlayerPvpData;
}

void MsgPlayerPvpData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerPvpData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(score_, ranklow_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerPvpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerPvpData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_killscore;
        break;
      }

      // optional int32 killscore = 2;
      case 2: {
        if (tag == 16) {
         parse_killscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killscore_)));
          set_has_killscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rankscore;
        break;
      }

      // optional int32 rankscore = 3;
      case 3: {
        if (tag == 24) {
         parse_rankscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankscore_)));
          set_has_rankscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_segment;
        break;
      }

      // optional int32 segment = 4;
      case 4: {
        if (tag == 32) {
         parse_segment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &segment_)));
          set_has_segment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pvpcoin;
        break;
      }

      // optional int32 pvpcoin = 5;
      case 5: {
        if (tag == 40) {
         parse_pvpcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpcoin_)));
          set_has_pvpcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pvptime;
        break;
      }

      // optional int32 pvptime = 6;
      case 6: {
        if (tag == 48) {
         parse_pvptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvptime_)));
          set_has_pvptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ranklow;
        break;
      }

      // optional int32 ranklow = 7;
      case 7: {
        if (tag == 56) {
         parse_ranklow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranklow_)));
          set_has_ranklow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dirty;
        break;
      }

      // optional int64 dirty = 8;
      case 8: {
        if (tag == 64) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerPvpData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerPvpData)
  return false;
#undef DO_
}

void MsgPlayerPvpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerPvpData)
  // optional int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // optional int32 killscore = 2;
  if (has_killscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->killscore(), output);
  }

  // optional int32 rankscore = 3;
  if (has_rankscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rankscore(), output);
  }

  // optional int32 segment = 4;
  if (has_segment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->segment(), output);
  }

  // optional int32 pvpcoin = 5;
  if (has_pvpcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pvpcoin(), output);
  }

  // optional int32 pvptime = 6;
  if (has_pvptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pvptime(), output);
  }

  // optional int32 ranklow = 7;
  if (has_ranklow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ranklow(), output);
  }

  // optional int64 dirty = 8;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->dirty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerPvpData)
}

::google::protobuf::uint8* MsgPlayerPvpData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerPvpData)
  // optional int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // optional int32 killscore = 2;
  if (has_killscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->killscore(), target);
  }

  // optional int32 rankscore = 3;
  if (has_rankscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rankscore(), target);
  }

  // optional int32 segment = 4;
  if (has_segment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->segment(), target);
  }

  // optional int32 pvpcoin = 5;
  if (has_pvpcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pvpcoin(), target);
  }

  // optional int32 pvptime = 6;
  if (has_pvptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pvptime(), target);
  }

  // optional int32 ranklow = 7;
  if (has_ranklow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ranklow(), target);
  }

  // optional int64 dirty = 8;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->dirty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerPvpData)
  return target;
}

int MsgPlayerPvpData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 killscore = 2;
    if (has_killscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killscore());
    }

    // optional int32 rankscore = 3;
    if (has_rankscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankscore());
    }

    // optional int32 segment = 4;
    if (has_segment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->segment());
    }

    // optional int32 pvpcoin = 5;
    if (has_pvpcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpcoin());
    }

    // optional int32 pvptime = 6;
    if (has_pvptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvptime());
    }

    // optional int32 ranklow = 7;
    if (has_ranklow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranklow());
    }

    // optional int64 dirty = 8;
    if (has_dirty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerPvpData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerPvpData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerPvpData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerPvpData::MergeFrom(const MsgPlayerPvpData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_killscore()) {
      set_killscore(from.killscore());
    }
    if (from.has_rankscore()) {
      set_rankscore(from.rankscore());
    }
    if (from.has_segment()) {
      set_segment(from.segment());
    }
    if (from.has_pvpcoin()) {
      set_pvpcoin(from.pvpcoin());
    }
    if (from.has_pvptime()) {
      set_pvptime(from.pvptime());
    }
    if (from.has_ranklow()) {
      set_ranklow(from.ranklow());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerPvpData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerPvpData::CopyFrom(const MsgPlayerPvpData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerPvpData::IsInitialized() const {

  return true;
}

void MsgPlayerPvpData::Swap(MsgPlayerPvpData* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(killscore_, other->killscore_);
    std::swap(rankscore_, other->rankscore_);
    std::swap(segment_, other->segment_);
    std::swap(pvpcoin_, other->pvpcoin_);
    std::swap(pvptime_, other->pvptime_);
    std::swap(ranklow_, other->ranklow_);
    std::swap(dirty_, other->dirty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerPvpData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerPvpData_descriptor_;
  metadata.reflection = MsgPlayerPvpData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRequestPvpMatchS2MS::kMsgTypeFieldNumber;
const int MsgRequestPvpMatchS2MS::kIggidFieldNumber;
const int MsgRequestPvpMatchS2MS::kIPingFieldNumber;
const int MsgRequestPvpMatchS2MS::kIScoreFieldNumber;
const int MsgRequestPvpMatchS2MS::kIRankLowFieldNumber;
#endif  // !_MSC_VER

MsgRequestPvpMatchS2MS::MsgRequestPvpMatchS2MS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgRequestPvpMatchS2MS)
}

void MsgRequestPvpMatchS2MS::InitAsDefaultInstance() {
}

MsgRequestPvpMatchS2MS::MsgRequestPvpMatchS2MS(const MsgRequestPvpMatchS2MS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgRequestPvpMatchS2MS)
}

void MsgRequestPvpMatchS2MS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2405;
  iggid_ = GOOGLE_LONGLONG(0);
  iping_ = 0;
  iscore_ = 0;
  iranklow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRequestPvpMatchS2MS::~MsgRequestPvpMatchS2MS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgRequestPvpMatchS2MS)
  SharedDtor();
}

void MsgRequestPvpMatchS2MS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRequestPvpMatchS2MS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRequestPvpMatchS2MS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRequestPvpMatchS2MS_descriptor_;
}

const MsgRequestPvpMatchS2MS& MsgRequestPvpMatchS2MS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgRequestPvpMatchS2MS* MsgRequestPvpMatchS2MS::default_instance_ = NULL;

MsgRequestPvpMatchS2MS* MsgRequestPvpMatchS2MS::New() const {
  return new MsgRequestPvpMatchS2MS;
}

void MsgRequestPvpMatchS2MS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRequestPvpMatchS2MS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(iping_, iranklow_);
    msgtype_ = 2405;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRequestPvpMatchS2MS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgRequestPvpMatchS2MS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REQUEST_PVP_MATCH_S2MS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iPing;
        break;
      }

      // optional int32 iPing = 3;
      case 3: {
        if (tag == 24) {
         parse_iPing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iping_)));
          set_has_iping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iScore;
        break;
      }

      // optional int32 iScore = 4;
      case 4: {
        if (tag == 32) {
         parse_iScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscore_)));
          set_has_iscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iRankLow;
        break;
      }

      // optional int32 iRankLow = 5;
      case 5: {
        if (tag == 40) {
         parse_iRankLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iranklow_)));
          set_has_iranklow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgRequestPvpMatchS2MS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgRequestPvpMatchS2MS)
  return false;
#undef DO_
}

void MsgRequestPvpMatchS2MS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgRequestPvpMatchS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REQUEST_PVP_MATCH_S2MS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 iPing = 3;
  if (has_iping()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iping(), output);
  }

  // optional int32 iScore = 4;
  if (has_iscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iscore(), output);
  }

  // optional int32 iRankLow = 5;
  if (has_iranklow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iranklow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgRequestPvpMatchS2MS)
}

::google::protobuf::uint8* MsgRequestPvpMatchS2MS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgRequestPvpMatchS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REQUEST_PVP_MATCH_S2MS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 iPing = 3;
  if (has_iping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iping(), target);
  }

  // optional int32 iScore = 4;
  if (has_iscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iscore(), target);
  }

  // optional int32 iRankLow = 5;
  if (has_iranklow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->iranklow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgRequestPvpMatchS2MS)
  return target;
}

int MsgRequestPvpMatchS2MS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REQUEST_PVP_MATCH_S2MS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 iPing = 3;
    if (has_iping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iping());
    }

    // optional int32 iScore = 4;
    if (has_iscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscore());
    }

    // optional int32 iRankLow = 5;
    if (has_iranklow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iranklow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRequestPvpMatchS2MS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRequestPvpMatchS2MS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRequestPvpMatchS2MS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRequestPvpMatchS2MS::MergeFrom(const MsgRequestPvpMatchS2MS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_iping()) {
      set_iping(from.iping());
    }
    if (from.has_iscore()) {
      set_iscore(from.iscore());
    }
    if (from.has_iranklow()) {
      set_iranklow(from.iranklow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRequestPvpMatchS2MS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRequestPvpMatchS2MS::CopyFrom(const MsgRequestPvpMatchS2MS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRequestPvpMatchS2MS::IsInitialized() const {

  return true;
}

void MsgRequestPvpMatchS2MS::Swap(MsgRequestPvpMatchS2MS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(iping_, other->iping_);
    std::swap(iscore_, other->iscore_);
    std::swap(iranklow_, other->iranklow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRequestPvpMatchS2MS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRequestPvpMatchS2MS_descriptor_;
  metadata.reflection = MsgRequestPvpMatchS2MS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRequestPvpMatchResultMS2S::kMsgTypeFieldNumber;
const int MsgRequestPvpMatchResultMS2S::kIggidFieldNumber;
const int MsgRequestPvpMatchResultMS2S::kResultFieldNumber;
#endif  // !_MSC_VER

MsgRequestPvpMatchResultMS2S::MsgRequestPvpMatchResultMS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgRequestPvpMatchResultMS2S)
}

void MsgRequestPvpMatchResultMS2S::InitAsDefaultInstance() {
}

MsgRequestPvpMatchResultMS2S::MsgRequestPvpMatchResultMS2S(const MsgRequestPvpMatchResultMS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgRequestPvpMatchResultMS2S)
}

void MsgRequestPvpMatchResultMS2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2406;
  iggid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRequestPvpMatchResultMS2S::~MsgRequestPvpMatchResultMS2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgRequestPvpMatchResultMS2S)
  SharedDtor();
}

void MsgRequestPvpMatchResultMS2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRequestPvpMatchResultMS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRequestPvpMatchResultMS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRequestPvpMatchResultMS2S_descriptor_;
}

const MsgRequestPvpMatchResultMS2S& MsgRequestPvpMatchResultMS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgRequestPvpMatchResultMS2S* MsgRequestPvpMatchResultMS2S::default_instance_ = NULL;

MsgRequestPvpMatchResultMS2S* MsgRequestPvpMatchResultMS2S::New() const {
  return new MsgRequestPvpMatchResultMS2S;
}

void MsgRequestPvpMatchResultMS2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 2406;
    iggid_ = GOOGLE_LONGLONG(0);
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRequestPvpMatchResultMS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgRequestPvpMatchResultMS2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REQUEST_PVP_MATCH_RESULT_MS2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .MsgPB.ENUM_PVP_MATCH_RESULT result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::ENUM_PVP_MATCH_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::ENUM_PVP_MATCH_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgRequestPvpMatchResultMS2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgRequestPvpMatchResultMS2S)
  return false;
#undef DO_
}

void MsgRequestPvpMatchResultMS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgRequestPvpMatchResultMS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REQUEST_PVP_MATCH_RESULT_MS2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.ENUM_PVP_MATCH_RESULT result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgRequestPvpMatchResultMS2S)
}

::google::protobuf::uint8* MsgRequestPvpMatchResultMS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgRequestPvpMatchResultMS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REQUEST_PVP_MATCH_RESULT_MS2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.ENUM_PVP_MATCH_RESULT result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgRequestPvpMatchResultMS2S)
  return target;
}

int MsgRequestPvpMatchResultMS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REQUEST_PVP_MATCH_RESULT_MS2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.ENUM_PVP_MATCH_RESULT result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRequestPvpMatchResultMS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRequestPvpMatchResultMS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRequestPvpMatchResultMS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRequestPvpMatchResultMS2S::MergeFrom(const MsgRequestPvpMatchResultMS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRequestPvpMatchResultMS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRequestPvpMatchResultMS2S::CopyFrom(const MsgRequestPvpMatchResultMS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRequestPvpMatchResultMS2S::IsInitialized() const {

  return true;
}

void MsgRequestPvpMatchResultMS2S::Swap(MsgRequestPvpMatchResultMS2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRequestPvpMatchResultMS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRequestPvpMatchResultMS2S_descriptor_;
  metadata.reflection = MsgRequestPvpMatchResultMS2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNotifyPvpReadyMS2S::kMsgTypeFieldNumber;
const int MsgNotifyPvpReadyMS2S::kIggidFieldNumber;
const int MsgNotifyPvpReadyMS2S::kCountdownSecFieldNumber;
const int MsgNotifyPvpReadyMS2S::kPlayerNumFieldNumber;
#endif  // !_MSC_VER

MsgNotifyPvpReadyMS2S::MsgNotifyPvpReadyMS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNotifyPvpReadyMS2S)
}

void MsgNotifyPvpReadyMS2S::InitAsDefaultInstance() {
}

MsgNotifyPvpReadyMS2S::MsgNotifyPvpReadyMS2S(const MsgNotifyPvpReadyMS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNotifyPvpReadyMS2S)
}

void MsgNotifyPvpReadyMS2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2407;
  iggid_ = GOOGLE_LONGLONG(0);
  countdownsec_ = 0;
  playernum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNotifyPvpReadyMS2S::~MsgNotifyPvpReadyMS2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNotifyPvpReadyMS2S)
  SharedDtor();
}

void MsgNotifyPvpReadyMS2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNotifyPvpReadyMS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNotifyPvpReadyMS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNotifyPvpReadyMS2S_descriptor_;
}

const MsgNotifyPvpReadyMS2S& MsgNotifyPvpReadyMS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgNotifyPvpReadyMS2S* MsgNotifyPvpReadyMS2S::default_instance_ = NULL;

MsgNotifyPvpReadyMS2S* MsgNotifyPvpReadyMS2S::New() const {
  return new MsgNotifyPvpReadyMS2S;
}

void MsgNotifyPvpReadyMS2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNotifyPvpReadyMS2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(countdownsec_, playernum_);
    msgtype_ = 2407;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNotifyPvpReadyMS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNotifyPvpReadyMS2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PVP_READY_MS2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_countdownSec;
        break;
      }

      // optional int32 countdownSec = 3;
      case 3: {
        if (tag == 24) {
         parse_countdownSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdownsec_)));
          set_has_countdownsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerNum;
        break;
      }

      // optional int32 playerNum = 4;
      case 4: {
        if (tag == 32) {
         parse_playerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
          set_has_playernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNotifyPvpReadyMS2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNotifyPvpReadyMS2S)
  return false;
#undef DO_
}

void MsgNotifyPvpReadyMS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNotifyPvpReadyMS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PVP_READY_MS2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 countdownSec = 3;
  if (has_countdownsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->countdownsec(), output);
  }

  // optional int32 playerNum = 4;
  if (has_playernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNotifyPvpReadyMS2S)
}

::google::protobuf::uint8* MsgNotifyPvpReadyMS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNotifyPvpReadyMS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PVP_READY_MS2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 countdownSec = 3;
  if (has_countdownsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->countdownsec(), target);
  }

  // optional int32 playerNum = 4;
  if (has_playernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNotifyPvpReadyMS2S)
  return target;
}

int MsgNotifyPvpReadyMS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PVP_READY_MS2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 countdownSec = 3;
    if (has_countdownsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countdownsec());
    }

    // optional int32 playerNum = 4;
    if (has_playernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNotifyPvpReadyMS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNotifyPvpReadyMS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNotifyPvpReadyMS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNotifyPvpReadyMS2S::MergeFrom(const MsgNotifyPvpReadyMS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_countdownsec()) {
      set_countdownsec(from.countdownsec());
    }
    if (from.has_playernum()) {
      set_playernum(from.playernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNotifyPvpReadyMS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNotifyPvpReadyMS2S::CopyFrom(const MsgNotifyPvpReadyMS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNotifyPvpReadyMS2S::IsInitialized() const {

  return true;
}

void MsgNotifyPvpReadyMS2S::Swap(MsgNotifyPvpReadyMS2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(countdownsec_, other->countdownsec_);
    std::swap(playernum_, other->playernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNotifyPvpReadyMS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNotifyPvpReadyMS2S_descriptor_;
  metadata.reflection = MsgNotifyPvpReadyMS2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNotifyPvpNotenoughPlayerMS2S::kMsgTypeFieldNumber;
const int MsgNotifyPvpNotenoughPlayerMS2S::kIggidFieldNumber;
const int MsgNotifyPvpNotenoughPlayerMS2S::kPlayerNumFieldNumber;
#endif  // !_MSC_VER

MsgNotifyPvpNotenoughPlayerMS2S::MsgNotifyPvpNotenoughPlayerMS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNotifyPvpNotenoughPlayerMS2S)
}

void MsgNotifyPvpNotenoughPlayerMS2S::InitAsDefaultInstance() {
}

MsgNotifyPvpNotenoughPlayerMS2S::MsgNotifyPvpNotenoughPlayerMS2S(const MsgNotifyPvpNotenoughPlayerMS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNotifyPvpNotenoughPlayerMS2S)
}

void MsgNotifyPvpNotenoughPlayerMS2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2412;
  iggid_ = GOOGLE_LONGLONG(0);
  playernum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNotifyPvpNotenoughPlayerMS2S::~MsgNotifyPvpNotenoughPlayerMS2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNotifyPvpNotenoughPlayerMS2S)
  SharedDtor();
}

void MsgNotifyPvpNotenoughPlayerMS2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNotifyPvpNotenoughPlayerMS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNotifyPvpNotenoughPlayerMS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNotifyPvpNotenoughPlayerMS2S_descriptor_;
}

const MsgNotifyPvpNotenoughPlayerMS2S& MsgNotifyPvpNotenoughPlayerMS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgNotifyPvpNotenoughPlayerMS2S* MsgNotifyPvpNotenoughPlayerMS2S::default_instance_ = NULL;

MsgNotifyPvpNotenoughPlayerMS2S* MsgNotifyPvpNotenoughPlayerMS2S::New() const {
  return new MsgNotifyPvpNotenoughPlayerMS2S;
}

void MsgNotifyPvpNotenoughPlayerMS2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 2412;
    iggid_ = GOOGLE_LONGLONG(0);
    playernum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNotifyPvpNotenoughPlayerMS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNotifyPvpNotenoughPlayerMS2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PVP_NOTENOUGHPLAYER_MS2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerNum;
        break;
      }

      // optional int32 playerNum = 3;
      case 3: {
        if (tag == 24) {
         parse_playerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
          set_has_playernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNotifyPvpNotenoughPlayerMS2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNotifyPvpNotenoughPlayerMS2S)
  return false;
#undef DO_
}

void MsgNotifyPvpNotenoughPlayerMS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNotifyPvpNotenoughPlayerMS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PVP_NOTENOUGHPLAYER_MS2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 playerNum = 3;
  if (has_playernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNotifyPvpNotenoughPlayerMS2S)
}

::google::protobuf::uint8* MsgNotifyPvpNotenoughPlayerMS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNotifyPvpNotenoughPlayerMS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PVP_NOTENOUGHPLAYER_MS2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 playerNum = 3;
  if (has_playernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNotifyPvpNotenoughPlayerMS2S)
  return target;
}

int MsgNotifyPvpNotenoughPlayerMS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PVP_NOTENOUGHPLAYER_MS2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 playerNum = 3;
    if (has_playernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNotifyPvpNotenoughPlayerMS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNotifyPvpNotenoughPlayerMS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNotifyPvpNotenoughPlayerMS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNotifyPvpNotenoughPlayerMS2S::MergeFrom(const MsgNotifyPvpNotenoughPlayerMS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_playernum()) {
      set_playernum(from.playernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNotifyPvpNotenoughPlayerMS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNotifyPvpNotenoughPlayerMS2S::CopyFrom(const MsgNotifyPvpNotenoughPlayerMS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNotifyPvpNotenoughPlayerMS2S::IsInitialized() const {

  return true;
}

void MsgNotifyPvpNotenoughPlayerMS2S::Swap(MsgNotifyPvpNotenoughPlayerMS2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(playernum_, other->playernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNotifyPvpNotenoughPlayerMS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNotifyPvpNotenoughPlayerMS2S_descriptor_;
  metadata.reflection = MsgNotifyPvpNotenoughPlayerMS2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPvpMatchBestMapServerMS2S::kMsgTypeFieldNumber;
const int MsgPvpMatchBestMapServerMS2S::kQueueIndexFieldNumber;
const int MsgPvpMatchBestMapServerMS2S::kOperTypeFieldNumber;
const int MsgPvpMatchBestMapServerMS2S::kIdAreaFieldNumber;
#endif  // !_MSC_VER

MsgPvpMatchBestMapServerMS2S::MsgPvpMatchBestMapServerMS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPvpMatchBestMapServerMS2S)
}

void MsgPvpMatchBestMapServerMS2S::InitAsDefaultInstance() {
}

MsgPvpMatchBestMapServerMS2S::MsgPvpMatchBestMapServerMS2S(const MsgPvpMatchBestMapServerMS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPvpMatchBestMapServerMS2S)
}

void MsgPvpMatchBestMapServerMS2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2408;
  queueindex_ = GOOGLE_LONGLONG(0);
  opertype_ = 0;
  idarea_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPvpMatchBestMapServerMS2S::~MsgPvpMatchBestMapServerMS2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPvpMatchBestMapServerMS2S)
  SharedDtor();
}

void MsgPvpMatchBestMapServerMS2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPvpMatchBestMapServerMS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPvpMatchBestMapServerMS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPvpMatchBestMapServerMS2S_descriptor_;
}

const MsgPvpMatchBestMapServerMS2S& MsgPvpMatchBestMapServerMS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPvpMatchBestMapServerMS2S* MsgPvpMatchBestMapServerMS2S::default_instance_ = NULL;

MsgPvpMatchBestMapServerMS2S* MsgPvpMatchBestMapServerMS2S::New() const {
  return new MsgPvpMatchBestMapServerMS2S;
}

void MsgPvpMatchBestMapServerMS2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPvpMatchBestMapServerMS2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(opertype_, idarea_);
    msgtype_ = 2408;
    queueindex_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPvpMatchBestMapServerMS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPvpMatchBestMapServerMS2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_MATCH_BEST_MAP_SERVER_MS2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_queueIndex;
        break;
      }

      // optional int64 queueIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_queueIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &queueindex_)));
          set_has_queueindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operType;
        break;
      }

      // optional int32 operType = 3;
      case 3: {
        if (tag == 24) {
         parse_operType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opertype_)));
          set_has_opertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_idArea;
        break;
      }

      // optional uint32 idArea = 4;
      case 4: {
        if (tag == 32) {
         parse_idArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idarea_)));
          set_has_idarea();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPvpMatchBestMapServerMS2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPvpMatchBestMapServerMS2S)
  return false;
#undef DO_
}

void MsgPvpMatchBestMapServerMS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPvpMatchBestMapServerMS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_MATCH_BEST_MAP_SERVER_MS2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 queueIndex = 2;
  if (has_queueindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->queueindex(), output);
  }

  // optional int32 operType = 3;
  if (has_opertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opertype(), output);
  }

  // optional uint32 idArea = 4;
  if (has_idarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->idarea(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPvpMatchBestMapServerMS2S)
}

::google::protobuf::uint8* MsgPvpMatchBestMapServerMS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPvpMatchBestMapServerMS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_MATCH_BEST_MAP_SERVER_MS2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 queueIndex = 2;
  if (has_queueindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->queueindex(), target);
  }

  // optional int32 operType = 3;
  if (has_opertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opertype(), target);
  }

  // optional uint32 idArea = 4;
  if (has_idarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->idarea(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPvpMatchBestMapServerMS2S)
  return target;
}

int MsgPvpMatchBestMapServerMS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_MATCH_BEST_MAP_SERVER_MS2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 queueIndex = 2;
    if (has_queueindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->queueindex());
    }

    // optional int32 operType = 3;
    if (has_opertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opertype());
    }

    // optional uint32 idArea = 4;
    if (has_idarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idarea());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPvpMatchBestMapServerMS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPvpMatchBestMapServerMS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPvpMatchBestMapServerMS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPvpMatchBestMapServerMS2S::MergeFrom(const MsgPvpMatchBestMapServerMS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_queueindex()) {
      set_queueindex(from.queueindex());
    }
    if (from.has_opertype()) {
      set_opertype(from.opertype());
    }
    if (from.has_idarea()) {
      set_idarea(from.idarea());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPvpMatchBestMapServerMS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPvpMatchBestMapServerMS2S::CopyFrom(const MsgPvpMatchBestMapServerMS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPvpMatchBestMapServerMS2S::IsInitialized() const {

  return true;
}

void MsgPvpMatchBestMapServerMS2S::Swap(MsgPvpMatchBestMapServerMS2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(queueindex_, other->queueindex_);
    std::swap(opertype_, other->opertype_);
    std::swap(idarea_, other->idarea_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPvpMatchBestMapServerMS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPvpMatchBestMapServerMS2S_descriptor_;
  metadata.reflection = MsgPvpMatchBestMapServerMS2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPCreateMapMS2S::kMsgTypeFieldNumber;
const int MsgPVPCreateMapMS2S::kQueueIndexFieldNumber;
#endif  // !_MSC_VER

MsgPVPCreateMapMS2S::MsgPVPCreateMapMS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPCreateMapMS2S)
}

void MsgPVPCreateMapMS2S::InitAsDefaultInstance() {
}

MsgPVPCreateMapMS2S::MsgPVPCreateMapMS2S(const MsgPVPCreateMapMS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPCreateMapMS2S)
}

void MsgPVPCreateMapMS2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2410;
  queueindex_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPCreateMapMS2S::~MsgPVPCreateMapMS2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPCreateMapMS2S)
  SharedDtor();
}

void MsgPVPCreateMapMS2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPVPCreateMapMS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPCreateMapMS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPCreateMapMS2S_descriptor_;
}

const MsgPVPCreateMapMS2S& MsgPVPCreateMapMS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPCreateMapMS2S* MsgPVPCreateMapMS2S::default_instance_ = NULL;

MsgPVPCreateMapMS2S* MsgPVPCreateMapMS2S::New() const {
  return new MsgPVPCreateMapMS2S;
}

void MsgPVPCreateMapMS2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 2410;
    queueindex_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPCreateMapMS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPCreateMapMS2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CREATE_MAP_MS2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_queueIndex;
        break;
      }

      // optional int64 queueIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_queueIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &queueindex_)));
          set_has_queueindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPCreateMapMS2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPCreateMapMS2S)
  return false;
#undef DO_
}

void MsgPVPCreateMapMS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPCreateMapMS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CREATE_MAP_MS2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 queueIndex = 2;
  if (has_queueindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->queueindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPCreateMapMS2S)
}

::google::protobuf::uint8* MsgPVPCreateMapMS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPCreateMapMS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CREATE_MAP_MS2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 queueIndex = 2;
  if (has_queueindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->queueindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPCreateMapMS2S)
  return target;
}

int MsgPVPCreateMapMS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CREATE_MAP_MS2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 queueIndex = 2;
    if (has_queueindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->queueindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPCreateMapMS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPCreateMapMS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPCreateMapMS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPCreateMapMS2S::MergeFrom(const MsgPVPCreateMapMS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_queueindex()) {
      set_queueindex(from.queueindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPCreateMapMS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPCreateMapMS2S::CopyFrom(const MsgPVPCreateMapMS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPCreateMapMS2S::IsInitialized() const {

  return true;
}

void MsgPVPCreateMapMS2S::Swap(MsgPVPCreateMapMS2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(queueindex_, other->queueindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPCreateMapMS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPCreateMapMS2S_descriptor_;
  metadata.reflection = MsgPVPCreateMapMS2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPCreateMapResultS2MS::kMsgTypeFieldNumber;
const int MsgPVPCreateMapResultS2MS::kQueueIndexFieldNumber;
const int MsgPVPCreateMapResultS2MS::kMapuuidFieldNumber;
const int MsgPVPCreateMapResultS2MS::kMapidFieldNumber;
const int MsgPVPCreateMapResultS2MS::kMapserverIdFieldNumber;
const int MsgPVPCreateMapResultS2MS::kResultFieldNumber;
const int MsgPVPCreateMapResultS2MS::kIggidFieldNumber;
const int MsgPVPCreateMapResultS2MS::kMapfilenameFieldNumber;
#endif  // !_MSC_VER

MsgPVPCreateMapResultS2MS::MsgPVPCreateMapResultS2MS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPCreateMapResultS2MS)
}

void MsgPVPCreateMapResultS2MS::InitAsDefaultInstance() {
}

MsgPVPCreateMapResultS2MS::MsgPVPCreateMapResultS2MS(const MsgPVPCreateMapResultS2MS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPCreateMapResultS2MS)
}

void MsgPVPCreateMapResultS2MS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 2411;
  queueindex_ = GOOGLE_LONGLONG(0);
  mapuuid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  mapserverid_ = 0;
  result_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPCreateMapResultS2MS::~MsgPVPCreateMapResultS2MS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPCreateMapResultS2MS)
  SharedDtor();
}

void MsgPVPCreateMapResultS2MS::SharedDtor() {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapfilename_;
  }
  if (this != default_instance_) {
  }
}

void MsgPVPCreateMapResultS2MS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPCreateMapResultS2MS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPCreateMapResultS2MS_descriptor_;
}

const MsgPVPCreateMapResultS2MS& MsgPVPCreateMapResultS2MS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPCreateMapResultS2MS* MsgPVPCreateMapResultS2MS::default_instance_ = NULL;

MsgPVPCreateMapResultS2MS* MsgPVPCreateMapResultS2MS::New() const {
  return new MsgPVPCreateMapResultS2MS;
}

void MsgPVPCreateMapResultS2MS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPVPCreateMapResultS2MS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mapid_, iggid_);
    msgtype_ = 2411;
    queueindex_ = GOOGLE_LONGLONG(0);
    if (has_mapfilename()) {
      if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mapfilename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPCreateMapResultS2MS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPCreateMapResultS2MS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CREATE_MAP_RESULT_S2MS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_queueIndex;
        break;
      }

      // optional int64 queueIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_queueIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &queueindex_)));
          set_has_queueindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapuuid;
        break;
      }

      // optional int64 mapuuid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapuuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapuuid_)));
          set_has_mapuuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapserverId;
        break;
      }

      // optional int32 mapserverId = 5;
      case 5: {
        if (tag == 40) {
         parse_mapserverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapserverid_)));
          set_has_mapserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // optional .MsgPB.ENUM_CREATE_PVP_MAP_RESULT result = 6;
      case 6: {
        if (tag == 48) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::ENUM_CREATE_PVP_MAP_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::ENUM_CREATE_PVP_MAP_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 7;
      case 7: {
        if (tag == 56) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mapfilename;
        break;
      }

      // optional string mapfilename = 8;
      case 8: {
        if (tag == 66) {
         parse_mapfilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapfilename().data(), this->mapfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPCreateMapResultS2MS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPCreateMapResultS2MS)
  return false;
#undef DO_
}

void MsgPVPCreateMapResultS2MS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPCreateMapResultS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CREATE_MAP_RESULT_S2MS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 queueIndex = 2;
  if (has_queueindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->queueindex(), output);
  }

  // optional int64 mapuuid = 3;
  if (has_mapuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mapuuid(), output);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapid(), output);
  }

  // optional int32 mapserverId = 5;
  if (has_mapserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapserverid(), output);
  }

  // optional .MsgPB.ENUM_CREATE_PVP_MAP_RESULT result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->result(), output);
  }

  // optional int64 iggid = 7;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->iggid(), output);
  }

  // optional string mapfilename = 8;
  if (has_mapfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapfilename().data(), this->mapfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->mapfilename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPCreateMapResultS2MS)
}

::google::protobuf::uint8* MsgPVPCreateMapResultS2MS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPCreateMapResultS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CREATE_MAP_RESULT_S2MS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 queueIndex = 2;
  if (has_queueindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->queueindex(), target);
  }

  // optional int64 mapuuid = 3;
  if (has_mapuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mapuuid(), target);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapid(), target);
  }

  // optional int32 mapserverId = 5;
  if (has_mapserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapserverid(), target);
  }

  // optional .MsgPB.ENUM_CREATE_PVP_MAP_RESULT result = 6;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->result(), target);
  }

  // optional int64 iggid = 7;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->iggid(), target);
  }

  // optional string mapfilename = 8;
  if (has_mapfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapfilename().data(), this->mapfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->mapfilename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPCreateMapResultS2MS)
  return target;
}

int MsgPVPCreateMapResultS2MS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CREATE_MAP_RESULT_S2MS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 queueIndex = 2;
    if (has_queueindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->queueindex());
    }

    // optional int64 mapuuid = 3;
    if (has_mapuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapuuid());
    }

    // optional int32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 mapserverId = 5;
    if (has_mapserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapserverid());
    }

    // optional .MsgPB.ENUM_CREATE_PVP_MAP_RESULT result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 iggid = 7;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string mapfilename = 8;
    if (has_mapfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapfilename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPCreateMapResultS2MS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPCreateMapResultS2MS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPCreateMapResultS2MS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPCreateMapResultS2MS::MergeFrom(const MsgPVPCreateMapResultS2MS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_queueindex()) {
      set_queueindex(from.queueindex());
    }
    if (from.has_mapuuid()) {
      set_mapuuid(from.mapuuid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_mapserverid()) {
      set_mapserverid(from.mapserverid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapfilename()) {
      set_mapfilename(from.mapfilename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPCreateMapResultS2MS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPCreateMapResultS2MS::CopyFrom(const MsgPVPCreateMapResultS2MS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPCreateMapResultS2MS::IsInitialized() const {

  return true;
}

void MsgPVPCreateMapResultS2MS::Swap(MsgPVPCreateMapResultS2MS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(queueindex_, other->queueindex_);
    std::swap(mapuuid_, other->mapuuid_);
    std::swap(mapid_, other->mapid_);
    std::swap(mapserverid_, other->mapserverid_);
    std::swap(result_, other->result_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapfilename_, other->mapfilename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPCreateMapResultS2MS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPCreateMapResultS2MS_descriptor_;
  metadata.reflection = MsgPVPCreateMapResultS2MS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStartEnterWarPostion::kMsgTypeFieldNumber;
const int MsgStartEnterWarPostion::kQueueIndexFieldNumber;
const int MsgStartEnterWarPostion::kMapuuidFieldNumber;
const int MsgStartEnterWarPostion::kMapidFieldNumber;
const int MsgStartEnterWarPostion::kMapserverIdFieldNumber;
#endif  // !_MSC_VER

MsgStartEnterWarPostion::MsgStartEnterWarPostion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgStartEnterWarPostion)
}

void MsgStartEnterWarPostion::InitAsDefaultInstance() {
}

MsgStartEnterWarPostion::MsgStartEnterWarPostion(const MsgStartEnterWarPostion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgStartEnterWarPostion)
}

void MsgStartEnterWarPostion::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2409;
  queueindex_ = GOOGLE_LONGLONG(0);
  mapuuid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  mapserverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStartEnterWarPostion::~MsgStartEnterWarPostion() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgStartEnterWarPostion)
  SharedDtor();
}

void MsgStartEnterWarPostion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStartEnterWarPostion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStartEnterWarPostion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStartEnterWarPostion_descriptor_;
}

const MsgStartEnterWarPostion& MsgStartEnterWarPostion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgStartEnterWarPostion* MsgStartEnterWarPostion::default_instance_ = NULL;

MsgStartEnterWarPostion* MsgStartEnterWarPostion::New() const {
  return new MsgStartEnterWarPostion;
}

void MsgStartEnterWarPostion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgStartEnterWarPostion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(mapid_, mapserverid_);
    msgtype_ = 2409;
    queueindex_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStartEnterWarPostion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgStartEnterWarPostion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_START_ENTER_WAR_POSTION];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_queueIndex;
        break;
      }

      // optional int64 queueIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_queueIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &queueindex_)));
          set_has_queueindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapuuid;
        break;
      }

      // optional int64 mapuuid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapuuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapuuid_)));
          set_has_mapuuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapserverId;
        break;
      }

      // optional int32 mapserverId = 5;
      case 5: {
        if (tag == 40) {
         parse_mapserverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapserverid_)));
          set_has_mapserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgStartEnterWarPostion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgStartEnterWarPostion)
  return false;
#undef DO_
}

void MsgStartEnterWarPostion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgStartEnterWarPostion)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_START_ENTER_WAR_POSTION];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 queueIndex = 2;
  if (has_queueindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->queueindex(), output);
  }

  // optional int64 mapuuid = 3;
  if (has_mapuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mapuuid(), output);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapid(), output);
  }

  // optional int32 mapserverId = 5;
  if (has_mapserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgStartEnterWarPostion)
}

::google::protobuf::uint8* MsgStartEnterWarPostion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgStartEnterWarPostion)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_START_ENTER_WAR_POSTION];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 queueIndex = 2;
  if (has_queueindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->queueindex(), target);
  }

  // optional int64 mapuuid = 3;
  if (has_mapuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mapuuid(), target);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapid(), target);
  }

  // optional int32 mapserverId = 5;
  if (has_mapserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgStartEnterWarPostion)
  return target;
}

int MsgStartEnterWarPostion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_START_ENTER_WAR_POSTION];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 queueIndex = 2;
    if (has_queueindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->queueindex());
    }

    // optional int64 mapuuid = 3;
    if (has_mapuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapuuid());
    }

    // optional int32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 mapserverId = 5;
    if (has_mapserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStartEnterWarPostion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStartEnterWarPostion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStartEnterWarPostion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStartEnterWarPostion::MergeFrom(const MsgStartEnterWarPostion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_queueindex()) {
      set_queueindex(from.queueindex());
    }
    if (from.has_mapuuid()) {
      set_mapuuid(from.mapuuid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_mapserverid()) {
      set_mapserverid(from.mapserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStartEnterWarPostion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStartEnterWarPostion::CopyFrom(const MsgStartEnterWarPostion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStartEnterWarPostion::IsInitialized() const {

  return true;
}

void MsgStartEnterWarPostion::Swap(MsgStartEnterWarPostion* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(queueindex_, other->queueindex_);
    std::swap(mapuuid_, other->mapuuid_);
    std::swap(mapid_, other->mapid_);
    std::swap(mapserverid_, other->mapserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStartEnterWarPostion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStartEnterWarPostion_descriptor_;
  metadata.reflection = MsgStartEnterWarPostion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPRankC2S::kMsgTypeFieldNumber;
const int MsgPVPRankC2S::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgPVPRankC2S::MsgPVPRankC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPRankC2S)
}

void MsgPVPRankC2S::InitAsDefaultInstance() {
}

MsgPVPRankC2S::MsgPVPRankC2S(const MsgPVPRankC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPRankC2S)
}

void MsgPVPRankC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2505;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPRankC2S::~MsgPVPRankC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPRankC2S)
  SharedDtor();
}

void MsgPVPRankC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPVPRankC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPRankC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPRankC2S_descriptor_;
}

const MsgPVPRankC2S& MsgPVPRankC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPRankC2S* MsgPVPRankC2S::default_instance_ = NULL;

MsgPVPRankC2S* MsgPVPRankC2S::New() const {
  return new MsgPVPRankC2S;
}

void MsgPVPRankC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 2505;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPRankC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPRankC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RANK_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPRankC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPRankC2S)
  return false;
#undef DO_
}

void MsgPVPRankC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPRankC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RANK_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPRankC2S)
}

::google::protobuf::uint8* MsgPVPRankC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPRankC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RANK_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPRankC2S)
  return target;
}

int MsgPVPRankC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RANK_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPRankC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPRankC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPRankC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPRankC2S::MergeFrom(const MsgPVPRankC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPRankC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPRankC2S::CopyFrom(const MsgPVPRankC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPRankC2S::IsInitialized() const {

  return true;
}

void MsgPVPRankC2S::Swap(MsgPVPRankC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPRankC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPRankC2S_descriptor_;
  metadata.reflection = MsgPVPRankC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankInfo::kIggidFieldNumber;
const int RankInfo::kLvFieldNumber;
const int RankInfo::kFaceFieldNumber;
const int RankInfo::kNameFieldNumber;
#endif  // !_MSC_VER

RankInfo::RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.RankInfo)
}

void RankInfo::InitAsDefaultInstance() {
}

RankInfo::RankInfo(const RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.RankInfo)
}

void RankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  face_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankInfo::~RankInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.RankInfo)
  SharedDtor();
}

void RankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankInfo_descriptor_;
}

const RankInfo& RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

RankInfo* RankInfo::default_instance_ = NULL;

RankInfo* RankInfo::New() const {
  return new RankInfo;
}

void RankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, face_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.RankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iggid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (tag == 16) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_face;
        break;
      }

      // optional int32 face = 3;
      case 3: {
        if (tag == 24) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.RankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.RankInfo)
  return false;
#undef DO_
}

void RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.RankInfo)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iggid(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 face = 3;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->face(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.RankInfo)
}

::google::protobuf::uint8* RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.RankInfo)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iggid(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 face = 3;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->face(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.RankInfo)
  return target;
}

int RankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iggid = 1;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 face = 3;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->face());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const {

  return true;
}

void RankInfo::Swap(RankInfo* other) {
  if (other != this) {
    std::swap(iggid_, other->iggid_);
    std::swap(lv_, other->lv_);
    std::swap(face_, other->face_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankInfo_descriptor_;
  metadata.reflection = RankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPRankS2C::kMsgTypeFieldNumber;
const int MsgPVPRankS2C::kIggidFieldNumber;
const int MsgPVPRankS2C::kResFieldNumber;
const int MsgPVPRankS2C::kRankobjsFieldNumber;
#endif  // !_MSC_VER

MsgPVPRankS2C::MsgPVPRankS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPRankS2C)
}

void MsgPVPRankS2C::InitAsDefaultInstance() {
}

MsgPVPRankS2C::MsgPVPRankS2C(const MsgPVPRankS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPRankS2C)
}

void MsgPVPRankS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2506;
  iggid_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPRankS2C::~MsgPVPRankS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPRankS2C)
  SharedDtor();
}

void MsgPVPRankS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPVPRankS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPRankS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPRankS2C_descriptor_;
}

const MsgPVPRankS2C& MsgPVPRankS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPRankS2C* MsgPVPRankS2C::default_instance_ = NULL;

MsgPVPRankS2C* MsgPVPRankS2C::New() const {
  return new MsgPVPRankS2C;
}

void MsgPVPRankS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 2506;
    iggid_ = GOOGLE_LONGLONG(0);
    res_ = 0;
  }
  rankobjs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPRankS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPRankS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RANK_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }

      // optional .MsgPB.MSG_RANK_RESULT res = 3;
      case 3: {
        if (tag == 24) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MSG_RANK_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::MSG_RANK_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rankobjs;
        break;
      }

      // repeated .MsgPB.RankInfo rankobjs = 4;
      case 4: {
        if (tag == 34) {
         parse_rankobjs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankobjs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rankobjs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPRankS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPRankS2C)
  return false;
#undef DO_
}

void MsgPVPRankS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPRankS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RANK_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.MSG_RANK_RESULT res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->res(), output);
  }

  // repeated .MsgPB.RankInfo rankobjs = 4;
  for (int i = 0; i < this->rankobjs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rankobjs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPRankS2C)
}

::google::protobuf::uint8* MsgPVPRankS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPRankS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RANK_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.MSG_RANK_RESULT res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->res(), target);
  }

  // repeated .MsgPB.RankInfo rankobjs = 4;
  for (int i = 0; i < this->rankobjs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rankobjs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPRankS2C)
  return target;
}

int MsgPVPRankS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RANK_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.MSG_RANK_RESULT res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  // repeated .MsgPB.RankInfo rankobjs = 4;
  total_size += 1 * this->rankobjs_size();
  for (int i = 0; i < this->rankobjs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankobjs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPRankS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPRankS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPRankS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPRankS2C::MergeFrom(const MsgPVPRankS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankobjs_.MergeFrom(from.rankobjs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPRankS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPRankS2C::CopyFrom(const MsgPVPRankS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPRankS2C::IsInitialized() const {

  return true;
}

void MsgPVPRankS2C::Swap(MsgPVPRankS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(res_, other->res_);
    rankobjs_.Swap(&other->rankobjs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPRankS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPRankS2C_descriptor_;
  metadata.reflection = MsgPVPRankS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPOutS2C::kMsgTypeFieldNumber;
const int MsgPVPOutS2C::kIggidFieldNumber;
const int MsgPVPOutS2C::kRankFieldNumber;
const int MsgPVPOutS2C::kKillerFieldNumber;
const int MsgPVPOutS2C::kDeaderFieldNumber;
const int MsgPVPOutS2C::kIdWeaponFieldNumber;
const int MsgPVPOutS2C::kIdMobFieldNumber;
const int MsgPVPOutS2C::kIdObjKillerFieldNumber;
#endif  // !_MSC_VER

MsgPVPOutS2C::MsgPVPOutS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPOutS2C)
}

void MsgPVPOutS2C::InitAsDefaultInstance() {
}

MsgPVPOutS2C::MsgPVPOutS2C(const MsgPVPOutS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPOutS2C)
}

void MsgPVPOutS2C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 2507;
  iggid_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  killer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deader_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idweapon_ = 0;
  idmob_ = 0;
  idobjkiller_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPOutS2C::~MsgPVPOutS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPOutS2C)
  SharedDtor();
}

void MsgPVPOutS2C::SharedDtor() {
  if (killer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete killer_;
  }
  if (deader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deader_;
  }
  if (this != default_instance_) {
  }
}

void MsgPVPOutS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPOutS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPOutS2C_descriptor_;
}

const MsgPVPOutS2C& MsgPVPOutS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPOutS2C* MsgPVPOutS2C::default_instance_ = NULL;

MsgPVPOutS2C* MsgPVPOutS2C::New() const {
  return new MsgPVPOutS2C;
}

void MsgPVPOutS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPVPOutS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(idweapon_, idobjkiller_);
    msgtype_ = 2507;
    iggid_ = GOOGLE_LONGLONG(0);
    rank_ = 0;
    if (has_killer()) {
      if (killer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        killer_->clear();
      }
    }
    if (has_deader()) {
      if (deader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deader_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPOutS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPOutS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_OUT_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional int32 rank = 3;
      case 3: {
        if (tag == 24) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_killer;
        break;
      }

      // optional string killer = 4;
      case 4: {
        if (tag == 34) {
         parse_killer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->killer().data(), this->killer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "killer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_deader;
        break;
      }

      // optional string deader = 5;
      case 5: {
        if (tag == 42) {
         parse_deader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deader().data(), this->deader().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deader");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_idWeapon;
        break;
      }

      // optional int32 idWeapon = 6;
      case 6: {
        if (tag == 48) {
         parse_idWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idweapon_)));
          set_has_idweapon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_idMob;
        break;
      }

      // optional int32 idMob = 7;
      case 7: {
        if (tag == 56) {
         parse_idMob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idmob_)));
          set_has_idmob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_idObjKiller;
        break;
      }

      // optional int32 idObjKiller = 8;
      case 8: {
        if (tag == 64) {
         parse_idObjKiller:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idobjkiller_)));
          set_has_idobjkiller();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPOutS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPOutS2C)
  return false;
#undef DO_
}

void MsgPVPOutS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPOutS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_OUT_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // optional string killer = 4;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->killer().data(), this->killer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "killer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->killer(), output);
  }

  // optional string deader = 5;
  if (has_deader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deader().data(), this->deader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deader");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->deader(), output);
  }

  // optional int32 idWeapon = 6;
  if (has_idweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->idweapon(), output);
  }

  // optional int32 idMob = 7;
  if (has_idmob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->idmob(), output);
  }

  // optional int32 idObjKiller = 8;
  if (has_idobjkiller()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->idobjkiller(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPOutS2C)
}

::google::protobuf::uint8* MsgPVPOutS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPOutS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_OUT_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // optional string killer = 4;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->killer().data(), this->killer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "killer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->killer(), target);
  }

  // optional string deader = 5;
  if (has_deader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deader().data(), this->deader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deader");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->deader(), target);
  }

  // optional int32 idWeapon = 6;
  if (has_idweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->idweapon(), target);
  }

  // optional int32 idMob = 7;
  if (has_idmob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->idmob(), target);
  }

  // optional int32 idObjKiller = 8;
  if (has_idobjkiller()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->idobjkiller(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPOutS2C)
  return target;
}

int MsgPVPOutS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_OUT_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string killer = 4;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killer());
    }

    // optional string deader = 5;
    if (has_deader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deader());
    }

    // optional int32 idWeapon = 6;
    if (has_idweapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idweapon());
    }

    // optional int32 idMob = 7;
    if (has_idmob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idmob());
    }

    // optional int32 idObjKiller = 8;
    if (has_idobjkiller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idobjkiller());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPOutS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPOutS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPOutS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPOutS2C::MergeFrom(const MsgPVPOutS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_killer()) {
      set_killer(from.killer());
    }
    if (from.has_deader()) {
      set_deader(from.deader());
    }
    if (from.has_idweapon()) {
      set_idweapon(from.idweapon());
    }
    if (from.has_idmob()) {
      set_idmob(from.idmob());
    }
    if (from.has_idobjkiller()) {
      set_idobjkiller(from.idobjkiller());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPOutS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPOutS2C::CopyFrom(const MsgPVPOutS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPOutS2C::IsInitialized() const {

  return true;
}

void MsgPVPOutS2C::Swap(MsgPVPOutS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(rank_, other->rank_);
    std::swap(killer_, other->killer_);
    std::swap(deader_, other->deader_);
    std::swap(idweapon_, other->idweapon_);
    std::swap(idmob_, other->idmob_);
    std::swap(idobjkiller_, other->idobjkiller_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPOutS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPOutS2C_descriptor_;
  metadata.reflection = MsgPVPOutS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPStart::kMsgTypeFieldNumber;
const int MsgPVPStart::kIggidFieldNumber;
const int MsgPVPStart::kTotalFieldNumber;
#endif  // !_MSC_VER

MsgPVPStart::MsgPVPStart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPStart)
}

void MsgPVPStart::InitAsDefaultInstance() {
}

MsgPVPStart::MsgPVPStart(const MsgPVPStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPStart)
}

void MsgPVPStart::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2508;
  iggid_ = GOOGLE_LONGLONG(0);
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPStart::~MsgPVPStart() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPStart)
  SharedDtor();
}

void MsgPVPStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPVPStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPStart_descriptor_;
}

const MsgPVPStart& MsgPVPStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPStart* MsgPVPStart::default_instance_ = NULL;

MsgPVPStart* MsgPVPStart::New() const {
  return new MsgPVPStart;
}

void MsgPVPStart::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 2508;
    iggid_ = GOOGLE_LONGLONG(0);
    total_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_START_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total;
        break;
      }

      // optional int32 total = 3;
      case 3: {
        if (tag == 24) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPStart)
  return false;
#undef DO_
}

void MsgPVPStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPStart)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_START_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 total = 3;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPStart)
}

::google::protobuf::uint8* MsgPVPStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPStart)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_START_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 total = 3;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPStart)
  return target;
}

int MsgPVPStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_START_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 total = 3;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPStart::MergeFrom(const MsgPVPStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPStart::CopyFrom(const MsgPVPStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPStart::IsInitialized() const {

  return true;
}

void MsgPVPStart::Swap(MsgPVPStart* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPStart_descriptor_;
  metadata.reflection = MsgPVPStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPGasS2C::kMsgTypeFieldNumber;
const int MsgPVPGasS2C::kIggidFieldNumber;
const int MsgPVPGasS2C::kOpentimeFieldNumber;
const int MsgPVPGasS2C::kPosxFieldNumber;
const int MsgPVPGasS2C::kPosyFieldNumber;
const int MsgPVPGasS2C::kRadiusFieldNumber;
const int MsgPVPGasS2C::kSpeedFieldNumber;
const int MsgPVPGasS2C::kRadiusMinFieldNumber;
#endif  // !_MSC_VER

MsgPVPGasS2C::MsgPVPGasS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPGasS2C)
}

void MsgPVPGasS2C::InitAsDefaultInstance() {
}

MsgPVPGasS2C::MsgPVPGasS2C(const MsgPVPGasS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPGasS2C)
}

void MsgPVPGasS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2510;
  iggid_ = GOOGLE_LONGLONG(0);
  opentime_ = GOOGLE_LONGLONG(0);
  posx_ = 0;
  posy_ = 0;
  radius_ = 0;
  speed_ = 0;
  radius_min_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPGasS2C::~MsgPVPGasS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPGasS2C)
  SharedDtor();
}

void MsgPVPGasS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPVPGasS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPGasS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPGasS2C_descriptor_;
}

const MsgPVPGasS2C& MsgPVPGasS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPGasS2C* MsgPVPGasS2C::default_instance_ = NULL;

MsgPVPGasS2C* MsgPVPGasS2C::New() const {
  return new MsgPVPGasS2C;
}

void MsgPVPGasS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPVPGasS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(posx_, radius_min_);
    msgtype_ = 2510;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPGasS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPGasS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_GAS_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opentime;
        break;
      }

      // optional int64 opentime = 3;
      case 3: {
        if (tag == 24) {
         parse_opentime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_posx;
        break;
      }

      // optional int32 posx = 4;
      case 4: {
        if (tag == 32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_posy;
        break;
      }

      // optional int32 posy = 5;
      case 5: {
        if (tag == 40) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_radius;
        break;
      }

      // optional int32 radius = 6;
      case 6: {
        if (tag == 48) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_speed;
        break;
      }

      // optional int32 speed = 7;
      case 7: {
        if (tag == 56) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_radius_min;
        break;
      }

      // optional int32 radius_min = 8;
      case 8: {
        if (tag == 64) {
         parse_radius_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_min_)));
          set_has_radius_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPGasS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPGasS2C)
  return false;
#undef DO_
}

void MsgPVPGasS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPGasS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_GAS_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int64 opentime = 3;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->opentime(), output);
  }

  // optional int32 posx = 4;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posx(), output);
  }

  // optional int32 posy = 5;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->posy(), output);
  }

  // optional int32 radius = 6;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->radius(), output);
  }

  // optional int32 speed = 7;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->speed(), output);
  }

  // optional int32 radius_min = 8;
  if (has_radius_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->radius_min(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPGasS2C)
}

::google::protobuf::uint8* MsgPVPGasS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPGasS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_GAS_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int64 opentime = 3;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->opentime(), target);
  }

  // optional int32 posx = 4;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posx(), target);
  }

  // optional int32 posy = 5;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->posy(), target);
  }

  // optional int32 radius = 6;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->radius(), target);
  }

  // optional int32 speed = 7;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->speed(), target);
  }

  // optional int32 radius_min = 8;
  if (has_radius_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->radius_min(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPGasS2C)
  return target;
}

int MsgPVPGasS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_GAS_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 opentime = 3;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->opentime());
    }

    // optional int32 posx = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posy = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int32 radius = 6;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }

    // optional int32 speed = 7;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 radius_min = 8;
    if (has_radius_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius_min());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPGasS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPGasS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPGasS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPGasS2C::MergeFrom(const MsgPVPGasS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_radius_min()) {
      set_radius_min(from.radius_min());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPGasS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPGasS2C::CopyFrom(const MsgPVPGasS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPGasS2C::IsInitialized() const {

  return true;
}

void MsgPVPGasS2C::Swap(MsgPVPGasS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(opentime_, other->opentime_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(radius_, other->radius_);
    std::swap(speed_, other->speed_);
    std::swap(radius_min_, other->radius_min_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPGasS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPGasS2C_descriptor_;
  metadata.reflection = MsgPVPGasS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPRewardS2C::kMsgTypeFieldNumber;
const int MsgPVPRewardS2C::kIggidFieldNumber;
const int MsgPVPRewardS2C::kTotalFieldNumber;
const int MsgPVPRewardS2C::kRankFieldNumber;
const int MsgPVPRewardS2C::kKillNumFieldNumber;
const int MsgPVPRewardS2C::kResourseFieldNumber;
const int MsgPVPRewardS2C::kCoinFieldNumber;
const int MsgPVPRewardS2C::kScoreFieldNumber;
const int MsgPVPRewardS2C::kSegmentFieldNumber;
const int MsgPVPRewardS2C::kKillScoreFieldNumber;
const int MsgPVPRewardS2C::kRankScoreFieldNumber;
const int MsgPVPRewardS2C::kResScoreFieldNumber;
const int MsgPVPRewardS2C::kTotalScoreFieldNumber;
const int MsgPVPRewardS2C::kTotalKillScoreFieldNumber;
const int MsgPVPRewardS2C::kTotalRankScoreFieldNumber;
const int MsgPVPRewardS2C::kTotalTimeFieldNumber;
const int MsgPVPRewardS2C::kTotalPvpCoinFieldNumber;
#endif  // !_MSC_VER

MsgPVPRewardS2C::MsgPVPRewardS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPRewardS2C)
}

void MsgPVPRewardS2C::InitAsDefaultInstance() {
}

MsgPVPRewardS2C::MsgPVPRewardS2C(const MsgPVPRewardS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPRewardS2C)
}

void MsgPVPRewardS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2509;
  iggid_ = GOOGLE_LONGLONG(0);
  total_ = 0;
  rank_ = 0;
  killnum_ = 0;
  resourse_ = 0;
  coin_ = 0;
  score_ = 0;
  segment_ = 0;
  killscore_ = 0;
  rankscore_ = 0;
  resscore_ = 0;
  totalscore_ = 0;
  totalkillscore_ = 0;
  totalrankscore_ = 0;
  totaltime_ = 0;
  totalpvpcoin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPRewardS2C::~MsgPVPRewardS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPRewardS2C)
  SharedDtor();
}

void MsgPVPRewardS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPVPRewardS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPRewardS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPRewardS2C_descriptor_;
}

const MsgPVPRewardS2C& MsgPVPRewardS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPRewardS2C* MsgPVPRewardS2C::default_instance_ = NULL;

MsgPVPRewardS2C* MsgPVPRewardS2C::New() const {
  return new MsgPVPRewardS2C;
}

void MsgPVPRewardS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPVPRewardS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(total_, score_);
    msgtype_ = 2509;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(segment_, totaltime_);
  }
  totalpvpcoin_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPRewardS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPRewardS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_REWARD_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total;
        break;
      }

      // optional int32 total = 3;
      case 3: {
        if (tag == 24) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // optional int32 rank = 4;
      case 4: {
        if (tag == 32) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_killNum;
        break;
      }

      // optional int32 killNum = 5;
      case 5: {
        if (tag == 40) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_resourse;
        break;
      }

      // optional int32 resourse = 6;
      case 6: {
        if (tag == 48) {
         parse_resourse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resourse_)));
          set_has_resourse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_coin;
        break;
      }

      // optional int32 coin = 7;
      case 7: {
        if (tag == 56) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_score;
        break;
      }

      // optional int32 score = 8;
      case 8: {
        if (tag == 64) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_segment;
        break;
      }

      // optional int32 segment = 9;
      case 9: {
        if (tag == 72) {
         parse_segment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &segment_)));
          set_has_segment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_killScore;
        break;
      }

      // optional int32 killScore = 10;
      case 10: {
        if (tag == 80) {
         parse_killScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killscore_)));
          set_has_killscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_rankScore;
        break;
      }

      // optional int32 rankScore = 11;
      case 11: {
        if (tag == 88) {
         parse_rankScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankscore_)));
          set_has_rankscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_resScore;
        break;
      }

      // optional int32 resScore = 12;
      case 12: {
        if (tag == 96) {
         parse_resScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resscore_)));
          set_has_resscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_totalScore;
        break;
      }

      // optional int32 totalScore = 13;
      case 13: {
        if (tag == 104) {
         parse_totalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_totalKillScore;
        break;
      }

      // optional int32 totalKillScore = 14;
      case 14: {
        if (tag == 112) {
         parse_totalKillScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalkillscore_)));
          set_has_totalkillscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_totalRankScore;
        break;
      }

      // optional int32 totalRankScore = 15;
      case 15: {
        if (tag == 120) {
         parse_totalRankScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalrankscore_)));
          set_has_totalrankscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_totalTime;
        break;
      }

      // optional int32 totalTime = 16;
      case 16: {
        if (tag == 128) {
         parse_totalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaltime_)));
          set_has_totaltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_totalPvpCoin;
        break;
      }

      // optional int32 totalPvpCoin = 17;
      case 17: {
        if (tag == 136) {
         parse_totalPvpCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalpvpcoin_)));
          set_has_totalpvpcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPRewardS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPRewardS2C)
  return false;
#undef DO_
}

void MsgPVPRewardS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPRewardS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_REWARD_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 total = 3;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total(), output);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // optional int32 killNum = 5;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->killnum(), output);
  }

  // optional int32 resourse = 6;
  if (has_resourse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->resourse(), output);
  }

  // optional int32 coin = 7;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->coin(), output);
  }

  // optional int32 score = 8;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->score(), output);
  }

  // optional int32 segment = 9;
  if (has_segment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->segment(), output);
  }

  // optional int32 killScore = 10;
  if (has_killscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->killscore(), output);
  }

  // optional int32 rankScore = 11;
  if (has_rankscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rankscore(), output);
  }

  // optional int32 resScore = 12;
  if (has_resscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->resscore(), output);
  }

  // optional int32 totalScore = 13;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->totalscore(), output);
  }

  // optional int32 totalKillScore = 14;
  if (has_totalkillscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->totalkillscore(), output);
  }

  // optional int32 totalRankScore = 15;
  if (has_totalrankscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->totalrankscore(), output);
  }

  // optional int32 totalTime = 16;
  if (has_totaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->totaltime(), output);
  }

  // optional int32 totalPvpCoin = 17;
  if (has_totalpvpcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->totalpvpcoin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPRewardS2C)
}

::google::protobuf::uint8* MsgPVPRewardS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPRewardS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_REWARD_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 total = 3;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total(), target);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // optional int32 killNum = 5;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->killnum(), target);
  }

  // optional int32 resourse = 6;
  if (has_resourse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->resourse(), target);
  }

  // optional int32 coin = 7;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->coin(), target);
  }

  // optional int32 score = 8;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->score(), target);
  }

  // optional int32 segment = 9;
  if (has_segment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->segment(), target);
  }

  // optional int32 killScore = 10;
  if (has_killscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->killscore(), target);
  }

  // optional int32 rankScore = 11;
  if (has_rankscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->rankscore(), target);
  }

  // optional int32 resScore = 12;
  if (has_resscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->resscore(), target);
  }

  // optional int32 totalScore = 13;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->totalscore(), target);
  }

  // optional int32 totalKillScore = 14;
  if (has_totalkillscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->totalkillscore(), target);
  }

  // optional int32 totalRankScore = 15;
  if (has_totalrankscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->totalrankscore(), target);
  }

  // optional int32 totalTime = 16;
  if (has_totaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->totaltime(), target);
  }

  // optional int32 totalPvpCoin = 17;
  if (has_totalpvpcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->totalpvpcoin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPRewardS2C)
  return target;
}

int MsgPVPRewardS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_REWARD_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 total = 3;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 killNum = 5;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killnum());
    }

    // optional int32 resourse = 6;
    if (has_resourse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resourse());
    }

    // optional int32 coin = 7;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // optional int32 score = 8;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 segment = 9;
    if (has_segment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->segment());
    }

    // optional int32 killScore = 10;
    if (has_killscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killscore());
    }

    // optional int32 rankScore = 11;
    if (has_rankscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankscore());
    }

    // optional int32 resScore = 12;
    if (has_resscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resscore());
    }

    // optional int32 totalScore = 13;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscore());
    }

    // optional int32 totalKillScore = 14;
    if (has_totalkillscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalkillscore());
    }

    // optional int32 totalRankScore = 15;
    if (has_totalrankscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalrankscore());
    }

    // optional int32 totalTime = 16;
    if (has_totaltime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totaltime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 totalPvpCoin = 17;
    if (has_totalpvpcoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalpvpcoin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPRewardS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPRewardS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPRewardS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPRewardS2C::MergeFrom(const MsgPVPRewardS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_resourse()) {
      set_resourse(from.resourse());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_segment()) {
      set_segment(from.segment());
    }
    if (from.has_killscore()) {
      set_killscore(from.killscore());
    }
    if (from.has_rankscore()) {
      set_rankscore(from.rankscore());
    }
    if (from.has_resscore()) {
      set_resscore(from.resscore());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_totalkillscore()) {
      set_totalkillscore(from.totalkillscore());
    }
    if (from.has_totalrankscore()) {
      set_totalrankscore(from.totalrankscore());
    }
    if (from.has_totaltime()) {
      set_totaltime(from.totaltime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_totalpvpcoin()) {
      set_totalpvpcoin(from.totalpvpcoin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPRewardS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPRewardS2C::CopyFrom(const MsgPVPRewardS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPRewardS2C::IsInitialized() const {

  return true;
}

void MsgPVPRewardS2C::Swap(MsgPVPRewardS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(total_, other->total_);
    std::swap(rank_, other->rank_);
    std::swap(killnum_, other->killnum_);
    std::swap(resourse_, other->resourse_);
    std::swap(coin_, other->coin_);
    std::swap(score_, other->score_);
    std::swap(segment_, other->segment_);
    std::swap(killscore_, other->killscore_);
    std::swap(rankscore_, other->rankscore_);
    std::swap(resscore_, other->resscore_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(totalkillscore_, other->totalkillscore_);
    std::swap(totalrankscore_, other->totalrankscore_);
    std::swap(totaltime_, other->totaltime_);
    std::swap(totalpvpcoin_, other->totalpvpcoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPRewardS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPRewardS2C_descriptor_;
  metadata.reflection = MsgPVPRewardS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPDiscardWeaponC2S::kMsgTypeFieldNumber;
const int MsgPVPDiscardWeaponC2S::kIggidFieldNumber;
const int MsgPVPDiscardWeaponC2S::kIndexFieldNumber;
#endif  // !_MSC_VER

MsgPVPDiscardWeaponC2S::MsgPVPDiscardWeaponC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPDiscardWeaponC2S)
}

void MsgPVPDiscardWeaponC2S::InitAsDefaultInstance() {
}

MsgPVPDiscardWeaponC2S::MsgPVPDiscardWeaponC2S(const MsgPVPDiscardWeaponC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPDiscardWeaponC2S)
}

void MsgPVPDiscardWeaponC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2520;
  iggid_ = GOOGLE_LONGLONG(0);
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPDiscardWeaponC2S::~MsgPVPDiscardWeaponC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPDiscardWeaponC2S)
  SharedDtor();
}

void MsgPVPDiscardWeaponC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPVPDiscardWeaponC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPDiscardWeaponC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPDiscardWeaponC2S_descriptor_;
}

const MsgPVPDiscardWeaponC2S& MsgPVPDiscardWeaponC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPDiscardWeaponC2S* MsgPVPDiscardWeaponC2S::default_instance_ = NULL;

MsgPVPDiscardWeaponC2S* MsgPVPDiscardWeaponC2S::New() const {
  return new MsgPVPDiscardWeaponC2S;
}

void MsgPVPDiscardWeaponC2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 2520;
    iggid_ = GOOGLE_LONGLONG(0);
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPDiscardWeaponC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPDiscardWeaponC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_DISCARD_WEAPON_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPDiscardWeaponC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPDiscardWeaponC2S)
  return false;
#undef DO_
}

void MsgPVPDiscardWeaponC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPDiscardWeaponC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_DISCARD_WEAPON_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPDiscardWeaponC2S)
}

::google::protobuf::uint8* MsgPVPDiscardWeaponC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPDiscardWeaponC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_DISCARD_WEAPON_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPDiscardWeaponC2S)
  return target;
}

int MsgPVPDiscardWeaponC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_DISCARD_WEAPON_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPDiscardWeaponC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPDiscardWeaponC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPDiscardWeaponC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPDiscardWeaponC2S::MergeFrom(const MsgPVPDiscardWeaponC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPDiscardWeaponC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPDiscardWeaponC2S::CopyFrom(const MsgPVPDiscardWeaponC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPDiscardWeaponC2S::IsInitialized() const {

  return true;
}

void MsgPVPDiscardWeaponC2S::Swap(MsgPVPDiscardWeaponC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPDiscardWeaponC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPDiscardWeaponC2S_descriptor_;
  metadata.reflection = MsgPVPDiscardWeaponC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPDiscardWeaponS2C::kMsgTypeFieldNumber;
const int MsgPVPDiscardWeaponS2C::kIggidFieldNumber;
const int MsgPVPDiscardWeaponS2C::kIndexFieldNumber;
const int MsgPVPDiscardWeaponS2C::kResFieldNumber;
#endif  // !_MSC_VER

MsgPVPDiscardWeaponS2C::MsgPVPDiscardWeaponS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPDiscardWeaponS2C)
}

void MsgPVPDiscardWeaponS2C::InitAsDefaultInstance() {
}

MsgPVPDiscardWeaponS2C::MsgPVPDiscardWeaponS2C(const MsgPVPDiscardWeaponS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPDiscardWeaponS2C)
}

void MsgPVPDiscardWeaponS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2521;
  iggid_ = GOOGLE_LONGLONG(0);
  index_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPDiscardWeaponS2C::~MsgPVPDiscardWeaponS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPDiscardWeaponS2C)
  SharedDtor();
}

void MsgPVPDiscardWeaponS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPVPDiscardWeaponS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPDiscardWeaponS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPDiscardWeaponS2C_descriptor_;
}

const MsgPVPDiscardWeaponS2C& MsgPVPDiscardWeaponS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPDiscardWeaponS2C* MsgPVPDiscardWeaponS2C::default_instance_ = NULL;

MsgPVPDiscardWeaponS2C* MsgPVPDiscardWeaponS2C::New() const {
  return new MsgPVPDiscardWeaponS2C;
}

void MsgPVPDiscardWeaponS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPVPDiscardWeaponS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(index_, res_);
    msgtype_ = 2521;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPDiscardWeaponS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPDiscardWeaponS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_DISCARD_WEAPON_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_res;
        break;
      }

      // optional .MsgPB.PVP_WEAPON_RESULT res = 4;
      case 4: {
        if (tag == 32) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::PVP_WEAPON_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::PVP_WEAPON_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPDiscardWeaponS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPDiscardWeaponS2C)
  return false;
#undef DO_
}

void MsgPVPDiscardWeaponS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPDiscardWeaponS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_DISCARD_WEAPON_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // optional .MsgPB.PVP_WEAPON_RESULT res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPDiscardWeaponS2C)
}

::google::protobuf::uint8* MsgPVPDiscardWeaponS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPDiscardWeaponS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_DISCARD_WEAPON_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // optional .MsgPB.PVP_WEAPON_RESULT res = 4;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPDiscardWeaponS2C)
  return target;
}

int MsgPVPDiscardWeaponS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_DISCARD_WEAPON_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional .MsgPB.PVP_WEAPON_RESULT res = 4;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPDiscardWeaponS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPDiscardWeaponS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPDiscardWeaponS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPDiscardWeaponS2C::MergeFrom(const MsgPVPDiscardWeaponS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPDiscardWeaponS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPDiscardWeaponS2C::CopyFrom(const MsgPVPDiscardWeaponS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPDiscardWeaponS2C::IsInitialized() const {

  return true;
}

void MsgPVPDiscardWeaponS2C::Swap(MsgPVPDiscardWeaponS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(index_, other->index_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPDiscardWeaponS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPDiscardWeaponS2C_descriptor_;
  metadata.reflection = MsgPVPDiscardWeaponS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPChangeWeaponC2S::kMsgTypeFieldNumber;
const int MsgPVPChangeWeaponC2S::kIggidFieldNumber;
const int MsgPVPChangeWeaponC2S::kIndex1FieldNumber;
const int MsgPVPChangeWeaponC2S::kIndex2FieldNumber;
#endif  // !_MSC_VER

MsgPVPChangeWeaponC2S::MsgPVPChangeWeaponC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPChangeWeaponC2S)
}

void MsgPVPChangeWeaponC2S::InitAsDefaultInstance() {
}

MsgPVPChangeWeaponC2S::MsgPVPChangeWeaponC2S(const MsgPVPChangeWeaponC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPChangeWeaponC2S)
}

void MsgPVPChangeWeaponC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2522;
  iggid_ = GOOGLE_LONGLONG(0);
  index1_ = 0;
  index2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPChangeWeaponC2S::~MsgPVPChangeWeaponC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPChangeWeaponC2S)
  SharedDtor();
}

void MsgPVPChangeWeaponC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPVPChangeWeaponC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPChangeWeaponC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPChangeWeaponC2S_descriptor_;
}

const MsgPVPChangeWeaponC2S& MsgPVPChangeWeaponC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPChangeWeaponC2S* MsgPVPChangeWeaponC2S::default_instance_ = NULL;

MsgPVPChangeWeaponC2S* MsgPVPChangeWeaponC2S::New() const {
  return new MsgPVPChangeWeaponC2S;
}

void MsgPVPChangeWeaponC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPVPChangeWeaponC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(index1_, index2_);
    msgtype_ = 2522;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPChangeWeaponC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPChangeWeaponC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHANGE_WEAPON_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index1;
        break;
      }

      // optional int32 index1 = 3;
      case 3: {
        if (tag == 24) {
         parse_index1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index1_)));
          set_has_index1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index2;
        break;
      }

      // optional int32 index2 = 4;
      case 4: {
        if (tag == 32) {
         parse_index2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index2_)));
          set_has_index2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPChangeWeaponC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPChangeWeaponC2S)
  return false;
#undef DO_
}

void MsgPVPChangeWeaponC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPChangeWeaponC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHANGE_WEAPON_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 index1 = 3;
  if (has_index1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index1(), output);
  }

  // optional int32 index2 = 4;
  if (has_index2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPChangeWeaponC2S)
}

::google::protobuf::uint8* MsgPVPChangeWeaponC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPChangeWeaponC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHANGE_WEAPON_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 index1 = 3;
  if (has_index1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index1(), target);
  }

  // optional int32 index2 = 4;
  if (has_index2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPChangeWeaponC2S)
  return target;
}

int MsgPVPChangeWeaponC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHANGE_WEAPON_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 index1 = 3;
    if (has_index1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index1());
    }

    // optional int32 index2 = 4;
    if (has_index2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPChangeWeaponC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPChangeWeaponC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPChangeWeaponC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPChangeWeaponC2S::MergeFrom(const MsgPVPChangeWeaponC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_index1()) {
      set_index1(from.index1());
    }
    if (from.has_index2()) {
      set_index2(from.index2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPChangeWeaponC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPChangeWeaponC2S::CopyFrom(const MsgPVPChangeWeaponC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPChangeWeaponC2S::IsInitialized() const {

  return true;
}

void MsgPVPChangeWeaponC2S::Swap(MsgPVPChangeWeaponC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(index1_, other->index1_);
    std::swap(index2_, other->index2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPChangeWeaponC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPChangeWeaponC2S_descriptor_;
  metadata.reflection = MsgPVPChangeWeaponC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPChangeWeaponS2C::kMsgTypeFieldNumber;
const int MsgPVPChangeWeaponS2C::kIggidFieldNumber;
const int MsgPVPChangeWeaponS2C::kIndex1FieldNumber;
const int MsgPVPChangeWeaponS2C::kIndex2FieldNumber;
const int MsgPVPChangeWeaponS2C::kResFieldNumber;
#endif  // !_MSC_VER

MsgPVPChangeWeaponS2C::MsgPVPChangeWeaponS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPChangeWeaponS2C)
}

void MsgPVPChangeWeaponS2C::InitAsDefaultInstance() {
}

MsgPVPChangeWeaponS2C::MsgPVPChangeWeaponS2C(const MsgPVPChangeWeaponS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPChangeWeaponS2C)
}

void MsgPVPChangeWeaponS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2523;
  iggid_ = GOOGLE_LONGLONG(0);
  index1_ = 0;
  index2_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPChangeWeaponS2C::~MsgPVPChangeWeaponS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPChangeWeaponS2C)
  SharedDtor();
}

void MsgPVPChangeWeaponS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPVPChangeWeaponS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPChangeWeaponS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPChangeWeaponS2C_descriptor_;
}

const MsgPVPChangeWeaponS2C& MsgPVPChangeWeaponS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPChangeWeaponS2C* MsgPVPChangeWeaponS2C::default_instance_ = NULL;

MsgPVPChangeWeaponS2C* MsgPVPChangeWeaponS2C::New() const {
  return new MsgPVPChangeWeaponS2C;
}

void MsgPVPChangeWeaponS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPVPChangeWeaponS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(index1_, res_);
    msgtype_ = 2523;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPChangeWeaponS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPChangeWeaponS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHANGE_WEAPON_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index1;
        break;
      }

      // optional int32 index1 = 3;
      case 3: {
        if (tag == 24) {
         parse_index1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index1_)));
          set_has_index1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index2;
        break;
      }

      // optional int32 index2 = 4;
      case 4: {
        if (tag == 32) {
         parse_index2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index2_)));
          set_has_index2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_res;
        break;
      }

      // optional .MsgPB.PVP_WEAPON_RESULT res = 5;
      case 5: {
        if (tag == 40) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::PVP_WEAPON_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::PVP_WEAPON_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPChangeWeaponS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPChangeWeaponS2C)
  return false;
#undef DO_
}

void MsgPVPChangeWeaponS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPChangeWeaponS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHANGE_WEAPON_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 index1 = 3;
  if (has_index1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index1(), output);
  }

  // optional int32 index2 = 4;
  if (has_index2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index2(), output);
  }

  // optional .MsgPB.PVP_WEAPON_RESULT res = 5;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPChangeWeaponS2C)
}

::google::protobuf::uint8* MsgPVPChangeWeaponS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPChangeWeaponS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHANGE_WEAPON_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 index1 = 3;
  if (has_index1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index1(), target);
  }

  // optional int32 index2 = 4;
  if (has_index2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index2(), target);
  }

  // optional .MsgPB.PVP_WEAPON_RESULT res = 5;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPChangeWeaponS2C)
  return target;
}

int MsgPVPChangeWeaponS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHANGE_WEAPON_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 index1 = 3;
    if (has_index1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index1());
    }

    // optional int32 index2 = 4;
    if (has_index2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index2());
    }

    // optional .MsgPB.PVP_WEAPON_RESULT res = 5;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPChangeWeaponS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPChangeWeaponS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPChangeWeaponS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPChangeWeaponS2C::MergeFrom(const MsgPVPChangeWeaponS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_index1()) {
      set_index1(from.index1());
    }
    if (from.has_index2()) {
      set_index2(from.index2());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPChangeWeaponS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPChangeWeaponS2C::CopyFrom(const MsgPVPChangeWeaponS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPChangeWeaponS2C::IsInitialized() const {

  return true;
}

void MsgPVPChangeWeaponS2C::Swap(MsgPVPChangeWeaponS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(index1_, other->index1_);
    std::swap(index2_, other->index2_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPChangeWeaponS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPChangeWeaponS2C_descriptor_;
  metadata.reflection = MsgPVPChangeWeaponS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPChoiceWeaponC2S::kMsgTypeFieldNumber;
const int MsgPVPChoiceWeaponC2S::kIggidFieldNumber;
const int MsgPVPChoiceWeaponC2S::kIndexFieldNumber;
#endif  // !_MSC_VER

MsgPVPChoiceWeaponC2S::MsgPVPChoiceWeaponC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPChoiceWeaponC2S)
}

void MsgPVPChoiceWeaponC2S::InitAsDefaultInstance() {
}

MsgPVPChoiceWeaponC2S::MsgPVPChoiceWeaponC2S(const MsgPVPChoiceWeaponC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPChoiceWeaponC2S)
}

void MsgPVPChoiceWeaponC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2524;
  iggid_ = GOOGLE_LONGLONG(0);
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPChoiceWeaponC2S::~MsgPVPChoiceWeaponC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPChoiceWeaponC2S)
  SharedDtor();
}

void MsgPVPChoiceWeaponC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPVPChoiceWeaponC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPChoiceWeaponC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPChoiceWeaponC2S_descriptor_;
}

const MsgPVPChoiceWeaponC2S& MsgPVPChoiceWeaponC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPChoiceWeaponC2S* MsgPVPChoiceWeaponC2S::default_instance_ = NULL;

MsgPVPChoiceWeaponC2S* MsgPVPChoiceWeaponC2S::New() const {
  return new MsgPVPChoiceWeaponC2S;
}

void MsgPVPChoiceWeaponC2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 2524;
    iggid_ = GOOGLE_LONGLONG(0);
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPChoiceWeaponC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPChoiceWeaponC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHOICE_WEAPON_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPChoiceWeaponC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPChoiceWeaponC2S)
  return false;
#undef DO_
}

void MsgPVPChoiceWeaponC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPChoiceWeaponC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHOICE_WEAPON_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPChoiceWeaponC2S)
}

::google::protobuf::uint8* MsgPVPChoiceWeaponC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPChoiceWeaponC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHOICE_WEAPON_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPChoiceWeaponC2S)
  return target;
}

int MsgPVPChoiceWeaponC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHOICE_WEAPON_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPChoiceWeaponC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPChoiceWeaponC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPChoiceWeaponC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPChoiceWeaponC2S::MergeFrom(const MsgPVPChoiceWeaponC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPChoiceWeaponC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPChoiceWeaponC2S::CopyFrom(const MsgPVPChoiceWeaponC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPChoiceWeaponC2S::IsInitialized() const {

  return true;
}

void MsgPVPChoiceWeaponC2S::Swap(MsgPVPChoiceWeaponC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPChoiceWeaponC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPChoiceWeaponC2S_descriptor_;
  metadata.reflection = MsgPVPChoiceWeaponC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPVPChoiceWeaponS2C::kMsgTypeFieldNumber;
const int MsgPVPChoiceWeaponS2C::kIggidFieldNumber;
const int MsgPVPChoiceWeaponS2C::kIndexFieldNumber;
const int MsgPVPChoiceWeaponS2C::kResFieldNumber;
#endif  // !_MSC_VER

MsgPVPChoiceWeaponS2C::MsgPVPChoiceWeaponS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPVPChoiceWeaponS2C)
}

void MsgPVPChoiceWeaponS2C::InitAsDefaultInstance() {
}

MsgPVPChoiceWeaponS2C::MsgPVPChoiceWeaponS2C(const MsgPVPChoiceWeaponS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPVPChoiceWeaponS2C)
}

void MsgPVPChoiceWeaponS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2525;
  iggid_ = GOOGLE_LONGLONG(0);
  index_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPVPChoiceWeaponS2C::~MsgPVPChoiceWeaponS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPVPChoiceWeaponS2C)
  SharedDtor();
}

void MsgPVPChoiceWeaponS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPVPChoiceWeaponS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPVPChoiceWeaponS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPVPChoiceWeaponS2C_descriptor_;
}

const MsgPVPChoiceWeaponS2C& MsgPVPChoiceWeaponS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPVP_2eproto();
  return *default_instance_;
}

MsgPVPChoiceWeaponS2C* MsgPVPChoiceWeaponS2C::default_instance_ = NULL;

MsgPVPChoiceWeaponS2C* MsgPVPChoiceWeaponS2C::New() const {
  return new MsgPVPChoiceWeaponS2C;
}

void MsgPVPChoiceWeaponS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPVPChoiceWeaponS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(index_, res_);
    msgtype_ = 2525;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPVPChoiceWeaponS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPVPChoiceWeaponS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHOICE_WEAPON_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_res;
        break;
      }

      // optional .MsgPB.PVP_WEAPON_RESULT res = 4;
      case 4: {
        if (tag == 32) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::PVP_WEAPON_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::PVP_WEAPON_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPVPChoiceWeaponS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPVPChoiceWeaponS2C)
  return false;
#undef DO_
}

void MsgPVPChoiceWeaponS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPVPChoiceWeaponS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHOICE_WEAPON_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // optional .MsgPB.PVP_WEAPON_RESULT res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPVPChoiceWeaponS2C)
}

::google::protobuf::uint8* MsgPVPChoiceWeaponS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPVPChoiceWeaponS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHOICE_WEAPON_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // optional .MsgPB.PVP_WEAPON_RESULT res = 4;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPVPChoiceWeaponS2C)
  return target;
}

int MsgPVPChoiceWeaponS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_CHOICE_WEAPON_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional .MsgPB.PVP_WEAPON_RESULT res = 4;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPVPChoiceWeaponS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPVPChoiceWeaponS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPVPChoiceWeaponS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPVPChoiceWeaponS2C::MergeFrom(const MsgPVPChoiceWeaponS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPVPChoiceWeaponS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPVPChoiceWeaponS2C::CopyFrom(const MsgPVPChoiceWeaponS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPVPChoiceWeaponS2C::IsInitialized() const {

  return true;
}

void MsgPVPChoiceWeaponS2C::Swap(MsgPVPChoiceWeaponS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(index_, other->index_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPVPChoiceWeaponS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPVPChoiceWeaponS2C_descriptor_;
  metadata.reflection = MsgPVPChoiceWeaponS2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
