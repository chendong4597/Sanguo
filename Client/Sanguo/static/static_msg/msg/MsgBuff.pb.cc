// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgBuff.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgBuff.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* ServerBuffInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerBuffInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBuffInfo_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBuffInfo_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUserBuffData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUserBuffData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUserBuffData_Buff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUserBuffData_Buff_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUserBuffDataS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUserBuffDataS2C_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgBuff_2eproto() {
  protobuf_AddDesc_MsgBuff_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgBuff.proto");
  GOOGLE_CHECK(file != NULL);
  ServerBuffInfo_descriptor_ = file->message_type(0);
  static const int ServerBuffInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuffInfo, owner_mapobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuffInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuffInfo, buff_dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuffInfo, alive_timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuffInfo, heap_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuffInfo, caster_mapobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuffInfo, effect_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuffInfo, buff_durability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuffInfo, effect_idx_unactive_),
  };
  ServerBuffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerBuffInfo_descriptor_,
      ServerBuffInfo::default_instance_,
      ServerBuffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBuffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerBuffInfo));
  MsgBuffInfo_S2C_descriptor_ = file->message_type(1);
  static const int MsgBuffInfo_S2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuffInfo_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuffInfo_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuffInfo_S2C, buff_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuffInfo_S2C, buff_infos_),
  };
  MsgBuffInfo_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBuffInfo_S2C_descriptor_,
      MsgBuffInfo_S2C::default_instance_,
      MsgBuffInfo_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuffInfo_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuffInfo_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBuffInfo_S2C));
  MsgUserBuffData_descriptor_ = file->message_type(2);
  static const int MsgUserBuffData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData, dirty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData, is_del_),
  };
  MsgUserBuffData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUserBuffData_descriptor_,
      MsgUserBuffData::default_instance_,
      MsgUserBuffData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUserBuffData));
  MsgUserBuffData_Buff_descriptor_ = MsgUserBuffData_descriptor_->nested_type(0);
  static const int MsgUserBuffData_Buff_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData_Buff, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData_Buff, buffdataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData_Buff, alivetimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData_Buff, heapcounter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData_Buff, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData_Buff, neffectcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData_Buff, ndmg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData_Buff, ngroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData_Buff, ndurability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData_Buff, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData_Buff, neffectrate_),
  };
  MsgUserBuffData_Buff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUserBuffData_Buff_descriptor_,
      MsgUserBuffData_Buff::default_instance_,
      MsgUserBuffData_Buff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData_Buff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffData_Buff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUserBuffData_Buff));
  MsgUserBuffDataS2C_descriptor_ = file->message_type(3);
  static const int MsgUserBuffDataS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffDataS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffDataS2C, buffs_),
  };
  MsgUserBuffDataS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUserBuffDataS2C_descriptor_,
      MsgUserBuffDataS2C::default_instance_,
      MsgUserBuffDataS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffDataS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserBuffDataS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUserBuffDataS2C));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgBuff_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerBuffInfo_descriptor_, &ServerBuffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBuffInfo_S2C_descriptor_, &MsgBuffInfo_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUserBuffData_descriptor_, &MsgUserBuffData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUserBuffData_Buff_descriptor_, &MsgUserBuffData_Buff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUserBuffDataS2C_descriptor_, &MsgUserBuffDataS2C::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgBuff_2eproto() {
  delete ServerBuffInfo::default_instance_;
  delete ServerBuffInfo_reflection_;
  delete MsgBuffInfo_S2C::default_instance_;
  delete MsgBuffInfo_S2C_reflection_;
  delete MsgUserBuffData::default_instance_;
  delete MsgUserBuffData_reflection_;
  delete MsgUserBuffData_Buff::default_instance_;
  delete MsgUserBuffData_Buff_reflection_;
  delete MsgUserBuffDataS2C::default_instance_;
  delete MsgUserBuffDataS2C_reflection_;
}

void protobuf_AddDesc_MsgBuff_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMsgBuff.proto\022\005MsgPB\032\rMsgType.proto\"\341\001"
    "\n\016ServerBuffInfo\022\031\n\021owner_mapobjectid\030\001 "
    "\001(\005\022\r\n\005index\030\002 \001(\005\022\023\n\013buff_dataid\030\003 \001(\005\022"
    "\023\n\013alive_timer\030\004 \001(\005\022\024\n\014heap_counter\030\005 \001"
    "(\005\022\032\n\022caster_mapobjectid\030\006 \001(\005\022\023\n\013effect"
    "_rate\030\007 \001(\005\022\027\n\017buff_durability\030\010 \001(\005\022\033\n\023"
    "effect_idx_unactive\030\t \003(\005\"\225\001\n\017MsgBuffInf"
    "o_S2C\0224\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:"
    "\022_MSG_BUFF_INFO_S2C\022\r\n\005iggid\030\002 \001(\003\022\022\n\nbu"
    "ff_event\030\003 \001(\005\022)\n\nbuff_infos\030\004 \003(\0132\025.Msg"
    "PB.ServerBuffInfo\"\335\002\n\017MsgUserBuffData\022\r\n"
    "\005iggid\030\001 \001(\003\022\013\n\003idx\030\002 \001(\003\022\020\n\010end_time\030\003 "
    "\001(\003\022)\n\004data\030\004 \001(\0132\033.MsgPB.MsgUserBuffDat"
    "a.Buff\022\r\n\005dirty\030\005 \001(\003\022\016\n\006is_del\030\006 \001(\005\032\321\001"
    "\n\004Buff\022\r\n\005Index\030\001 \001(\005\022\022\n\nBuffDataID\030\002 \001("
    "\005\022\022\n\nAliveTimer\030\003 \001(\005\022\023\n\013HeapCounter\030\004 \001"
    "(\005\022\r\n\005Param\030\005 \001(\005\022\024\n\014nEffectCount\030\006 \001(\005\022"
    "\014\n\004nDmg\030\007 \001(\005\022\020\n\010nGroupId\030\010 \001(\005\022\023\n\013nDura"
    "bility\030\t \001(\005\022\016\n\006locked\030\n \001(\010\022\023\n\013nEffectR"
    "ate\030\013 \001(\005\"{\n\022MsgUserBuffDataS2C\0229\n\007msgTy"
    "pe\030\001 \001(\0162\017.MsgPB.EMsgType:\027_MSG_USER_BUF"
    "F_DATA_S2C\022*\n\005buffs\030\002 \003(\0132\033.MsgPB.MsgUse"
    "rBuffData.Buff", 894);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgBuff.proto", &protobuf_RegisterTypes);
  ServerBuffInfo::default_instance_ = new ServerBuffInfo();
  MsgBuffInfo_S2C::default_instance_ = new MsgBuffInfo_S2C();
  MsgUserBuffData::default_instance_ = new MsgUserBuffData();
  MsgUserBuffData_Buff::default_instance_ = new MsgUserBuffData_Buff();
  MsgUserBuffDataS2C::default_instance_ = new MsgUserBuffDataS2C();
  ServerBuffInfo::default_instance_->InitAsDefaultInstance();
  MsgBuffInfo_S2C::default_instance_->InitAsDefaultInstance();
  MsgUserBuffData::default_instance_->InitAsDefaultInstance();
  MsgUserBuffData_Buff::default_instance_->InitAsDefaultInstance();
  MsgUserBuffDataS2C::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgBuff_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgBuff_2eproto {
  StaticDescriptorInitializer_MsgBuff_2eproto() {
    protobuf_AddDesc_MsgBuff_2eproto();
  }
} static_descriptor_initializer_MsgBuff_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ServerBuffInfo::kOwnerMapobjectidFieldNumber;
const int ServerBuffInfo::kIndexFieldNumber;
const int ServerBuffInfo::kBuffDataidFieldNumber;
const int ServerBuffInfo::kAliveTimerFieldNumber;
const int ServerBuffInfo::kHeapCounterFieldNumber;
const int ServerBuffInfo::kCasterMapobjectidFieldNumber;
const int ServerBuffInfo::kEffectRateFieldNumber;
const int ServerBuffInfo::kBuffDurabilityFieldNumber;
const int ServerBuffInfo::kEffectIdxUnactiveFieldNumber;
#endif  // !_MSC_VER

ServerBuffInfo::ServerBuffInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.ServerBuffInfo)
}

void ServerBuffInfo::InitAsDefaultInstance() {
}

ServerBuffInfo::ServerBuffInfo(const ServerBuffInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.ServerBuffInfo)
}

void ServerBuffInfo::SharedCtor() {
  _cached_size_ = 0;
  owner_mapobjectid_ = 0;
  index_ = 0;
  buff_dataid_ = 0;
  alive_timer_ = 0;
  heap_counter_ = 0;
  caster_mapobjectid_ = 0;
  effect_rate_ = 0;
  buff_durability_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerBuffInfo::~ServerBuffInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.ServerBuffInfo)
  SharedDtor();
}

void ServerBuffInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerBuffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerBuffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerBuffInfo_descriptor_;
}

const ServerBuffInfo& ServerBuffInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgBuff_2eproto();
  return *default_instance_;
}

ServerBuffInfo* ServerBuffInfo::default_instance_ = NULL;

ServerBuffInfo* ServerBuffInfo::New() const {
  return new ServerBuffInfo;
}

void ServerBuffInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerBuffInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(owner_mapobjectid_, buff_durability_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  effect_idx_unactive_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerBuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.ServerBuffInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 owner_mapobjectid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_mapobjectid_)));
          set_has_owner_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buff_dataid;
        break;
      }

      // optional int32 buff_dataid = 3;
      case 3: {
        if (tag == 24) {
         parse_buff_dataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_dataid_)));
          set_has_buff_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_alive_timer;
        break;
      }

      // optional int32 alive_timer = 4;
      case 4: {
        if (tag == 32) {
         parse_alive_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alive_timer_)));
          set_has_alive_timer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_heap_counter;
        break;
      }

      // optional int32 heap_counter = 5;
      case 5: {
        if (tag == 40) {
         parse_heap_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heap_counter_)));
          set_has_heap_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_caster_mapobjectid;
        break;
      }

      // optional int32 caster_mapobjectid = 6;
      case 6: {
        if (tag == 48) {
         parse_caster_mapobjectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caster_mapobjectid_)));
          set_has_caster_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_effect_rate;
        break;
      }

      // optional int32 effect_rate = 7;
      case 7: {
        if (tag == 56) {
         parse_effect_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_rate_)));
          set_has_effect_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_buff_durability;
        break;
      }

      // optional int32 buff_durability = 8;
      case 8: {
        if (tag == 64) {
         parse_buff_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_durability_)));
          set_has_buff_durability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_effect_idx_unactive;
        break;
      }

      // repeated int32 effect_idx_unactive = 9;
      case 9: {
        if (tag == 72) {
         parse_effect_idx_unactive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_effect_idx_unactive())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_effect_idx_unactive())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_effect_idx_unactive;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.ServerBuffInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.ServerBuffInfo)
  return false;
#undef DO_
}

void ServerBuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.ServerBuffInfo)
  // optional int32 owner_mapobjectid = 1;
  if (has_owner_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->owner_mapobjectid(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional int32 buff_dataid = 3;
  if (has_buff_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buff_dataid(), output);
  }

  // optional int32 alive_timer = 4;
  if (has_alive_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->alive_timer(), output);
  }

  // optional int32 heap_counter = 5;
  if (has_heap_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->heap_counter(), output);
  }

  // optional int32 caster_mapobjectid = 6;
  if (has_caster_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->caster_mapobjectid(), output);
  }

  // optional int32 effect_rate = 7;
  if (has_effect_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->effect_rate(), output);
  }

  // optional int32 buff_durability = 8;
  if (has_buff_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->buff_durability(), output);
  }

  // repeated int32 effect_idx_unactive = 9;
  for (int i = 0; i < this->effect_idx_unactive_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->effect_idx_unactive(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.ServerBuffInfo)
}

::google::protobuf::uint8* ServerBuffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.ServerBuffInfo)
  // optional int32 owner_mapobjectid = 1;
  if (has_owner_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->owner_mapobjectid(), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional int32 buff_dataid = 3;
  if (has_buff_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buff_dataid(), target);
  }

  // optional int32 alive_timer = 4;
  if (has_alive_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->alive_timer(), target);
  }

  // optional int32 heap_counter = 5;
  if (has_heap_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->heap_counter(), target);
  }

  // optional int32 caster_mapobjectid = 6;
  if (has_caster_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->caster_mapobjectid(), target);
  }

  // optional int32 effect_rate = 7;
  if (has_effect_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->effect_rate(), target);
  }

  // optional int32 buff_durability = 8;
  if (has_buff_durability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->buff_durability(), target);
  }

  // repeated int32 effect_idx_unactive = 9;
  for (int i = 0; i < this->effect_idx_unactive_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->effect_idx_unactive(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.ServerBuffInfo)
  return target;
}

int ServerBuffInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 owner_mapobjectid = 1;
    if (has_owner_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner_mapobjectid());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 buff_dataid = 3;
    if (has_buff_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_dataid());
    }

    // optional int32 alive_timer = 4;
    if (has_alive_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alive_timer());
    }

    // optional int32 heap_counter = 5;
    if (has_heap_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heap_counter());
    }

    // optional int32 caster_mapobjectid = 6;
    if (has_caster_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caster_mapobjectid());
    }

    // optional int32 effect_rate = 7;
    if (has_effect_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_rate());
    }

    // optional int32 buff_durability = 8;
    if (has_buff_durability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_durability());
    }

  }
  // repeated int32 effect_idx_unactive = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->effect_idx_unactive_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->effect_idx_unactive(i));
    }
    total_size += 1 * this->effect_idx_unactive_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerBuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerBuffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerBuffInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerBuffInfo::MergeFrom(const ServerBuffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  effect_idx_unactive_.MergeFrom(from.effect_idx_unactive_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_mapobjectid()) {
      set_owner_mapobjectid(from.owner_mapobjectid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_buff_dataid()) {
      set_buff_dataid(from.buff_dataid());
    }
    if (from.has_alive_timer()) {
      set_alive_timer(from.alive_timer());
    }
    if (from.has_heap_counter()) {
      set_heap_counter(from.heap_counter());
    }
    if (from.has_caster_mapobjectid()) {
      set_caster_mapobjectid(from.caster_mapobjectid());
    }
    if (from.has_effect_rate()) {
      set_effect_rate(from.effect_rate());
    }
    if (from.has_buff_durability()) {
      set_buff_durability(from.buff_durability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerBuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerBuffInfo::CopyFrom(const ServerBuffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerBuffInfo::IsInitialized() const {

  return true;
}

void ServerBuffInfo::Swap(ServerBuffInfo* other) {
  if (other != this) {
    std::swap(owner_mapobjectid_, other->owner_mapobjectid_);
    std::swap(index_, other->index_);
    std::swap(buff_dataid_, other->buff_dataid_);
    std::swap(alive_timer_, other->alive_timer_);
    std::swap(heap_counter_, other->heap_counter_);
    std::swap(caster_mapobjectid_, other->caster_mapobjectid_);
    std::swap(effect_rate_, other->effect_rate_);
    std::swap(buff_durability_, other->buff_durability_);
    effect_idx_unactive_.Swap(&other->effect_idx_unactive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerBuffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerBuffInfo_descriptor_;
  metadata.reflection = ServerBuffInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBuffInfo_S2C::kMsgTypeFieldNumber;
const int MsgBuffInfo_S2C::kIggidFieldNumber;
const int MsgBuffInfo_S2C::kBuffEventFieldNumber;
const int MsgBuffInfo_S2C::kBuffInfosFieldNumber;
#endif  // !_MSC_VER

MsgBuffInfo_S2C::MsgBuffInfo_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgBuffInfo_S2C)
}

void MsgBuffInfo_S2C::InitAsDefaultInstance() {
}

MsgBuffInfo_S2C::MsgBuffInfo_S2C(const MsgBuffInfo_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgBuffInfo_S2C)
}

void MsgBuffInfo_S2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1030;
  iggid_ = GOOGLE_LONGLONG(0);
  buff_event_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBuffInfo_S2C::~MsgBuffInfo_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgBuffInfo_S2C)
  SharedDtor();
}

void MsgBuffInfo_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBuffInfo_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBuffInfo_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBuffInfo_S2C_descriptor_;
}

const MsgBuffInfo_S2C& MsgBuffInfo_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgBuff_2eproto();
  return *default_instance_;
}

MsgBuffInfo_S2C* MsgBuffInfo_S2C::default_instance_ = NULL;

MsgBuffInfo_S2C* MsgBuffInfo_S2C::New() const {
  return new MsgBuffInfo_S2C;
}

void MsgBuffInfo_S2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1030;
    iggid_ = GOOGLE_LONGLONG(0);
    buff_event_ = 0;
  }
  buff_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBuffInfo_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgBuffInfo_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_BUFF_INFO_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buff_event;
        break;
      }

      // optional int32 buff_event = 3;
      case 3: {
        if (tag == 24) {
         parse_buff_event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_event_)));
          set_has_buff_event();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_buff_infos;
        break;
      }

      // repeated .MsgPB.ServerBuffInfo buff_infos = 4;
      case 4: {
        if (tag == 34) {
         parse_buff_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_buff_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgBuffInfo_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgBuffInfo_S2C)
  return false;
#undef DO_
}

void MsgBuffInfo_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgBuffInfo_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_BUFF_INFO_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 buff_event = 3;
  if (has_buff_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buff_event(), output);
  }

  // repeated .MsgPB.ServerBuffInfo buff_infos = 4;
  for (int i = 0; i < this->buff_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buff_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgBuffInfo_S2C)
}

::google::protobuf::uint8* MsgBuffInfo_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgBuffInfo_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_BUFF_INFO_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 buff_event = 3;
  if (has_buff_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buff_event(), target);
  }

  // repeated .MsgPB.ServerBuffInfo buff_infos = 4;
  for (int i = 0; i < this->buff_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buff_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgBuffInfo_S2C)
  return target;
}

int MsgBuffInfo_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_BUFF_INFO_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 buff_event = 3;
    if (has_buff_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_event());
    }

  }
  // repeated .MsgPB.ServerBuffInfo buff_infos = 4;
  total_size += 1 * this->buff_infos_size();
  for (int i = 0; i < this->buff_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBuffInfo_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBuffInfo_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBuffInfo_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBuffInfo_S2C::MergeFrom(const MsgBuffInfo_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  buff_infos_.MergeFrom(from.buff_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_buff_event()) {
      set_buff_event(from.buff_event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBuffInfo_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBuffInfo_S2C::CopyFrom(const MsgBuffInfo_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBuffInfo_S2C::IsInitialized() const {

  return true;
}

void MsgBuffInfo_S2C::Swap(MsgBuffInfo_S2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(buff_event_, other->buff_event_);
    buff_infos_.Swap(&other->buff_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBuffInfo_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBuffInfo_S2C_descriptor_;
  metadata.reflection = MsgBuffInfo_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUserBuffData_Buff::kIndexFieldNumber;
const int MsgUserBuffData_Buff::kBuffDataIDFieldNumber;
const int MsgUserBuffData_Buff::kAliveTimerFieldNumber;
const int MsgUserBuffData_Buff::kHeapCounterFieldNumber;
const int MsgUserBuffData_Buff::kParamFieldNumber;
const int MsgUserBuffData_Buff::kNEffectCountFieldNumber;
const int MsgUserBuffData_Buff::kNDmgFieldNumber;
const int MsgUserBuffData_Buff::kNGroupIdFieldNumber;
const int MsgUserBuffData_Buff::kNDurabilityFieldNumber;
const int MsgUserBuffData_Buff::kLockedFieldNumber;
const int MsgUserBuffData_Buff::kNEffectRateFieldNumber;
#endif  // !_MSC_VER

MsgUserBuffData_Buff::MsgUserBuffData_Buff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgUserBuffData.Buff)
}

void MsgUserBuffData_Buff::InitAsDefaultInstance() {
}

MsgUserBuffData_Buff::MsgUserBuffData_Buff(const MsgUserBuffData_Buff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgUserBuffData.Buff)
}

void MsgUserBuffData_Buff::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  buffdataid_ = 0;
  alivetimer_ = 0;
  heapcounter_ = 0;
  param_ = 0;
  neffectcount_ = 0;
  ndmg_ = 0;
  ngroupid_ = 0;
  ndurability_ = 0;
  locked_ = false;
  neffectrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserBuffData_Buff::~MsgUserBuffData_Buff() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgUserBuffData.Buff)
  SharedDtor();
}

void MsgUserBuffData_Buff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUserBuffData_Buff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUserBuffData_Buff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUserBuffData_Buff_descriptor_;
}

const MsgUserBuffData_Buff& MsgUserBuffData_Buff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgBuff_2eproto();
  return *default_instance_;
}

MsgUserBuffData_Buff* MsgUserBuffData_Buff::default_instance_ = NULL;

MsgUserBuffData_Buff* MsgUserBuffData_Buff::New() const {
  return new MsgUserBuffData_Buff;
}

void MsgUserBuffData_Buff::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgUserBuffData_Buff*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(index_, ngroupid_);
  }
  ZR_(ndurability_, neffectrate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUserBuffData_Buff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgUserBuffData.Buff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffDataID;
        break;
      }

      // optional int32 BuffDataID = 2;
      case 2: {
        if (tag == 16) {
         parse_BuffDataID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffdataid_)));
          set_has_buffdataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AliveTimer;
        break;
      }

      // optional int32 AliveTimer = 3;
      case 3: {
        if (tag == 24) {
         parse_AliveTimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alivetimer_)));
          set_has_alivetimer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HeapCounter;
        break;
      }

      // optional int32 HeapCounter = 4;
      case 4: {
        if (tag == 32) {
         parse_HeapCounter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heapcounter_)));
          set_has_heapcounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Param;
        break;
      }

      // optional int32 Param = 5;
      case 5: {
        if (tag == 40) {
         parse_Param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nEffectCount;
        break;
      }

      // optional int32 nEffectCount = 6;
      case 6: {
        if (tag == 48) {
         parse_nEffectCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &neffectcount_)));
          set_has_neffectcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nDmg;
        break;
      }

      // optional int32 nDmg = 7;
      case 7: {
        if (tag == 56) {
         parse_nDmg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndmg_)));
          set_has_ndmg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_nGroupId;
        break;
      }

      // optional int32 nGroupId = 8;
      case 8: {
        if (tag == 64) {
         parse_nGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
          set_has_ngroupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_nDurability;
        break;
      }

      // optional int32 nDurability = 9;
      case 9: {
        if (tag == 72) {
         parse_nDurability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndurability_)));
          set_has_ndurability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_locked;
        break;
      }

      // optional bool locked = 10;
      case 10: {
        if (tag == 80) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_nEffectRate;
        break;
      }

      // optional int32 nEffectRate = 11;
      case 11: {
        if (tag == 88) {
         parse_nEffectRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &neffectrate_)));
          set_has_neffectrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgUserBuffData.Buff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgUserBuffData.Buff)
  return false;
#undef DO_
}

void MsgUserBuffData_Buff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgUserBuffData.Buff)
  // optional int32 Index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 BuffDataID = 2;
  if (has_buffdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buffdataid(), output);
  }

  // optional int32 AliveTimer = 3;
  if (has_alivetimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->alivetimer(), output);
  }

  // optional int32 HeapCounter = 4;
  if (has_heapcounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->heapcounter(), output);
  }

  // optional int32 Param = 5;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->param(), output);
  }

  // optional int32 nEffectCount = 6;
  if (has_neffectcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->neffectcount(), output);
  }

  // optional int32 nDmg = 7;
  if (has_ndmg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ndmg(), output);
  }

  // optional int32 nGroupId = 8;
  if (has_ngroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ngroupid(), output);
  }

  // optional int32 nDurability = 9;
  if (has_ndurability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ndurability(), output);
  }

  // optional bool locked = 10;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->locked(), output);
  }

  // optional int32 nEffectRate = 11;
  if (has_neffectrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->neffectrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgUserBuffData.Buff)
}

::google::protobuf::uint8* MsgUserBuffData_Buff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgUserBuffData.Buff)
  // optional int32 Index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 BuffDataID = 2;
  if (has_buffdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buffdataid(), target);
  }

  // optional int32 AliveTimer = 3;
  if (has_alivetimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->alivetimer(), target);
  }

  // optional int32 HeapCounter = 4;
  if (has_heapcounter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->heapcounter(), target);
  }

  // optional int32 Param = 5;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->param(), target);
  }

  // optional int32 nEffectCount = 6;
  if (has_neffectcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->neffectcount(), target);
  }

  // optional int32 nDmg = 7;
  if (has_ndmg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ndmg(), target);
  }

  // optional int32 nGroupId = 8;
  if (has_ngroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ngroupid(), target);
  }

  // optional int32 nDurability = 9;
  if (has_ndurability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ndurability(), target);
  }

  // optional bool locked = 10;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->locked(), target);
  }

  // optional int32 nEffectRate = 11;
  if (has_neffectrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->neffectrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgUserBuffData.Buff)
  return target;
}

int MsgUserBuffData_Buff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 BuffDataID = 2;
    if (has_buffdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffdataid());
    }

    // optional int32 AliveTimer = 3;
    if (has_alivetimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alivetimer());
    }

    // optional int32 HeapCounter = 4;
    if (has_heapcounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heapcounter());
    }

    // optional int32 Param = 5;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

    // optional int32 nEffectCount = 6;
    if (has_neffectcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->neffectcount());
    }

    // optional int32 nDmg = 7;
    if (has_ndmg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndmg());
    }

    // optional int32 nGroupId = 8;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nDurability = 9;
    if (has_ndurability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndurability());
    }

    // optional bool locked = 10;
    if (has_locked()) {
      total_size += 1 + 1;
    }

    // optional int32 nEffectRate = 11;
    if (has_neffectrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->neffectrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserBuffData_Buff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUserBuffData_Buff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUserBuffData_Buff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUserBuffData_Buff::MergeFrom(const MsgUserBuffData_Buff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_buffdataid()) {
      set_buffdataid(from.buffdataid());
    }
    if (from.has_alivetimer()) {
      set_alivetimer(from.alivetimer());
    }
    if (from.has_heapcounter()) {
      set_heapcounter(from.heapcounter());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_neffectcount()) {
      set_neffectcount(from.neffectcount());
    }
    if (from.has_ndmg()) {
      set_ndmg(from.ndmg());
    }
    if (from.has_ngroupid()) {
      set_ngroupid(from.ngroupid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ndurability()) {
      set_ndurability(from.ndurability());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_neffectrate()) {
      set_neffectrate(from.neffectrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUserBuffData_Buff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUserBuffData_Buff::CopyFrom(const MsgUserBuffData_Buff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserBuffData_Buff::IsInitialized() const {

  return true;
}

void MsgUserBuffData_Buff::Swap(MsgUserBuffData_Buff* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(buffdataid_, other->buffdataid_);
    std::swap(alivetimer_, other->alivetimer_);
    std::swap(heapcounter_, other->heapcounter_);
    std::swap(param_, other->param_);
    std::swap(neffectcount_, other->neffectcount_);
    std::swap(ndmg_, other->ndmg_);
    std::swap(ngroupid_, other->ngroupid_);
    std::swap(ndurability_, other->ndurability_);
    std::swap(locked_, other->locked_);
    std::swap(neffectrate_, other->neffectrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUserBuffData_Buff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUserBuffData_Buff_descriptor_;
  metadata.reflection = MsgUserBuffData_Buff_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgUserBuffData::kIggidFieldNumber;
const int MsgUserBuffData::kIdxFieldNumber;
const int MsgUserBuffData::kEndTimeFieldNumber;
const int MsgUserBuffData::kDataFieldNumber;
const int MsgUserBuffData::kDirtyFieldNumber;
const int MsgUserBuffData::kIsDelFieldNumber;
#endif  // !_MSC_VER

MsgUserBuffData::MsgUserBuffData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgUserBuffData)
}

void MsgUserBuffData::InitAsDefaultInstance() {
  data_ = const_cast< ::MsgPB::MsgUserBuffData_Buff*>(&::MsgPB::MsgUserBuffData_Buff::default_instance());
}

MsgUserBuffData::MsgUserBuffData(const MsgUserBuffData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgUserBuffData)
}

void MsgUserBuffData::SharedCtor() {
  _cached_size_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  idx_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  data_ = NULL;
  dirty_ = GOOGLE_LONGLONG(0);
  is_del_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserBuffData::~MsgUserBuffData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgUserBuffData)
  SharedDtor();
}

void MsgUserBuffData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgUserBuffData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUserBuffData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUserBuffData_descriptor_;
}

const MsgUserBuffData& MsgUserBuffData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgBuff_2eproto();
  return *default_instance_;
}

MsgUserBuffData* MsgUserBuffData::default_instance_ = NULL;

MsgUserBuffData* MsgUserBuffData::New() const {
  return new MsgUserBuffData;
}

void MsgUserBuffData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgUserBuffData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(iggid_, end_time_);
    ZR_(dirty_, is_del_);
    if (has_data()) {
      if (data_ != NULL) data_->::MsgPB::MsgUserBuffData_Buff::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUserBuffData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgUserBuffData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iggid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // optional int64 idx = 2;
      case 2: {
        if (tag == 16) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 3;
      case 3: {
        if (tag == 24) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .MsgPB.MsgUserBuffData.Buff data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dirty;
        break;
      }

      // optional int64 dirty = 5;
      case 5: {
        if (tag == 40) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_del;
        break;
      }

      // optional int32 is_del = 6;
      case 6: {
        if (tag == 48) {
         parse_is_del:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_del_)));
          set_has_is_del();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgUserBuffData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgUserBuffData)
  return false;
#undef DO_
}

void MsgUserBuffData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgUserBuffData)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iggid(), output);
  }

  // optional int64 idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->idx(), output);
  }

  // optional int64 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end_time(), output);
  }

  // optional .MsgPB.MsgUserBuffData.Buff data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  // optional int64 dirty = 5;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->dirty(), output);
  }

  // optional int32 is_del = 6;
  if (has_is_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_del(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgUserBuffData)
}

::google::protobuf::uint8* MsgUserBuffData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgUserBuffData)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iggid(), target);
  }

  // optional int64 idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->idx(), target);
  }

  // optional int64 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end_time(), target);
  }

  // optional .MsgPB.MsgUserBuffData.Buff data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  // optional int64 dirty = 5;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->dirty(), target);
  }

  // optional int32 is_del = 6;
  if (has_is_del()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_del(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgUserBuffData)
  return target;
}

int MsgUserBuffData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iggid = 1;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->idx());
    }

    // optional int64 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional .MsgPB.MsgUserBuffData.Buff data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int64 dirty = 5;
    if (has_dirty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirty());
    }

    // optional int32 is_del = 6;
    if (has_is_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_del());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserBuffData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUserBuffData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUserBuffData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUserBuffData::MergeFrom(const MsgUserBuffData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_data()) {
      mutable_data()->::MsgPB::MsgUserBuffData_Buff::MergeFrom(from.data());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
    if (from.has_is_del()) {
      set_is_del(from.is_del());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUserBuffData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUserBuffData::CopyFrom(const MsgUserBuffData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserBuffData::IsInitialized() const {

  return true;
}

void MsgUserBuffData::Swap(MsgUserBuffData* other) {
  if (other != this) {
    std::swap(iggid_, other->iggid_);
    std::swap(idx_, other->idx_);
    std::swap(end_time_, other->end_time_);
    std::swap(data_, other->data_);
    std::swap(dirty_, other->dirty_);
    std::swap(is_del_, other->is_del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUserBuffData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUserBuffData_descriptor_;
  metadata.reflection = MsgUserBuffData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUserBuffDataS2C::kMsgTypeFieldNumber;
const int MsgUserBuffDataS2C::kBuffsFieldNumber;
#endif  // !_MSC_VER

MsgUserBuffDataS2C::MsgUserBuffDataS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgUserBuffDataS2C)
}

void MsgUserBuffDataS2C::InitAsDefaultInstance() {
}

MsgUserBuffDataS2C::MsgUserBuffDataS2C(const MsgUserBuffDataS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgUserBuffDataS2C)
}

void MsgUserBuffDataS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2031;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserBuffDataS2C::~MsgUserBuffDataS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgUserBuffDataS2C)
  SharedDtor();
}

void MsgUserBuffDataS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUserBuffDataS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUserBuffDataS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUserBuffDataS2C_descriptor_;
}

const MsgUserBuffDataS2C& MsgUserBuffDataS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgBuff_2eproto();
  return *default_instance_;
}

MsgUserBuffDataS2C* MsgUserBuffDataS2C::default_instance_ = NULL;

MsgUserBuffDataS2C* MsgUserBuffDataS2C::New() const {
  return new MsgUserBuffDataS2C;
}

void MsgUserBuffDataS2C::Clear() {
  msgtype_ = 2031;
  buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUserBuffDataS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgUserBuffDataS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_USER_BUFF_DATA_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buffs;
        break;
      }

      // repeated .MsgPB.MsgUserBuffData.Buff buffs = 2;
      case 2: {
        if (tag == 18) {
         parse_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buffs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgUserBuffDataS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgUserBuffDataS2C)
  return false;
#undef DO_
}

void MsgUserBuffDataS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgUserBuffDataS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_USER_BUFF_DATA_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // repeated .MsgPB.MsgUserBuffData.Buff buffs = 2;
  for (int i = 0; i < this->buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buffs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgUserBuffDataS2C)
}

::google::protobuf::uint8* MsgUserBuffDataS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgUserBuffDataS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_USER_BUFF_DATA_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // repeated .MsgPB.MsgUserBuffData.Buff buffs = 2;
  for (int i = 0; i < this->buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buffs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgUserBuffDataS2C)
  return target;
}

int MsgUserBuffDataS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_USER_BUFF_DATA_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  // repeated .MsgPB.MsgUserBuffData.Buff buffs = 2;
  total_size += 1 * this->buffs_size();
  for (int i = 0; i < this->buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserBuffDataS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUserBuffDataS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUserBuffDataS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUserBuffDataS2C::MergeFrom(const MsgUserBuffDataS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffs_.MergeFrom(from.buffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUserBuffDataS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUserBuffDataS2C::CopyFrom(const MsgUserBuffDataS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserBuffDataS2C::IsInitialized() const {

  return true;
}

void MsgUserBuffDataS2C::Swap(MsgUserBuffDataS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    buffs_.Swap(&other->buffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUserBuffDataS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUserBuffDataS2C_descriptor_;
  metadata.reflection = MsgUserBuffDataS2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
