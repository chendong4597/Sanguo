// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgMapServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgMapServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgPlayerBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerEndless_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerEndless_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSyncPlayToGS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSyncPlayToGS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJoinMapG2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJoinMapG2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQuitMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQuitMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQuitMapNtf_S2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQuitMapNtf_S2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueyMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueyMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapBlockToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapBlockToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapBlockToClient_BlockBatchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapBlockToClient_BlockBatchData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMovement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMovement_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNotifyPlayerMovementC2G_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNotifyPlayerMovementC2G_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNotifyPlayerMovementG2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNotifyPlayerMovementG2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerAppearance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerAppearance_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMagicObjectAppearance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMagicObjectAppearance_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapObjectLeaveView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapObjectLeaveView_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapClientCreateMapDoneC2G_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapClientCreateMapDoneC2G_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapClientUploadDoneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapClientUploadDoneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapSrvLoadDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapSrvLoadDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapObjectPreAttack_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapObjectPreAttack_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapObjectUnderAttackG2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapObjectUnderAttackG2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCharacterDeadS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCharacterDeadS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCharacterReviveS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCharacterReviveS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSyncPlayerDataToMapServerDone_GS2MS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSyncPlayerDataToMapServerDone_GS2MS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTriggerGateC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTriggerGateC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTriggerGateS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTriggerGateS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgTriggerGateS2C_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgGatePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGatePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGatePoint_Target_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGatePoint_Target_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapCfgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapCfgInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapCfgInfo_Layout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapCfgInfo_Layout_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgMapCfgInfo_Layout_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopBoxBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapCfgInfo_PopBoxBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopBoxBase_Pop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapCfgInfo_PopBoxBase_Pop_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopBoxBase_Mob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapCfgInfo_PopBoxBase_Mob_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopBoxBase_Build_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapCfgInfo_PopBoxBase_Build_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopBoxBase_UserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapCfgInfo_PopBoxBase_UserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapCfgInfo_PopBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopSavedBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapCfgInfo_PopSavedBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapCfgInfo_Vehicle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapCfgInfo_Vehicle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgMapCfgInfo_Vehicle_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgMapCfgInfo_Airship_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapCfgInfo_Airship_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGateTargetMS2GS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGateTargetMS2GS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJoinMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJoinMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJoinMapRs_MS2GS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJoinMapRs_MS2GS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJoinMapRs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJoinMapRs_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQuitMapC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQuitMapC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgEnterPublicMapC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgEnterPublicMapC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgObjectS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgObjectS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapObjMoveS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapObjMoveS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapLayoutInfo_MS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapLayoutInfo_MS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapLayoutInfo_MS2C_LayoutRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapLayoutInfo_MS2C_LayoutRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRequestSyncDataGS2MS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRequestSyncDataGS2MS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSyncTowerBuildData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSyncTowerBuildData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSyncPlantUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSyncPlantUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTriggerProbabilityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTriggerProbabilityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLSSurvivalEventFlagData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLSSurvivalEventFlagData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSyncFeedingProductSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSyncFeedingProductSpeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReportKillMobRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReportKillMobRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSyncClientLocalDataC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSyncClientLocalDataC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSyncClientLocalDataC2S_BlockGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSyncClientLocalDataC2S_BlockGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSyncClientLocalDataC2S_MobKillCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSyncClientLocalDataC2S_MobKillCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSyncClientLocalDataS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSyncClientLocalDataS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUpdateTriggerProbabilityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUpdateTriggerProbabilityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRemovePrivateMapMGS2MS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRemovePrivateMapMGS2MS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRemovePrivateMapResultMS2MGS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRemovePrivateMapResultMS2MGS_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgRemovePrivateMapResultMS2MGS_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgNotifyClearDirtyGS2MS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNotifyClearDirtyGS2MS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCharacterBeBeatBackS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCharacterBeBeatBackS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerReleaseByMapServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerReleaseByMapServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapServerRequestLockPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapServerRequestLockPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGameServerNotifyReleasePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGameServerNotifyReleasePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapServerInfoSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapServerInfoSync_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EN_GAME_MAP_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REVIVE_RES_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JOIN_MAP_RS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SYNC_CLIENT_LOCAL_DATA_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SYNC_CLIENT_LOCAL_DATA_FLAG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SYNC_TOWERBUILD_OP_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SYNC_PLANT_OP_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SYNC_BUILDDATA_OP_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SYNC_CLIENT_LOCAL_DATA_RES_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgMapServer_2eproto() {
  protobuf_AddDesc_MsgMapServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgMapServer.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPlayerBaseData_descriptor_ = file->message_type(0);
  static const int MsgPlayerBaseData_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, privatepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, dungeonpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, oxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, firstlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, onhand_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, prihp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, primp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, mapuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, curdungeonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, lottytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, sequipcos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, skincolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, depositpottime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, lastclientuploaddataserial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, dirty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, mail_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, lastsaveclientlocaldatatime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, lastupgradetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, client_version_),
  };
  MsgPlayerBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerBaseData_descriptor_,
      MsgPlayerBaseData::default_instance_,
      MsgPlayerBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerBaseData));
  MsgPlayerEndless_descriptor_ = file->message_type(1);
  static const int MsgPlayerEndless_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, sattrinhert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, revivenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, gamble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, faith_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, endless_unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, piece_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, tempdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, calllayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, dirty_),
  };
  MsgPlayerEndless_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerEndless_descriptor_,
      MsgPlayerEndless::default_instance_,
      MsgPlayerEndless_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerEndless, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerEndless));
  MsgSyncPlayToGS_descriptor_ = file->message_type(2);
  static const int MsgSyncPlayToGS_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayToGS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayToGS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayToGS, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayToGS, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayToGS, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayToGS, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayToGS, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayToGS, dungeonmapuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayToGS, maptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayToGS, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayToGS, oxy_),
  };
  MsgSyncPlayToGS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSyncPlayToGS_descriptor_,
      MsgSyncPlayToGS::default_instance_,
      MsgSyncPlayToGS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayToGS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayToGS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSyncPlayToGS));
  MsgJoinMapG2C_descriptor_ = file->message_type(3);
  static const int MsgJoinMapG2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapG2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapG2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapG2C, mapid_),
  };
  MsgJoinMapG2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJoinMapG2C_descriptor_,
      MsgJoinMapG2C::default_instance_,
      MsgJoinMapG2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapG2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapG2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJoinMapG2C));
  MsgQuitMap_descriptor_ = file->message_type(4);
  static const int MsgQuitMap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuitMap, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuitMap, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuitMap, mapid_),
  };
  MsgQuitMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQuitMap_descriptor_,
      MsgQuitMap::default_instance_,
      MsgQuitMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuitMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuitMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQuitMap));
  MsgQuitMapNtf_S2S_descriptor_ = file->message_type(5);
  static const int MsgQuitMapNtf_S2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuitMapNtf_S2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuitMapNtf_S2S, iggid_),
  };
  MsgQuitMapNtf_S2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQuitMapNtf_S2S_descriptor_,
      MsgQuitMapNtf_S2S::default_instance_,
      MsgQuitMapNtf_S2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuitMapNtf_S2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuitMapNtf_S2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQuitMapNtf_S2S));
  MsgQueyMap_descriptor_ = file->message_type(6);
  static const int MsgQueyMap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueyMap, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueyMap, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueyMap, mapid_),
  };
  MsgQueyMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueyMap_descriptor_,
      MsgQueyMap::default_instance_,
      MsgQueyMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueyMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueyMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueyMap));
  MsgMapInfo_descriptor_ = file->message_type(7);
  static const int MsgMapInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapInfo, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapInfo, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapInfo, blocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapInfo, mapblockx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapInfo, mapblocky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapInfo, blocksizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapInfo, blocksizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapInfo, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapInfo, client_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapInfo, last_save_time_),
  };
  MsgMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapInfo_descriptor_,
      MsgMapInfo::default_instance_,
      MsgMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapInfo));
  MsgMapBlock_descriptor_ = file->message_type(8);
  static const int MsgMapBlock_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlock, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlock, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlock, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlock, blockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlock, blockbuff_),
  };
  MsgMapBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapBlock_descriptor_,
      MsgMapBlock::default_instance_,
      MsgMapBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapBlock));
  MsgMapBlockToClient_descriptor_ = file->message_type(9);
  static const int MsgMapBlockToClient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlockToClient, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlockToClient, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlockToClient, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlockToClient, batch_),
  };
  MsgMapBlockToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapBlockToClient_descriptor_,
      MsgMapBlockToClient::default_instance_,
      MsgMapBlockToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlockToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlockToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapBlockToClient));
  MsgMapBlockToClient_BlockBatchData_descriptor_ = MsgMapBlockToClient_descriptor_->nested_type(0);
  static const int MsgMapBlockToClient_BlockBatchData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlockToClient_BlockBatchData, batch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlockToClient_BlockBatchData, batch_buff_),
  };
  MsgMapBlockToClient_BlockBatchData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapBlockToClient_BlockBatchData_descriptor_,
      MsgMapBlockToClient_BlockBatchData::default_instance_,
      MsgMapBlockToClient_BlockBatchData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlockToClient_BlockBatchData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapBlockToClient_BlockBatchData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapBlockToClient_BlockBatchData));
  PlayerMovement_descriptor_ = file->message_type(10);
  static const int PlayerMovement_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, map_object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, horizontal_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, vertical_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, is_running_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, is_manual_jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, is_player_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, mov_ing_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, sync_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, uniform_velocity_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, dest_posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, dest_posy_),
  };
  PlayerMovement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMovement_descriptor_,
      PlayerMovement::default_instance_,
      PlayerMovement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMovement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMovement));
  MsgNotifyPlayerMovementC2G_descriptor_ = file->message_type(11);
  static const int MsgNotifyPlayerMovementC2G_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPlayerMovementC2G, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPlayerMovementC2G, movement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPlayerMovementC2G, iggid_),
  };
  MsgNotifyPlayerMovementC2G_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNotifyPlayerMovementC2G_descriptor_,
      MsgNotifyPlayerMovementC2G::default_instance_,
      MsgNotifyPlayerMovementC2G_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPlayerMovementC2G, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPlayerMovementC2G, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNotifyPlayerMovementC2G));
  MsgNotifyPlayerMovementG2C_descriptor_ = file->message_type(12);
  static const int MsgNotifyPlayerMovementG2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPlayerMovementG2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPlayerMovementG2C, movement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPlayerMovementG2C, forceupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPlayerMovementG2C, iggid_),
  };
  MsgNotifyPlayerMovementG2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNotifyPlayerMovementG2C_descriptor_,
      MsgNotifyPlayerMovementG2C::default_instance_,
      MsgNotifyPlayerMovementG2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPlayerMovementG2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyPlayerMovementG2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNotifyPlayerMovementG2C));
  MsgPlayerAppearance_descriptor_ = file->message_type(13);
  static const int MsgPlayerAppearance_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, mapobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, buff_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, equip_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, onhand_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, skincolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, vehicleobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, full_hp_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, vip_level_),
  };
  MsgPlayerAppearance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerAppearance_descriptor_,
      MsgPlayerAppearance::default_instance_,
      MsgPlayerAppearance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAppearance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerAppearance));
  MsgMagicObjectAppearance_descriptor_ = file->message_type(14);
  static const int MsgMagicObjectAppearance_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, magicobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, mapobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, skilldataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, magicobj_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, dirx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, diry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, ball_nowdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, area_updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, area_lt_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, area_lt_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, area_rd_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, area_rd_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, b_clear_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, hit_block_coordx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, hit_block_coordy_),
  };
  MsgMagicObjectAppearance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMagicObjectAppearance_descriptor_,
      MsgMagicObjectAppearance::default_instance_,
      MsgMagicObjectAppearance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicObjectAppearance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMagicObjectAppearance));
  MsgMapObjectLeaveView_descriptor_ = file->message_type(15);
  static const int MsgMapObjectLeaveView_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectLeaveView, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectLeaveView, mapobjectid_),
  };
  MsgMapObjectLeaveView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapObjectLeaveView_descriptor_,
      MsgMapObjectLeaveView::default_instance_,
      MsgMapObjectLeaveView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectLeaveView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectLeaveView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapObjectLeaveView));
  MsgMapClientCreateMapDoneC2G_descriptor_ = file->message_type(16);
  static const int MsgMapClientCreateMapDoneC2G_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapClientCreateMapDoneC2G, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapClientCreateMapDoneC2G, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapClientCreateMapDoneC2G, ver_),
  };
  MsgMapClientCreateMapDoneC2G_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapClientCreateMapDoneC2G_descriptor_,
      MsgMapClientCreateMapDoneC2G::default_instance_,
      MsgMapClientCreateMapDoneC2G_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapClientCreateMapDoneC2G, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapClientCreateMapDoneC2G, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapClientCreateMapDoneC2G));
  MsgMapClientUploadDoneReq_descriptor_ = file->message_type(17);
  static const int MsgMapClientUploadDoneReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapClientUploadDoneReq, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapClientUploadDoneReq, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapClientUploadDoneReq, ver_),
  };
  MsgMapClientUploadDoneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapClientUploadDoneReq_descriptor_,
      MsgMapClientUploadDoneReq::default_instance_,
      MsgMapClientUploadDoneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapClientUploadDoneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapClientUploadDoneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapClientUploadDoneReq));
  MsgMapSrvLoadDone_descriptor_ = file->message_type(18);
  static const int MsgMapSrvLoadDone_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapSrvLoadDone, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapSrvLoadDone, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapSrvLoadDone, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapSrvLoadDone, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapSrvLoadDone, lastclientuploaddataserial_),
  };
  MsgMapSrvLoadDone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapSrvLoadDone_descriptor_,
      MsgMapSrvLoadDone::default_instance_,
      MsgMapSrvLoadDone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapSrvLoadDone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapSrvLoadDone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapSrvLoadDone));
  MsgMapObjectPreAttack_S2C_descriptor_ = file->message_type(19);
  static const int MsgMapObjectPreAttack_S2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectPreAttack_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectPreAttack_S2C, sourceobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectPreAttack_S2C, servertimems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectPreAttack_S2C, target_obj_id_),
  };
  MsgMapObjectPreAttack_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapObjectPreAttack_S2C_descriptor_,
      MsgMapObjectPreAttack_S2C::default_instance_,
      MsgMapObjectPreAttack_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectPreAttack_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectPreAttack_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapObjectPreAttack_S2C));
  MsgMapObjectUnderAttackG2C_descriptor_ = file->message_type(20);
  static const int MsgMapObjectUnderAttackG2C_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectUnderAttackG2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectUnderAttackG2C, sourceobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectUnderAttackG2C, servertimems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectUnderAttackG2C, targetinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectUnderAttackG2C, idhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectUnderAttackG2C, is_player_attack_),
  };
  MsgMapObjectUnderAttackG2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapObjectUnderAttackG2C_descriptor_,
      MsgMapObjectUnderAttackG2C::default_instance_,
      MsgMapObjectUnderAttackG2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectUnderAttackG2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjectUnderAttackG2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapObjectUnderAttackG2C));
  MsgCharacterDeadS2C_descriptor_ = file->message_type(21);
  static const int MsgCharacterDeadS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterDeadS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterDeadS2C, mapobjectid_),
  };
  MsgCharacterDeadS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCharacterDeadS2C_descriptor_,
      MsgCharacterDeadS2C::default_instance_,
      MsgCharacterDeadS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterDeadS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterDeadS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCharacterDeadS2C));
  MsgCharacterReviveS2C_descriptor_ = file->message_type(22);
  static const int MsgCharacterReviveS2C_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterReviveS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterReviveS2C, mapobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterReviveS2C, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterReviveS2C, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterReviveS2C, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterReviveS2C, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterReviveS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterReviveS2C, iggid_),
  };
  MsgCharacterReviveS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCharacterReviveS2C_descriptor_,
      MsgCharacterReviveS2C::default_instance_,
      MsgCharacterReviveS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterReviveS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterReviveS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCharacterReviveS2C));
  MsgSyncPlayerDataToMapServerDone_GS2MS_descriptor_ = file->message_type(23);
  static const int MsgSyncPlayerDataToMapServerDone_GS2MS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayerDataToMapServerDone_GS2MS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayerDataToMapServerDone_GS2MS, iggid_),
  };
  MsgSyncPlayerDataToMapServerDone_GS2MS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSyncPlayerDataToMapServerDone_GS2MS_descriptor_,
      MsgSyncPlayerDataToMapServerDone_GS2MS::default_instance_,
      MsgSyncPlayerDataToMapServerDone_GS2MS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayerDataToMapServerDone_GS2MS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlayerDataToMapServerDone_GS2MS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSyncPlayerDataToMapServerDone_GS2MS));
  MsgTriggerGateC2S_descriptor_ = file->message_type(24);
  static const int MsgTriggerGateC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerGateC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerGateC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerGateC2S, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerGateC2S, targetid_),
  };
  MsgTriggerGateC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTriggerGateC2S_descriptor_,
      MsgTriggerGateC2S::default_instance_,
      MsgTriggerGateC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerGateC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerGateC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTriggerGateC2S));
  MsgTriggerGateS2C_descriptor_ = file->message_type(25);
  static const int MsgTriggerGateS2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerGateS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerGateS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerGateS2C, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerGateS2C, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerGateS2C, result_),
  };
  MsgTriggerGateS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTriggerGateS2C_descriptor_,
      MsgTriggerGateS2C::default_instance_,
      MsgTriggerGateS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerGateS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerGateS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTriggerGateS2C));
  MsgTriggerGateS2C_Result_descriptor_ = MsgTriggerGateS2C_descriptor_->enum_type(0);
  MsgGatePoint_descriptor_ = file->message_type(26);
  static const int MsgGatePoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatePoint, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatePoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatePoint, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatePoint, targets_),
  };
  MsgGatePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGatePoint_descriptor_,
      MsgGatePoint::default_instance_,
      MsgGatePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGatePoint));
  MsgGatePoint_Target_descriptor_ = MsgGatePoint_descriptor_->nested_type(0);
  static const int MsgGatePoint_Target_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatePoint_Target, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatePoint_Target, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatePoint_Target, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatePoint_Target, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatePoint_Target, pos_),
  };
  MsgGatePoint_Target_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGatePoint_Target_descriptor_,
      MsgGatePoint_Target::default_instance_,
      MsgGatePoint_Target_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatePoint_Target, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatePoint_Target, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGatePoint_Target));
  MsgMapCfgInfo_descriptor_ = file->message_type(27);
  static const int MsgMapCfgInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, plant_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, gatepoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, forbiddenspawner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, forbiddenbuild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, layouts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, popboxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, safepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, popsavedboxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, vehicles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, airships_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, clientmode_),
  };
  MsgMapCfgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapCfgInfo_descriptor_,
      MsgMapCfgInfo::default_instance_,
      MsgMapCfgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapCfgInfo));
  MsgMapCfgInfo_Layout_descriptor_ = MsgMapCfgInfo_descriptor_->nested_type(0);
  static const int MsgMapCfgInfo_Layout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Layout, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Layout, area_),
  };
  MsgMapCfgInfo_Layout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapCfgInfo_Layout_descriptor_,
      MsgMapCfgInfo_Layout::default_instance_,
      MsgMapCfgInfo_Layout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Layout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Layout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapCfgInfo_Layout));
  MsgMapCfgInfo_Layout_Type_descriptor_ = MsgMapCfgInfo_Layout_descriptor_->enum_type(0);
  MsgMapCfgInfo_PopBoxBase_descriptor_ = MsgMapCfgInfo_descriptor_->nested_type(1);
  static const int MsgMapCfgInfo_PopBoxBase_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase, triggerdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase, mobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase, builds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase, userdatas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase, uuid_),
  };
  MsgMapCfgInfo_PopBoxBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapCfgInfo_PopBoxBase_descriptor_,
      MsgMapCfgInfo_PopBoxBase::default_instance_,
      MsgMapCfgInfo_PopBoxBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapCfgInfo_PopBoxBase));
  MsgMapCfgInfo_PopBoxBase_Pop_descriptor_ = MsgMapCfgInfo_PopBoxBase_descriptor_->nested_type(0);
  static const int MsgMapCfgInfo_PopBoxBase_Pop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_Pop, defid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_Pop, mobmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_Pop, poptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_Pop, prob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_Pop, poparea_),
  };
  MsgMapCfgInfo_PopBoxBase_Pop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapCfgInfo_PopBoxBase_Pop_descriptor_,
      MsgMapCfgInfo_PopBoxBase_Pop::default_instance_,
      MsgMapCfgInfo_PopBoxBase_Pop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_Pop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_Pop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapCfgInfo_PopBoxBase_Pop));
  MsgMapCfgInfo_PopBoxBase_Mob_descriptor_ = MsgMapCfgInfo_PopBoxBase_descriptor_->nested_type(1);
  static const int MsgMapCfgInfo_PopBoxBase_Mob_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_Mob, this__),
  };
  MsgMapCfgInfo_PopBoxBase_Mob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapCfgInfo_PopBoxBase_Mob_descriptor_,
      MsgMapCfgInfo_PopBoxBase_Mob::default_instance_,
      MsgMapCfgInfo_PopBoxBase_Mob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_Mob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_Mob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapCfgInfo_PopBoxBase_Mob));
  MsgMapCfgInfo_PopBoxBase_Build_descriptor_ = MsgMapCfgInfo_PopBoxBase_descriptor_->nested_type(2);
  static const int MsgMapCfgInfo_PopBoxBase_Build_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_Build, this__),
  };
  MsgMapCfgInfo_PopBoxBase_Build_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapCfgInfo_PopBoxBase_Build_descriptor_,
      MsgMapCfgInfo_PopBoxBase_Build::default_instance_,
      MsgMapCfgInfo_PopBoxBase_Build_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_Build, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_Build, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapCfgInfo_PopBoxBase_Build));
  MsgMapCfgInfo_PopBoxBase_UserData_descriptor_ = MsgMapCfgInfo_PopBoxBase_descriptor_->nested_type(3);
  static const int MsgMapCfgInfo_PopBoxBase_UserData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_UserData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_UserData, value_),
  };
  MsgMapCfgInfo_PopBoxBase_UserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapCfgInfo_PopBoxBase_UserData_descriptor_,
      MsgMapCfgInfo_PopBoxBase_UserData::default_instance_,
      MsgMapCfgInfo_PopBoxBase_UserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_UserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBoxBase_UserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapCfgInfo_PopBoxBase_UserData));
  MsgMapCfgInfo_PopBox_descriptor_ = MsgMapCfgInfo_descriptor_->nested_type(2);
  static const int MsgMapCfgInfo_PopBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBox, this__),
  };
  MsgMapCfgInfo_PopBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapCfgInfo_PopBox_descriptor_,
      MsgMapCfgInfo_PopBox::default_instance_,
      MsgMapCfgInfo_PopBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapCfgInfo_PopBox));
  MsgMapCfgInfo_PopSavedBox_descriptor_ = MsgMapCfgInfo_descriptor_->nested_type(3);
  static const int MsgMapCfgInfo_PopSavedBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopSavedBox, this__),
  };
  MsgMapCfgInfo_PopSavedBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapCfgInfo_PopSavedBox_descriptor_,
      MsgMapCfgInfo_PopSavedBox::default_instance_,
      MsgMapCfgInfo_PopSavedBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopSavedBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_PopSavedBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapCfgInfo_PopSavedBox));
  MsgMapCfgInfo_Vehicle_descriptor_ = MsgMapCfgInfo_descriptor_->nested_type(4);
  static const int MsgMapCfgInfo_Vehicle_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Vehicle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Vehicle, defid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Vehicle, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Vehicle, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Vehicle, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Vehicle, size_),
  };
  MsgMapCfgInfo_Vehicle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapCfgInfo_Vehicle_descriptor_,
      MsgMapCfgInfo_Vehicle::default_instance_,
      MsgMapCfgInfo_Vehicle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Vehicle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Vehicle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapCfgInfo_Vehicle));
  MsgMapCfgInfo_Vehicle_Type_descriptor_ = MsgMapCfgInfo_Vehicle_descriptor_->enum_type(0);
  MsgMapCfgInfo_Airship_descriptor_ = MsgMapCfgInfo_descriptor_->nested_type(5);
  static const int MsgMapCfgInfo_Airship_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Airship, coord_),
  };
  MsgMapCfgInfo_Airship_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapCfgInfo_Airship_descriptor_,
      MsgMapCfgInfo_Airship::default_instance_,
      MsgMapCfgInfo_Airship_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Airship, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapCfgInfo_Airship, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapCfgInfo_Airship));
  MsgGateTargetMS2GS_descriptor_ = file->message_type(28);
  static const int MsgGateTargetMS2GS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGateTargetMS2GS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGateTargetMS2GS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGateTargetMS2GS, target_),
  };
  MsgGateTargetMS2GS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGateTargetMS2GS_descriptor_,
      MsgGateTargetMS2GS::default_instance_,
      MsgGateTargetMS2GS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGateTargetMS2GS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGateTargetMS2GS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGateTargetMS2GS));
  MsgJoinMap_descriptor_ = file->message_type(29);
  static const int MsgJoinMap_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, maptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, mapuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, returndungeon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, mapserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, clientmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, dbkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, game_srv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, proxy_svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, last_map_srv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, idtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, bloginentermap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, game_id_),
  };
  MsgJoinMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJoinMap_descriptor_,
      MsgJoinMap::default_instance_,
      MsgJoinMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJoinMap));
  MsgJoinMapRs_MS2GS_descriptor_ = file->message_type(30);
  static const int MsgJoinMapRs_MS2GS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs_MS2GS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs_MS2GS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs_MS2GS, map_server_id_),
  };
  MsgJoinMapRs_MS2GS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJoinMapRs_MS2GS_descriptor_,
      MsgJoinMapRs_MS2GS::default_instance_,
      MsgJoinMapRs_MS2GS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs_MS2GS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs_MS2GS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJoinMapRs_MS2GS));
  MsgJoinMapRs_descriptor_ = file->message_type(31);
  static const int MsgJoinMapRs_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, mapobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, emode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, timerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, mapuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, maxmp_),
  };
  MsgJoinMapRs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJoinMapRs_descriptor_,
      MsgJoinMapRs::default_instance_,
      MsgJoinMapRs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinMapRs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJoinMapRs));
  MsgQuitMapC2S_descriptor_ = file->message_type(32);
  static const int MsgQuitMapC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuitMapC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuitMapC2S, iggid_),
  };
  MsgQuitMapC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQuitMapC2S_descriptor_,
      MsgQuitMapC2S::default_instance_,
      MsgQuitMapC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuitMapC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuitMapC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQuitMapC2S));
  MsgEnterPublicMapC2S_descriptor_ = file->message_type(33);
  static const int MsgEnterPublicMapC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterPublicMapC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterPublicMapC2S, iggid_),
  };
  MsgEnterPublicMapC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgEnterPublicMapC2S_descriptor_,
      MsgEnterPublicMapC2S::default_instance_,
      MsgEnterPublicMapC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterPublicMapC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterPublicMapC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgEnterPublicMapC2S));
  MsgObjectS2C_descriptor_ = file->message_type(34);
  static const int MsgObjectS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectS2C, mapobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectS2C, group_),
  };
  MsgObjectS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgObjectS2C_descriptor_,
      MsgObjectS2C::default_instance_,
      MsgObjectS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgObjectS2C));
  MsgMapObjMoveS2C_descriptor_ = file->message_type(35);
  static const int MsgMapObjMoveS2C_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjMoveS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjMoveS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjMoveS2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjMoveS2C, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjMoveS2C, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjMoveS2C, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjMoveS2C, target_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjMoveS2C, target_pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjMoveS2C, caster_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjMoveS2C, caster_pos_y_),
  };
  MsgMapObjMoveS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapObjMoveS2C_descriptor_,
      MsgMapObjMoveS2C::default_instance_,
      MsgMapObjMoveS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjMoveS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapObjMoveS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapObjMoveS2C));
  MsgMapLayoutInfo_MS2C_descriptor_ = file->message_type(36);
  static const int MsgMapLayoutInfo_MS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapLayoutInfo_MS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapLayoutInfo_MS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapLayoutInfo_MS2C, layout_room_),
  };
  MsgMapLayoutInfo_MS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapLayoutInfo_MS2C_descriptor_,
      MsgMapLayoutInfo_MS2C::default_instance_,
      MsgMapLayoutInfo_MS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapLayoutInfo_MS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapLayoutInfo_MS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapLayoutInfo_MS2C));
  MsgMapLayoutInfo_MS2C_LayoutRoomInfo_descriptor_ = MsgMapLayoutInfo_MS2C_descriptor_->nested_type(0);
  static const int MsgMapLayoutInfo_MS2C_LayoutRoomInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapLayoutInfo_MS2C_LayoutRoomInfo, topleft_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapLayoutInfo_MS2C_LayoutRoomInfo, topleft_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapLayoutInfo_MS2C_LayoutRoomInfo, bottomright_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapLayoutInfo_MS2C_LayoutRoomInfo, bottomright_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapLayoutInfo_MS2C_LayoutRoomInfo, room_name_),
  };
  MsgMapLayoutInfo_MS2C_LayoutRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapLayoutInfo_MS2C_LayoutRoomInfo_descriptor_,
      MsgMapLayoutInfo_MS2C_LayoutRoomInfo::default_instance_,
      MsgMapLayoutInfo_MS2C_LayoutRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapLayoutInfo_MS2C_LayoutRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapLayoutInfo_MS2C_LayoutRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapLayoutInfo_MS2C_LayoutRoomInfo));
  MsgRequestSyncDataGS2MS_descriptor_ = file->message_type(37);
  static const int MsgRequestSyncDataGS2MS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestSyncDataGS2MS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestSyncDataGS2MS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestSyncDataGS2MS, bclose_),
  };
  MsgRequestSyncDataGS2MS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRequestSyncDataGS2MS_descriptor_,
      MsgRequestSyncDataGS2MS::default_instance_,
      MsgRequestSyncDataGS2MS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestSyncDataGS2MS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestSyncDataGS2MS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRequestSyncDataGS2MS));
  MsgSyncTowerBuildData_descriptor_ = file->message_type(38);
  static const int MsgSyncTowerBuildData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncTowerBuildData, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncTowerBuildData, tower_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncTowerBuildData, op_),
  };
  MsgSyncTowerBuildData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSyncTowerBuildData_descriptor_,
      MsgSyncTowerBuildData::default_instance_,
      MsgSyncTowerBuildData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncTowerBuildData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncTowerBuildData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSyncTowerBuildData));
  MsgPlantUserData_descriptor_ = file->message_type(39);
  static const int MsgPlantUserData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserData, plant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserData, plant_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserData, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserData, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserData, grow_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserData, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserData, grow_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserData, grow_time_),
  };
  MsgPlantUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantUserData_descriptor_,
      MsgPlantUserData::default_instance_,
      MsgPlantUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantUserData));
  MsgSyncPlantUserData_descriptor_ = file->message_type(40);
  static const int MsgSyncPlantUserData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlantUserData, plant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlantUserData, plant_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlantUserData, op_),
  };
  MsgSyncPlantUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSyncPlantUserData_descriptor_,
      MsgSyncPlantUserData::default_instance_,
      MsgSyncPlantUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlantUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncPlantUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSyncPlantUserData));
  MsgTriggerProbabilityData_descriptor_ = file->message_type(41);
  static const int MsgTriggerProbabilityData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerProbabilityData, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerProbabilityData, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerProbabilityData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerProbabilityData, dirty_),
  };
  MsgTriggerProbabilityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTriggerProbabilityData_descriptor_,
      MsgTriggerProbabilityData::default_instance_,
      MsgTriggerProbabilityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerProbabilityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTriggerProbabilityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTriggerProbabilityData));
  MsgLSSurvivalEventFlagData_descriptor_ = file->message_type(42);
  static const int MsgLSSurvivalEventFlagData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLSSurvivalEventFlagData, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLSSurvivalEventFlagData, value_),
  };
  MsgLSSurvivalEventFlagData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLSSurvivalEventFlagData_descriptor_,
      MsgLSSurvivalEventFlagData::default_instance_,
      MsgLSSurvivalEventFlagData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLSSurvivalEventFlagData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLSSurvivalEventFlagData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLSSurvivalEventFlagData));
  MsgSyncFeedingProductSpeed_descriptor_ = file->message_type(43);
  static const int MsgSyncFeedingProductSpeed_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncFeedingProductSpeed, iifenceuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncFeedingProductSpeed, iianimaluuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncFeedingProductSpeed, ispeedproduct1sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncFeedingProductSpeed, ispeedproduct2sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncFeedingProductSpeed, ispeedhugsec_),
  };
  MsgSyncFeedingProductSpeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSyncFeedingProductSpeed_descriptor_,
      MsgSyncFeedingProductSpeed::default_instance_,
      MsgSyncFeedingProductSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncFeedingProductSpeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncFeedingProductSpeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSyncFeedingProductSpeed));
  MsgReportKillMobRequest_descriptor_ = file->message_type(44);
  static const int MsgReportKillMobRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReportKillMobRequest, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReportKillMobRequest, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReportKillMobRequest, mob_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReportKillMobRequest, map_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReportKillMobRequest, drop_lst_),
  };
  MsgReportKillMobRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReportKillMobRequest_descriptor_,
      MsgReportKillMobRequest::default_instance_,
      MsgReportKillMobRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReportKillMobRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReportKillMobRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReportKillMobRequest));
  MsgSyncClientLocalDataC2S_descriptor_ = file->message_type(45);
  static const int MsgSyncClientLocalDataC2S_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, debug_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, oxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, weaponuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, tooluuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, food_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, map_cache_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, dig_mine_exp_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, dig_plant_exp_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, blockgrids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, protectors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, mobkillcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, achievedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, towerbuild_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, plant_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, trigger_probability_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, survival_event_flag_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, survivaltrigcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, npc_dak_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, buff_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, task_data_),
  };
  MsgSyncClientLocalDataC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSyncClientLocalDataC2S_descriptor_,
      MsgSyncClientLocalDataC2S::default_instance_,
      MsgSyncClientLocalDataC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSyncClientLocalDataC2S));
  MsgSyncClientLocalDataC2S_BlockGrid_descriptor_ = MsgSyncClientLocalDataC2S_descriptor_->nested_type(0);
  static const int MsgSyncClientLocalDataC2S_BlockGrid_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S_BlockGrid, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S_BlockGrid, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S_BlockGrid, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S_BlockGrid, iswaterfog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S_BlockGrid, debug_info_),
  };
  MsgSyncClientLocalDataC2S_BlockGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSyncClientLocalDataC2S_BlockGrid_descriptor_,
      MsgSyncClientLocalDataC2S_BlockGrid::default_instance_,
      MsgSyncClientLocalDataC2S_BlockGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S_BlockGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S_BlockGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSyncClientLocalDataC2S_BlockGrid));
  MsgSyncClientLocalDataC2S_MobKillCount_descriptor_ = MsgSyncClientLocalDataC2S_descriptor_->nested_type(1);
  static const int MsgSyncClientLocalDataC2S_MobKillCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S_MobKillCount, dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S_MobKillCount, count_),
  };
  MsgSyncClientLocalDataC2S_MobKillCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSyncClientLocalDataC2S_MobKillCount_descriptor_,
      MsgSyncClientLocalDataC2S_MobKillCount::default_instance_,
      MsgSyncClientLocalDataC2S_MobKillCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S_MobKillCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataC2S_MobKillCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSyncClientLocalDataC2S_MobKillCount));
  MsgSyncClientLocalDataS2C_descriptor_ = file->message_type(46);
  static const int MsgSyncClientLocalDataS2C_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataS2C, serail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataS2C, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataS2C, flag_),
  };
  MsgSyncClientLocalDataS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSyncClientLocalDataS2C_descriptor_,
      MsgSyncClientLocalDataS2C::default_instance_,
      MsgSyncClientLocalDataS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSyncClientLocalDataS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSyncClientLocalDataS2C));
  MsgUpdateTriggerProbabilityData_descriptor_ = file->message_type(47);
  static const int MsgUpdateTriggerProbabilityData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateTriggerProbabilityData, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateTriggerProbabilityData, data_),
  };
  MsgUpdateTriggerProbabilityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUpdateTriggerProbabilityData_descriptor_,
      MsgUpdateTriggerProbabilityData::default_instance_,
      MsgUpdateTriggerProbabilityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateTriggerProbabilityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateTriggerProbabilityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUpdateTriggerProbabilityData));
  MsgRemovePrivateMapMGS2MS_descriptor_ = file->message_type(48);
  static const int MsgRemovePrivateMapMGS2MS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemovePrivateMapMGS2MS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemovePrivateMapMGS2MS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemovePrivateMapMGS2MS, mapid_),
  };
  MsgRemovePrivateMapMGS2MS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRemovePrivateMapMGS2MS_descriptor_,
      MsgRemovePrivateMapMGS2MS::default_instance_,
      MsgRemovePrivateMapMGS2MS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemovePrivateMapMGS2MS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemovePrivateMapMGS2MS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRemovePrivateMapMGS2MS));
  MsgRemovePrivateMapResultMS2MGS_descriptor_ = file->message_type(49);
  static const int MsgRemovePrivateMapResultMS2MGS_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemovePrivateMapResultMS2MGS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemovePrivateMapResultMS2MGS, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemovePrivateMapResultMS2MGS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemovePrivateMapResultMS2MGS, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemovePrivateMapResultMS2MGS, mapserverid_),
  };
  MsgRemovePrivateMapResultMS2MGS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRemovePrivateMapResultMS2MGS_descriptor_,
      MsgRemovePrivateMapResultMS2MGS::default_instance_,
      MsgRemovePrivateMapResultMS2MGS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemovePrivateMapResultMS2MGS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemovePrivateMapResultMS2MGS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRemovePrivateMapResultMS2MGS));
  MsgRemovePrivateMapResultMS2MGS_RESULT_descriptor_ = MsgRemovePrivateMapResultMS2MGS_descriptor_->enum_type(0);
  MsgNotifyClearDirtyGS2MS_descriptor_ = file->message_type(50);
  static const int MsgNotifyClearDirtyGS2MS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyClearDirtyGS2MS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyClearDirtyGS2MS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyClearDirtyGS2MS, lastsynctogameservertime_),
  };
  MsgNotifyClearDirtyGS2MS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNotifyClearDirtyGS2MS_descriptor_,
      MsgNotifyClearDirtyGS2MS::default_instance_,
      MsgNotifyClearDirtyGS2MS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyClearDirtyGS2MS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyClearDirtyGS2MS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNotifyClearDirtyGS2MS));
  MsgCharacterBeBeatBackS2C_descriptor_ = file->message_type(51);
  static const int MsgCharacterBeBeatBackS2C_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterBeBeatBackS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterBeBeatBackS2C, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterBeBeatBackS2C, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterBeBeatBackS2C, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterBeBeatBackS2C, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterBeBeatBackS2C, cast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterBeBeatBackS2C, serialid_),
  };
  MsgCharacterBeBeatBackS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCharacterBeBeatBackS2C_descriptor_,
      MsgCharacterBeBeatBackS2C::default_instance_,
      MsgCharacterBeBeatBackS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterBeBeatBackS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCharacterBeBeatBackS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCharacterBeBeatBackS2C));
  MsgPlayerReleaseByMapServer_descriptor_ = file->message_type(52);
  static const int MsgPlayerReleaseByMapServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerReleaseByMapServer, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerReleaseByMapServer, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerReleaseByMapServer, server_id_),
  };
  MsgPlayerReleaseByMapServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerReleaseByMapServer_descriptor_,
      MsgPlayerReleaseByMapServer::default_instance_,
      MsgPlayerReleaseByMapServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerReleaseByMapServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerReleaseByMapServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerReleaseByMapServer));
  MsgMapServerRequestLockPlayer_descriptor_ = file->message_type(53);
  static const int MsgMapServerRequestLockPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerRequestLockPlayer, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerRequestLockPlayer, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerRequestLockPlayer, server_id_),
  };
  MsgMapServerRequestLockPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapServerRequestLockPlayer_descriptor_,
      MsgMapServerRequestLockPlayer::default_instance_,
      MsgMapServerRequestLockPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerRequestLockPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerRequestLockPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapServerRequestLockPlayer));
  MsgGameServerNotifyReleasePlayer_descriptor_ = file->message_type(54);
  static const int MsgGameServerNotifyReleasePlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGameServerNotifyReleasePlayer, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGameServerNotifyReleasePlayer, iggid_),
  };
  MsgGameServerNotifyReleasePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGameServerNotifyReleasePlayer_descriptor_,
      MsgGameServerNotifyReleasePlayer::default_instance_,
      MsgGameServerNotifyReleasePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGameServerNotifyReleasePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGameServerNotifyReleasePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGameServerNotifyReleasePlayer));
  MsgMapServerInfoSync_descriptor_ = file->message_type(55);
  static const int MsgMapServerInfoSync_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerInfoSync, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerInfoSync, srv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerInfoSync, total_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerInfoSync, total_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerInfoSync, total_dungeon_),
  };
  MsgMapServerInfoSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapServerInfoSync_descriptor_,
      MsgMapServerInfoSync::default_instance_,
      MsgMapServerInfoSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerInfoSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerInfoSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapServerInfoSync));
  EN_GAME_MAP_MODE_descriptor_ = file->enum_type(0);
  REVIVE_RES_descriptor_ = file->enum_type(1);
  JOIN_MAP_RS_descriptor_ = file->enum_type(2);
  SYNC_CLIENT_LOCAL_DATA_STATE_descriptor_ = file->enum_type(3);
  SYNC_CLIENT_LOCAL_DATA_FLAG_descriptor_ = file->enum_type(4);
  SYNC_TOWERBUILD_OP_descriptor_ = file->enum_type(5);
  SYNC_PLANT_OP_descriptor_ = file->enum_type(6);
  SYNC_BUILDDATA_OP_descriptor_ = file->enum_type(7);
  SYNC_CLIENT_LOCAL_DATA_RES_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgMapServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerBaseData_descriptor_, &MsgPlayerBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerEndless_descriptor_, &MsgPlayerEndless::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSyncPlayToGS_descriptor_, &MsgSyncPlayToGS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJoinMapG2C_descriptor_, &MsgJoinMapG2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQuitMap_descriptor_, &MsgQuitMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQuitMapNtf_S2S_descriptor_, &MsgQuitMapNtf_S2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueyMap_descriptor_, &MsgQueyMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapInfo_descriptor_, &MsgMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapBlock_descriptor_, &MsgMapBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapBlockToClient_descriptor_, &MsgMapBlockToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapBlockToClient_BlockBatchData_descriptor_, &MsgMapBlockToClient_BlockBatchData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMovement_descriptor_, &PlayerMovement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNotifyPlayerMovementC2G_descriptor_, &MsgNotifyPlayerMovementC2G::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNotifyPlayerMovementG2C_descriptor_, &MsgNotifyPlayerMovementG2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerAppearance_descriptor_, &MsgPlayerAppearance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMagicObjectAppearance_descriptor_, &MsgMagicObjectAppearance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapObjectLeaveView_descriptor_, &MsgMapObjectLeaveView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapClientCreateMapDoneC2G_descriptor_, &MsgMapClientCreateMapDoneC2G::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapClientUploadDoneReq_descriptor_, &MsgMapClientUploadDoneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapSrvLoadDone_descriptor_, &MsgMapSrvLoadDone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapObjectPreAttack_S2C_descriptor_, &MsgMapObjectPreAttack_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapObjectUnderAttackG2C_descriptor_, &MsgMapObjectUnderAttackG2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCharacterDeadS2C_descriptor_, &MsgCharacterDeadS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCharacterReviveS2C_descriptor_, &MsgCharacterReviveS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSyncPlayerDataToMapServerDone_GS2MS_descriptor_, &MsgSyncPlayerDataToMapServerDone_GS2MS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTriggerGateC2S_descriptor_, &MsgTriggerGateC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTriggerGateS2C_descriptor_, &MsgTriggerGateS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGatePoint_descriptor_, &MsgGatePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGatePoint_Target_descriptor_, &MsgGatePoint_Target::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapCfgInfo_descriptor_, &MsgMapCfgInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapCfgInfo_Layout_descriptor_, &MsgMapCfgInfo_Layout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapCfgInfo_PopBoxBase_descriptor_, &MsgMapCfgInfo_PopBoxBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapCfgInfo_PopBoxBase_Pop_descriptor_, &MsgMapCfgInfo_PopBoxBase_Pop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapCfgInfo_PopBoxBase_Mob_descriptor_, &MsgMapCfgInfo_PopBoxBase_Mob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapCfgInfo_PopBoxBase_Build_descriptor_, &MsgMapCfgInfo_PopBoxBase_Build::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapCfgInfo_PopBoxBase_UserData_descriptor_, &MsgMapCfgInfo_PopBoxBase_UserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapCfgInfo_PopBox_descriptor_, &MsgMapCfgInfo_PopBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapCfgInfo_PopSavedBox_descriptor_, &MsgMapCfgInfo_PopSavedBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapCfgInfo_Vehicle_descriptor_, &MsgMapCfgInfo_Vehicle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapCfgInfo_Airship_descriptor_, &MsgMapCfgInfo_Airship::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGateTargetMS2GS_descriptor_, &MsgGateTargetMS2GS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJoinMap_descriptor_, &MsgJoinMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJoinMapRs_MS2GS_descriptor_, &MsgJoinMapRs_MS2GS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJoinMapRs_descriptor_, &MsgJoinMapRs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQuitMapC2S_descriptor_, &MsgQuitMapC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgEnterPublicMapC2S_descriptor_, &MsgEnterPublicMapC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgObjectS2C_descriptor_, &MsgObjectS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapObjMoveS2C_descriptor_, &MsgMapObjMoveS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapLayoutInfo_MS2C_descriptor_, &MsgMapLayoutInfo_MS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapLayoutInfo_MS2C_LayoutRoomInfo_descriptor_, &MsgMapLayoutInfo_MS2C_LayoutRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRequestSyncDataGS2MS_descriptor_, &MsgRequestSyncDataGS2MS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSyncTowerBuildData_descriptor_, &MsgSyncTowerBuildData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantUserData_descriptor_, &MsgPlantUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSyncPlantUserData_descriptor_, &MsgSyncPlantUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTriggerProbabilityData_descriptor_, &MsgTriggerProbabilityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLSSurvivalEventFlagData_descriptor_, &MsgLSSurvivalEventFlagData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSyncFeedingProductSpeed_descriptor_, &MsgSyncFeedingProductSpeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReportKillMobRequest_descriptor_, &MsgReportKillMobRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSyncClientLocalDataC2S_descriptor_, &MsgSyncClientLocalDataC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSyncClientLocalDataC2S_BlockGrid_descriptor_, &MsgSyncClientLocalDataC2S_BlockGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSyncClientLocalDataC2S_MobKillCount_descriptor_, &MsgSyncClientLocalDataC2S_MobKillCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSyncClientLocalDataS2C_descriptor_, &MsgSyncClientLocalDataS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUpdateTriggerProbabilityData_descriptor_, &MsgUpdateTriggerProbabilityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRemovePrivateMapMGS2MS_descriptor_, &MsgRemovePrivateMapMGS2MS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRemovePrivateMapResultMS2MGS_descriptor_, &MsgRemovePrivateMapResultMS2MGS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNotifyClearDirtyGS2MS_descriptor_, &MsgNotifyClearDirtyGS2MS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCharacterBeBeatBackS2C_descriptor_, &MsgCharacterBeBeatBackS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerReleaseByMapServer_descriptor_, &MsgPlayerReleaseByMapServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapServerRequestLockPlayer_descriptor_, &MsgMapServerRequestLockPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGameServerNotifyReleasePlayer_descriptor_, &MsgGameServerNotifyReleasePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapServerInfoSync_descriptor_, &MsgMapServerInfoSync::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgMapServer_2eproto() {
  delete MsgPlayerBaseData::default_instance_;
  delete MsgPlayerBaseData_reflection_;
  delete MsgPlayerEndless::default_instance_;
  delete MsgPlayerEndless_reflection_;
  delete MsgSyncPlayToGS::default_instance_;
  delete MsgSyncPlayToGS_reflection_;
  delete MsgJoinMapG2C::default_instance_;
  delete MsgJoinMapG2C_reflection_;
  delete MsgQuitMap::default_instance_;
  delete MsgQuitMap_reflection_;
  delete MsgQuitMapNtf_S2S::default_instance_;
  delete MsgQuitMapNtf_S2S_reflection_;
  delete MsgQueyMap::default_instance_;
  delete MsgQueyMap_reflection_;
  delete MsgMapInfo::default_instance_;
  delete MsgMapInfo_reflection_;
  delete MsgMapBlock::default_instance_;
  delete MsgMapBlock_reflection_;
  delete MsgMapBlockToClient::default_instance_;
  delete MsgMapBlockToClient_reflection_;
  delete MsgMapBlockToClient_BlockBatchData::default_instance_;
  delete MsgMapBlockToClient_BlockBatchData_reflection_;
  delete PlayerMovement::default_instance_;
  delete PlayerMovement_reflection_;
  delete MsgNotifyPlayerMovementC2G::default_instance_;
  delete MsgNotifyPlayerMovementC2G_reflection_;
  delete MsgNotifyPlayerMovementG2C::default_instance_;
  delete MsgNotifyPlayerMovementG2C_reflection_;
  delete MsgPlayerAppearance::default_instance_;
  delete MsgPlayerAppearance_reflection_;
  delete MsgMagicObjectAppearance::default_instance_;
  delete MsgMagicObjectAppearance_reflection_;
  delete MsgMapObjectLeaveView::default_instance_;
  delete MsgMapObjectLeaveView_reflection_;
  delete MsgMapClientCreateMapDoneC2G::default_instance_;
  delete MsgMapClientCreateMapDoneC2G_reflection_;
  delete MsgMapClientUploadDoneReq::default_instance_;
  delete MsgMapClientUploadDoneReq_reflection_;
  delete MsgMapSrvLoadDone::default_instance_;
  delete MsgMapSrvLoadDone_reflection_;
  delete MsgMapObjectPreAttack_S2C::default_instance_;
  delete MsgMapObjectPreAttack_S2C_reflection_;
  delete MsgMapObjectUnderAttackG2C::default_instance_;
  delete MsgMapObjectUnderAttackG2C_reflection_;
  delete MsgCharacterDeadS2C::default_instance_;
  delete MsgCharacterDeadS2C_reflection_;
  delete MsgCharacterReviveS2C::default_instance_;
  delete MsgCharacterReviveS2C_reflection_;
  delete MsgSyncPlayerDataToMapServerDone_GS2MS::default_instance_;
  delete MsgSyncPlayerDataToMapServerDone_GS2MS_reflection_;
  delete MsgTriggerGateC2S::default_instance_;
  delete MsgTriggerGateC2S_reflection_;
  delete MsgTriggerGateS2C::default_instance_;
  delete MsgTriggerGateS2C_reflection_;
  delete MsgGatePoint::default_instance_;
  delete MsgGatePoint_reflection_;
  delete MsgGatePoint_Target::default_instance_;
  delete MsgGatePoint_Target_reflection_;
  delete MsgMapCfgInfo::default_instance_;
  delete MsgMapCfgInfo_reflection_;
  delete MsgMapCfgInfo_Layout::default_instance_;
  delete MsgMapCfgInfo_Layout_reflection_;
  delete MsgMapCfgInfo_PopBoxBase::default_instance_;
  delete MsgMapCfgInfo_PopBoxBase_reflection_;
  delete MsgMapCfgInfo_PopBoxBase_Pop::default_instance_;
  delete MsgMapCfgInfo_PopBoxBase_Pop_reflection_;
  delete MsgMapCfgInfo_PopBoxBase_Mob::default_instance_;
  delete MsgMapCfgInfo_PopBoxBase_Mob_reflection_;
  delete MsgMapCfgInfo_PopBoxBase_Build::default_instance_;
  delete MsgMapCfgInfo_PopBoxBase_Build_reflection_;
  delete MsgMapCfgInfo_PopBoxBase_UserData::default_instance_;
  delete MsgMapCfgInfo_PopBoxBase_UserData_reflection_;
  delete MsgMapCfgInfo_PopBox::default_instance_;
  delete MsgMapCfgInfo_PopBox_reflection_;
  delete MsgMapCfgInfo_PopSavedBox::default_instance_;
  delete MsgMapCfgInfo_PopSavedBox_reflection_;
  delete MsgMapCfgInfo_Vehicle::default_instance_;
  delete MsgMapCfgInfo_Vehicle_reflection_;
  delete MsgMapCfgInfo_Airship::default_instance_;
  delete MsgMapCfgInfo_Airship_reflection_;
  delete MsgGateTargetMS2GS::default_instance_;
  delete MsgGateTargetMS2GS_reflection_;
  delete MsgJoinMap::default_instance_;
  delete MsgJoinMap_reflection_;
  delete MsgJoinMapRs_MS2GS::default_instance_;
  delete MsgJoinMapRs_MS2GS_reflection_;
  delete MsgJoinMapRs::default_instance_;
  delete MsgJoinMapRs_reflection_;
  delete MsgQuitMapC2S::default_instance_;
  delete MsgQuitMapC2S_reflection_;
  delete MsgEnterPublicMapC2S::default_instance_;
  delete MsgEnterPublicMapC2S_reflection_;
  delete MsgObjectS2C::default_instance_;
  delete MsgObjectS2C_reflection_;
  delete MsgMapObjMoveS2C::default_instance_;
  delete MsgMapObjMoveS2C_reflection_;
  delete MsgMapLayoutInfo_MS2C::default_instance_;
  delete MsgMapLayoutInfo_MS2C_reflection_;
  delete MsgMapLayoutInfo_MS2C_LayoutRoomInfo::default_instance_;
  delete MsgMapLayoutInfo_MS2C_LayoutRoomInfo_reflection_;
  delete MsgRequestSyncDataGS2MS::default_instance_;
  delete MsgRequestSyncDataGS2MS_reflection_;
  delete MsgSyncTowerBuildData::default_instance_;
  delete MsgSyncTowerBuildData_reflection_;
  delete MsgPlantUserData::default_instance_;
  delete MsgPlantUserData_reflection_;
  delete MsgSyncPlantUserData::default_instance_;
  delete MsgSyncPlantUserData_reflection_;
  delete MsgTriggerProbabilityData::default_instance_;
  delete MsgTriggerProbabilityData_reflection_;
  delete MsgLSSurvivalEventFlagData::default_instance_;
  delete MsgLSSurvivalEventFlagData_reflection_;
  delete MsgSyncFeedingProductSpeed::default_instance_;
  delete MsgSyncFeedingProductSpeed_reflection_;
  delete MsgReportKillMobRequest::default_instance_;
  delete MsgReportKillMobRequest_reflection_;
  delete MsgSyncClientLocalDataC2S::default_instance_;
  delete MsgSyncClientLocalDataC2S_reflection_;
  delete MsgSyncClientLocalDataC2S_BlockGrid::default_instance_;
  delete MsgSyncClientLocalDataC2S_BlockGrid_reflection_;
  delete MsgSyncClientLocalDataC2S_MobKillCount::default_instance_;
  delete MsgSyncClientLocalDataC2S_MobKillCount_reflection_;
  delete MsgSyncClientLocalDataS2C::default_instance_;
  delete MsgSyncClientLocalDataS2C_reflection_;
  delete MsgUpdateTriggerProbabilityData::default_instance_;
  delete MsgUpdateTriggerProbabilityData_reflection_;
  delete MsgRemovePrivateMapMGS2MS::default_instance_;
  delete MsgRemovePrivateMapMGS2MS_reflection_;
  delete MsgRemovePrivateMapResultMS2MGS::default_instance_;
  delete MsgRemovePrivateMapResultMS2MGS_reflection_;
  delete MsgNotifyClearDirtyGS2MS::default_instance_;
  delete MsgNotifyClearDirtyGS2MS_reflection_;
  delete MsgCharacterBeBeatBackS2C::default_instance_;
  delete MsgCharacterBeBeatBackS2C_reflection_;
  delete MsgPlayerReleaseByMapServer::default_instance_;
  delete MsgPlayerReleaseByMapServer_reflection_;
  delete MsgMapServerRequestLockPlayer::default_instance_;
  delete MsgMapServerRequestLockPlayer_reflection_;
  delete MsgGameServerNotifyReleasePlayer::default_instance_;
  delete MsgGameServerNotifyReleasePlayer_reflection_;
  delete MsgMapServerInfoSync::default_instance_;
  delete MsgMapServerInfoSync_reflection_;
}

void protobuf_AddDesc_MsgMapServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgGameDef_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgBuff_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgItem_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgPlant_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgProtector_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgAchieve_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgBuildTower_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgNpcDak_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgPlayerEvent_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022MsgMapServer.proto\022\005MsgPB\032\rMsgType.pro"
    "to\032\020MsgGameDef.proto\032\rMsgBuff.proto\032\rMsg"
    "Item.proto\032\016MsgPlant.proto\032\022MsgProtector"
    ".proto\032\020MsgAchieve.proto\032\023MsgBuildTower."
    "proto\032\017MsgNpcDak.proto\032\024MsgPlayerEvent.p"
    "roto\"\261\005\n\021MsgPlayerBaseData\022#\n\nprivatePos"
    "\030\001 \001(\0132\017.MsgPB.MsgPoint\022#\n\ndungeonPos\030\002 "
    "\001(\0132\017.MsgPB.MsgPoint\022\n\n\002hp\030\003 \001(\005\022\n\n\002mp\030\004"
    " \001(\005\022\n\n\002lv\030\005 \001(\005\022\013\n\003exp\030\006 \001(\003\022\013\n\003oxy\030\007 \001"
    "(\005\022\014\n\004food\030\010 \001(\005\022\014\n\004coin\030\t \001(\005\022\014\n\004cash\030\n"
    " \001(\005\022\016\n\006ticket\030\013 \001(\005\022\026\n\016firstlogintime\030\014"
    " \001(\003\022,\n\013onhand_item\030\r \001(\0162\027.MsgPB.EQUIP_"
    "PACKET_POS\022\020\n\010nickname\030\016 \001(\t\022\014\n\004face\030\017 \001"
    "(\005\022\r\n\005prihp\030\020 \001(\005\022\r\n\005primp\030\021 \001(\005\022\017\n\007mapu"
    "uid\030\022 \001(\003\022\024\n\014curdungeonid\030\023 \001(\005\022\021\n\tlotty"
    "time\030\024 \001(\003\022\021\n\tsequipcos\030\031 \001(\t\022\016\n\006gender\030"
    "\032 \001(\005\022\021\n\tskinColor\030\033 \001(\005\022\014\n\004hair\030\034 \001(\005\022\021"
    "\n\thairColor\030\035 \001(\005\022\026\n\016depositPotTime\030\036 \001("
    "\003\022\016\n\006device\030\037 \001(\t\022\"\n\032lastClientUploadDat"
    "aSerial\030  \001(\003\022\r\n\005dirty\030! \001(\003\022\024\n\014mail_ver"
    "sion\030\" \001(\003\022#\n\033lastSaveClientLocalDataTim"
    "e\030# \001(\003\022\027\n\017lastUpgradeTime\030$ \001(\003\022\026\n\016clie"
    "nt_version\030% \001(\005\"\203\002\n\020MsgPlayerEndless\022\r\n"
    "\005iggid\030\001 \001(\003\022\013\n\003lev\030\002 \001(\005\022\013\n\003exp\030\003 \001(\003\022\014"
    "\n\004coin\030\004 \001(\005\022\023\n\013sattrinhert\030\005 \001(\t\022\021\n\trev"
    "ivenum\030\006 \001(\005\022\n\n\002hp\030\007 \001(\005\022\n\n\002mp\030\010 \001(\005\022\016\n\006"
    "gamble\030\t \001(\005\022\r\n\005faith\030\n \001(\005\022\026\n\016endless_u"
    "nlock\030\013 \001(\t\022\r\n\005piece\030\014 \001(\005\022\020\n\010tempdata\030\r"
    " \001(\t\022\021\n\tcalllayer\030\016 \001(\005\022\r\n\005dirty\030\017 \001(\003\"\341"
    "\001\n\017MsgSyncPlayToGS\0228\n\007msgType\030\001 \001(\0162\017.Ms"
    "gPB.EMsgType:\026_MSG_SYNC_PLAYER_TO_GS\022\r\n\005"
    "iggid\030\002 \001(\003\022\014\n\004posx\030\003 \001(\005\022\014\n\004posy\030\004 \001(\005\022"
    "\r\n\005mapid\030\005 \001(\005\022\n\n\002hp\030\006 \001(\005\022\n\n\002mp\030\007 \001(\005\022\026"
    "\n\016dungeonmapuuid\030\010 \001(\003\022\017\n\007maptype\030\t \001(\005\022"
    "\014\n\004food\030\n \001(\005\022\013\n\003oxy\030\013 \001(\005\"b\n\rMsgJoinMap"
    "G2C\0223\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\021_"
    "MSG_JOIN_MAP_G2C\022\r\n\005iggid\030\002 \001(\003\022\r\n\005mapid"
    "\030\003 \001(\005\"[\n\nMsgQuitMap\022/\n\007msgType\030\001 \001(\0162\017."
    "MsgPB.EMsgType:\r_MSG_QUIT_MAP\022\r\n\005iggid\030\002"
    " \001(\003\022\r\n\005mapid\030\003 \001(\005\"[\n\021MsgQuitMapNtf_S2S"
    "\0227\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\025_MSG"
    "_QUIT_MAP_NTF_S2S\022\r\n\005iggid\030\002 \001(\003\"\\\n\nMsgQ"
    "ueyMap\0220\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType"
    ":\016_MSG_QUERY_MAP\022\r\n\005iggid\030\002 \001(\003\022\r\n\005mapid"
    "\030\003 \001(\005\"\374\001\n\nMsgMapInfo\022/\n\007msgType\030\001 \001(\0162\017"
    ".MsgPB.EMsgType:\r_MSG_MAP_INFO\022\r\n\005iggid\030"
    "\002 \001(\003\022\r\n\005mapid\030\003 \001(\005\022\020\n\010blocknum\030\004 \001(\005\022\021"
    "\n\tmapblockx\030\005 \001(\005\022\021\n\tmapblocky\030\006 \001(\005\022\022\n\n"
    "blocksizex\030\007 \001(\005\022\022\n\nblocksizey\030\010 \001(\005\022\022\n\n"
    "templateid\030\t \001(\005\022\023\n\013client_data\030\n \001(\t\022\026\n"
    "\016last_save_time\030\013 \001(\003\"\206\001\n\013MsgMapBlock\0225\n"
    "\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\023_MSG_MA"
    "P_BLOCK_INFO\022\r\n\005iggid\030\002 \001(\003\022\r\n\005mapid\030\003 \001"
    "(\005\022\017\n\007blockid\030\004 \001(\005\022\021\n\tblockbuff\030\005 \001(\t\"\346"
    "\001\n\023MsgMapBlockToClient\022\?\n\007msgType\030\001 \001(\0162"
    "\017.MsgPB.EMsgType:\035_MSG_MAP_BLOCK_INFO_TO"
    "_CLIENT\022\r\n\005iggid\030\002 \001(\003\022\r\n\005mapid\030\003 \001(\005\0228\n"
    "\005batch\030\004 \003(\0132).MsgPB.MsgMapBlockToClient"
    ".BlockBatchData\0326\n\016BlockBatchData\022\020\n\010bat"
    "ch_id\030\001 \001(\005\022\022\n\nbatch_buff\030\002 \001(\014\"\206\003\n\016Play"
    "erMovement\022\r\n\005iggid\030\001 \001(\003\022\025\n\rmap_object_"
    "id\030\002 \001(\005\022\014\n\004posx\030\003 \001(\005\022\014\n\004posy\030\004 \001(\005\022\033\n\023"
    "horizontal_velocity\030\005 \001(\005\022\031\n\021vertical_ve"
    "locity\030\006 \001(\005\022\022\n\nis_running\030\007 \001(\005\022\026\n\016is_m"
    "anual_jump\030\010 \001(\005\022\030\n\020is_player_action\030\t \001"
    "(\005\022\025\n\rmov_ing_state\030\n \001(\005\022\021\n\tsync_time\030\013"
    " \001(\003\022 \n\003dir\030\014 \001(\0162\023.MsgPB.MSG_MOVE_DIR\022#"
    "\n\005state\030\r \001(\0162\024.MsgPB.MSG_MOVE_STAT\022\035\n\025u"
    "niform_velocity_time\030\016 \001(\003\022\021\n\tdest_posx\030"
    "\017 \001(\005\022\021\n\tdest_posy\030\020 \001(\005\"\227\001\n\032MsgNotifyPl"
    "ayerMovementC2G\022A\n\007msgType\030\001 \001(\0162\017.MsgPB"
    ".EMsgType:\037_MSG_NOTIFY_PLAYER_MOVEMENT_C"
    "2G\022\'\n\010movement\030\002 \001(\0132\025.MsgPB.PlayerMovem"
    "ent\022\r\n\005iggid\030\003 \001(\003\"\254\001\n\032MsgNotifyPlayerMo"
    "vementG2C\022A\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgT"
    "ype:\037_MSG_NOTIFY_PLAYER_MOVEMENT_G2C\022\'\n\010"
    "movement\030\002 \001(\0132\025.MsgPB.PlayerMovement\022\023\n"
    "\013forceUpdate\030\003 \001(\010\022\r\n\005iggid\030\004 \001(\003\"\351\003\n\023Ms"
    "gPlayerAppearance\0227\n\007msgType\030\001 \001(\0162\017.Msg"
    "PB.EMsgType:\025_MSG_PLAYER_APPEARACE\022\r\n\005ig"
    "gid\030\002 \001(\003\022\023\n\013mapobjectid\030\003 \001(\005\022\014\n\004posx\030\004"
    " \001(\005\022\014\n\004posy\030\005 \001(\005\022\n\n\002hp\030\006 \001(\005\022\n\n\002mp\030\007 \001"
    "(\005\022\n\n\002lv\030\010 \001(\005\022\020\n\010nickname\030\t \001(\t\022)\n\nbuff"
    "_infos\030\n \003(\0132\025.MsgPB.ServerBuffInfo\022+\n\013e"
    "quip_infos\030\013 \003(\0132\026.MsgPB.ServerEquipInfo"
    "\022,\n\013onhand_item\030\014 \001(\0162\027.MsgPB.EQUIP_PACK"
    "ET_POS\022\r\n\005group\030\r \001(\r\022\016\n\006gender\030\016 \001(\005\022\021\n"
    "\tskinColor\030\017 \001(\005\022\014\n\004hair\030\020 \001(\005\022\021\n\thairCo"
    "lor\030\021 \001(\005\022\r\n\005maxHp\030\022 \001(\005\022\024\n\014vehicleObjID"
    "\030\023 \001(\005\022\022\n\nfull_hp_mp\030\024 \001(\010\022\021\n\tvip_level\030"
    "\025 \001(\005\"\260\003\n\030MsgMagicObjectAppearance\022<\n\007ms"
    "gType\030\001 \001(\0162\017.MsgPB.EMsgType:\032_MSG_MAGIC"
    "OBJECT_APPEARACE\022\025\n\rmagicobjectid\030\002 \001(\005\022"
    "\023\n\013mapobjectid\030\003 \001(\005\022\023\n\013skilldataid\030\004 \001("
    "\005\022\025\n\rmagicobj_type\030\005 \001(\005\022\014\n\004posx\030\006 \001(\005\022\014"
    "\n\004posy\030\007 \001(\005\022\014\n\004dirx\030\010 \001(\003\022\014\n\004diry\030\t \001(\003"
    "\022\030\n\020ball_nowdistance\030\n \001(\005\022\027\n\017area_updat"
    "etime\030\013 \001(\005\022\021\n\tarea_lt_x\030\014 \001(\005\022\021\n\tarea_l"
    "t_y\030\r \001(\005\022\021\n\tarea_rd_x\030\016 \001(\005\022\021\n\tarea_rd_"
    "y\030\017 \001(\005\022\023\n\013b_clear_hit\030\020 \001(\005\022\030\n\020hit_bloc"
    "k_coordx\030\021 \001(\005\022\030\n\020hit_block_coordy\030\022 \001(\005"
    "\"h\n\025MsgMapObjectLeaveView\022:\n\007msgType\030\001 \001"
    "(\0162\017.MsgPB.EMsgType:\030_MSG_MAPOBJECT_LEAV"
    "EVIEW\022\023\n\013mapobjectid\030\002 \001(\005\"\201\001\n\034MsgMapCli"
    "entCreateMapDoneC2G\022E\n\007msgType\030\001 \001(\0162\017.M"
    "sgPB.EMsgType:#_MSG_MAP_CLIENT_CREATE_MA"
    "P_DONE_C2G\022\r\n\005iggid\030\002 \001(\003\022\013\n\003ver\030\003 \001(\005\"z"
    "\n\031MsgMapClientUploadDoneReq\022A\n\007msgType\030\001"
    " \001(\0162\017.MsgPB.EMsgType:\037_MSG_MAP_CLIENT_U"
    "PLOAD_DONE_REQ\022\r\n\005iggid\030\002 \001(\003\022\013\n\003ver\030\003 \001"
    "(\005\"\237\001\n\021MsgMapSrvLoadDone\0228\n\007msgType\030\001 \001("
    "\0162\017.MsgPB.EMsgType:\026_MSG_MAP_SRV_LOAD_DO"
    "NE\022\r\n\005iggid\030\002 \001(\003\022\r\n\005mapid\030\004 \001(\005\022\013\n\003ver\030"
    "\003 \001(\005\022%\n\032LastClientUploadDataSerial\030\005 \001("
    "\003:\0010\"\236\001\n\031MsgMapObjectPreAttack_S2C\022\?\n\007ms"
    "gType\030\001 \001(\0162\017.MsgPB.EMsgType:\035_MSG_MAPOB"
    "JECT_PRE_ATTACK_S2C\022\023\n\013sourceObjID\030\002 \001(\005"
    "\022\024\n\014serverTimeMS\030\003 \001(\003\022\025\n\rtarget_obj_id\030"
    "\004 \001(\005\"\331\001\n\032MsgMapObjectUnderAttackG2C\022@\n\007"
    "msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\036_MSG_MAP"
    "OBJECT_UNDERATTACK_G2C\022\023\n\013sourceObjID\030\002 "
    "\001(\005\022\024\n\014serverTimeMS\030\003 \001(\003\022&\n\ntargetInfo\030"
    "\004 \003(\0132\022.MsgPB.UnderAttack\022\014\n\004idHP\030\005 \001(\003\022"
    "\030\n\020is_player_attack\030\006 \001(\005\"e\n\023MsgCharacte"
    "rDeadS2C\0229\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTy"
    "pe:\027_MSG_CHARACTOR_DEAD_S2C\022\023\n\013mapObject"
    "Id\030\002 \001(\005\"\314\001\n\025MsgCharacterReviveS2C\022;\n\007ms"
    "gType\030\001 \001(\0162\017.MsgPB.EMsgType:\031_MSG_CHARA"
    "CTOR_REVIVE_S2C\022\023\n\013mapObjectId\030\002 \001(\005\022\n\n\002"
    "hp\030\003 \001(\005\022\n\n\002mp\030\004 \001(\005\022\014\n\004posX\030\005 \001(\005\022\014\n\004po"
    "sY\030\006 \001(\005\022\036\n\003res\030\007 \001(\0162\021.MsgPB.REVIVE_RES"
    "\022\r\n\005iggid\030\010 \001(\003\"\207\001\n&MsgSyncPlayerDataToM"
    "apServerDone_GS2MS\022N\n\007msgType\030\001 \001(\0162\017.Ms"
    "gPB.EMsgType:,_MSG_SYNC_PLAYERDATA_TO_MA"
    "PSERVER_DONE_GS2MS\022\r\n\005iggid\030\002 \001(\003\"}\n\021Msg"
    "TriggerGateC2S\0227\n\007msgType\030\001 \001(\0162\017.MsgPB."
    "EMsgType:\025_MSG_TRIGGER_GATE_C2S\022\r\n\005iggid"
    "\030\002 \001(\003\022\016\n\006gateId\030\003 \001(\005\022\020\n\010targetId\030\004 \001(\005"
    "\"\371\002\n\021MsgTriggerGateS2C\0227\n\007msgType\030\001 \001(\0162"
    "\017.MsgPB.EMsgType:\025_MSG_TRIGGER_GATE_S2C\022"
    "\r\n\005iggid\030\002 \001(\003\022\016\n\006gateId\030\003 \001(\005\022\020\n\010target"
    "Id\030\004 \001(\005\022/\n\006result\030\005 \001(\0162\037.MsgPB.MsgTrig"
    "gerGateS2C.Result\"\310\001\n\006Result\022\013\n\007SUCCESS\020"
    "\000\022\013\n\007FAILURE\020\001\022\014\n\010MAP_NULL\020\002\022\024\n\020MAPTEMPL"
    "ATE_NULL\020\003\022\020\n\014GATEID_ERROR\020\004\022\013\n\007TOO_FAR\020"
    "\005\022\017\n\013TARGET_NULL\020\006\022\031\n\025TARGET_MAPID_IS_ER"
    "ROR\020\007\022\017\n\013TARGET_NONE\020\010\022\021\n\rSTRATEGY_NONE\020"
    "\t\022\021\n\rENDLESS_ERROR\020\n\"\316\001\n\014MsgGatePoint\022\n\n"
    "\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\034\n\003pos\030\003 \001(\0132\017.M"
    "sgPB.MsgPoint\022%\n\007targets\030\004 \003(\0132\024.MsgPB.M"
    "sgGateTarget\032_\n\006Target\022\n\n\002id\030\001 \001(\005\022\014\n\004ty"
    "pe\030\002 \001(\005\022\r\n\005mapId\030\003 \001(\005\022\016\n\006gateid\030\004 \001(\005\022"
    "\034\n\003pos\030\005 \001(\0132\017.MsgPB.MsgPoint\"\247\014\n\rMsgMap"
    "CfgInfo\0223\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTyp"
    "e:\021_MSG_MAP_CFG_INFO\022\r\n\005iggid\030\002 \001(\003\022%\n\tp"
    "lant_lst\030\003 \003(\0132\022.MsgPB.MsgPlantCfg\022\'\n\nga"
    "tePoints\030\004 \003(\0132\023.MsgPB.MsgGatePoint\022(\n\020f"
    "orbiddenSpawner\030\005 \003(\0132\016.MsgPB.MsgArea\022&\n"
    "\016forbiddenBuild\030\006 \003(\0132\016.MsgPB.MsgArea\022,\n"
    "\007layouts\030\007 \003(\0132\033.MsgPB.MsgMapCfgInfo.Lay"
    "out\022-\n\010popBoxes\030\010 \003(\0132\033.MsgPB.MsgMapCfgI"
    "nfo.PopBox\022\"\n\tsafePoint\030\t \001(\0132\017.MsgPB.Ms"
    "gPoint\0227\n\rpopSavedBoxes\030\n \003(\0132 .MsgPB.Ms"
    "gMapCfgInfo.PopSavedBox\022.\n\010vehicles\030\013 \003("
    "\0132\034.MsgPB.MsgMapCfgInfo.Vehicle\022.\n\010Airsh"
    "ips\030\014 \003(\0132\034.MsgPB.MsgMapCfgInfo.Airship\022"
    "\031\n\nclientmode\030c \001(\010:\005false\032\202\001\n\006Layout\022.\n"
    "\004type\030\001 \001(\0162 .MsgPB.MsgMapCfgInfo.Layout"
    ".Type\022\034\n\004area\030\002 \001(\0132\016.MsgPB.MsgArea\"*\n\004T"
    "ype\022\016\n\nNEWBIEROOM\020\001\022\022\n\016PRIVATEDUNGEON\020\002\032"
    "\212\004\n\nPopBoxBase\022\036\n\005coord\030\001 \001(\0132\017.MsgPB.Ms"
    "gPoint\022\027\n\017triggerdistance\030\002 \001(\005\0221\n\004mobs\030"
    "\003 \003(\0132#.MsgPB.MsgMapCfgInfo.PopBoxBase.M"
    "ob\0225\n\006builds\030\004 \003(\0132%.MsgPB.MsgMapCfgInfo"
    ".PopBoxBase.Build\022;\n\tuserdatas\030\005 \003(\0132(.M"
    "sgPB.MsgMapCfgInfo.PopBoxBase.UserData\022\n"
    "\n\002id\030\006 \001(\005\022\014\n\004uuid\030\007 \001(\005\032d\n\003Pop\022\r\n\005defid"
    "\030\001 \001(\005\022\016\n\006mobmax\030\002 \001(\005\022\017\n\007poptime\030\003 \001(\005\022"
    "\014\n\004prob\030\004 \001(\005\022\037\n\007poparea\030\005 \001(\0132\016.MsgPB.M"
    "sgArea\0328\n\003Mob\0221\n\004this\030\001 \001(\0132#.MsgPB.MsgM"
    "apCfgInfo.PopBoxBase.Pop\032:\n\005Build\0221\n\004thi"
    "s\030\001 \001(\0132#.MsgPB.MsgMapCfgInfo.PopBoxBase"
    ".Pop\032&\n\010UserData\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
    " \001(\t\0327\n\006PopBox\022-\n\004this\030\001 \001(\0132\037.MsgPB.Msg"
    "MapCfgInfo.PopBoxBase\032<\n\013PopSavedBox\022-\n\004"
    "this\030\001 \001(\0132\037.MsgPB.MsgMapCfgInfo.PopBoxB"
    "ase\032\306\001\n\007Vehicle\022/\n\004type\030\001 \001(\0162!.MsgPB.Ms"
    "gMapCfgInfo.Vehicle.Type\022\r\n\005defID\030\002 \001(\005\022"
    "\r\n\005speed\030\003 \001(\005\022\036\n\005start\030\004 \001(\0132\017.MsgPB.Ms"
    "gPoint\022\034\n\003end\030\005 \001(\0132\017.MsgPB.MsgPoint\022\034\n\004"
    "size\030\006 \001(\0132\016.MsgPB.MsgSize\"\020\n\004Type\022\010\n\004NO"
    "NE\020\000\032)\n\007Airship\022\036\n\005coord\030\001 \001(\0132\017.MsgPB.M"
    "sgPoint\"\203\001\n\022MsgGateTargetMS2GS\0228\n\007msgTyp"
    "e\030\001 \001(\0162\017.MsgPB.EMsgType:\026_MSG_GATE_TARG"
    "ET_MS2GS\022\r\n\005iggid\030\002 \001(\003\022$\n\006target\030\003 \001(\0132"
    "\024.MsgPB.MsgGateTarget\"\374\002\n\nMsgJoinMap\022/\n\007"
    "msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\r_MSG_JOI"
    "N_MAP\022\r\n\005iggid\030\002 \001(\003\022\017\n\007maptype\030\003 \001(\005\022\017\n"
    "\007mapuuid\030\004 \001(\003\022\r\n\005mapid\030\005 \001(\005\022\025\n\rreturnd"
    "ungeon\030\006 \001(\010\022\023\n\013mapserverid\030\007 \001(\005\022$\n\006tar"
    "get\030\010 \001(\0132\024.MsgPB.MsgGateTarget\022\031\n\nclien"
    "tmode\030\t \001(\010:\005false\022\r\n\005dbkey\030\n \001(\t\022\023\n\013gam"
    "e_srv_id\030\013 \001(\005\022\024\n\014proxy_svr_id\030\014 \001(\005\022\033\n\017"
    "last_map_srv_id\030\r \001(\005:\002-1\022\020\n\010idTarget\030\016 "
    "\001(\003\022\026\n\016bLoginEnterMap\030\017 \001(\010\022\017\n\007game_id\030\020"
    " \001(\005\"t\n\022MsgJoinMapRs_MS2GS\0228\n\007msgType\030\001 "
    "\001(\0162\017.MsgPB.EMsgType:\026_MSG_JOIN_MAP_RS_M"
    "S2GS\022\r\n\005iggid\030\002 \001(\003\022\025\n\rmap_server_id\030\003 \001"
    "(\005\"\372\002\n\014MsgJoinMapRs\0222\n\007msgType\030\001 \001(\0162\017.M"
    "sgPB.EMsgType:\020_MSG_JOIN_MAP_RS\022\r\n\005iggid"
    "\030\002 \001(\003\022\r\n\005mapid\030\004 \001(\005\022\023\n\013mapobjectid\030\005 \001"
    "(\005\022\022\n\nservertime\030\006 \001(\003\022\"\n\006result\030\007 \001(\0162\022"
    ".MsgPB.JOIN_MAP_RS\022&\n\005emode\030\010 \001(\0162\027.MsgP"
    "B.EN_GAME_MAP_MODE\022\014\n\004posx\030\t \001(\005\022\014\n\004posy"
    "\030\n \001(\005\022\n\n\002hp\030\013 \001(\005\022\n\n\002mp\030\014 \001(\005\022\020\n\010timeRa"
    "te\030\r \001(\005\022\014\n\004food\030\016 \001(\005\022\017\n\007mapuuid\030\017 \001(\003\022"
    " \n\003dir\030\020 \001(\0162\023.MsgPB.MSG_MOVE_DIR\022\r\n\005max"
    "hp\030\021 \001(\005\022\r\n\005maxmp\030\022 \001(\005\"S\n\rMsgQuitMapC2S"
    "\0223\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\021_MSG"
    "_QUIT_MAP_C2S\022\r\n\005iggid\030\002 \001(\003\"b\n\024MsgEnter"
    "PublicMapC2S\022;\n\007msgType\030\001 \001(\0162\017.MsgPB.EM"
    "sgType:\031_MSG_ENTER_PUBLIC_MAP_C2S\022\r\n\005igg"
    "id\030\002 \001(\003\"t\n\014MsgObjectS2C\0221\n\007msgType\030\001 \001("
    "\0162\017.MsgPB.EMsgType:\017_MSG_OBJECT_S2C\022\r\n\005i"
    "ggid\030\002 \001(\003\022\023\n\013mapObjectId\030\003 \001(\005\022\r\n\005group"
    "\030\004 \001(\r\"\366\001\n\020MsgMapObjMoveS2C\0226\n\007msgType\030\001"
    " \001(\0162\017.MsgPB.EMsgType:\024_MSG_MAPOBJ_MOVE_"
    "S2C\022\r\n\005iggid\030\002 \001(\003\022\020\n\010SerialID\030\003 \001(\003\022\020\n\010"
    "objectid\030\004 \001(\005\022\020\n\010skill_id\030\005 \001(\005\022\r\n\005spee"
    "d\030\006 \001(\005\022\024\n\014target_pos_x\030\007 \001(\003\022\024\n\014target_"
    "pos_y\030\010 \001(\003\022\024\n\014caster_pos_x\030\t \001(\003\022\024\n\014cas"
    "ter_pos_y\030\n \001(\003\"\236\002\n\025MsgMapLayoutInfo_MS2"
    "C\022;\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\031_MS"
    "G_MAP_LAYOUT_INFO_MS2C\022\r\n\005iggid\030\002 \001(\003\022@\n"
    "\013layout_room\030\003 \003(\0132+.MsgPB.MsgMapLayoutI"
    "nfo_MS2C.LayoutRoomInfo\032w\n\016LayoutRoomInf"
    "o\022\021\n\ttopleft_x\030\001 \001(\005\022\021\n\ttopleft_y\030\002 \001(\005\022"
    "\025\n\rbottomright_x\030\003 \001(\005\022\025\n\rbottomright_y\030"
    "\004 \001(\005\022\021\n\troom_name\030\005 \001(\t\"w\n\027MsgRequestSy"
    "ncDataGS2MS\022=\n\007msgType\030\001 \001(\0162\017.MsgPB.EMs"
    "gType:\033_MSG_REQUEST_SYNCDATA_GS2MS\022\r\n\005ig"
    "gid\030\002 \001(\003\022\016\n\006bClose\030\003 \001(\010\"z\n\025MsgSyncTowe"
    "rBuildData\022\014\n\004uuid\030\001 \001(\003\022,\n\ntower_data\030\002"
    " \001(\0132\030.MsgPB.MsgBuildTowerData\022%\n\002op\030\003 \001"
    "(\0162\031.MsgPB.SYNC_TOWERBUILD_OP\"\245\001\n\020MsgPla"
    "ntUserData\022\020\n\010plant_id\030\001 \001(\003\022\022\n\nplant_ty"
    "pe\030\002 \001(\005\022\r\n\005pos_x\030\003 \001(\005\022\r\n\005pos_y\030\004 \001(\005\022\022"
    "\n\ngrow_stage\030\005 \001(\005\022\022\n\ntemplateid\030\006 \001(\005\022\022"
    "\n\ngrow_begin\030\007 \001(\003\022\021\n\tgrow_time\030\010 \001(\005\"w\n"
    "\024MsgSyncPlantUserData\022\020\n\010plant_id\030\001 \001(\003\022"
    "+\n\nplant_data\030\002 \001(\0132\027.MsgPB.MsgPlantUser"
    "Data\022 \n\002op\030\003 \001(\0162\024.MsgPB.SYNC_PLANT_OP\"Z"
    "\n\031MsgTriggerProbabilityData\022\014\n\004uuid\030\001 \001("
    "\003\022\023\n\013probability\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022\r\n\005d"
    "irty\030\004 \001(\003\"8\n\032MsgLSSurvivalEventFlagData"
    "\022\013\n\003idx\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\"\223\001\n\032MsgSync"
    "FeedingProductSpeed\022\023\n\013iiFenceUuid\030\001 \001(\003"
    "\022\024\n\014iiAnimalUuid\030\002 \001(\003\022\031\n\021iSpeedProduct1"
    "Sec\030\003 \001(\005\022\031\n\021iSpeedProduct2Sec\030\004 \001(\005\022\024\n\014"
    "iSpeedHugSec\030\005 \001(\005\"\234\001\n\027MsgReportKillMobR"
    "equest\0226\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType"
    ":\024_MSG_REPORT_KILL_MOB\022\r\n\005iggid\030\002 \001(\003\022\023\n"
    "\013mob_type_id\030\003 \002(\003\022\023\n\013map_type_id\030\004 \002(\003\022"
    "\020\n\010drop_lst\030\005 \003(\003\"\237\n\n\031MsgSyncClientLocal"
    "DataC2S\022@\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTyp"
    "e:\036_MSG_SYNC_CLIENT_LOCALDATA_C2S\022\r\n\005igg"
    "id\030\002 \001(\003\0220\n\004flag\030\003 \001(\0162\".MsgPB.SYNC_CLIE"
    "NT_LOCAL_DATA_FLAG\022\016\n\006serial\030\004 \002(\003\022\021\n\tse"
    "ssionID\030\005 \002(\003\022\024\n\014debug_string\030\006 \001(\t\022\022\n\nt"
    "ime_stamp\030\007 \001(\003\022\r\n\005level\030\010 \001(\005\022\013\n\003exp\030\t "
    "\001(\003\022\014\n\004coin\030\n \001(\005\022\n\n\002hp\030\014 \001(\005\022\n\n\002mp\030\r \001("
    "\005\022\013\n\003oxy\030\016 \001(\005\022\014\n\004food\030\017 \001(\005\022\014\n\004posX\030\020 \001"
    "(\005\022\014\n\004posY\030\021 \001(\005\022\022\n\nweaponUUID\030\022 \001(\003\022\020\n\010"
    "toolUUID\030\023 \001(\003\022\022\n\nfood_count\030\024 \001(\005\022\026\n\016ma"
    "p_cache_data\030\025 \001(\014\022\032\n\022dig_mine_exp_count"
    "\030\026 \001(\005\022\033\n\023dig_plant_exp_count\030\027 \001(\005\022\r\n\005m"
    "apID\030d \002(\005\022>\n\nblockGrids\030e \003(\0132*.MsgPB.M"
    "sgSyncClientLocalDataC2S.BlockGrid\022\'\n\005it"
    "ems\030f \003(\0132\030.MsgPB.MsgItemCommonData\022+\n\np"
    "rotectors\030g \003(\0132\027.MsgPB.MsgProtectorData"
    "\022D\n\rmobkillcounts\030h \003(\0132-.MsgPB.MsgSyncC"
    "lientLocalDataC2S.MobKillCount\022*\n\013achiev"
    "edata\030i \003(\0132\025.MsgPB.MsgAchieveData\0225\n\017to"
    "werbuild_data\030j \003(\0132\034.MsgPB.MsgSyncTower"
    "BuildData\022/\n\nplant_data\030k \003(\0132\033.MsgPB.Ms"
    "gSyncPlantUserData\022B\n\030trigger_probabilit"
    "y_data\030l \003(\0132 .MsgPB.MsgTriggerProbabili"
    "tyData\022C\n\030survival_event_flag_data\030m \003(\013"
    "2!.MsgPB.MsgLSSurvivalEventFlagData\022\031\n\021s"
    "urvivalTrigCount\030q \001(\005\022*\n\014npc_dak_data\030s"
    " \003(\0132\024.MsgPB.MsgNpcDakData\022)\n\tbuff_data\030"
    "t \003(\0132\026.MsgPB.MsgUserBuffData\022%\n\ttask_da"
    "ta\030u \003(\0132\022.MsgPB.MsgTaskData\032^\n\tBlockGri"
    "d\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\014\n\004data\030\003 \002(\r\022\031\n"
    "\nIsWaterFog\030\004 \001(\010:\005false\022\022\n\ndebug_info\030\005"
    " \001(\005\032-\n\014MobKillCount\022\016\n\006dataid\030\001 \002(\005\022\r\n\005"
    "count\030\002 \002(\005\"\224\002\n\031MsgSyncClientLocalDataS2"
    "C\022@\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\036_MS"
    "G_SYNC_CLIENT_LOCALDATA_S2C\022\r\n\005iggid\030\002 \001"
    "(\003\022.\n\003res\030\003 \002(\0162!.MsgPB.SYNC_CLIENT_LOCA"
    "L_DATA_RES\022\016\n\006serail\030\005 \002(\003\022\021\n\tsessionID\030"
    "\006 \002(\003\022S\n\004flag\030\007 \001(\0162\".MsgPB.SYNC_CLIENT_"
    "LOCAL_DATA_FLAG:!SYNC_CLIENT_LOCAL_DATA_"
    "FLAG_BEGIN\"\235\001\n\037MsgUpdateTriggerProbabili"
    "tyData\022J\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType"
    ":(_MSG_UPDATE_TRIGGER_PROBABILITY_DATA_S"
    "2C\022.\n\004data\030\002 \003(\0132 .MsgPB.MsgTriggerProba"
    "bilityData\"{\n\031MsgRemovePrivateMapMGS2MS\022"
    "@\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\036_MSG_"
    "REMOVE_PRIVATE_MAP_MGS2MS\022\r\n\005iggid\030\002 \001(\003"
    "\022\r\n\005mapid\030\003 \001(\005\"\200\002\n\037MsgRemovePrivateMapR"
    "esultMS2MGS\022G\n\007msgType\030\001 \001(\0162\017.MsgPB.EMs"
    "gType:%_MSG_REMOVE_PRIVATE_MAP_RESULT_MS"
    "2MGS\022=\n\006result\030\002 \001(\0162-.MsgPB.MsgRemovePr"
    "ivateMapResultMS2MGS.RESULT\022\r\n\005iggid\030\003 \001"
    "(\003\022\r\n\005mapid\030\004 \001(\005\022\023\n\013mapserverid\030\005 \001(\005\"\""
    "\n\006RESULT\022\013\n\007SUCCESS\020\000\022\013\n\007FAILURE\020\001\"\217\001\n\030M"
    "sgNotifyClearDirtyGS2MS\022B\n\007msgType\030\001 \001(\016"
    "2\017.MsgPB.EMsgType: _MSG_MAP_NOTIFY_CLEAR"
    "_DIRTY_MS2C\022\r\n\005iggid\030\002 \001(\003\022 \n\030LastSyncTo"
    "GameServerTime\030\003 \001(\003\"\275\001\n\031MsgCharacterBeB"
    "eatBackS2C\022A\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsg"
    "Type:\037_MSG_CHARACTER_BE_BEAT_BACK_S2C\022\016\n"
    "\006obj_id\030\002 \001(\005\022\r\n\005pos_x\030\003 \001(\005\022\r\n\005pos_y\030\004 "
    "\001(\005\022\014\n\004time\030\005 \001(\005\022\017\n\007cast_id\030\006 \001(\005\022\020\n\010se"
    "rialid\030\007 \001(\003\"\200\001\n\033MsgPlayerReleaseByMapSe"
    "rver\022\?\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\035"
    "_MSG_MAPSERVER_RELEASE_PLAYER\022\r\n\005iggid\030\002"
    " \001(\003\022\021\n\tserver_id\030\003 \001(\005\"\207\001\n\035MsgMapServer"
    "RequestLockPlayer\022D\n\007msgType\030\001 \001(\0162\017.Msg"
    "PB.EMsgType:\"_MSG_MAPSERVER_REQUEST_LOCK"
    "_PLAYER\022\r\n\005iggid\030\002 \001(\003\022\021\n\tserver_id\030\003 \001("
    "\005\"v\n MsgGameServerNotifyReleasePlayer\022C\n"
    "\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:!_MSG_GA"
    "MESERVER_NOTIFY_DEL_PLAYER\022\r\n\005iggid\030\002 \001("
    "\003\"\243\001\n\024MsgMapServerInfoSync\022;\n\007msgType\030\001 "
    "\001(\0162\017.MsgPB.EMsgType:\031_MSG_MAP_SERVER_IN"
    "FO_SYNC\022\016\n\006srv_id\030\002 \001(\005\022\024\n\014total_player\030"
    "\003 \001(\005\022\021\n\ttotal_map\030\004 \001(\005\022\025\n\rtotal_dungeo"
    "n\030\005 \001(\005*J\n\020EN_GAME_MAP_MODE\022\033\n\027EN_GAME_M"
    "AP_MODE_SINGLE\020\000\022\031\n\025EN_GAME_MAP_MODE_MUL"
    "T\020\001*\205\001\n\nREVIVE_RES\022\022\n\016REVIVE_RES_ERR\020\000\022\026"
    "\n\022REVIVE_RES_SUCCESS\020\001\022\026\n\022REVIVE_RES_ISA"
    "LIVE\020\002\022\031\n\025REVIVE_RES_NOT_ENOUGH\020\003\022\030\n\024REV"
    "IVE_RES_TOO_EARLY\020\004*t\n\013JOIN_MAP_RS\022\023\n\017JO"
    "IN_MAP_SUCESS\020\000\022\023\n\017JOIN_MAP_FAILED\020\001\022\036\n\032"
    "JOIN_MAP_PRIVATE_MAP_LIMIT\020\002\022\033\n\027JOIN_MAP"
    "_SERVER_IS_BUSY\020\003*n\n\034SYNC_CLIENT_LOCAL_D"
    "ATA_STATE\022%\n!SYNC_CLIENT_LOCAL_DATA_STAT"
    "E_IDLE\020\000\022\'\n#SYNC_CLIENT_LOCAL_DATA_STATE"
    "_UPDATE\020\001*\271\001\n\033SYNC_CLIENT_LOCAL_DATA_FLA"
    "G\022%\n!SYNC_CLIENT_LOCAL_DATA_FLAG_BEGIN\020\000"
    "\022&\n\"SYNC_CLIENT_LOCAL_DATA_FLAG_UPDATE\020\001"
    "\022#\n\037SYNC_CLIENT_LOCAL_DATA_FLAG_END\020\002\022&\n"
    "\"SYNC_CLIENT_LOCAL_DATA_FLAG_SINGLE\020\003*i\n"
    "\022SYNC_TOWERBUILD_OP\022\033\n\027SYNC_TOWERBUILD_O"
    "P_NONE\020\000\022\032\n\026SYNC_TOWERBUILD_OP_DEL\020\001\022\032\n\026"
    "SYNC_TOWERBUILD_OP_SET\020\002*U\n\rSYNC_PLANT_O"
    "P\022\026\n\022SYNC_PLANT_OP_NONE\020\000\022\025\n\021SYNC_PLANT_"
    "OP_DEL\020\001\022\025\n\021SYNC_PLANT_OP_SET\020\002*e\n\021SYNC_"
    "BUILDDATA_OP\022\032\n\026SYNC_BUILDDATA_OP_NONE\020\000"
    "\022\031\n\025SYNC_BUILDDATA_OP_DEL\020\001\022\031\n\025SYNC_BUIL"
    "DDATA_OP_SET\020\002*\202\002\n\032SYNC_CLIENT_LOCAL_DAT"
    "A_RES\022!\n\035SYNC_CLIENT_LOCAL_DATA_FAILED\020\000"
    "\022\035\n\031SYNC_CLIENT_LOCAL_DATA_OK\020\001\022\'\n#SYNC_"
    "CLIENT_LOCAL_DATA_BLOCKNUM_ERR\020\002\022 \n\034SYNC"
    "_CLIENT_LOCAL_DATA_MAPID\020\003\022/\n+SYNC_CLIEN"
    "T_LOCAL_DATA_SERAIL_DISCONTINUOUS\020\004\022&\n\"S"
    "YNC_CLIENT_LOCAL_DATA_SERAIL_USED\020\005", 14755);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgMapServer.proto", &protobuf_RegisterTypes);
  MsgPlayerBaseData::default_instance_ = new MsgPlayerBaseData();
  MsgPlayerEndless::default_instance_ = new MsgPlayerEndless();
  MsgSyncPlayToGS::default_instance_ = new MsgSyncPlayToGS();
  MsgJoinMapG2C::default_instance_ = new MsgJoinMapG2C();
  MsgQuitMap::default_instance_ = new MsgQuitMap();
  MsgQuitMapNtf_S2S::default_instance_ = new MsgQuitMapNtf_S2S();
  MsgQueyMap::default_instance_ = new MsgQueyMap();
  MsgMapInfo::default_instance_ = new MsgMapInfo();
  MsgMapBlock::default_instance_ = new MsgMapBlock();
  MsgMapBlockToClient::default_instance_ = new MsgMapBlockToClient();
  MsgMapBlockToClient_BlockBatchData::default_instance_ = new MsgMapBlockToClient_BlockBatchData();
  PlayerMovement::default_instance_ = new PlayerMovement();
  MsgNotifyPlayerMovementC2G::default_instance_ = new MsgNotifyPlayerMovementC2G();
  MsgNotifyPlayerMovementG2C::default_instance_ = new MsgNotifyPlayerMovementG2C();
  MsgPlayerAppearance::default_instance_ = new MsgPlayerAppearance();
  MsgMagicObjectAppearance::default_instance_ = new MsgMagicObjectAppearance();
  MsgMapObjectLeaveView::default_instance_ = new MsgMapObjectLeaveView();
  MsgMapClientCreateMapDoneC2G::default_instance_ = new MsgMapClientCreateMapDoneC2G();
  MsgMapClientUploadDoneReq::default_instance_ = new MsgMapClientUploadDoneReq();
  MsgMapSrvLoadDone::default_instance_ = new MsgMapSrvLoadDone();
  MsgMapObjectPreAttack_S2C::default_instance_ = new MsgMapObjectPreAttack_S2C();
  MsgMapObjectUnderAttackG2C::default_instance_ = new MsgMapObjectUnderAttackG2C();
  MsgCharacterDeadS2C::default_instance_ = new MsgCharacterDeadS2C();
  MsgCharacterReviveS2C::default_instance_ = new MsgCharacterReviveS2C();
  MsgSyncPlayerDataToMapServerDone_GS2MS::default_instance_ = new MsgSyncPlayerDataToMapServerDone_GS2MS();
  MsgTriggerGateC2S::default_instance_ = new MsgTriggerGateC2S();
  MsgTriggerGateS2C::default_instance_ = new MsgTriggerGateS2C();
  MsgGatePoint::default_instance_ = new MsgGatePoint();
  MsgGatePoint_Target::default_instance_ = new MsgGatePoint_Target();
  MsgMapCfgInfo::default_instance_ = new MsgMapCfgInfo();
  MsgMapCfgInfo_Layout::default_instance_ = new MsgMapCfgInfo_Layout();
  MsgMapCfgInfo_PopBoxBase::default_instance_ = new MsgMapCfgInfo_PopBoxBase();
  MsgMapCfgInfo_PopBoxBase_Pop::default_instance_ = new MsgMapCfgInfo_PopBoxBase_Pop();
  MsgMapCfgInfo_PopBoxBase_Mob::default_instance_ = new MsgMapCfgInfo_PopBoxBase_Mob();
  MsgMapCfgInfo_PopBoxBase_Build::default_instance_ = new MsgMapCfgInfo_PopBoxBase_Build();
  MsgMapCfgInfo_PopBoxBase_UserData::default_instance_ = new MsgMapCfgInfo_PopBoxBase_UserData();
  MsgMapCfgInfo_PopBox::default_instance_ = new MsgMapCfgInfo_PopBox();
  MsgMapCfgInfo_PopSavedBox::default_instance_ = new MsgMapCfgInfo_PopSavedBox();
  MsgMapCfgInfo_Vehicle::default_instance_ = new MsgMapCfgInfo_Vehicle();
  MsgMapCfgInfo_Airship::default_instance_ = new MsgMapCfgInfo_Airship();
  MsgGateTargetMS2GS::default_instance_ = new MsgGateTargetMS2GS();
  MsgJoinMap::default_instance_ = new MsgJoinMap();
  MsgJoinMapRs_MS2GS::default_instance_ = new MsgJoinMapRs_MS2GS();
  MsgJoinMapRs::default_instance_ = new MsgJoinMapRs();
  MsgQuitMapC2S::default_instance_ = new MsgQuitMapC2S();
  MsgEnterPublicMapC2S::default_instance_ = new MsgEnterPublicMapC2S();
  MsgObjectS2C::default_instance_ = new MsgObjectS2C();
  MsgMapObjMoveS2C::default_instance_ = new MsgMapObjMoveS2C();
  MsgMapLayoutInfo_MS2C::default_instance_ = new MsgMapLayoutInfo_MS2C();
  MsgMapLayoutInfo_MS2C_LayoutRoomInfo::default_instance_ = new MsgMapLayoutInfo_MS2C_LayoutRoomInfo();
  MsgRequestSyncDataGS2MS::default_instance_ = new MsgRequestSyncDataGS2MS();
  MsgSyncTowerBuildData::default_instance_ = new MsgSyncTowerBuildData();
  MsgPlantUserData::default_instance_ = new MsgPlantUserData();
  MsgSyncPlantUserData::default_instance_ = new MsgSyncPlantUserData();
  MsgTriggerProbabilityData::default_instance_ = new MsgTriggerProbabilityData();
  MsgLSSurvivalEventFlagData::default_instance_ = new MsgLSSurvivalEventFlagData();
  MsgSyncFeedingProductSpeed::default_instance_ = new MsgSyncFeedingProductSpeed();
  MsgReportKillMobRequest::default_instance_ = new MsgReportKillMobRequest();
  MsgSyncClientLocalDataC2S::default_instance_ = new MsgSyncClientLocalDataC2S();
  MsgSyncClientLocalDataC2S_BlockGrid::default_instance_ = new MsgSyncClientLocalDataC2S_BlockGrid();
  MsgSyncClientLocalDataC2S_MobKillCount::default_instance_ = new MsgSyncClientLocalDataC2S_MobKillCount();
  MsgSyncClientLocalDataS2C::default_instance_ = new MsgSyncClientLocalDataS2C();
  MsgUpdateTriggerProbabilityData::default_instance_ = new MsgUpdateTriggerProbabilityData();
  MsgRemovePrivateMapMGS2MS::default_instance_ = new MsgRemovePrivateMapMGS2MS();
  MsgRemovePrivateMapResultMS2MGS::default_instance_ = new MsgRemovePrivateMapResultMS2MGS();
  MsgNotifyClearDirtyGS2MS::default_instance_ = new MsgNotifyClearDirtyGS2MS();
  MsgCharacterBeBeatBackS2C::default_instance_ = new MsgCharacterBeBeatBackS2C();
  MsgPlayerReleaseByMapServer::default_instance_ = new MsgPlayerReleaseByMapServer();
  MsgMapServerRequestLockPlayer::default_instance_ = new MsgMapServerRequestLockPlayer();
  MsgGameServerNotifyReleasePlayer::default_instance_ = new MsgGameServerNotifyReleasePlayer();
  MsgMapServerInfoSync::default_instance_ = new MsgMapServerInfoSync();
  MsgPlayerBaseData::default_instance_->InitAsDefaultInstance();
  MsgPlayerEndless::default_instance_->InitAsDefaultInstance();
  MsgSyncPlayToGS::default_instance_->InitAsDefaultInstance();
  MsgJoinMapG2C::default_instance_->InitAsDefaultInstance();
  MsgQuitMap::default_instance_->InitAsDefaultInstance();
  MsgQuitMapNtf_S2S::default_instance_->InitAsDefaultInstance();
  MsgQueyMap::default_instance_->InitAsDefaultInstance();
  MsgMapInfo::default_instance_->InitAsDefaultInstance();
  MsgMapBlock::default_instance_->InitAsDefaultInstance();
  MsgMapBlockToClient::default_instance_->InitAsDefaultInstance();
  MsgMapBlockToClient_BlockBatchData::default_instance_->InitAsDefaultInstance();
  PlayerMovement::default_instance_->InitAsDefaultInstance();
  MsgNotifyPlayerMovementC2G::default_instance_->InitAsDefaultInstance();
  MsgNotifyPlayerMovementG2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerAppearance::default_instance_->InitAsDefaultInstance();
  MsgMagicObjectAppearance::default_instance_->InitAsDefaultInstance();
  MsgMapObjectLeaveView::default_instance_->InitAsDefaultInstance();
  MsgMapClientCreateMapDoneC2G::default_instance_->InitAsDefaultInstance();
  MsgMapClientUploadDoneReq::default_instance_->InitAsDefaultInstance();
  MsgMapSrvLoadDone::default_instance_->InitAsDefaultInstance();
  MsgMapObjectPreAttack_S2C::default_instance_->InitAsDefaultInstance();
  MsgMapObjectUnderAttackG2C::default_instance_->InitAsDefaultInstance();
  MsgCharacterDeadS2C::default_instance_->InitAsDefaultInstance();
  MsgCharacterReviveS2C::default_instance_->InitAsDefaultInstance();
  MsgSyncPlayerDataToMapServerDone_GS2MS::default_instance_->InitAsDefaultInstance();
  MsgTriggerGateC2S::default_instance_->InitAsDefaultInstance();
  MsgTriggerGateS2C::default_instance_->InitAsDefaultInstance();
  MsgGatePoint::default_instance_->InitAsDefaultInstance();
  MsgGatePoint_Target::default_instance_->InitAsDefaultInstance();
  MsgMapCfgInfo::default_instance_->InitAsDefaultInstance();
  MsgMapCfgInfo_Layout::default_instance_->InitAsDefaultInstance();
  MsgMapCfgInfo_PopBoxBase::default_instance_->InitAsDefaultInstance();
  MsgMapCfgInfo_PopBoxBase_Pop::default_instance_->InitAsDefaultInstance();
  MsgMapCfgInfo_PopBoxBase_Mob::default_instance_->InitAsDefaultInstance();
  MsgMapCfgInfo_PopBoxBase_Build::default_instance_->InitAsDefaultInstance();
  MsgMapCfgInfo_PopBoxBase_UserData::default_instance_->InitAsDefaultInstance();
  MsgMapCfgInfo_PopBox::default_instance_->InitAsDefaultInstance();
  MsgMapCfgInfo_PopSavedBox::default_instance_->InitAsDefaultInstance();
  MsgMapCfgInfo_Vehicle::default_instance_->InitAsDefaultInstance();
  MsgMapCfgInfo_Airship::default_instance_->InitAsDefaultInstance();
  MsgGateTargetMS2GS::default_instance_->InitAsDefaultInstance();
  MsgJoinMap::default_instance_->InitAsDefaultInstance();
  MsgJoinMapRs_MS2GS::default_instance_->InitAsDefaultInstance();
  MsgJoinMapRs::default_instance_->InitAsDefaultInstance();
  MsgQuitMapC2S::default_instance_->InitAsDefaultInstance();
  MsgEnterPublicMapC2S::default_instance_->InitAsDefaultInstance();
  MsgObjectS2C::default_instance_->InitAsDefaultInstance();
  MsgMapObjMoveS2C::default_instance_->InitAsDefaultInstance();
  MsgMapLayoutInfo_MS2C::default_instance_->InitAsDefaultInstance();
  MsgMapLayoutInfo_MS2C_LayoutRoomInfo::default_instance_->InitAsDefaultInstance();
  MsgRequestSyncDataGS2MS::default_instance_->InitAsDefaultInstance();
  MsgSyncTowerBuildData::default_instance_->InitAsDefaultInstance();
  MsgPlantUserData::default_instance_->InitAsDefaultInstance();
  MsgSyncPlantUserData::default_instance_->InitAsDefaultInstance();
  MsgTriggerProbabilityData::default_instance_->InitAsDefaultInstance();
  MsgLSSurvivalEventFlagData::default_instance_->InitAsDefaultInstance();
  MsgSyncFeedingProductSpeed::default_instance_->InitAsDefaultInstance();
  MsgReportKillMobRequest::default_instance_->InitAsDefaultInstance();
  MsgSyncClientLocalDataC2S::default_instance_->InitAsDefaultInstance();
  MsgSyncClientLocalDataC2S_BlockGrid::default_instance_->InitAsDefaultInstance();
  MsgSyncClientLocalDataC2S_MobKillCount::default_instance_->InitAsDefaultInstance();
  MsgSyncClientLocalDataS2C::default_instance_->InitAsDefaultInstance();
  MsgUpdateTriggerProbabilityData::default_instance_->InitAsDefaultInstance();
  MsgRemovePrivateMapMGS2MS::default_instance_->InitAsDefaultInstance();
  MsgRemovePrivateMapResultMS2MGS::default_instance_->InitAsDefaultInstance();
  MsgNotifyClearDirtyGS2MS::default_instance_->InitAsDefaultInstance();
  MsgCharacterBeBeatBackS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerReleaseByMapServer::default_instance_->InitAsDefaultInstance();
  MsgMapServerRequestLockPlayer::default_instance_->InitAsDefaultInstance();
  MsgGameServerNotifyReleasePlayer::default_instance_->InitAsDefaultInstance();
  MsgMapServerInfoSync::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgMapServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgMapServer_2eproto {
  StaticDescriptorInitializer_MsgMapServer_2eproto() {
    protobuf_AddDesc_MsgMapServer_2eproto();
  }
} static_descriptor_initializer_MsgMapServer_2eproto_;
const ::google::protobuf::EnumDescriptor* EN_GAME_MAP_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EN_GAME_MAP_MODE_descriptor_;
}
bool EN_GAME_MAP_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REVIVE_RES_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REVIVE_RES_descriptor_;
}
bool REVIVE_RES_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JOIN_MAP_RS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOIN_MAP_RS_descriptor_;
}
bool JOIN_MAP_RS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SYNC_CLIENT_LOCAL_DATA_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SYNC_CLIENT_LOCAL_DATA_STATE_descriptor_;
}
bool SYNC_CLIENT_LOCAL_DATA_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SYNC_CLIENT_LOCAL_DATA_FLAG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SYNC_CLIENT_LOCAL_DATA_FLAG_descriptor_;
}
bool SYNC_CLIENT_LOCAL_DATA_FLAG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SYNC_TOWERBUILD_OP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SYNC_TOWERBUILD_OP_descriptor_;
}
bool SYNC_TOWERBUILD_OP_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SYNC_PLANT_OP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SYNC_PLANT_OP_descriptor_;
}
bool SYNC_PLANT_OP_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SYNC_BUILDDATA_OP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SYNC_BUILDDATA_OP_descriptor_;
}
bool SYNC_BUILDDATA_OP_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SYNC_CLIENT_LOCAL_DATA_RES_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SYNC_CLIENT_LOCAL_DATA_RES_descriptor_;
}
bool SYNC_CLIENT_LOCAL_DATA_RES_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerBaseData::kPrivatePosFieldNumber;
const int MsgPlayerBaseData::kDungeonPosFieldNumber;
const int MsgPlayerBaseData::kHpFieldNumber;
const int MsgPlayerBaseData::kMpFieldNumber;
const int MsgPlayerBaseData::kLvFieldNumber;
const int MsgPlayerBaseData::kExpFieldNumber;
const int MsgPlayerBaseData::kOxyFieldNumber;
const int MsgPlayerBaseData::kFoodFieldNumber;
const int MsgPlayerBaseData::kCoinFieldNumber;
const int MsgPlayerBaseData::kCashFieldNumber;
const int MsgPlayerBaseData::kTicketFieldNumber;
const int MsgPlayerBaseData::kFirstlogintimeFieldNumber;
const int MsgPlayerBaseData::kOnhandItemFieldNumber;
const int MsgPlayerBaseData::kNicknameFieldNumber;
const int MsgPlayerBaseData::kFaceFieldNumber;
const int MsgPlayerBaseData::kPrihpFieldNumber;
const int MsgPlayerBaseData::kPrimpFieldNumber;
const int MsgPlayerBaseData::kMapuuidFieldNumber;
const int MsgPlayerBaseData::kCurdungeonidFieldNumber;
const int MsgPlayerBaseData::kLottytimeFieldNumber;
const int MsgPlayerBaseData::kSequipcosFieldNumber;
const int MsgPlayerBaseData::kGenderFieldNumber;
const int MsgPlayerBaseData::kSkinColorFieldNumber;
const int MsgPlayerBaseData::kHairFieldNumber;
const int MsgPlayerBaseData::kHairColorFieldNumber;
const int MsgPlayerBaseData::kDepositPotTimeFieldNumber;
const int MsgPlayerBaseData::kDeviceFieldNumber;
const int MsgPlayerBaseData::kLastClientUploadDataSerialFieldNumber;
const int MsgPlayerBaseData::kDirtyFieldNumber;
const int MsgPlayerBaseData::kMailVersionFieldNumber;
const int MsgPlayerBaseData::kLastSaveClientLocalDataTimeFieldNumber;
const int MsgPlayerBaseData::kLastUpgradeTimeFieldNumber;
const int MsgPlayerBaseData::kClientVersionFieldNumber;
#endif  // !_MSC_VER

MsgPlayerBaseData::MsgPlayerBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerBaseData)
}

void MsgPlayerBaseData::InitAsDefaultInstance() {
  privatepos_ = const_cast< ::MsgPB::MsgPoint*>(&::MsgPB::MsgPoint::default_instance());
  dungeonpos_ = const_cast< ::MsgPB::MsgPoint*>(&::MsgPB::MsgPoint::default_instance());
}

MsgPlayerBaseData::MsgPlayerBaseData(const MsgPlayerBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerBaseData)
}

void MsgPlayerBaseData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  privatepos_ = NULL;
  dungeonpos_ = NULL;
  hp_ = 0;
  mp_ = 0;
  lv_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  oxy_ = 0;
  food_ = 0;
  coin_ = 0;
  cash_ = 0;
  ticket_ = 0;
  firstlogintime_ = GOOGLE_LONGLONG(0);
  onhand_item_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  face_ = 0;
  prihp_ = 0;
  primp_ = 0;
  mapuuid_ = GOOGLE_LONGLONG(0);
  curdungeonid_ = 0;
  lottytime_ = GOOGLE_LONGLONG(0);
  sequipcos_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  skincolor_ = 0;
  hair_ = 0;
  haircolor_ = 0;
  depositpottime_ = GOOGLE_LONGLONG(0);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastclientuploaddataserial_ = GOOGLE_LONGLONG(0);
  dirty_ = GOOGLE_LONGLONG(0);
  mail_version_ = GOOGLE_LONGLONG(0);
  lastsaveclientlocaldatatime_ = GOOGLE_LONGLONG(0);
  lastupgradetime_ = GOOGLE_LONGLONG(0);
  client_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerBaseData::~MsgPlayerBaseData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerBaseData)
  SharedDtor();
}

void MsgPlayerBaseData::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (sequipcos_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequipcos_;
  }
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (this != default_instance_) {
    delete privatepos_;
    delete dungeonpos_;
  }
}

void MsgPlayerBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerBaseData_descriptor_;
}

const MsgPlayerBaseData& MsgPlayerBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgPlayerBaseData* MsgPlayerBaseData::default_instance_ = NULL;

MsgPlayerBaseData* MsgPlayerBaseData::New() const {
  return new MsgPlayerBaseData;
}

void MsgPlayerBaseData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerBaseData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(hp_, food_);
    if (has_privatepos()) {
      if (privatepos_ != NULL) privatepos_->::MsgPB::MsgPoint::Clear();
    }
    if (has_dungeonpos()) {
      if (dungeonpos_ != NULL) dungeonpos_->::MsgPB::MsgPoint::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(coin_, firstlogintime_);
    ZR_(onhand_item_, prihp_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(primp_, gender_);
    ZR_(skincolor_, hair_);
    if (has_sequipcos()) {
      if (sequipcos_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sequipcos_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(lastclientuploaddataserial_, haircolor_);
    ZR_(mail_version_, lastupgradetime_);
    depositpottime_ = GOOGLE_LONGLONG(0);
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
  }
  client_version_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerBaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.MsgPoint privatePos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privatepos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dungeonPos;
        break;
      }

      // optional .MsgPB.MsgPoint dungeonPos = 2;
      case 2: {
        if (tag == 18) {
         parse_dungeonPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dungeonpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // optional int32 hp = 3;
      case 3: {
        if (tag == 24) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mp;
        break;
      }

      // optional int32 mp = 4;
      case 4: {
        if (tag == 32) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // optional int32 lv = 5;
      case 5: {
        if (tag == 40) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional int64 exp = 6;
      case 6: {
        if (tag == 48) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_oxy;
        break;
      }

      // optional int32 oxy = 7;
      case 7: {
        if (tag == 56) {
         parse_oxy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oxy_)));
          set_has_oxy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_food;
        break;
      }

      // optional int32 food = 8;
      case 8: {
        if (tag == 64) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_coin;
        break;
      }

      // optional int32 coin = 9;
      case 9: {
        if (tag == 72) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_cash;
        break;
      }

      // optional int32 cash = 10;
      case 10: {
        if (tag == 80) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ticket;
        break;
      }

      // optional int32 ticket = 11;
      case 11: {
        if (tag == 88) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_firstlogintime;
        break;
      }

      // optional int64 firstlogintime = 12;
      case 12: {
        if (tag == 96) {
         parse_firstlogintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firstlogintime_)));
          set_has_firstlogintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_onhand_item;
        break;
      }

      // optional .MsgPB.EQUIP_PACKET_POS onhand_item = 13;
      case 13: {
        if (tag == 104) {
         parse_onhand_item:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EQUIP_PACKET_POS_IsValid(value)) {
            set_onhand_item(static_cast< ::MsgPB::EQUIP_PACKET_POS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_nickname;
        break;
      }

      // optional string nickname = 14;
      case 14: {
        if (tag == 114) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_face;
        break;
      }

      // optional int32 face = 15;
      case 15: {
        if (tag == 120) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_prihp;
        break;
      }

      // optional int32 prihp = 16;
      case 16: {
        if (tag == 128) {
         parse_prihp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prihp_)));
          set_has_prihp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_primp;
        break;
      }

      // optional int32 primp = 17;
      case 17: {
        if (tag == 136) {
         parse_primp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primp_)));
          set_has_primp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mapuuid;
        break;
      }

      // optional int64 mapuuid = 18;
      case 18: {
        if (tag == 144) {
         parse_mapuuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapuuid_)));
          set_has_mapuuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_curdungeonid;
        break;
      }

      // optional int32 curdungeonid = 19;
      case 19: {
        if (tag == 152) {
         parse_curdungeonid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curdungeonid_)));
          set_has_curdungeonid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_lottytime;
        break;
      }

      // optional int64 lottytime = 20;
      case 20: {
        if (tag == 160) {
         parse_lottytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lottytime_)));
          set_has_lottytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_sequipcos;
        break;
      }

      // optional string sequipcos = 25;
      case 25: {
        if (tag == 202) {
         parse_sequipcos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequipcos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequipcos().data(), this->sequipcos().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sequipcos");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_gender;
        break;
      }

      // optional int32 gender = 26;
      case 26: {
        if (tag == 208) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_skinColor;
        break;
      }

      // optional int32 skinColor = 27;
      case 27: {
        if (tag == 216) {
         parse_skinColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skincolor_)));
          set_has_skincolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_hair;
        break;
      }

      // optional int32 hair = 28;
      case 28: {
        if (tag == 224) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_hairColor;
        break;
      }

      // optional int32 hairColor = 29;
      case 29: {
        if (tag == 232) {
         parse_hairColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_depositPotTime;
        break;
      }

      // optional int64 depositPotTime = 30;
      case 30: {
        if (tag == 240) {
         parse_depositPotTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &depositpottime_)));
          set_has_depositpottime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_device;
        break;
      }

      // optional string device = 31;
      case 31: {
        if (tag == 250) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_lastClientUploadDataSerial;
        break;
      }

      // optional int64 lastClientUploadDataSerial = 32;
      case 32: {
        if (tag == 256) {
         parse_lastClientUploadDataSerial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastclientuploaddataserial_)));
          set_has_lastclientuploaddataserial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_dirty;
        break;
      }

      // optional int64 dirty = 33;
      case 33: {
        if (tag == 264) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_mail_version;
        break;
      }

      // optional int64 mail_version = 34;
      case 34: {
        if (tag == 272) {
         parse_mail_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mail_version_)));
          set_has_mail_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_lastSaveClientLocalDataTime;
        break;
      }

      // optional int64 lastSaveClientLocalDataTime = 35;
      case 35: {
        if (tag == 280) {
         parse_lastSaveClientLocalDataTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastsaveclientlocaldatatime_)));
          set_has_lastsaveclientlocaldatatime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_lastUpgradeTime;
        break;
      }

      // optional int64 lastUpgradeTime = 36;
      case 36: {
        if (tag == 288) {
         parse_lastUpgradeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastupgradetime_)));
          set_has_lastupgradetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_client_version;
        break;
      }

      // optional int32 client_version = 37;
      case 37: {
        if (tag == 296) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerBaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerBaseData)
  return false;
#undef DO_
}

void MsgPlayerBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerBaseData)
  // optional .MsgPB.MsgPoint privatePos = 1;
  if (has_privatepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->privatepos(), output);
  }

  // optional .MsgPB.MsgPoint dungeonPos = 2;
  if (has_dungeonpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dungeonpos(), output);
  }

  // optional int32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  // optional int32 mp = 4;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mp(), output);
  }

  // optional int32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lv(), output);
  }

  // optional int64 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->exp(), output);
  }

  // optional int32 oxy = 7;
  if (has_oxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->oxy(), output);
  }

  // optional int32 food = 8;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->food(), output);
  }

  // optional int32 coin = 9;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->coin(), output);
  }

  // optional int32 cash = 10;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cash(), output);
  }

  // optional int32 ticket = 11;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ticket(), output);
  }

  // optional int64 firstlogintime = 12;
  if (has_firstlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->firstlogintime(), output);
  }

  // optional .MsgPB.EQUIP_PACKET_POS onhand_item = 13;
  if (has_onhand_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->onhand_item(), output);
  }

  // optional string nickname = 14;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->nickname(), output);
  }

  // optional int32 face = 15;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->face(), output);
  }

  // optional int32 prihp = 16;
  if (has_prihp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->prihp(), output);
  }

  // optional int32 primp = 17;
  if (has_primp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->primp(), output);
  }

  // optional int64 mapuuid = 18;
  if (has_mapuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->mapuuid(), output);
  }

  // optional int32 curdungeonid = 19;
  if (has_curdungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->curdungeonid(), output);
  }

  // optional int64 lottytime = 20;
  if (has_lottytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->lottytime(), output);
  }

  // optional string sequipcos = 25;
  if (has_sequipcos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequipcos().data(), this->sequipcos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequipcos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->sequipcos(), output);
  }

  // optional int32 gender = 26;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->gender(), output);
  }

  // optional int32 skinColor = 27;
  if (has_skincolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->skincolor(), output);
  }

  // optional int32 hair = 28;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->hair(), output);
  }

  // optional int32 hairColor = 29;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->haircolor(), output);
  }

  // optional int64 depositPotTime = 30;
  if (has_depositpottime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->depositpottime(), output);
  }

  // optional string device = 31;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->device(), output);
  }

  // optional int64 lastClientUploadDataSerial = 32;
  if (has_lastclientuploaddataserial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->lastclientuploaddataserial(), output);
  }

  // optional int64 dirty = 33;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->dirty(), output);
  }

  // optional int64 mail_version = 34;
  if (has_mail_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->mail_version(), output);
  }

  // optional int64 lastSaveClientLocalDataTime = 35;
  if (has_lastsaveclientlocaldatatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->lastsaveclientlocaldatatime(), output);
  }

  // optional int64 lastUpgradeTime = 36;
  if (has_lastupgradetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->lastupgradetime(), output);
  }

  // optional int32 client_version = 37;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->client_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerBaseData)
}

::google::protobuf::uint8* MsgPlayerBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerBaseData)
  // optional .MsgPB.MsgPoint privatePos = 1;
  if (has_privatepos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->privatepos(), target);
  }

  // optional .MsgPB.MsgPoint dungeonPos = 2;
  if (has_dungeonpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dungeonpos(), target);
  }

  // optional int32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }

  // optional int32 mp = 4;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mp(), target);
  }

  // optional int32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lv(), target);
  }

  // optional int64 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->exp(), target);
  }

  // optional int32 oxy = 7;
  if (has_oxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->oxy(), target);
  }

  // optional int32 food = 8;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->food(), target);
  }

  // optional int32 coin = 9;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->coin(), target);
  }

  // optional int32 cash = 10;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cash(), target);
  }

  // optional int32 ticket = 11;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ticket(), target);
  }

  // optional int64 firstlogintime = 12;
  if (has_firstlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->firstlogintime(), target);
  }

  // optional .MsgPB.EQUIP_PACKET_POS onhand_item = 13;
  if (has_onhand_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->onhand_item(), target);
  }

  // optional string nickname = 14;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->nickname(), target);
  }

  // optional int32 face = 15;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->face(), target);
  }

  // optional int32 prihp = 16;
  if (has_prihp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->prihp(), target);
  }

  // optional int32 primp = 17;
  if (has_primp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->primp(), target);
  }

  // optional int64 mapuuid = 18;
  if (has_mapuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->mapuuid(), target);
  }

  // optional int32 curdungeonid = 19;
  if (has_curdungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->curdungeonid(), target);
  }

  // optional int64 lottytime = 20;
  if (has_lottytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->lottytime(), target);
  }

  // optional string sequipcos = 25;
  if (has_sequipcos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequipcos().data(), this->sequipcos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequipcos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->sequipcos(), target);
  }

  // optional int32 gender = 26;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->gender(), target);
  }

  // optional int32 skinColor = 27;
  if (has_skincolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->skincolor(), target);
  }

  // optional int32 hair = 28;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->hair(), target);
  }

  // optional int32 hairColor = 29;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->haircolor(), target);
  }

  // optional int64 depositPotTime = 30;
  if (has_depositpottime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->depositpottime(), target);
  }

  // optional string device = 31;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->device(), target);
  }

  // optional int64 lastClientUploadDataSerial = 32;
  if (has_lastclientuploaddataserial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->lastclientuploaddataserial(), target);
  }

  // optional int64 dirty = 33;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->dirty(), target);
  }

  // optional int64 mail_version = 34;
  if (has_mail_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->mail_version(), target);
  }

  // optional int64 lastSaveClientLocalDataTime = 35;
  if (has_lastsaveclientlocaldatatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->lastsaveclientlocaldatatime(), target);
  }

  // optional int64 lastUpgradeTime = 36;
  if (has_lastupgradetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->lastupgradetime(), target);
  }

  // optional int32 client_version = 37;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->client_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerBaseData)
  return target;
}

int MsgPlayerBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.MsgPoint privatePos = 1;
    if (has_privatepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privatepos());
    }

    // optional .MsgPB.MsgPoint dungeonPos = 2;
    if (has_dungeonpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dungeonpos());
    }

    // optional int32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 4;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional int32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int64 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 oxy = 7;
    if (has_oxy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oxy());
    }

    // optional int32 food = 8;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->food());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 coin = 9;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // optional int32 cash = 10;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cash());
    }

    // optional int32 ticket = 11;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket());
    }

    // optional int64 firstlogintime = 12;
    if (has_firstlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->firstlogintime());
    }

    // optional .MsgPB.EQUIP_PACKET_POS onhand_item = 13;
    if (has_onhand_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->onhand_item());
    }

    // optional string nickname = 14;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 face = 15;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->face());
    }

    // optional int32 prihp = 16;
    if (has_prihp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prihp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 primp = 17;
    if (has_primp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primp());
    }

    // optional int64 mapuuid = 18;
    if (has_mapuuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapuuid());
    }

    // optional int32 curdungeonid = 19;
    if (has_curdungeonid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curdungeonid());
    }

    // optional int64 lottytime = 20;
    if (has_lottytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lottytime());
    }

    // optional string sequipcos = 25;
    if (has_sequipcos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequipcos());
    }

    // optional int32 gender = 26;
    if (has_gender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 skinColor = 27;
    if (has_skincolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skincolor());
    }

    // optional int32 hair = 28;
    if (has_hair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 hairColor = 29;
    if (has_haircolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haircolor());
    }

    // optional int64 depositPotTime = 30;
    if (has_depositpottime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->depositpottime());
    }

    // optional string device = 31;
    if (has_device()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional int64 lastClientUploadDataSerial = 32;
    if (has_lastclientuploaddataserial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastclientuploaddataserial());
    }

    // optional int64 dirty = 33;
    if (has_dirty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirty());
    }

    // optional int64 mail_version = 34;
    if (has_mail_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mail_version());
    }

    // optional int64 lastSaveClientLocalDataTime = 35;
    if (has_lastsaveclientlocaldatatime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastsaveclientlocaldatatime());
    }

    // optional int64 lastUpgradeTime = 36;
    if (has_lastupgradetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastupgradetime());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 client_version = 37;
    if (has_client_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerBaseData::MergeFrom(const MsgPlayerBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_privatepos()) {
      mutable_privatepos()->::MsgPB::MsgPoint::MergeFrom(from.privatepos());
    }
    if (from.has_dungeonpos()) {
      mutable_dungeonpos()->::MsgPB::MsgPoint::MergeFrom(from.dungeonpos());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_oxy()) {
      set_oxy(from.oxy());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_firstlogintime()) {
      set_firstlogintime(from.firstlogintime());
    }
    if (from.has_onhand_item()) {
      set_onhand_item(from.onhand_item());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_prihp()) {
      set_prihp(from.prihp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_primp()) {
      set_primp(from.primp());
    }
    if (from.has_mapuuid()) {
      set_mapuuid(from.mapuuid());
    }
    if (from.has_curdungeonid()) {
      set_curdungeonid(from.curdungeonid());
    }
    if (from.has_lottytime()) {
      set_lottytime(from.lottytime());
    }
    if (from.has_sequipcos()) {
      set_sequipcos(from.sequipcos());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_skincolor()) {
      set_skincolor(from.skincolor());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_depositpottime()) {
      set_depositpottime(from.depositpottime());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_lastclientuploaddataserial()) {
      set_lastclientuploaddataserial(from.lastclientuploaddataserial());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
    if (from.has_mail_version()) {
      set_mail_version(from.mail_version());
    }
    if (from.has_lastsaveclientlocaldatatime()) {
      set_lastsaveclientlocaldatatime(from.lastsaveclientlocaldatatime());
    }
    if (from.has_lastupgradetime()) {
      set_lastupgradetime(from.lastupgradetime());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerBaseData::CopyFrom(const MsgPlayerBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerBaseData::IsInitialized() const {

  return true;
}

void MsgPlayerBaseData::Swap(MsgPlayerBaseData* other) {
  if (other != this) {
    std::swap(privatepos_, other->privatepos_);
    std::swap(dungeonpos_, other->dungeonpos_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(oxy_, other->oxy_);
    std::swap(food_, other->food_);
    std::swap(coin_, other->coin_);
    std::swap(cash_, other->cash_);
    std::swap(ticket_, other->ticket_);
    std::swap(firstlogintime_, other->firstlogintime_);
    std::swap(onhand_item_, other->onhand_item_);
    std::swap(nickname_, other->nickname_);
    std::swap(face_, other->face_);
    std::swap(prihp_, other->prihp_);
    std::swap(primp_, other->primp_);
    std::swap(mapuuid_, other->mapuuid_);
    std::swap(curdungeonid_, other->curdungeonid_);
    std::swap(lottytime_, other->lottytime_);
    std::swap(sequipcos_, other->sequipcos_);
    std::swap(gender_, other->gender_);
    std::swap(skincolor_, other->skincolor_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(depositpottime_, other->depositpottime_);
    std::swap(device_, other->device_);
    std::swap(lastclientuploaddataserial_, other->lastclientuploaddataserial_);
    std::swap(dirty_, other->dirty_);
    std::swap(mail_version_, other->mail_version_);
    std::swap(lastsaveclientlocaldatatime_, other->lastsaveclientlocaldatatime_);
    std::swap(lastupgradetime_, other->lastupgradetime_);
    std::swap(client_version_, other->client_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerBaseData_descriptor_;
  metadata.reflection = MsgPlayerBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerEndless::kIggidFieldNumber;
const int MsgPlayerEndless::kLevFieldNumber;
const int MsgPlayerEndless::kExpFieldNumber;
const int MsgPlayerEndless::kCoinFieldNumber;
const int MsgPlayerEndless::kSattrinhertFieldNumber;
const int MsgPlayerEndless::kRevivenumFieldNumber;
const int MsgPlayerEndless::kHpFieldNumber;
const int MsgPlayerEndless::kMpFieldNumber;
const int MsgPlayerEndless::kGambleFieldNumber;
const int MsgPlayerEndless::kFaithFieldNumber;
const int MsgPlayerEndless::kEndlessUnlockFieldNumber;
const int MsgPlayerEndless::kPieceFieldNumber;
const int MsgPlayerEndless::kTempdataFieldNumber;
const int MsgPlayerEndless::kCalllayerFieldNumber;
const int MsgPlayerEndless::kDirtyFieldNumber;
#endif  // !_MSC_VER

MsgPlayerEndless::MsgPlayerEndless()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerEndless)
}

void MsgPlayerEndless::InitAsDefaultInstance() {
}

MsgPlayerEndless::MsgPlayerEndless(const MsgPlayerEndless& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerEndless)
}

void MsgPlayerEndless::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  lev_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  coin_ = 0;
  sattrinhert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revivenum_ = 0;
  hp_ = 0;
  mp_ = 0;
  gamble_ = 0;
  faith_ = 0;
  endless_unlock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  piece_ = 0;
  tempdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  calllayer_ = 0;
  dirty_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerEndless::~MsgPlayerEndless() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerEndless)
  SharedDtor();
}

void MsgPlayerEndless::SharedDtor() {
  if (sattrinhert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sattrinhert_;
  }
  if (endless_unlock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endless_unlock_;
  }
  if (tempdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tempdata_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlayerEndless::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerEndless::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerEndless_descriptor_;
}

const MsgPlayerEndless& MsgPlayerEndless::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgPlayerEndless* MsgPlayerEndless::default_instance_ = NULL;

MsgPlayerEndless* MsgPlayerEndless::New() const {
  return new MsgPlayerEndless;
}

void MsgPlayerEndless::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerEndless*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(iggid_, coin_);
    ZR_(revivenum_, mp_);
    if (has_sattrinhert()) {
      if (sattrinhert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sattrinhert_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(faith_, piece_);
    ZR_(dirty_, calllayer_);
    gamble_ = 0;
    if (has_endless_unlock()) {
      if (endless_unlock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endless_unlock_->clear();
      }
    }
    if (has_tempdata()) {
      if (tempdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tempdata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerEndless::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerEndless)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iggid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lev;
        break;
      }

      // optional int32 lev = 2;
      case 2: {
        if (tag == 16) {
         parse_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lev_)));
          set_has_lev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int64 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_coin;
        break;
      }

      // optional int32 coin = 4;
      case 4: {
        if (tag == 32) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sattrinhert;
        break;
      }

      // optional string sattrinhert = 5;
      case 5: {
        if (tag == 42) {
         parse_sattrinhert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sattrinhert()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sattrinhert().data(), this->sattrinhert().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sattrinhert");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_revivenum;
        break;
      }

      // optional int32 revivenum = 6;
      case 6: {
        if (tag == 48) {
         parse_revivenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revivenum_)));
          set_has_revivenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hp;
        break;
      }

      // optional int32 hp = 7;
      case 7: {
        if (tag == 56) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mp;
        break;
      }

      // optional int32 mp = 8;
      case 8: {
        if (tag == 64) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gamble;
        break;
      }

      // optional int32 gamble = 9;
      case 9: {
        if (tag == 72) {
         parse_gamble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamble_)));
          set_has_gamble();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_faith;
        break;
      }

      // optional int32 faith = 10;
      case 10: {
        if (tag == 80) {
         parse_faith:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faith_)));
          set_has_faith();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_endless_unlock;
        break;
      }

      // optional string endless_unlock = 11;
      case 11: {
        if (tag == 90) {
         parse_endless_unlock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endless_unlock()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endless_unlock().data(), this->endless_unlock().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endless_unlock");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_piece;
        break;
      }

      // optional int32 piece = 12;
      case 12: {
        if (tag == 96) {
         parse_piece:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piece_)));
          set_has_piece();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_tempdata;
        break;
      }

      // optional string tempdata = 13;
      case 13: {
        if (tag == 106) {
         parse_tempdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tempdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tempdata().data(), this->tempdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tempdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_calllayer;
        break;
      }

      // optional int32 calllayer = 14;
      case 14: {
        if (tag == 112) {
         parse_calllayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calllayer_)));
          set_has_calllayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_dirty;
        break;
      }

      // optional int64 dirty = 15;
      case 15: {
        if (tag == 120) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerEndless)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerEndless)
  return false;
#undef DO_
}

void MsgPlayerEndless::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerEndless)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iggid(), output);
  }

  // optional int32 lev = 2;
  if (has_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lev(), output);
  }

  // optional int64 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->exp(), output);
  }

  // optional int32 coin = 4;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->coin(), output);
  }

  // optional string sattrinhert = 5;
  if (has_sattrinhert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sattrinhert().data(), this->sattrinhert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sattrinhert");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sattrinhert(), output);
  }

  // optional int32 revivenum = 6;
  if (has_revivenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->revivenum(), output);
  }

  // optional int32 hp = 7;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hp(), output);
  }

  // optional int32 mp = 8;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mp(), output);
  }

  // optional int32 gamble = 9;
  if (has_gamble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gamble(), output);
  }

  // optional int32 faith = 10;
  if (has_faith()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->faith(), output);
  }

  // optional string endless_unlock = 11;
  if (has_endless_unlock()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endless_unlock().data(), this->endless_unlock().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endless_unlock");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->endless_unlock(), output);
  }

  // optional int32 piece = 12;
  if (has_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->piece(), output);
  }

  // optional string tempdata = 13;
  if (has_tempdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tempdata().data(), this->tempdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tempdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->tempdata(), output);
  }

  // optional int32 calllayer = 14;
  if (has_calllayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->calllayer(), output);
  }

  // optional int64 dirty = 15;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->dirty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerEndless)
}

::google::protobuf::uint8* MsgPlayerEndless::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerEndless)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iggid(), target);
  }

  // optional int32 lev = 2;
  if (has_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lev(), target);
  }

  // optional int64 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->exp(), target);
  }

  // optional int32 coin = 4;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->coin(), target);
  }

  // optional string sattrinhert = 5;
  if (has_sattrinhert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sattrinhert().data(), this->sattrinhert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sattrinhert");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sattrinhert(), target);
  }

  // optional int32 revivenum = 6;
  if (has_revivenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->revivenum(), target);
  }

  // optional int32 hp = 7;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hp(), target);
  }

  // optional int32 mp = 8;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mp(), target);
  }

  // optional int32 gamble = 9;
  if (has_gamble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gamble(), target);
  }

  // optional int32 faith = 10;
  if (has_faith()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->faith(), target);
  }

  // optional string endless_unlock = 11;
  if (has_endless_unlock()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endless_unlock().data(), this->endless_unlock().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endless_unlock");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->endless_unlock(), target);
  }

  // optional int32 piece = 12;
  if (has_piece()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->piece(), target);
  }

  // optional string tempdata = 13;
  if (has_tempdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tempdata().data(), this->tempdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tempdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->tempdata(), target);
  }

  // optional int32 calllayer = 14;
  if (has_calllayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->calllayer(), target);
  }

  // optional int64 dirty = 15;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->dirty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerEndless)
  return target;
}

int MsgPlayerEndless::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iggid = 1;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 lev = 2;
    if (has_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lev());
    }

    // optional int64 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 coin = 4;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // optional string sattrinhert = 5;
    if (has_sattrinhert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sattrinhert());
    }

    // optional int32 revivenum = 6;
    if (has_revivenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revivenum());
    }

    // optional int32 hp = 7;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 8;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 gamble = 9;
    if (has_gamble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamble());
    }

    // optional int32 faith = 10;
    if (has_faith()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faith());
    }

    // optional string endless_unlock = 11;
    if (has_endless_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endless_unlock());
    }

    // optional int32 piece = 12;
    if (has_piece()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piece());
    }

    // optional string tempdata = 13;
    if (has_tempdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tempdata());
    }

    // optional int32 calllayer = 14;
    if (has_calllayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calllayer());
    }

    // optional int64 dirty = 15;
    if (has_dirty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerEndless::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerEndless* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerEndless*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerEndless::MergeFrom(const MsgPlayerEndless& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_lev()) {
      set_lev(from.lev());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_sattrinhert()) {
      set_sattrinhert(from.sattrinhert());
    }
    if (from.has_revivenum()) {
      set_revivenum(from.revivenum());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gamble()) {
      set_gamble(from.gamble());
    }
    if (from.has_faith()) {
      set_faith(from.faith());
    }
    if (from.has_endless_unlock()) {
      set_endless_unlock(from.endless_unlock());
    }
    if (from.has_piece()) {
      set_piece(from.piece());
    }
    if (from.has_tempdata()) {
      set_tempdata(from.tempdata());
    }
    if (from.has_calllayer()) {
      set_calllayer(from.calllayer());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerEndless::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerEndless::CopyFrom(const MsgPlayerEndless& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerEndless::IsInitialized() const {

  return true;
}

void MsgPlayerEndless::Swap(MsgPlayerEndless* other) {
  if (other != this) {
    std::swap(iggid_, other->iggid_);
    std::swap(lev_, other->lev_);
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    std::swap(sattrinhert_, other->sattrinhert_);
    std::swap(revivenum_, other->revivenum_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(gamble_, other->gamble_);
    std::swap(faith_, other->faith_);
    std::swap(endless_unlock_, other->endless_unlock_);
    std::swap(piece_, other->piece_);
    std::swap(tempdata_, other->tempdata_);
    std::swap(calllayer_, other->calllayer_);
    std::swap(dirty_, other->dirty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerEndless::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerEndless_descriptor_;
  metadata.reflection = MsgPlayerEndless_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSyncPlayToGS::kMsgTypeFieldNumber;
const int MsgSyncPlayToGS::kIggidFieldNumber;
const int MsgSyncPlayToGS::kPosxFieldNumber;
const int MsgSyncPlayToGS::kPosyFieldNumber;
const int MsgSyncPlayToGS::kMapidFieldNumber;
const int MsgSyncPlayToGS::kHpFieldNumber;
const int MsgSyncPlayToGS::kMpFieldNumber;
const int MsgSyncPlayToGS::kDungeonmapuuidFieldNumber;
const int MsgSyncPlayToGS::kMaptypeFieldNumber;
const int MsgSyncPlayToGS::kFoodFieldNumber;
const int MsgSyncPlayToGS::kOxyFieldNumber;
#endif  // !_MSC_VER

MsgSyncPlayToGS::MsgSyncPlayToGS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgSyncPlayToGS)
}

void MsgSyncPlayToGS::InitAsDefaultInstance() {
}

MsgSyncPlayToGS::MsgSyncPlayToGS(const MsgSyncPlayToGS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgSyncPlayToGS)
}

void MsgSyncPlayToGS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1104;
  iggid_ = GOOGLE_LONGLONG(0);
  posx_ = 0;
  posy_ = 0;
  mapid_ = 0;
  hp_ = 0;
  mp_ = 0;
  dungeonmapuuid_ = GOOGLE_LONGLONG(0);
  maptype_ = 0;
  food_ = 0;
  oxy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSyncPlayToGS::~MsgSyncPlayToGS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgSyncPlayToGS)
  SharedDtor();
}

void MsgSyncPlayToGS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSyncPlayToGS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSyncPlayToGS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSyncPlayToGS_descriptor_;
}

const MsgSyncPlayToGS& MsgSyncPlayToGS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgSyncPlayToGS* MsgSyncPlayToGS::default_instance_ = NULL;

MsgSyncPlayToGS* MsgSyncPlayToGS::New() const {
  return new MsgSyncPlayToGS;
}

void MsgSyncPlayToGS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSyncPlayToGS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(posx_, dungeonmapuuid_);
    msgtype_ = 1104;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ZR_(maptype_, oxy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSyncPlayToGS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgSyncPlayToGS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_PLAYER_TO_GS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_posx;
        break;
      }

      // optional int32 posx = 3;
      case 3: {
        if (tag == 24) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_posy;
        break;
      }

      // optional int32 posy = 4;
      case 4: {
        if (tag == 32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 5;
      case 5: {
        if (tag == 40) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // optional int32 hp = 6;
      case 6: {
        if (tag == 48) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mp;
        break;
      }

      // optional int32 mp = 7;
      case 7: {
        if (tag == 56) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dungeonmapuuid;
        break;
      }

      // optional int64 dungeonmapuuid = 8;
      case 8: {
        if (tag == 64) {
         parse_dungeonmapuuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dungeonmapuuid_)));
          set_has_dungeonmapuuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_maptype;
        break;
      }

      // optional int32 maptype = 9;
      case 9: {
        if (tag == 72) {
         parse_maptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maptype_)));
          set_has_maptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_food;
        break;
      }

      // optional int32 food = 10;
      case 10: {
        if (tag == 80) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_oxy;
        break;
      }

      // optional int32 oxy = 11;
      case 11: {
        if (tag == 88) {
         parse_oxy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oxy_)));
          set_has_oxy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgSyncPlayToGS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgSyncPlayToGS)
  return false;
#undef DO_
}

void MsgSyncPlayToGS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgSyncPlayToGS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_PLAYER_TO_GS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // optional int32 posy = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posy(), output);
  }

  // optional int32 mapid = 5;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapid(), output);
  }

  // optional int32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hp(), output);
  }

  // optional int32 mp = 7;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mp(), output);
  }

  // optional int64 dungeonmapuuid = 8;
  if (has_dungeonmapuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->dungeonmapuuid(), output);
  }

  // optional int32 maptype = 9;
  if (has_maptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->maptype(), output);
  }

  // optional int32 food = 10;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->food(), output);
  }

  // optional int32 oxy = 11;
  if (has_oxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->oxy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgSyncPlayToGS)
}

::google::protobuf::uint8* MsgSyncPlayToGS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgSyncPlayToGS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_PLAYER_TO_GS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // optional int32 posy = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posy(), target);
  }

  // optional int32 mapid = 5;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapid(), target);
  }

  // optional int32 hp = 6;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hp(), target);
  }

  // optional int32 mp = 7;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mp(), target);
  }

  // optional int64 dungeonmapuuid = 8;
  if (has_dungeonmapuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->dungeonmapuuid(), target);
  }

  // optional int32 maptype = 9;
  if (has_maptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->maptype(), target);
  }

  // optional int32 food = 10;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->food(), target);
  }

  // optional int32 oxy = 11;
  if (has_oxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->oxy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgSyncPlayToGS)
  return target;
}

int MsgSyncPlayToGS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_PLAYER_TO_GS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 posx = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posy = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int32 mapid = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 7;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional int64 dungeonmapuuid = 8;
    if (has_dungeonmapuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dungeonmapuuid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 maptype = 9;
    if (has_maptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maptype());
    }

    // optional int32 food = 10;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->food());
    }

    // optional int32 oxy = 11;
    if (has_oxy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oxy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSyncPlayToGS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSyncPlayToGS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSyncPlayToGS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSyncPlayToGS::MergeFrom(const MsgSyncPlayToGS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_dungeonmapuuid()) {
      set_dungeonmapuuid(from.dungeonmapuuid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maptype()) {
      set_maptype(from.maptype());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_oxy()) {
      set_oxy(from.oxy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSyncPlayToGS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSyncPlayToGS::CopyFrom(const MsgSyncPlayToGS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSyncPlayToGS::IsInitialized() const {

  return true;
}

void MsgSyncPlayToGS::Swap(MsgSyncPlayToGS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(mapid_, other->mapid_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(dungeonmapuuid_, other->dungeonmapuuid_);
    std::swap(maptype_, other->maptype_);
    std::swap(food_, other->food_);
    std::swap(oxy_, other->oxy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSyncPlayToGS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSyncPlayToGS_descriptor_;
  metadata.reflection = MsgSyncPlayToGS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJoinMapG2C::kMsgTypeFieldNumber;
const int MsgJoinMapG2C::kIggidFieldNumber;
const int MsgJoinMapG2C::kMapidFieldNumber;
#endif  // !_MSC_VER

MsgJoinMapG2C::MsgJoinMapG2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgJoinMapG2C)
}

void MsgJoinMapG2C::InitAsDefaultInstance() {
}

MsgJoinMapG2C::MsgJoinMapG2C(const MsgJoinMapG2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgJoinMapG2C)
}

void MsgJoinMapG2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1105;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJoinMapG2C::~MsgJoinMapG2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgJoinMapG2C)
  SharedDtor();
}

void MsgJoinMapG2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgJoinMapG2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgJoinMapG2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJoinMapG2C_descriptor_;
}

const MsgJoinMapG2C& MsgJoinMapG2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgJoinMapG2C* MsgJoinMapG2C::default_instance_ = NULL;

MsgJoinMapG2C* MsgJoinMapG2C::New() const {
  return new MsgJoinMapG2C;
}

void MsgJoinMapG2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1105;
    iggid_ = GOOGLE_LONGLONG(0);
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJoinMapG2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgJoinMapG2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP_G2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgJoinMapG2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgJoinMapG2C)
  return false;
#undef DO_
}

void MsgJoinMapG2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgJoinMapG2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP_G2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgJoinMapG2C)
}

::google::protobuf::uint8* MsgJoinMapG2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgJoinMapG2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP_G2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgJoinMapG2C)
  return target;
}

int MsgJoinMapG2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP_G2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgJoinMapG2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJoinMapG2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJoinMapG2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJoinMapG2C::MergeFrom(const MsgJoinMapG2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJoinMapG2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJoinMapG2C::CopyFrom(const MsgJoinMapG2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJoinMapG2C::IsInitialized() const {

  return true;
}

void MsgJoinMapG2C::Swap(MsgJoinMapG2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJoinMapG2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJoinMapG2C_descriptor_;
  metadata.reflection = MsgJoinMapG2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQuitMap::kMsgTypeFieldNumber;
const int MsgQuitMap::kIggidFieldNumber;
const int MsgQuitMap::kMapidFieldNumber;
#endif  // !_MSC_VER

MsgQuitMap::MsgQuitMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgQuitMap)
}

void MsgQuitMap::InitAsDefaultInstance() {
}

MsgQuitMap::MsgQuitMap(const MsgQuitMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgQuitMap)
}

void MsgQuitMap::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1102;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQuitMap::~MsgQuitMap() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgQuitMap)
  SharedDtor();
}

void MsgQuitMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQuitMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQuitMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQuitMap_descriptor_;
}

const MsgQuitMap& MsgQuitMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgQuitMap* MsgQuitMap::default_instance_ = NULL;

MsgQuitMap* MsgQuitMap::New() const {
  return new MsgQuitMap;
}

void MsgQuitMap::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1102;
    iggid_ = GOOGLE_LONGLONG(0);
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQuitMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgQuitMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUIT_MAP];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgQuitMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgQuitMap)
  return false;
#undef DO_
}

void MsgQuitMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgQuitMap)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUIT_MAP];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgQuitMap)
}

::google::protobuf::uint8* MsgQuitMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgQuitMap)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUIT_MAP];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgQuitMap)
  return target;
}

int MsgQuitMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUIT_MAP];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQuitMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQuitMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQuitMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQuitMap::MergeFrom(const MsgQuitMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQuitMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQuitMap::CopyFrom(const MsgQuitMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQuitMap::IsInitialized() const {

  return true;
}

void MsgQuitMap::Swap(MsgQuitMap* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQuitMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQuitMap_descriptor_;
  metadata.reflection = MsgQuitMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQuitMapNtf_S2S::kMsgTypeFieldNumber;
const int MsgQuitMapNtf_S2S::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgQuitMapNtf_S2S::MsgQuitMapNtf_S2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgQuitMapNtf_S2S)
}

void MsgQuitMapNtf_S2S::InitAsDefaultInstance() {
}

MsgQuitMapNtf_S2S::MsgQuitMapNtf_S2S(const MsgQuitMapNtf_S2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgQuitMapNtf_S2S)
}

void MsgQuitMapNtf_S2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1107;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQuitMapNtf_S2S::~MsgQuitMapNtf_S2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgQuitMapNtf_S2S)
  SharedDtor();
}

void MsgQuitMapNtf_S2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQuitMapNtf_S2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQuitMapNtf_S2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQuitMapNtf_S2S_descriptor_;
}

const MsgQuitMapNtf_S2S& MsgQuitMapNtf_S2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgQuitMapNtf_S2S* MsgQuitMapNtf_S2S::default_instance_ = NULL;

MsgQuitMapNtf_S2S* MsgQuitMapNtf_S2S::New() const {
  return new MsgQuitMapNtf_S2S;
}

void MsgQuitMapNtf_S2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1107;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQuitMapNtf_S2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgQuitMapNtf_S2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUIT_MAP_NTF_S2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgQuitMapNtf_S2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgQuitMapNtf_S2S)
  return false;
#undef DO_
}

void MsgQuitMapNtf_S2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgQuitMapNtf_S2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUIT_MAP_NTF_S2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgQuitMapNtf_S2S)
}

::google::protobuf::uint8* MsgQuitMapNtf_S2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgQuitMapNtf_S2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUIT_MAP_NTF_S2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgQuitMapNtf_S2S)
  return target;
}

int MsgQuitMapNtf_S2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUIT_MAP_NTF_S2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQuitMapNtf_S2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQuitMapNtf_S2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQuitMapNtf_S2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQuitMapNtf_S2S::MergeFrom(const MsgQuitMapNtf_S2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQuitMapNtf_S2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQuitMapNtf_S2S::CopyFrom(const MsgQuitMapNtf_S2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQuitMapNtf_S2S::IsInitialized() const {

  return true;
}

void MsgQuitMapNtf_S2S::Swap(MsgQuitMapNtf_S2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQuitMapNtf_S2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQuitMapNtf_S2S_descriptor_;
  metadata.reflection = MsgQuitMapNtf_S2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueyMap::kMsgTypeFieldNumber;
const int MsgQueyMap::kIggidFieldNumber;
const int MsgQueyMap::kMapidFieldNumber;
#endif  // !_MSC_VER

MsgQueyMap::MsgQueyMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgQueyMap)
}

void MsgQueyMap::InitAsDefaultInstance() {
}

MsgQueyMap::MsgQueyMap(const MsgQueyMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgQueyMap)
}

void MsgQueyMap::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1110;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueyMap::~MsgQueyMap() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgQueyMap)
  SharedDtor();
}

void MsgQueyMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueyMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueyMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueyMap_descriptor_;
}

const MsgQueyMap& MsgQueyMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgQueyMap* MsgQueyMap::default_instance_ = NULL;

MsgQueyMap* MsgQueyMap::New() const {
  return new MsgQueyMap;
}

void MsgQueyMap::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1110;
    iggid_ = GOOGLE_LONGLONG(0);
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueyMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgQueyMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_MAP];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgQueyMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgQueyMap)
  return false;
#undef DO_
}

void MsgQueyMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgQueyMap)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_MAP];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgQueyMap)
}

::google::protobuf::uint8* MsgQueyMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgQueyMap)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_MAP];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgQueyMap)
  return target;
}

int MsgQueyMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_MAP];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueyMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueyMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueyMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueyMap::MergeFrom(const MsgQueyMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueyMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueyMap::CopyFrom(const MsgQueyMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueyMap::IsInitialized() const {

  return true;
}

void MsgQueyMap::Swap(MsgQueyMap* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueyMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueyMap_descriptor_;
  metadata.reflection = MsgQueyMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapInfo::kMsgTypeFieldNumber;
const int MsgMapInfo::kIggidFieldNumber;
const int MsgMapInfo::kMapidFieldNumber;
const int MsgMapInfo::kBlocknumFieldNumber;
const int MsgMapInfo::kMapblockxFieldNumber;
const int MsgMapInfo::kMapblockyFieldNumber;
const int MsgMapInfo::kBlocksizexFieldNumber;
const int MsgMapInfo::kBlocksizeyFieldNumber;
const int MsgMapInfo::kTemplateidFieldNumber;
const int MsgMapInfo::kClientDataFieldNumber;
const int MsgMapInfo::kLastSaveTimeFieldNumber;
#endif  // !_MSC_VER

MsgMapInfo::MsgMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapInfo)
}

void MsgMapInfo::InitAsDefaultInstance() {
}

MsgMapInfo::MsgMapInfo(const MsgMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapInfo)
}

void MsgMapInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1111;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  blocknum_ = 0;
  mapblockx_ = 0;
  mapblocky_ = 0;
  blocksizex_ = 0;
  blocksizey_ = 0;
  templateid_ = 0;
  client_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_save_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapInfo::~MsgMapInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapInfo)
  SharedDtor();
}

void MsgMapInfo::SharedDtor() {
  if (client_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_data_;
  }
  if (this != default_instance_) {
  }
}

void MsgMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapInfo_descriptor_;
}

const MsgMapInfo& MsgMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapInfo* MsgMapInfo::default_instance_ = NULL;

MsgMapInfo* MsgMapInfo::New() const {
  return new MsgMapInfo;
}

void MsgMapInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMapInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mapid_, blocksizey_);
    msgtype_ = 1111;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 1792) {
    templateid_ = 0;
    if (has_client_data()) {
      if (client_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_data_->clear();
      }
    }
    last_save_time_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_INFO];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blocknum;
        break;
      }

      // optional int32 blocknum = 4;
      case 4: {
        if (tag == 32) {
         parse_blocknum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocknum_)));
          set_has_blocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapblockx;
        break;
      }

      // optional int32 mapblockx = 5;
      case 5: {
        if (tag == 40) {
         parse_mapblockx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapblockx_)));
          set_has_mapblockx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mapblocky;
        break;
      }

      // optional int32 mapblocky = 6;
      case 6: {
        if (tag == 48) {
         parse_mapblocky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapblocky_)));
          set_has_mapblocky();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_blocksizex;
        break;
      }

      // optional int32 blocksizex = 7;
      case 7: {
        if (tag == 56) {
         parse_blocksizex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocksizex_)));
          set_has_blocksizex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_blocksizey;
        break;
      }

      // optional int32 blocksizey = 8;
      case 8: {
        if (tag == 64) {
         parse_blocksizey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocksizey_)));
          set_has_blocksizey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_templateid;
        break;
      }

      // optional int32 templateid = 9;
      case 9: {
        if (tag == 72) {
         parse_templateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_client_data;
        break;
      }

      // optional string client_data = 10;
      case 10: {
        if (tag == 82) {
         parse_client_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_data().data(), this->client_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_last_save_time;
        break;
      }

      // optional int64 last_save_time = 11;
      case 11: {
        if (tag == 88) {
         parse_last_save_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_save_time_)));
          set_has_last_save_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapInfo)
  return false;
#undef DO_
}

void MsgMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapInfo)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_INFO];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  // optional int32 blocknum = 4;
  if (has_blocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->blocknum(), output);
  }

  // optional int32 mapblockx = 5;
  if (has_mapblockx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapblockx(), output);
  }

  // optional int32 mapblocky = 6;
  if (has_mapblocky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mapblocky(), output);
  }

  // optional int32 blocksizex = 7;
  if (has_blocksizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->blocksizex(), output);
  }

  // optional int32 blocksizey = 8;
  if (has_blocksizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->blocksizey(), output);
  }

  // optional int32 templateid = 9;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->templateid(), output);
  }

  // optional string client_data = 10;
  if (has_client_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_data().data(), this->client_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->client_data(), output);
  }

  // optional int64 last_save_time = 11;
  if (has_last_save_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->last_save_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapInfo)
}

::google::protobuf::uint8* MsgMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapInfo)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_INFO];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  // optional int32 blocknum = 4;
  if (has_blocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->blocknum(), target);
  }

  // optional int32 mapblockx = 5;
  if (has_mapblockx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapblockx(), target);
  }

  // optional int32 mapblocky = 6;
  if (has_mapblocky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mapblocky(), target);
  }

  // optional int32 blocksizex = 7;
  if (has_blocksizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->blocksizex(), target);
  }

  // optional int32 blocksizey = 8;
  if (has_blocksizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->blocksizey(), target);
  }

  // optional int32 templateid = 9;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->templateid(), target);
  }

  // optional string client_data = 10;
  if (has_client_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_data().data(), this->client_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->client_data(), target);
  }

  // optional int64 last_save_time = 11;
  if (has_last_save_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->last_save_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapInfo)
  return target;
}

int MsgMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_INFO];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 blocknum = 4;
    if (has_blocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocknum());
    }

    // optional int32 mapblockx = 5;
    if (has_mapblockx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapblockx());
    }

    // optional int32 mapblocky = 6;
    if (has_mapblocky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapblocky());
    }

    // optional int32 blocksizex = 7;
    if (has_blocksizex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocksizex());
    }

    // optional int32 blocksizey = 8;
    if (has_blocksizey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocksizey());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 templateid = 9;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templateid());
    }

    // optional string client_data = 10;
    if (has_client_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_data());
    }

    // optional int64 last_save_time = 11;
    if (has_last_save_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_save_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapInfo::MergeFrom(const MsgMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_blocknum()) {
      set_blocknum(from.blocknum());
    }
    if (from.has_mapblockx()) {
      set_mapblockx(from.mapblockx());
    }
    if (from.has_mapblocky()) {
      set_mapblocky(from.mapblocky());
    }
    if (from.has_blocksizex()) {
      set_blocksizex(from.blocksizex());
    }
    if (from.has_blocksizey()) {
      set_blocksizey(from.blocksizey());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_client_data()) {
      set_client_data(from.client_data());
    }
    if (from.has_last_save_time()) {
      set_last_save_time(from.last_save_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapInfo::CopyFrom(const MsgMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapInfo::IsInitialized() const {

  return true;
}

void MsgMapInfo::Swap(MsgMapInfo* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    std::swap(blocknum_, other->blocknum_);
    std::swap(mapblockx_, other->mapblockx_);
    std::swap(mapblocky_, other->mapblocky_);
    std::swap(blocksizex_, other->blocksizex_);
    std::swap(blocksizey_, other->blocksizey_);
    std::swap(templateid_, other->templateid_);
    std::swap(client_data_, other->client_data_);
    std::swap(last_save_time_, other->last_save_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapInfo_descriptor_;
  metadata.reflection = MsgMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapBlock::kMsgTypeFieldNumber;
const int MsgMapBlock::kIggidFieldNumber;
const int MsgMapBlock::kMapidFieldNumber;
const int MsgMapBlock::kBlockidFieldNumber;
const int MsgMapBlock::kBlockbuffFieldNumber;
#endif  // !_MSC_VER

MsgMapBlock::MsgMapBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapBlock)
}

void MsgMapBlock::InitAsDefaultInstance() {
}

MsgMapBlock::MsgMapBlock(const MsgMapBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapBlock)
}

void MsgMapBlock::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1112;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  blockid_ = 0;
  blockbuff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapBlock::~MsgMapBlock() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapBlock)
  SharedDtor();
}

void MsgMapBlock::SharedDtor() {
  if (blockbuff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockbuff_;
  }
  if (this != default_instance_) {
  }
}

void MsgMapBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapBlock_descriptor_;
}

const MsgMapBlock& MsgMapBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapBlock* MsgMapBlock::default_instance_ = NULL;

MsgMapBlock* MsgMapBlock::New() const {
  return new MsgMapBlock;
}

void MsgMapBlock::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    msgtype_ = 1112;
    iggid_ = GOOGLE_LONGLONG(0);
    mapid_ = 0;
    blockid_ = 0;
    if (has_blockbuff()) {
      if (blockbuff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blockbuff_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_BLOCK_INFO];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blockid;
        break;
      }

      // optional int32 blockid = 4;
      case 4: {
        if (tag == 32) {
         parse_blockid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blockid_)));
          set_has_blockid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_blockbuff;
        break;
      }

      // optional string blockbuff = 5;
      case 5: {
        if (tag == 42) {
         parse_blockbuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockbuff()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blockbuff().data(), this->blockbuff().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blockbuff");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapBlock)
  return false;
#undef DO_
}

void MsgMapBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapBlock)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_BLOCK_INFO];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  // optional int32 blockid = 4;
  if (has_blockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->blockid(), output);
  }

  // optional string blockbuff = 5;
  if (has_blockbuff()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockbuff().data(), this->blockbuff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockbuff");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->blockbuff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapBlock)
}

::google::protobuf::uint8* MsgMapBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapBlock)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_BLOCK_INFO];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  // optional int32 blockid = 4;
  if (has_blockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->blockid(), target);
  }

  // optional string blockbuff = 5;
  if (has_blockbuff()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockbuff().data(), this->blockbuff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockbuff");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->blockbuff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapBlock)
  return target;
}

int MsgMapBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_BLOCK_INFO];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 blockid = 4;
    if (has_blockid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blockid());
    }

    // optional string blockbuff = 5;
    if (has_blockbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blockbuff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapBlock::MergeFrom(const MsgMapBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_blockid()) {
      set_blockid(from.blockid());
    }
    if (from.has_blockbuff()) {
      set_blockbuff(from.blockbuff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapBlock::CopyFrom(const MsgMapBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapBlock::IsInitialized() const {

  return true;
}

void MsgMapBlock::Swap(MsgMapBlock* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    std::swap(blockid_, other->blockid_);
    std::swap(blockbuff_, other->blockbuff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapBlock_descriptor_;
  metadata.reflection = MsgMapBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapBlockToClient_BlockBatchData::kBatchIdFieldNumber;
const int MsgMapBlockToClient_BlockBatchData::kBatchBuffFieldNumber;
#endif  // !_MSC_VER

MsgMapBlockToClient_BlockBatchData::MsgMapBlockToClient_BlockBatchData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapBlockToClient.BlockBatchData)
}

void MsgMapBlockToClient_BlockBatchData::InitAsDefaultInstance() {
}

MsgMapBlockToClient_BlockBatchData::MsgMapBlockToClient_BlockBatchData(const MsgMapBlockToClient_BlockBatchData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapBlockToClient.BlockBatchData)
}

void MsgMapBlockToClient_BlockBatchData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  batch_id_ = 0;
  batch_buff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapBlockToClient_BlockBatchData::~MsgMapBlockToClient_BlockBatchData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapBlockToClient.BlockBatchData)
  SharedDtor();
}

void MsgMapBlockToClient_BlockBatchData::SharedDtor() {
  if (batch_buff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete batch_buff_;
  }
  if (this != default_instance_) {
  }
}

void MsgMapBlockToClient_BlockBatchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapBlockToClient_BlockBatchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapBlockToClient_BlockBatchData_descriptor_;
}

const MsgMapBlockToClient_BlockBatchData& MsgMapBlockToClient_BlockBatchData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapBlockToClient_BlockBatchData* MsgMapBlockToClient_BlockBatchData::default_instance_ = NULL;

MsgMapBlockToClient_BlockBatchData* MsgMapBlockToClient_BlockBatchData::New() const {
  return new MsgMapBlockToClient_BlockBatchData;
}

void MsgMapBlockToClient_BlockBatchData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    batch_id_ = 0;
    if (has_batch_buff()) {
      if (batch_buff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        batch_buff_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapBlockToClient_BlockBatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapBlockToClient.BlockBatchData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 batch_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_id_)));
          set_has_batch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_batch_buff;
        break;
      }

      // optional bytes batch_buff = 2;
      case 2: {
        if (tag == 18) {
         parse_batch_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_batch_buff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapBlockToClient.BlockBatchData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapBlockToClient.BlockBatchData)
  return false;
#undef DO_
}

void MsgMapBlockToClient_BlockBatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapBlockToClient.BlockBatchData)
  // optional int32 batch_id = 1;
  if (has_batch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->batch_id(), output);
  }

  // optional bytes batch_buff = 2;
  if (has_batch_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->batch_buff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapBlockToClient.BlockBatchData)
}

::google::protobuf::uint8* MsgMapBlockToClient_BlockBatchData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapBlockToClient.BlockBatchData)
  // optional int32 batch_id = 1;
  if (has_batch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->batch_id(), target);
  }

  // optional bytes batch_buff = 2;
  if (has_batch_buff()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->batch_buff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapBlockToClient.BlockBatchData)
  return target;
}

int MsgMapBlockToClient_BlockBatchData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 batch_id = 1;
    if (has_batch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch_id());
    }

    // optional bytes batch_buff = 2;
    if (has_batch_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->batch_buff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapBlockToClient_BlockBatchData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapBlockToClient_BlockBatchData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapBlockToClient_BlockBatchData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapBlockToClient_BlockBatchData::MergeFrom(const MsgMapBlockToClient_BlockBatchData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batch_id()) {
      set_batch_id(from.batch_id());
    }
    if (from.has_batch_buff()) {
      set_batch_buff(from.batch_buff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapBlockToClient_BlockBatchData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapBlockToClient_BlockBatchData::CopyFrom(const MsgMapBlockToClient_BlockBatchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapBlockToClient_BlockBatchData::IsInitialized() const {

  return true;
}

void MsgMapBlockToClient_BlockBatchData::Swap(MsgMapBlockToClient_BlockBatchData* other) {
  if (other != this) {
    std::swap(batch_id_, other->batch_id_);
    std::swap(batch_buff_, other->batch_buff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapBlockToClient_BlockBatchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapBlockToClient_BlockBatchData_descriptor_;
  metadata.reflection = MsgMapBlockToClient_BlockBatchData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgMapBlockToClient::kMsgTypeFieldNumber;
const int MsgMapBlockToClient::kIggidFieldNumber;
const int MsgMapBlockToClient::kMapidFieldNumber;
const int MsgMapBlockToClient::kBatchFieldNumber;
#endif  // !_MSC_VER

MsgMapBlockToClient::MsgMapBlockToClient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapBlockToClient)
}

void MsgMapBlockToClient::InitAsDefaultInstance() {
}

MsgMapBlockToClient::MsgMapBlockToClient(const MsgMapBlockToClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapBlockToClient)
}

void MsgMapBlockToClient::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1113;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapBlockToClient::~MsgMapBlockToClient() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapBlockToClient)
  SharedDtor();
}

void MsgMapBlockToClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMapBlockToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapBlockToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapBlockToClient_descriptor_;
}

const MsgMapBlockToClient& MsgMapBlockToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapBlockToClient* MsgMapBlockToClient::default_instance_ = NULL;

MsgMapBlockToClient* MsgMapBlockToClient::New() const {
  return new MsgMapBlockToClient;
}

void MsgMapBlockToClient::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1113;
    iggid_ = GOOGLE_LONGLONG(0);
    mapid_ = 0;
  }
  batch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapBlockToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapBlockToClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_BLOCK_INFO_TO_CLIENT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_batch;
        break;
      }

      // repeated .MsgPB.MsgMapBlockToClient.BlockBatchData batch = 4;
      case 4: {
        if (tag == 34) {
         parse_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_batch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_batch;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapBlockToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapBlockToClient)
  return false;
#undef DO_
}

void MsgMapBlockToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapBlockToClient)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_BLOCK_INFO_TO_CLIENT];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  // repeated .MsgPB.MsgMapBlockToClient.BlockBatchData batch = 4;
  for (int i = 0; i < this->batch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->batch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapBlockToClient)
}

::google::protobuf::uint8* MsgMapBlockToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapBlockToClient)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_BLOCK_INFO_TO_CLIENT];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  // repeated .MsgPB.MsgMapBlockToClient.BlockBatchData batch = 4;
  for (int i = 0; i < this->batch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->batch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapBlockToClient)
  return target;
}

int MsgMapBlockToClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_BLOCK_INFO_TO_CLIENT];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  // repeated .MsgPB.MsgMapBlockToClient.BlockBatchData batch = 4;
  total_size += 1 * this->batch_size();
  for (int i = 0; i < this->batch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapBlockToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapBlockToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapBlockToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapBlockToClient::MergeFrom(const MsgMapBlockToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  batch_.MergeFrom(from.batch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapBlockToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapBlockToClient::CopyFrom(const MsgMapBlockToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapBlockToClient::IsInitialized() const {

  return true;
}

void MsgMapBlockToClient::Swap(MsgMapBlockToClient* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    batch_.Swap(&other->batch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapBlockToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapBlockToClient_descriptor_;
  metadata.reflection = MsgMapBlockToClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerMovement::kIggidFieldNumber;
const int PlayerMovement::kMapObjectIdFieldNumber;
const int PlayerMovement::kPosxFieldNumber;
const int PlayerMovement::kPosyFieldNumber;
const int PlayerMovement::kHorizontalVelocityFieldNumber;
const int PlayerMovement::kVerticalVelocityFieldNumber;
const int PlayerMovement::kIsRunningFieldNumber;
const int PlayerMovement::kIsManualJumpFieldNumber;
const int PlayerMovement::kIsPlayerActionFieldNumber;
const int PlayerMovement::kMovIngStateFieldNumber;
const int PlayerMovement::kSyncTimeFieldNumber;
const int PlayerMovement::kDirFieldNumber;
const int PlayerMovement::kStateFieldNumber;
const int PlayerMovement::kUniformVelocityTimeFieldNumber;
const int PlayerMovement::kDestPosxFieldNumber;
const int PlayerMovement::kDestPosyFieldNumber;
#endif  // !_MSC_VER

PlayerMovement::PlayerMovement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.PlayerMovement)
}

void PlayerMovement::InitAsDefaultInstance() {
}

PlayerMovement::PlayerMovement(const PlayerMovement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.PlayerMovement)
}

void PlayerMovement::SharedCtor() {
  _cached_size_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  map_object_id_ = 0;
  posx_ = 0;
  posy_ = 0;
  horizontal_velocity_ = 0;
  vertical_velocity_ = 0;
  is_running_ = 0;
  is_manual_jump_ = 0;
  is_player_action_ = 0;
  mov_ing_state_ = 0;
  sync_time_ = GOOGLE_LONGLONG(0);
  dir_ = 0;
  state_ = 0;
  uniform_velocity_time_ = GOOGLE_LONGLONG(0);
  dest_posx_ = 0;
  dest_posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMovement::~PlayerMovement() {
  // @@protoc_insertion_point(destructor:MsgPB.PlayerMovement)
  SharedDtor();
}

void PlayerMovement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerMovement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMovement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMovement_descriptor_;
}

const PlayerMovement& PlayerMovement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

PlayerMovement* PlayerMovement::default_instance_ = NULL;

PlayerMovement* PlayerMovement::New() const {
  return new PlayerMovement;
}

void PlayerMovement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerMovement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(iggid_, is_manual_jump_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(is_player_action_, dest_posy_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerMovement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.PlayerMovement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iggid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_map_object_id;
        break;
      }

      // optional int32 map_object_id = 2;
      case 2: {
        if (tag == 16) {
         parse_map_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_object_id_)));
          set_has_map_object_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_posx;
        break;
      }

      // optional int32 posx = 3;
      case 3: {
        if (tag == 24) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_posy;
        break;
      }

      // optional int32 posy = 4;
      case 4: {
        if (tag == 32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_horizontal_velocity;
        break;
      }

      // optional int32 horizontal_velocity = 5;
      case 5: {
        if (tag == 40) {
         parse_horizontal_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horizontal_velocity_)));
          set_has_horizontal_velocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vertical_velocity;
        break;
      }

      // optional int32 vertical_velocity = 6;
      case 6: {
        if (tag == 48) {
         parse_vertical_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertical_velocity_)));
          set_has_vertical_velocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_running;
        break;
      }

      // optional int32 is_running = 7;
      case 7: {
        if (tag == 56) {
         parse_is_running:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_running_)));
          set_has_is_running();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_manual_jump;
        break;
      }

      // optional int32 is_manual_jump = 8;
      case 8: {
        if (tag == 64) {
         parse_is_manual_jump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_manual_jump_)));
          set_has_is_manual_jump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_player_action;
        break;
      }

      // optional int32 is_player_action = 9;
      case 9: {
        if (tag == 72) {
         parse_is_player_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_player_action_)));
          set_has_is_player_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mov_ing_state;
        break;
      }

      // optional int32 mov_ing_state = 10;
      case 10: {
        if (tag == 80) {
         parse_mov_ing_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mov_ing_state_)));
          set_has_mov_ing_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sync_time;
        break;
      }

      // optional int64 sync_time = 11;
      case 11: {
        if (tag == 88) {
         parse_sync_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sync_time_)));
          set_has_sync_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_dir;
        break;
      }

      // optional .MsgPB.MSG_MOVE_DIR dir = 12;
      case 12: {
        if (tag == 96) {
         parse_dir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MSG_MOVE_DIR_IsValid(value)) {
            set_dir(static_cast< ::MsgPB::MSG_MOVE_DIR >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_state;
        break;
      }

      // optional .MsgPB.MSG_MOVE_STAT state = 13;
      case 13: {
        if (tag == 104) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MSG_MOVE_STAT_IsValid(value)) {
            set_state(static_cast< ::MsgPB::MSG_MOVE_STAT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_uniform_velocity_time;
        break;
      }

      // optional int64 uniform_velocity_time = 14;
      case 14: {
        if (tag == 112) {
         parse_uniform_velocity_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uniform_velocity_time_)));
          set_has_uniform_velocity_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_dest_posx;
        break;
      }

      // optional int32 dest_posx = 15;
      case 15: {
        if (tag == 120) {
         parse_dest_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dest_posx_)));
          set_has_dest_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_dest_posy;
        break;
      }

      // optional int32 dest_posy = 16;
      case 16: {
        if (tag == 128) {
         parse_dest_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dest_posy_)));
          set_has_dest_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.PlayerMovement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.PlayerMovement)
  return false;
#undef DO_
}

void PlayerMovement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.PlayerMovement)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iggid(), output);
  }

  // optional int32 map_object_id = 2;
  if (has_map_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->map_object_id(), output);
  }

  // optional int32 posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // optional int32 posy = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posy(), output);
  }

  // optional int32 horizontal_velocity = 5;
  if (has_horizontal_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->horizontal_velocity(), output);
  }

  // optional int32 vertical_velocity = 6;
  if (has_vertical_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vertical_velocity(), output);
  }

  // optional int32 is_running = 7;
  if (has_is_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_running(), output);
  }

  // optional int32 is_manual_jump = 8;
  if (has_is_manual_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->is_manual_jump(), output);
  }

  // optional int32 is_player_action = 9;
  if (has_is_player_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->is_player_action(), output);
  }

  // optional int32 mov_ing_state = 10;
  if (has_mov_ing_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mov_ing_state(), output);
  }

  // optional int64 sync_time = 11;
  if (has_sync_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->sync_time(), output);
  }

  // optional .MsgPB.MSG_MOVE_DIR dir = 12;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->dir(), output);
  }

  // optional .MsgPB.MSG_MOVE_STAT state = 13;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->state(), output);
  }

  // optional int64 uniform_velocity_time = 14;
  if (has_uniform_velocity_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->uniform_velocity_time(), output);
  }

  // optional int32 dest_posx = 15;
  if (has_dest_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->dest_posx(), output);
  }

  // optional int32 dest_posy = 16;
  if (has_dest_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->dest_posy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.PlayerMovement)
}

::google::protobuf::uint8* PlayerMovement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.PlayerMovement)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iggid(), target);
  }

  // optional int32 map_object_id = 2;
  if (has_map_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->map_object_id(), target);
  }

  // optional int32 posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // optional int32 posy = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posy(), target);
  }

  // optional int32 horizontal_velocity = 5;
  if (has_horizontal_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->horizontal_velocity(), target);
  }

  // optional int32 vertical_velocity = 6;
  if (has_vertical_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vertical_velocity(), target);
  }

  // optional int32 is_running = 7;
  if (has_is_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_running(), target);
  }

  // optional int32 is_manual_jump = 8;
  if (has_is_manual_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->is_manual_jump(), target);
  }

  // optional int32 is_player_action = 9;
  if (has_is_player_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->is_player_action(), target);
  }

  // optional int32 mov_ing_state = 10;
  if (has_mov_ing_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mov_ing_state(), target);
  }

  // optional int64 sync_time = 11;
  if (has_sync_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->sync_time(), target);
  }

  // optional .MsgPB.MSG_MOVE_DIR dir = 12;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->dir(), target);
  }

  // optional .MsgPB.MSG_MOVE_STAT state = 13;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->state(), target);
  }

  // optional int64 uniform_velocity_time = 14;
  if (has_uniform_velocity_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->uniform_velocity_time(), target);
  }

  // optional int32 dest_posx = 15;
  if (has_dest_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->dest_posx(), target);
  }

  // optional int32 dest_posy = 16;
  if (has_dest_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->dest_posy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.PlayerMovement)
  return target;
}

int PlayerMovement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iggid = 1;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 map_object_id = 2;
    if (has_map_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_object_id());
    }

    // optional int32 posx = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posy = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int32 horizontal_velocity = 5;
    if (has_horizontal_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horizontal_velocity());
    }

    // optional int32 vertical_velocity = 6;
    if (has_vertical_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertical_velocity());
    }

    // optional int32 is_running = 7;
    if (has_is_running()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_running());
    }

    // optional int32 is_manual_jump = 8;
    if (has_is_manual_jump()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_manual_jump());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 is_player_action = 9;
    if (has_is_player_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_player_action());
    }

    // optional int32 mov_ing_state = 10;
    if (has_mov_ing_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mov_ing_state());
    }

    // optional int64 sync_time = 11;
    if (has_sync_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sync_time());
    }

    // optional .MsgPB.MSG_MOVE_DIR dir = 12;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
    }

    // optional .MsgPB.MSG_MOVE_STAT state = 13;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 uniform_velocity_time = 14;
    if (has_uniform_velocity_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uniform_velocity_time());
    }

    // optional int32 dest_posx = 15;
    if (has_dest_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dest_posx());
    }

    // optional int32 dest_posy = 16;
    if (has_dest_posy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dest_posy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMovement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMovement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMovement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMovement::MergeFrom(const PlayerMovement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_map_object_id()) {
      set_map_object_id(from.map_object_id());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_horizontal_velocity()) {
      set_horizontal_velocity(from.horizontal_velocity());
    }
    if (from.has_vertical_velocity()) {
      set_vertical_velocity(from.vertical_velocity());
    }
    if (from.has_is_running()) {
      set_is_running(from.is_running());
    }
    if (from.has_is_manual_jump()) {
      set_is_manual_jump(from.is_manual_jump());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_player_action()) {
      set_is_player_action(from.is_player_action());
    }
    if (from.has_mov_ing_state()) {
      set_mov_ing_state(from.mov_ing_state());
    }
    if (from.has_sync_time()) {
      set_sync_time(from.sync_time());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_uniform_velocity_time()) {
      set_uniform_velocity_time(from.uniform_velocity_time());
    }
    if (from.has_dest_posx()) {
      set_dest_posx(from.dest_posx());
    }
    if (from.has_dest_posy()) {
      set_dest_posy(from.dest_posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerMovement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMovement::CopyFrom(const PlayerMovement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMovement::IsInitialized() const {

  return true;
}

void PlayerMovement::Swap(PlayerMovement* other) {
  if (other != this) {
    std::swap(iggid_, other->iggid_);
    std::swap(map_object_id_, other->map_object_id_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(horizontal_velocity_, other->horizontal_velocity_);
    std::swap(vertical_velocity_, other->vertical_velocity_);
    std::swap(is_running_, other->is_running_);
    std::swap(is_manual_jump_, other->is_manual_jump_);
    std::swap(is_player_action_, other->is_player_action_);
    std::swap(mov_ing_state_, other->mov_ing_state_);
    std::swap(sync_time_, other->sync_time_);
    std::swap(dir_, other->dir_);
    std::swap(state_, other->state_);
    std::swap(uniform_velocity_time_, other->uniform_velocity_time_);
    std::swap(dest_posx_, other->dest_posx_);
    std::swap(dest_posy_, other->dest_posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerMovement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMovement_descriptor_;
  metadata.reflection = PlayerMovement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNotifyPlayerMovementC2G::kMsgTypeFieldNumber;
const int MsgNotifyPlayerMovementC2G::kMovementFieldNumber;
const int MsgNotifyPlayerMovementC2G::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgNotifyPlayerMovementC2G::MsgNotifyPlayerMovementC2G()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNotifyPlayerMovementC2G)
}

void MsgNotifyPlayerMovementC2G::InitAsDefaultInstance() {
  movement_ = const_cast< ::MsgPB::PlayerMovement*>(&::MsgPB::PlayerMovement::default_instance());
}

MsgNotifyPlayerMovementC2G::MsgNotifyPlayerMovementC2G(const MsgNotifyPlayerMovementC2G& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNotifyPlayerMovementC2G)
}

void MsgNotifyPlayerMovementC2G::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1120;
  movement_ = NULL;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNotifyPlayerMovementC2G::~MsgNotifyPlayerMovementC2G() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNotifyPlayerMovementC2G)
  SharedDtor();
}

void MsgNotifyPlayerMovementC2G::SharedDtor() {
  if (this != default_instance_) {
    delete movement_;
  }
}

void MsgNotifyPlayerMovementC2G::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNotifyPlayerMovementC2G::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNotifyPlayerMovementC2G_descriptor_;
}

const MsgNotifyPlayerMovementC2G& MsgNotifyPlayerMovementC2G::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgNotifyPlayerMovementC2G* MsgNotifyPlayerMovementC2G::default_instance_ = NULL;

MsgNotifyPlayerMovementC2G* MsgNotifyPlayerMovementC2G::New() const {
  return new MsgNotifyPlayerMovementC2G;
}

void MsgNotifyPlayerMovementC2G::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1120;
    if (has_movement()) {
      if (movement_ != NULL) movement_->::MsgPB::PlayerMovement::Clear();
    }
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNotifyPlayerMovementC2G::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNotifyPlayerMovementC2G)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PLAYER_MOVEMENT_C2G];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_movement;
        break;
      }

      // optional .MsgPB.PlayerMovement movement = 2;
      case 2: {
        if (tag == 18) {
         parse_movement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNotifyPlayerMovementC2G)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNotifyPlayerMovementC2G)
  return false;
#undef DO_
}

void MsgNotifyPlayerMovementC2G::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNotifyPlayerMovementC2G)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PLAYER_MOVEMENT_C2G];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.PlayerMovement movement = 2;
  if (has_movement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->movement(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNotifyPlayerMovementC2G)
}

::google::protobuf::uint8* MsgNotifyPlayerMovementC2G::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNotifyPlayerMovementC2G)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PLAYER_MOVEMENT_C2G];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.PlayerMovement movement = 2;
  if (has_movement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->movement(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNotifyPlayerMovementC2G)
  return target;
}

int MsgNotifyPlayerMovementC2G::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PLAYER_MOVEMENT_C2G];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.PlayerMovement movement = 2;
    if (has_movement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movement());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNotifyPlayerMovementC2G::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNotifyPlayerMovementC2G* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNotifyPlayerMovementC2G*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNotifyPlayerMovementC2G::MergeFrom(const MsgNotifyPlayerMovementC2G& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_movement()) {
      mutable_movement()->::MsgPB::PlayerMovement::MergeFrom(from.movement());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNotifyPlayerMovementC2G::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNotifyPlayerMovementC2G::CopyFrom(const MsgNotifyPlayerMovementC2G& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNotifyPlayerMovementC2G::IsInitialized() const {

  return true;
}

void MsgNotifyPlayerMovementC2G::Swap(MsgNotifyPlayerMovementC2G* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(movement_, other->movement_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNotifyPlayerMovementC2G::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNotifyPlayerMovementC2G_descriptor_;
  metadata.reflection = MsgNotifyPlayerMovementC2G_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNotifyPlayerMovementG2C::kMsgTypeFieldNumber;
const int MsgNotifyPlayerMovementG2C::kMovementFieldNumber;
const int MsgNotifyPlayerMovementG2C::kForceUpdateFieldNumber;
const int MsgNotifyPlayerMovementG2C::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgNotifyPlayerMovementG2C::MsgNotifyPlayerMovementG2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNotifyPlayerMovementG2C)
}

void MsgNotifyPlayerMovementG2C::InitAsDefaultInstance() {
  movement_ = const_cast< ::MsgPB::PlayerMovement*>(&::MsgPB::PlayerMovement::default_instance());
}

MsgNotifyPlayerMovementG2C::MsgNotifyPlayerMovementG2C(const MsgNotifyPlayerMovementG2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNotifyPlayerMovementG2C)
}

void MsgNotifyPlayerMovementG2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1121;
  movement_ = NULL;
  forceupdate_ = false;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNotifyPlayerMovementG2C::~MsgNotifyPlayerMovementG2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNotifyPlayerMovementG2C)
  SharedDtor();
}

void MsgNotifyPlayerMovementG2C::SharedDtor() {
  if (this != default_instance_) {
    delete movement_;
  }
}

void MsgNotifyPlayerMovementG2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNotifyPlayerMovementG2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNotifyPlayerMovementG2C_descriptor_;
}

const MsgNotifyPlayerMovementG2C& MsgNotifyPlayerMovementG2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgNotifyPlayerMovementG2C* MsgNotifyPlayerMovementG2C::default_instance_ = NULL;

MsgNotifyPlayerMovementG2C* MsgNotifyPlayerMovementG2C::New() const {
  return new MsgNotifyPlayerMovementG2C;
}

void MsgNotifyPlayerMovementG2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNotifyPlayerMovementG2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(forceupdate_, iggid_);
    msgtype_ = 1121;
    if (has_movement()) {
      if (movement_ != NULL) movement_->::MsgPB::PlayerMovement::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNotifyPlayerMovementG2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNotifyPlayerMovementG2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PLAYER_MOVEMENT_G2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_movement;
        break;
      }

      // optional .MsgPB.PlayerMovement movement = 2;
      case 2: {
        if (tag == 18) {
         parse_movement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_forceUpdate;
        break;
      }

      // optional bool forceUpdate = 3;
      case 3: {
        if (tag == 24) {
         parse_forceUpdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forceupdate_)));
          set_has_forceupdate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 4;
      case 4: {
        if (tag == 32) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNotifyPlayerMovementG2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNotifyPlayerMovementG2C)
  return false;
#undef DO_
}

void MsgNotifyPlayerMovementG2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNotifyPlayerMovementG2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PLAYER_MOVEMENT_G2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.PlayerMovement movement = 2;
  if (has_movement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->movement(), output);
  }

  // optional bool forceUpdate = 3;
  if (has_forceupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->forceupdate(), output);
  }

  // optional int64 iggid = 4;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNotifyPlayerMovementG2C)
}

::google::protobuf::uint8* MsgNotifyPlayerMovementG2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNotifyPlayerMovementG2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PLAYER_MOVEMENT_G2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.PlayerMovement movement = 2;
  if (has_movement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->movement(), target);
  }

  // optional bool forceUpdate = 3;
  if (has_forceupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->forceupdate(), target);
  }

  // optional int64 iggid = 4;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNotifyPlayerMovementG2C)
  return target;
}

int MsgNotifyPlayerMovementG2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_PLAYER_MOVEMENT_G2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.PlayerMovement movement = 2;
    if (has_movement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movement());
    }

    // optional bool forceUpdate = 3;
    if (has_forceupdate()) {
      total_size += 1 + 1;
    }

    // optional int64 iggid = 4;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNotifyPlayerMovementG2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNotifyPlayerMovementG2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNotifyPlayerMovementG2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNotifyPlayerMovementG2C::MergeFrom(const MsgNotifyPlayerMovementG2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_movement()) {
      mutable_movement()->::MsgPB::PlayerMovement::MergeFrom(from.movement());
    }
    if (from.has_forceupdate()) {
      set_forceupdate(from.forceupdate());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNotifyPlayerMovementG2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNotifyPlayerMovementG2C::CopyFrom(const MsgNotifyPlayerMovementG2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNotifyPlayerMovementG2C::IsInitialized() const {

  return true;
}

void MsgNotifyPlayerMovementG2C::Swap(MsgNotifyPlayerMovementG2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(movement_, other->movement_);
    std::swap(forceupdate_, other->forceupdate_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNotifyPlayerMovementG2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNotifyPlayerMovementG2C_descriptor_;
  metadata.reflection = MsgNotifyPlayerMovementG2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerAppearance::kMsgTypeFieldNumber;
const int MsgPlayerAppearance::kIggidFieldNumber;
const int MsgPlayerAppearance::kMapobjectidFieldNumber;
const int MsgPlayerAppearance::kPosxFieldNumber;
const int MsgPlayerAppearance::kPosyFieldNumber;
const int MsgPlayerAppearance::kHpFieldNumber;
const int MsgPlayerAppearance::kMpFieldNumber;
const int MsgPlayerAppearance::kLvFieldNumber;
const int MsgPlayerAppearance::kNicknameFieldNumber;
const int MsgPlayerAppearance::kBuffInfosFieldNumber;
const int MsgPlayerAppearance::kEquipInfosFieldNumber;
const int MsgPlayerAppearance::kOnhandItemFieldNumber;
const int MsgPlayerAppearance::kGroupFieldNumber;
const int MsgPlayerAppearance::kGenderFieldNumber;
const int MsgPlayerAppearance::kSkinColorFieldNumber;
const int MsgPlayerAppearance::kHairFieldNumber;
const int MsgPlayerAppearance::kHairColorFieldNumber;
const int MsgPlayerAppearance::kMaxHpFieldNumber;
const int MsgPlayerAppearance::kVehicleObjIDFieldNumber;
const int MsgPlayerAppearance::kFullHpMpFieldNumber;
const int MsgPlayerAppearance::kVipLevelFieldNumber;
#endif  // !_MSC_VER

MsgPlayerAppearance::MsgPlayerAppearance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerAppearance)
}

void MsgPlayerAppearance::InitAsDefaultInstance() {
}

MsgPlayerAppearance::MsgPlayerAppearance(const MsgPlayerAppearance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerAppearance)
}

void MsgPlayerAppearance::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1115;
  iggid_ = GOOGLE_LONGLONG(0);
  mapobjectid_ = 0;
  posx_ = 0;
  posy_ = 0;
  hp_ = 0;
  mp_ = 0;
  lv_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onhand_item_ = 0;
  group_ = 0u;
  gender_ = 0;
  skincolor_ = 0;
  hair_ = 0;
  haircolor_ = 0;
  maxhp_ = 0;
  vehicleobjid_ = 0;
  full_hp_mp_ = false;
  vip_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerAppearance::~MsgPlayerAppearance() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerAppearance)
  SharedDtor();
}

void MsgPlayerAppearance::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlayerAppearance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerAppearance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerAppearance_descriptor_;
}

const MsgPlayerAppearance& MsgPlayerAppearance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgPlayerAppearance* MsgPlayerAppearance::default_instance_ = NULL;

MsgPlayerAppearance* MsgPlayerAppearance::New() const {
  return new MsgPlayerAppearance;
}

void MsgPlayerAppearance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerAppearance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mapobjectid_, mp_);
    msgtype_ = 1115;
    iggid_ = GOOGLE_LONGLONG(0);
    lv_ = 0;
  }
  if (_has_bits_[8 / 32] & 63744) {
    ZR_(group_, hair_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    onhand_item_ = 0;
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(haircolor_, vip_level_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  buff_infos_.Clear();
  equip_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerAppearance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerAppearance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_APPEARACE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapobjectid;
        break;
      }

      // optional int32 mapobjectid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapobjectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapobjectid_)));
          set_has_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_posx;
        break;
      }

      // optional int32 posx = 4;
      case 4: {
        if (tag == 32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_posy;
        break;
      }

      // optional int32 posy = 5;
      case 5: {
        if (tag == 40) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // optional int32 hp = 6;
      case 6: {
        if (tag == 48) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mp;
        break;
      }

      // optional int32 mp = 7;
      case 7: {
        if (tag == 56) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lv;
        break;
      }

      // optional int32 lv = 8;
      case 8: {
        if (tag == 64) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_nickname;
        break;
      }

      // optional string nickname = 9;
      case 9: {
        if (tag == 74) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_buff_infos;
        break;
      }

      // repeated .MsgPB.ServerBuffInfo buff_infos = 10;
      case 10: {
        if (tag == 82) {
         parse_buff_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_buff_infos;
        if (input->ExpectTag(90)) goto parse_equip_infos;
        break;
      }

      // repeated .MsgPB.ServerEquipInfo equip_infos = 11;
      case 11: {
        if (tag == 90) {
         parse_equip_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_equip_infos;
        if (input->ExpectTag(96)) goto parse_onhand_item;
        break;
      }

      // optional .MsgPB.EQUIP_PACKET_POS onhand_item = 12;
      case 12: {
        if (tag == 96) {
         parse_onhand_item:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EQUIP_PACKET_POS_IsValid(value)) {
            set_onhand_item(static_cast< ::MsgPB::EQUIP_PACKET_POS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_group;
        break;
      }

      // optional uint32 group = 13;
      case 13: {
        if (tag == 104) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_gender;
        break;
      }

      // optional int32 gender = 14;
      case 14: {
        if (tag == 112) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_skinColor;
        break;
      }

      // optional int32 skinColor = 15;
      case 15: {
        if (tag == 120) {
         parse_skinColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skincolor_)));
          set_has_skincolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_hair;
        break;
      }

      // optional int32 hair = 16;
      case 16: {
        if (tag == 128) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_hairColor;
        break;
      }

      // optional int32 hairColor = 17;
      case 17: {
        if (tag == 136) {
         parse_hairColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_maxHp;
        break;
      }

      // optional int32 maxHp = 18;
      case 18: {
        if (tag == 144) {
         parse_maxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_vehicleObjID;
        break;
      }

      // optional int32 vehicleObjID = 19;
      case 19: {
        if (tag == 152) {
         parse_vehicleObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vehicleobjid_)));
          set_has_vehicleobjid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_full_hp_mp;
        break;
      }

      // optional bool full_hp_mp = 20;
      case 20: {
        if (tag == 160) {
         parse_full_hp_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_hp_mp_)));
          set_has_full_hp_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 21;
      case 21: {
        if (tag == 168) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerAppearance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerAppearance)
  return false;
#undef DO_
}

void MsgPlayerAppearance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerAppearance)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_APPEARACE];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapobjectid = 3;
  if (has_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapobjectid(), output);
  }

  // optional int32 posx = 4;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posx(), output);
  }

  // optional int32 posy = 5;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->posy(), output);
  }

  // optional int32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hp(), output);
  }

  // optional int32 mp = 7;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mp(), output);
  }

  // optional int32 lv = 8;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lv(), output);
  }

  // optional string nickname = 9;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->nickname(), output);
  }

  // repeated .MsgPB.ServerBuffInfo buff_infos = 10;
  for (int i = 0; i < this->buff_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->buff_infos(i), output);
  }

  // repeated .MsgPB.ServerEquipInfo equip_infos = 11;
  for (int i = 0; i < this->equip_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->equip_infos(i), output);
  }

  // optional .MsgPB.EQUIP_PACKET_POS onhand_item = 12;
  if (has_onhand_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->onhand_item(), output);
  }

  // optional uint32 group = 13;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->group(), output);
  }

  // optional int32 gender = 14;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gender(), output);
  }

  // optional int32 skinColor = 15;
  if (has_skincolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->skincolor(), output);
  }

  // optional int32 hair = 16;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->hair(), output);
  }

  // optional int32 hairColor = 17;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->haircolor(), output);
  }

  // optional int32 maxHp = 18;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->maxhp(), output);
  }

  // optional int32 vehicleObjID = 19;
  if (has_vehicleobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->vehicleobjid(), output);
  }

  // optional bool full_hp_mp = 20;
  if (has_full_hp_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->full_hp_mp(), output);
  }

  // optional int32 vip_level = 21;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerAppearance)
}

::google::protobuf::uint8* MsgPlayerAppearance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerAppearance)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_APPEARACE];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapobjectid = 3;
  if (has_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapobjectid(), target);
  }

  // optional int32 posx = 4;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posx(), target);
  }

  // optional int32 posy = 5;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->posy(), target);
  }

  // optional int32 hp = 6;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hp(), target);
  }

  // optional int32 mp = 7;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mp(), target);
  }

  // optional int32 lv = 8;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lv(), target);
  }

  // optional string nickname = 9;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->nickname(), target);
  }

  // repeated .MsgPB.ServerBuffInfo buff_infos = 10;
  for (int i = 0; i < this->buff_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->buff_infos(i), target);
  }

  // repeated .MsgPB.ServerEquipInfo equip_infos = 11;
  for (int i = 0; i < this->equip_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->equip_infos(i), target);
  }

  // optional .MsgPB.EQUIP_PACKET_POS onhand_item = 12;
  if (has_onhand_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->onhand_item(), target);
  }

  // optional uint32 group = 13;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->group(), target);
  }

  // optional int32 gender = 14;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gender(), target);
  }

  // optional int32 skinColor = 15;
  if (has_skincolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->skincolor(), target);
  }

  // optional int32 hair = 16;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->hair(), target);
  }

  // optional int32 hairColor = 17;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->haircolor(), target);
  }

  // optional int32 maxHp = 18;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->maxhp(), target);
  }

  // optional int32 vehicleObjID = 19;
  if (has_vehicleobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->vehicleobjid(), target);
  }

  // optional bool full_hp_mp = 20;
  if (has_full_hp_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->full_hp_mp(), target);
  }

  // optional int32 vip_level = 21;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerAppearance)
  return target;
}

int MsgPlayerAppearance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_APPEARACE];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapobjectid = 3;
    if (has_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapobjectid());
    }

    // optional int32 posx = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posy = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 7;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional int32 lv = 8;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string nickname = 9;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional .MsgPB.EQUIP_PACKET_POS onhand_item = 12;
    if (has_onhand_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->onhand_item());
    }

    // optional uint32 group = 13;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional int32 gender = 14;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 skinColor = 15;
    if (has_skincolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skincolor());
    }

    // optional int32 hair = 16;
    if (has_hair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 hairColor = 17;
    if (has_haircolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haircolor());
    }

    // optional int32 maxHp = 18;
    if (has_maxhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional int32 vehicleObjID = 19;
    if (has_vehicleobjid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vehicleobjid());
    }

    // optional bool full_hp_mp = 20;
    if (has_full_hp_mp()) {
      total_size += 2 + 1;
    }

    // optional int32 vip_level = 21;
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

  }
  // repeated .MsgPB.ServerBuffInfo buff_infos = 10;
  total_size += 1 * this->buff_infos_size();
  for (int i = 0; i < this->buff_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_infos(i));
  }

  // repeated .MsgPB.ServerEquipInfo equip_infos = 11;
  total_size += 1 * this->equip_infos_size();
  for (int i = 0; i < this->equip_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerAppearance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerAppearance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerAppearance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerAppearance::MergeFrom(const MsgPlayerAppearance& from) {
  GOOGLE_CHECK_NE(&from, this);
  buff_infos_.MergeFrom(from.buff_infos_);
  equip_infos_.MergeFrom(from.equip_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapobjectid()) {
      set_mapobjectid(from.mapobjectid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_onhand_item()) {
      set_onhand_item(from.onhand_item());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_skincolor()) {
      set_skincolor(from.skincolor());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_vehicleobjid()) {
      set_vehicleobjid(from.vehicleobjid());
    }
    if (from.has_full_hp_mp()) {
      set_full_hp_mp(from.full_hp_mp());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerAppearance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerAppearance::CopyFrom(const MsgPlayerAppearance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerAppearance::IsInitialized() const {

  return true;
}

void MsgPlayerAppearance::Swap(MsgPlayerAppearance* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapobjectid_, other->mapobjectid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(lv_, other->lv_);
    std::swap(nickname_, other->nickname_);
    buff_infos_.Swap(&other->buff_infos_);
    equip_infos_.Swap(&other->equip_infos_);
    std::swap(onhand_item_, other->onhand_item_);
    std::swap(group_, other->group_);
    std::swap(gender_, other->gender_);
    std::swap(skincolor_, other->skincolor_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(vehicleobjid_, other->vehicleobjid_);
    std::swap(full_hp_mp_, other->full_hp_mp_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerAppearance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerAppearance_descriptor_;
  metadata.reflection = MsgPlayerAppearance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMagicObjectAppearance::kMsgTypeFieldNumber;
const int MsgMagicObjectAppearance::kMagicobjectidFieldNumber;
const int MsgMagicObjectAppearance::kMapobjectidFieldNumber;
const int MsgMagicObjectAppearance::kSkilldataidFieldNumber;
const int MsgMagicObjectAppearance::kMagicobjTypeFieldNumber;
const int MsgMagicObjectAppearance::kPosxFieldNumber;
const int MsgMagicObjectAppearance::kPosyFieldNumber;
const int MsgMagicObjectAppearance::kDirxFieldNumber;
const int MsgMagicObjectAppearance::kDiryFieldNumber;
const int MsgMagicObjectAppearance::kBallNowdistanceFieldNumber;
const int MsgMagicObjectAppearance::kAreaUpdatetimeFieldNumber;
const int MsgMagicObjectAppearance::kAreaLtXFieldNumber;
const int MsgMagicObjectAppearance::kAreaLtYFieldNumber;
const int MsgMagicObjectAppearance::kAreaRdXFieldNumber;
const int MsgMagicObjectAppearance::kAreaRdYFieldNumber;
const int MsgMagicObjectAppearance::kBClearHitFieldNumber;
const int MsgMagicObjectAppearance::kHitBlockCoordxFieldNumber;
const int MsgMagicObjectAppearance::kHitBlockCoordyFieldNumber;
#endif  // !_MSC_VER

MsgMagicObjectAppearance::MsgMagicObjectAppearance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMagicObjectAppearance)
}

void MsgMagicObjectAppearance::InitAsDefaultInstance() {
}

MsgMagicObjectAppearance::MsgMagicObjectAppearance(const MsgMagicObjectAppearance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMagicObjectAppearance)
}

void MsgMagicObjectAppearance::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1118;
  magicobjectid_ = 0;
  mapobjectid_ = 0;
  skilldataid_ = 0;
  magicobj_type_ = 0;
  posx_ = 0;
  posy_ = 0;
  dirx_ = GOOGLE_LONGLONG(0);
  diry_ = GOOGLE_LONGLONG(0);
  ball_nowdistance_ = 0;
  area_updatetime_ = 0;
  area_lt_x_ = 0;
  area_lt_y_ = 0;
  area_rd_x_ = 0;
  area_rd_y_ = 0;
  b_clear_hit_ = 0;
  hit_block_coordx_ = 0;
  hit_block_coordy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMagicObjectAppearance::~MsgMagicObjectAppearance() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMagicObjectAppearance)
  SharedDtor();
}

void MsgMagicObjectAppearance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMagicObjectAppearance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMagicObjectAppearance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMagicObjectAppearance_descriptor_;
}

const MsgMagicObjectAppearance& MsgMagicObjectAppearance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMagicObjectAppearance* MsgMagicObjectAppearance::default_instance_ = NULL;

MsgMagicObjectAppearance* MsgMagicObjectAppearance::New() const {
  return new MsgMagicObjectAppearance;
}

void MsgMagicObjectAppearance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMagicObjectAppearance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(magicobjectid_, posy_);
    msgtype_ = 1118;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(ball_nowdistance_, b_clear_hit_);
  }
  ZR_(hit_block_coordx_, hit_block_coordy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMagicObjectAppearance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMagicObjectAppearance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAGICOBJECT_APPEARACE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_magicobjectid;
        break;
      }

      // optional int32 magicobjectid = 2;
      case 2: {
        if (tag == 16) {
         parse_magicobjectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicobjectid_)));
          set_has_magicobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapobjectid;
        break;
      }

      // optional int32 mapobjectid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapobjectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapobjectid_)));
          set_has_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skilldataid;
        break;
      }

      // optional int32 skilldataid = 4;
      case 4: {
        if (tag == 32) {
         parse_skilldataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilldataid_)));
          set_has_skilldataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_magicobj_type;
        break;
      }

      // optional int32 magicobj_type = 5;
      case 5: {
        if (tag == 40) {
         parse_magicobj_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicobj_type_)));
          set_has_magicobj_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_posx;
        break;
      }

      // optional int32 posx = 6;
      case 6: {
        if (tag == 48) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_posy;
        break;
      }

      // optional int32 posy = 7;
      case 7: {
        if (tag == 56) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dirx;
        break;
      }

      // optional int64 dirx = 8;
      case 8: {
        if (tag == 64) {
         parse_dirx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirx_)));
          set_has_dirx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_diry;
        break;
      }

      // optional int64 diry = 9;
      case 9: {
        if (tag == 72) {
         parse_diry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diry_)));
          set_has_diry();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ball_nowdistance;
        break;
      }

      // optional int32 ball_nowdistance = 10;
      case 10: {
        if (tag == 80) {
         parse_ball_nowdistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ball_nowdistance_)));
          set_has_ball_nowdistance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_area_updatetime;
        break;
      }

      // optional int32 area_updatetime = 11;
      case 11: {
        if (tag == 88) {
         parse_area_updatetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_updatetime_)));
          set_has_area_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_area_lt_x;
        break;
      }

      // optional int32 area_lt_x = 12;
      case 12: {
        if (tag == 96) {
         parse_area_lt_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_lt_x_)));
          set_has_area_lt_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_area_lt_y;
        break;
      }

      // optional int32 area_lt_y = 13;
      case 13: {
        if (tag == 104) {
         parse_area_lt_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_lt_y_)));
          set_has_area_lt_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_area_rd_x;
        break;
      }

      // optional int32 area_rd_x = 14;
      case 14: {
        if (tag == 112) {
         parse_area_rd_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_rd_x_)));
          set_has_area_rd_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_area_rd_y;
        break;
      }

      // optional int32 area_rd_y = 15;
      case 15: {
        if (tag == 120) {
         parse_area_rd_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_rd_y_)));
          set_has_area_rd_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_b_clear_hit;
        break;
      }

      // optional int32 b_clear_hit = 16;
      case 16: {
        if (tag == 128) {
         parse_b_clear_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_clear_hit_)));
          set_has_b_clear_hit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_hit_block_coordx;
        break;
      }

      // optional int32 hit_block_coordx = 17;
      case 17: {
        if (tag == 136) {
         parse_hit_block_coordx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_block_coordx_)));
          set_has_hit_block_coordx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_hit_block_coordy;
        break;
      }

      // optional int32 hit_block_coordy = 18;
      case 18: {
        if (tag == 144) {
         parse_hit_block_coordy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_block_coordy_)));
          set_has_hit_block_coordy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMagicObjectAppearance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMagicObjectAppearance)
  return false;
#undef DO_
}

void MsgMagicObjectAppearance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMagicObjectAppearance)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAGICOBJECT_APPEARACE];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 magicobjectid = 2;
  if (has_magicobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->magicobjectid(), output);
  }

  // optional int32 mapobjectid = 3;
  if (has_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapobjectid(), output);
  }

  // optional int32 skilldataid = 4;
  if (has_skilldataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skilldataid(), output);
  }

  // optional int32 magicobj_type = 5;
  if (has_magicobj_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->magicobj_type(), output);
  }

  // optional int32 posx = 6;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->posx(), output);
  }

  // optional int32 posy = 7;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->posy(), output);
  }

  // optional int64 dirx = 8;
  if (has_dirx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->dirx(), output);
  }

  // optional int64 diry = 9;
  if (has_diry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->diry(), output);
  }

  // optional int32 ball_nowdistance = 10;
  if (has_ball_nowdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ball_nowdistance(), output);
  }

  // optional int32 area_updatetime = 11;
  if (has_area_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->area_updatetime(), output);
  }

  // optional int32 area_lt_x = 12;
  if (has_area_lt_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->area_lt_x(), output);
  }

  // optional int32 area_lt_y = 13;
  if (has_area_lt_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->area_lt_y(), output);
  }

  // optional int32 area_rd_x = 14;
  if (has_area_rd_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->area_rd_x(), output);
  }

  // optional int32 area_rd_y = 15;
  if (has_area_rd_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->area_rd_y(), output);
  }

  // optional int32 b_clear_hit = 16;
  if (has_b_clear_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->b_clear_hit(), output);
  }

  // optional int32 hit_block_coordx = 17;
  if (has_hit_block_coordx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->hit_block_coordx(), output);
  }

  // optional int32 hit_block_coordy = 18;
  if (has_hit_block_coordy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->hit_block_coordy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMagicObjectAppearance)
}

::google::protobuf::uint8* MsgMagicObjectAppearance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMagicObjectAppearance)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAGICOBJECT_APPEARACE];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 magicobjectid = 2;
  if (has_magicobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->magicobjectid(), target);
  }

  // optional int32 mapobjectid = 3;
  if (has_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapobjectid(), target);
  }

  // optional int32 skilldataid = 4;
  if (has_skilldataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skilldataid(), target);
  }

  // optional int32 magicobj_type = 5;
  if (has_magicobj_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->magicobj_type(), target);
  }

  // optional int32 posx = 6;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->posx(), target);
  }

  // optional int32 posy = 7;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->posy(), target);
  }

  // optional int64 dirx = 8;
  if (has_dirx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->dirx(), target);
  }

  // optional int64 diry = 9;
  if (has_diry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->diry(), target);
  }

  // optional int32 ball_nowdistance = 10;
  if (has_ball_nowdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ball_nowdistance(), target);
  }

  // optional int32 area_updatetime = 11;
  if (has_area_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->area_updatetime(), target);
  }

  // optional int32 area_lt_x = 12;
  if (has_area_lt_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->area_lt_x(), target);
  }

  // optional int32 area_lt_y = 13;
  if (has_area_lt_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->area_lt_y(), target);
  }

  // optional int32 area_rd_x = 14;
  if (has_area_rd_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->area_rd_x(), target);
  }

  // optional int32 area_rd_y = 15;
  if (has_area_rd_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->area_rd_y(), target);
  }

  // optional int32 b_clear_hit = 16;
  if (has_b_clear_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->b_clear_hit(), target);
  }

  // optional int32 hit_block_coordx = 17;
  if (has_hit_block_coordx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->hit_block_coordx(), target);
  }

  // optional int32 hit_block_coordy = 18;
  if (has_hit_block_coordy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->hit_block_coordy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMagicObjectAppearance)
  return target;
}

int MsgMagicObjectAppearance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAGICOBJECT_APPEARACE];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 magicobjectid = 2;
    if (has_magicobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicobjectid());
    }

    // optional int32 mapobjectid = 3;
    if (has_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapobjectid());
    }

    // optional int32 skilldataid = 4;
    if (has_skilldataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilldataid());
    }

    // optional int32 magicobj_type = 5;
    if (has_magicobj_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicobj_type());
    }

    // optional int32 posx = 6;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posy = 7;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int64 dirx = 8;
    if (has_dirx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirx());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 diry = 9;
    if (has_diry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diry());
    }

    // optional int32 ball_nowdistance = 10;
    if (has_ball_nowdistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ball_nowdistance());
    }

    // optional int32 area_updatetime = 11;
    if (has_area_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_updatetime());
    }

    // optional int32 area_lt_x = 12;
    if (has_area_lt_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_lt_x());
    }

    // optional int32 area_lt_y = 13;
    if (has_area_lt_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_lt_y());
    }

    // optional int32 area_rd_x = 14;
    if (has_area_rd_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_rd_x());
    }

    // optional int32 area_rd_y = 15;
    if (has_area_rd_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_rd_y());
    }

    // optional int32 b_clear_hit = 16;
    if (has_b_clear_hit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b_clear_hit());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 hit_block_coordx = 17;
    if (has_hit_block_coordx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_block_coordx());
    }

    // optional int32 hit_block_coordy = 18;
    if (has_hit_block_coordy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_block_coordy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMagicObjectAppearance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMagicObjectAppearance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMagicObjectAppearance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMagicObjectAppearance::MergeFrom(const MsgMagicObjectAppearance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_magicobjectid()) {
      set_magicobjectid(from.magicobjectid());
    }
    if (from.has_mapobjectid()) {
      set_mapobjectid(from.mapobjectid());
    }
    if (from.has_skilldataid()) {
      set_skilldataid(from.skilldataid());
    }
    if (from.has_magicobj_type()) {
      set_magicobj_type(from.magicobj_type());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_dirx()) {
      set_dirx(from.dirx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_diry()) {
      set_diry(from.diry());
    }
    if (from.has_ball_nowdistance()) {
      set_ball_nowdistance(from.ball_nowdistance());
    }
    if (from.has_area_updatetime()) {
      set_area_updatetime(from.area_updatetime());
    }
    if (from.has_area_lt_x()) {
      set_area_lt_x(from.area_lt_x());
    }
    if (from.has_area_lt_y()) {
      set_area_lt_y(from.area_lt_y());
    }
    if (from.has_area_rd_x()) {
      set_area_rd_x(from.area_rd_x());
    }
    if (from.has_area_rd_y()) {
      set_area_rd_y(from.area_rd_y());
    }
    if (from.has_b_clear_hit()) {
      set_b_clear_hit(from.b_clear_hit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hit_block_coordx()) {
      set_hit_block_coordx(from.hit_block_coordx());
    }
    if (from.has_hit_block_coordy()) {
      set_hit_block_coordy(from.hit_block_coordy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMagicObjectAppearance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMagicObjectAppearance::CopyFrom(const MsgMagicObjectAppearance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMagicObjectAppearance::IsInitialized() const {

  return true;
}

void MsgMagicObjectAppearance::Swap(MsgMagicObjectAppearance* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(magicobjectid_, other->magicobjectid_);
    std::swap(mapobjectid_, other->mapobjectid_);
    std::swap(skilldataid_, other->skilldataid_);
    std::swap(magicobj_type_, other->magicobj_type_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(dirx_, other->dirx_);
    std::swap(diry_, other->diry_);
    std::swap(ball_nowdistance_, other->ball_nowdistance_);
    std::swap(area_updatetime_, other->area_updatetime_);
    std::swap(area_lt_x_, other->area_lt_x_);
    std::swap(area_lt_y_, other->area_lt_y_);
    std::swap(area_rd_x_, other->area_rd_x_);
    std::swap(area_rd_y_, other->area_rd_y_);
    std::swap(b_clear_hit_, other->b_clear_hit_);
    std::swap(hit_block_coordx_, other->hit_block_coordx_);
    std::swap(hit_block_coordy_, other->hit_block_coordy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMagicObjectAppearance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMagicObjectAppearance_descriptor_;
  metadata.reflection = MsgMagicObjectAppearance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapObjectLeaveView::kMsgTypeFieldNumber;
const int MsgMapObjectLeaveView::kMapobjectidFieldNumber;
#endif  // !_MSC_VER

MsgMapObjectLeaveView::MsgMapObjectLeaveView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapObjectLeaveView)
}

void MsgMapObjectLeaveView::InitAsDefaultInstance() {
}

MsgMapObjectLeaveView::MsgMapObjectLeaveView(const MsgMapObjectLeaveView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapObjectLeaveView)
}

void MsgMapObjectLeaveView::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1116;
  mapobjectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapObjectLeaveView::~MsgMapObjectLeaveView() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapObjectLeaveView)
  SharedDtor();
}

void MsgMapObjectLeaveView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMapObjectLeaveView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapObjectLeaveView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapObjectLeaveView_descriptor_;
}

const MsgMapObjectLeaveView& MsgMapObjectLeaveView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapObjectLeaveView* MsgMapObjectLeaveView::default_instance_ = NULL;

MsgMapObjectLeaveView* MsgMapObjectLeaveView::New() const {
  return new MsgMapObjectLeaveView;
}

void MsgMapObjectLeaveView::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1116;
    mapobjectid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapObjectLeaveView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapObjectLeaveView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJECT_LEAVEVIEW];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapobjectid;
        break;
      }

      // optional int32 mapobjectid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapobjectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapobjectid_)));
          set_has_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapObjectLeaveView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapObjectLeaveView)
  return false;
#undef DO_
}

void MsgMapObjectLeaveView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapObjectLeaveView)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJECT_LEAVEVIEW];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 mapobjectid = 2;
  if (has_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapobjectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapObjectLeaveView)
}

::google::protobuf::uint8* MsgMapObjectLeaveView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapObjectLeaveView)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJECT_LEAVEVIEW];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 mapobjectid = 2;
  if (has_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapobjectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapObjectLeaveView)
  return target;
}

int MsgMapObjectLeaveView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJECT_LEAVEVIEW];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 mapobjectid = 2;
    if (has_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapobjectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapObjectLeaveView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapObjectLeaveView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapObjectLeaveView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapObjectLeaveView::MergeFrom(const MsgMapObjectLeaveView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_mapobjectid()) {
      set_mapobjectid(from.mapobjectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapObjectLeaveView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapObjectLeaveView::CopyFrom(const MsgMapObjectLeaveView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapObjectLeaveView::IsInitialized() const {

  return true;
}

void MsgMapObjectLeaveView::Swap(MsgMapObjectLeaveView* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(mapobjectid_, other->mapobjectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapObjectLeaveView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapObjectLeaveView_descriptor_;
  metadata.reflection = MsgMapObjectLeaveView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapClientCreateMapDoneC2G::kMsgTypeFieldNumber;
const int MsgMapClientCreateMapDoneC2G::kIggidFieldNumber;
const int MsgMapClientCreateMapDoneC2G::kVerFieldNumber;
#endif  // !_MSC_VER

MsgMapClientCreateMapDoneC2G::MsgMapClientCreateMapDoneC2G()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapClientCreateMapDoneC2G)
}

void MsgMapClientCreateMapDoneC2G::InitAsDefaultInstance() {
}

MsgMapClientCreateMapDoneC2G::MsgMapClientCreateMapDoneC2G(const MsgMapClientCreateMapDoneC2G& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapClientCreateMapDoneC2G)
}

void MsgMapClientCreateMapDoneC2G::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1125;
  iggid_ = GOOGLE_LONGLONG(0);
  ver_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapClientCreateMapDoneC2G::~MsgMapClientCreateMapDoneC2G() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapClientCreateMapDoneC2G)
  SharedDtor();
}

void MsgMapClientCreateMapDoneC2G::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMapClientCreateMapDoneC2G::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapClientCreateMapDoneC2G::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapClientCreateMapDoneC2G_descriptor_;
}

const MsgMapClientCreateMapDoneC2G& MsgMapClientCreateMapDoneC2G::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapClientCreateMapDoneC2G* MsgMapClientCreateMapDoneC2G::default_instance_ = NULL;

MsgMapClientCreateMapDoneC2G* MsgMapClientCreateMapDoneC2G::New() const {
  return new MsgMapClientCreateMapDoneC2G;
}

void MsgMapClientCreateMapDoneC2G::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1125;
    iggid_ = GOOGLE_LONGLONG(0);
    ver_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapClientCreateMapDoneC2G::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapClientCreateMapDoneC2G)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_CLIENT_CREATE_MAP_DONE_C2G];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ver;
        break;
      }

      // optional int32 ver = 3;
      case 3: {
        if (tag == 24) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapClientCreateMapDoneC2G)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapClientCreateMapDoneC2G)
  return false;
#undef DO_
}

void MsgMapClientCreateMapDoneC2G::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapClientCreateMapDoneC2G)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_CLIENT_CREATE_MAP_DONE_C2G];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 ver = 3;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapClientCreateMapDoneC2G)
}

::google::protobuf::uint8* MsgMapClientCreateMapDoneC2G::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapClientCreateMapDoneC2G)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_CLIENT_CREATE_MAP_DONE_C2G];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 ver = 3;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapClientCreateMapDoneC2G)
  return target;
}

int MsgMapClientCreateMapDoneC2G::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_CLIENT_CREATE_MAP_DONE_C2G];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 ver = 3;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapClientCreateMapDoneC2G::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapClientCreateMapDoneC2G* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapClientCreateMapDoneC2G*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapClientCreateMapDoneC2G::MergeFrom(const MsgMapClientCreateMapDoneC2G& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapClientCreateMapDoneC2G::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapClientCreateMapDoneC2G::CopyFrom(const MsgMapClientCreateMapDoneC2G& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapClientCreateMapDoneC2G::IsInitialized() const {

  return true;
}

void MsgMapClientCreateMapDoneC2G::Swap(MsgMapClientCreateMapDoneC2G* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(ver_, other->ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapClientCreateMapDoneC2G::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapClientCreateMapDoneC2G_descriptor_;
  metadata.reflection = MsgMapClientCreateMapDoneC2G_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapClientUploadDoneReq::kMsgTypeFieldNumber;
const int MsgMapClientUploadDoneReq::kIggidFieldNumber;
const int MsgMapClientUploadDoneReq::kVerFieldNumber;
#endif  // !_MSC_VER

MsgMapClientUploadDoneReq::MsgMapClientUploadDoneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapClientUploadDoneReq)
}

void MsgMapClientUploadDoneReq::InitAsDefaultInstance() {
}

MsgMapClientUploadDoneReq::MsgMapClientUploadDoneReq(const MsgMapClientUploadDoneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapClientUploadDoneReq)
}

void MsgMapClientUploadDoneReq::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1126;
  iggid_ = GOOGLE_LONGLONG(0);
  ver_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapClientUploadDoneReq::~MsgMapClientUploadDoneReq() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapClientUploadDoneReq)
  SharedDtor();
}

void MsgMapClientUploadDoneReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMapClientUploadDoneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapClientUploadDoneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapClientUploadDoneReq_descriptor_;
}

const MsgMapClientUploadDoneReq& MsgMapClientUploadDoneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapClientUploadDoneReq* MsgMapClientUploadDoneReq::default_instance_ = NULL;

MsgMapClientUploadDoneReq* MsgMapClientUploadDoneReq::New() const {
  return new MsgMapClientUploadDoneReq;
}

void MsgMapClientUploadDoneReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1126;
    iggid_ = GOOGLE_LONGLONG(0);
    ver_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapClientUploadDoneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapClientUploadDoneReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_CLIENT_UPLOAD_DONE_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ver;
        break;
      }

      // optional int32 ver = 3;
      case 3: {
        if (tag == 24) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapClientUploadDoneReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapClientUploadDoneReq)
  return false;
#undef DO_
}

void MsgMapClientUploadDoneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapClientUploadDoneReq)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_CLIENT_UPLOAD_DONE_REQ];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 ver = 3;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapClientUploadDoneReq)
}

::google::protobuf::uint8* MsgMapClientUploadDoneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapClientUploadDoneReq)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_CLIENT_UPLOAD_DONE_REQ];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 ver = 3;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapClientUploadDoneReq)
  return target;
}

int MsgMapClientUploadDoneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_CLIENT_UPLOAD_DONE_REQ];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 ver = 3;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapClientUploadDoneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapClientUploadDoneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapClientUploadDoneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapClientUploadDoneReq::MergeFrom(const MsgMapClientUploadDoneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapClientUploadDoneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapClientUploadDoneReq::CopyFrom(const MsgMapClientUploadDoneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapClientUploadDoneReq::IsInitialized() const {

  return true;
}

void MsgMapClientUploadDoneReq::Swap(MsgMapClientUploadDoneReq* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(ver_, other->ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapClientUploadDoneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapClientUploadDoneReq_descriptor_;
  metadata.reflection = MsgMapClientUploadDoneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapSrvLoadDone::kMsgTypeFieldNumber;
const int MsgMapSrvLoadDone::kIggidFieldNumber;
const int MsgMapSrvLoadDone::kMapidFieldNumber;
const int MsgMapSrvLoadDone::kVerFieldNumber;
const int MsgMapSrvLoadDone::kLastClientUploadDataSerialFieldNumber;
#endif  // !_MSC_VER

MsgMapSrvLoadDone::MsgMapSrvLoadDone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapSrvLoadDone)
}

void MsgMapSrvLoadDone::InitAsDefaultInstance() {
}

MsgMapSrvLoadDone::MsgMapSrvLoadDone(const MsgMapSrvLoadDone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapSrvLoadDone)
}

void MsgMapSrvLoadDone::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1127;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  ver_ = 0;
  lastclientuploaddataserial_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapSrvLoadDone::~MsgMapSrvLoadDone() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapSrvLoadDone)
  SharedDtor();
}

void MsgMapSrvLoadDone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMapSrvLoadDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapSrvLoadDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapSrvLoadDone_descriptor_;
}

const MsgMapSrvLoadDone& MsgMapSrvLoadDone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapSrvLoadDone* MsgMapSrvLoadDone::default_instance_ = NULL;

MsgMapSrvLoadDone* MsgMapSrvLoadDone::New() const {
  return new MsgMapSrvLoadDone;
}

void MsgMapSrvLoadDone::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMapSrvLoadDone*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(mapid_, ver_);
    msgtype_ = 1127;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapSrvLoadDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapSrvLoadDone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_SRV_LOAD_DONE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ver;
        break;
      }

      // optional int32 ver = 3;
      case 3: {
        if (tag == 24) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_LastClientUploadDataSerial;
        break;
      }

      // optional int64 LastClientUploadDataSerial = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_LastClientUploadDataSerial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastclientuploaddataserial_)));
          set_has_lastclientuploaddataserial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapSrvLoadDone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapSrvLoadDone)
  return false;
#undef DO_
}

void MsgMapSrvLoadDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapSrvLoadDone)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_SRV_LOAD_DONE];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 ver = 3;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ver(), output);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapid(), output);
  }

  // optional int64 LastClientUploadDataSerial = 5 [default = 0];
  if (has_lastclientuploaddataserial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lastclientuploaddataserial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapSrvLoadDone)
}

::google::protobuf::uint8* MsgMapSrvLoadDone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapSrvLoadDone)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_SRV_LOAD_DONE];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 ver = 3;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ver(), target);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapid(), target);
  }

  // optional int64 LastClientUploadDataSerial = 5 [default = 0];
  if (has_lastclientuploaddataserial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lastclientuploaddataserial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapSrvLoadDone)
  return target;
}

int MsgMapSrvLoadDone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_SRV_LOAD_DONE];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 ver = 3;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int64 LastClientUploadDataSerial = 5 [default = 0];
    if (has_lastclientuploaddataserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastclientuploaddataserial());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapSrvLoadDone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapSrvLoadDone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapSrvLoadDone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapSrvLoadDone::MergeFrom(const MsgMapSrvLoadDone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_lastclientuploaddataserial()) {
      set_lastclientuploaddataserial(from.lastclientuploaddataserial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapSrvLoadDone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapSrvLoadDone::CopyFrom(const MsgMapSrvLoadDone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapSrvLoadDone::IsInitialized() const {

  return true;
}

void MsgMapSrvLoadDone::Swap(MsgMapSrvLoadDone* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    std::swap(ver_, other->ver_);
    std::swap(lastclientuploaddataserial_, other->lastclientuploaddataserial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapSrvLoadDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapSrvLoadDone_descriptor_;
  metadata.reflection = MsgMapSrvLoadDone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapObjectPreAttack_S2C::kMsgTypeFieldNumber;
const int MsgMapObjectPreAttack_S2C::kSourceObjIDFieldNumber;
const int MsgMapObjectPreAttack_S2C::kServerTimeMSFieldNumber;
const int MsgMapObjectPreAttack_S2C::kTargetObjIdFieldNumber;
#endif  // !_MSC_VER

MsgMapObjectPreAttack_S2C::MsgMapObjectPreAttack_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapObjectPreAttack_S2C)
}

void MsgMapObjectPreAttack_S2C::InitAsDefaultInstance() {
}

MsgMapObjectPreAttack_S2C::MsgMapObjectPreAttack_S2C(const MsgMapObjectPreAttack_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapObjectPreAttack_S2C)
}

void MsgMapObjectPreAttack_S2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1108;
  sourceobjid_ = 0;
  servertimems_ = GOOGLE_LONGLONG(0);
  target_obj_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapObjectPreAttack_S2C::~MsgMapObjectPreAttack_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapObjectPreAttack_S2C)
  SharedDtor();
}

void MsgMapObjectPreAttack_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMapObjectPreAttack_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapObjectPreAttack_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapObjectPreAttack_S2C_descriptor_;
}

const MsgMapObjectPreAttack_S2C& MsgMapObjectPreAttack_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapObjectPreAttack_S2C* MsgMapObjectPreAttack_S2C::default_instance_ = NULL;

MsgMapObjectPreAttack_S2C* MsgMapObjectPreAttack_S2C::New() const {
  return new MsgMapObjectPreAttack_S2C;
}

void MsgMapObjectPreAttack_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMapObjectPreAttack_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(sourceobjid_, target_obj_id_);
    msgtype_ = 1108;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapObjectPreAttack_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapObjectPreAttack_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJECT_PRE_ATTACK_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sourceObjID;
        break;
      }

      // optional int32 sourceObjID = 2;
      case 2: {
        if (tag == 16) {
         parse_sourceObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceobjid_)));
          set_has_sourceobjid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverTimeMS;
        break;
      }

      // optional int64 serverTimeMS = 3;
      case 3: {
        if (tag == 24) {
         parse_serverTimeMS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertimems_)));
          set_has_servertimems();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target_obj_id;
        break;
      }

      // optional int32 target_obj_id = 4;
      case 4: {
        if (tag == 32) {
         parse_target_obj_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_obj_id_)));
          set_has_target_obj_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapObjectPreAttack_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapObjectPreAttack_S2C)
  return false;
#undef DO_
}

void MsgMapObjectPreAttack_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapObjectPreAttack_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJECT_PRE_ATTACK_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 sourceObjID = 2;
  if (has_sourceobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sourceobjid(), output);
  }

  // optional int64 serverTimeMS = 3;
  if (has_servertimems()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->servertimems(), output);
  }

  // optional int32 target_obj_id = 4;
  if (has_target_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_obj_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapObjectPreAttack_S2C)
}

::google::protobuf::uint8* MsgMapObjectPreAttack_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapObjectPreAttack_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJECT_PRE_ATTACK_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 sourceObjID = 2;
  if (has_sourceobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sourceobjid(), target);
  }

  // optional int64 serverTimeMS = 3;
  if (has_servertimems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->servertimems(), target);
  }

  // optional int32 target_obj_id = 4;
  if (has_target_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target_obj_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapObjectPreAttack_S2C)
  return target;
}

int MsgMapObjectPreAttack_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJECT_PRE_ATTACK_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 sourceObjID = 2;
    if (has_sourceobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceobjid());
    }

    // optional int64 serverTimeMS = 3;
    if (has_servertimems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertimems());
    }

    // optional int32 target_obj_id = 4;
    if (has_target_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_obj_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapObjectPreAttack_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapObjectPreAttack_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapObjectPreAttack_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapObjectPreAttack_S2C::MergeFrom(const MsgMapObjectPreAttack_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_sourceobjid()) {
      set_sourceobjid(from.sourceobjid());
    }
    if (from.has_servertimems()) {
      set_servertimems(from.servertimems());
    }
    if (from.has_target_obj_id()) {
      set_target_obj_id(from.target_obj_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapObjectPreAttack_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapObjectPreAttack_S2C::CopyFrom(const MsgMapObjectPreAttack_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapObjectPreAttack_S2C::IsInitialized() const {

  return true;
}

void MsgMapObjectPreAttack_S2C::Swap(MsgMapObjectPreAttack_S2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(sourceobjid_, other->sourceobjid_);
    std::swap(servertimems_, other->servertimems_);
    std::swap(target_obj_id_, other->target_obj_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapObjectPreAttack_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapObjectPreAttack_S2C_descriptor_;
  metadata.reflection = MsgMapObjectPreAttack_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapObjectUnderAttackG2C::kMsgTypeFieldNumber;
const int MsgMapObjectUnderAttackG2C::kSourceObjIDFieldNumber;
const int MsgMapObjectUnderAttackG2C::kServerTimeMSFieldNumber;
const int MsgMapObjectUnderAttackG2C::kTargetInfoFieldNumber;
const int MsgMapObjectUnderAttackG2C::kIdHPFieldNumber;
const int MsgMapObjectUnderAttackG2C::kIsPlayerAttackFieldNumber;
#endif  // !_MSC_VER

MsgMapObjectUnderAttackG2C::MsgMapObjectUnderAttackG2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapObjectUnderAttackG2C)
}

void MsgMapObjectUnderAttackG2C::InitAsDefaultInstance() {
}

MsgMapObjectUnderAttackG2C::MsgMapObjectUnderAttackG2C(const MsgMapObjectUnderAttackG2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapObjectUnderAttackG2C)
}

void MsgMapObjectUnderAttackG2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1119;
  sourceobjid_ = 0;
  servertimems_ = GOOGLE_LONGLONG(0);
  idhp_ = GOOGLE_LONGLONG(0);
  is_player_attack_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapObjectUnderAttackG2C::~MsgMapObjectUnderAttackG2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapObjectUnderAttackG2C)
  SharedDtor();
}

void MsgMapObjectUnderAttackG2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMapObjectUnderAttackG2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapObjectUnderAttackG2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapObjectUnderAttackG2C_descriptor_;
}

const MsgMapObjectUnderAttackG2C& MsgMapObjectUnderAttackG2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapObjectUnderAttackG2C* MsgMapObjectUnderAttackG2C::default_instance_ = NULL;

MsgMapObjectUnderAttackG2C* MsgMapObjectUnderAttackG2C::New() const {
  return new MsgMapObjectUnderAttackG2C;
}

void MsgMapObjectUnderAttackG2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMapObjectUnderAttackG2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(sourceobjid_, servertimems_);
    ZR_(idhp_, is_player_attack_);
    msgtype_ = 1119;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  targetinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapObjectUnderAttackG2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapObjectUnderAttackG2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJECT_UNDERATTACK_G2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sourceObjID;
        break;
      }

      // optional int32 sourceObjID = 2;
      case 2: {
        if (tag == 16) {
         parse_sourceObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceobjid_)));
          set_has_sourceobjid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverTimeMS;
        break;
      }

      // optional int64 serverTimeMS = 3;
      case 3: {
        if (tag == 24) {
         parse_serverTimeMS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertimems_)));
          set_has_servertimems();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_targetInfo;
        break;
      }

      // repeated .MsgPB.UnderAttack targetInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_targetInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targetinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_targetInfo;
        if (input->ExpectTag(40)) goto parse_idHP;
        break;
      }

      // optional int64 idHP = 5;
      case 5: {
        if (tag == 40) {
         parse_idHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &idhp_)));
          set_has_idhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_player_attack;
        break;
      }

      // optional int32 is_player_attack = 6;
      case 6: {
        if (tag == 48) {
         parse_is_player_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_player_attack_)));
          set_has_is_player_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapObjectUnderAttackG2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapObjectUnderAttackG2C)
  return false;
#undef DO_
}

void MsgMapObjectUnderAttackG2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapObjectUnderAttackG2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJECT_UNDERATTACK_G2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 sourceObjID = 2;
  if (has_sourceobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sourceobjid(), output);
  }

  // optional int64 serverTimeMS = 3;
  if (has_servertimems()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->servertimems(), output);
  }

  // repeated .MsgPB.UnderAttack targetInfo = 4;
  for (int i = 0; i < this->targetinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targetinfo(i), output);
  }

  // optional int64 idHP = 5;
  if (has_idhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->idhp(), output);
  }

  // optional int32 is_player_attack = 6;
  if (has_is_player_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_player_attack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapObjectUnderAttackG2C)
}

::google::protobuf::uint8* MsgMapObjectUnderAttackG2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapObjectUnderAttackG2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJECT_UNDERATTACK_G2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 sourceObjID = 2;
  if (has_sourceobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sourceobjid(), target);
  }

  // optional int64 serverTimeMS = 3;
  if (has_servertimems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->servertimems(), target);
  }

  // repeated .MsgPB.UnderAttack targetInfo = 4;
  for (int i = 0; i < this->targetinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targetinfo(i), target);
  }

  // optional int64 idHP = 5;
  if (has_idhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->idhp(), target);
  }

  // optional int32 is_player_attack = 6;
  if (has_is_player_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_player_attack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapObjectUnderAttackG2C)
  return target;
}

int MsgMapObjectUnderAttackG2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJECT_UNDERATTACK_G2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 sourceObjID = 2;
    if (has_sourceobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceobjid());
    }

    // optional int64 serverTimeMS = 3;
    if (has_servertimems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertimems());
    }

    // optional int64 idHP = 5;
    if (has_idhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->idhp());
    }

    // optional int32 is_player_attack = 6;
    if (has_is_player_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_player_attack());
    }

  }
  // repeated .MsgPB.UnderAttack targetInfo = 4;
  total_size += 1 * this->targetinfo_size();
  for (int i = 0; i < this->targetinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targetinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapObjectUnderAttackG2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapObjectUnderAttackG2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapObjectUnderAttackG2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapObjectUnderAttackG2C::MergeFrom(const MsgMapObjectUnderAttackG2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetinfo_.MergeFrom(from.targetinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_sourceobjid()) {
      set_sourceobjid(from.sourceobjid());
    }
    if (from.has_servertimems()) {
      set_servertimems(from.servertimems());
    }
    if (from.has_idhp()) {
      set_idhp(from.idhp());
    }
    if (from.has_is_player_attack()) {
      set_is_player_attack(from.is_player_attack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapObjectUnderAttackG2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapObjectUnderAttackG2C::CopyFrom(const MsgMapObjectUnderAttackG2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapObjectUnderAttackG2C::IsInitialized() const {

  return true;
}

void MsgMapObjectUnderAttackG2C::Swap(MsgMapObjectUnderAttackG2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(sourceobjid_, other->sourceobjid_);
    std::swap(servertimems_, other->servertimems_);
    targetinfo_.Swap(&other->targetinfo_);
    std::swap(idhp_, other->idhp_);
    std::swap(is_player_attack_, other->is_player_attack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapObjectUnderAttackG2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapObjectUnderAttackG2C_descriptor_;
  metadata.reflection = MsgMapObjectUnderAttackG2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCharacterDeadS2C::kMsgTypeFieldNumber;
const int MsgCharacterDeadS2C::kMapObjectIdFieldNumber;
#endif  // !_MSC_VER

MsgCharacterDeadS2C::MsgCharacterDeadS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgCharacterDeadS2C)
}

void MsgCharacterDeadS2C::InitAsDefaultInstance() {
}

MsgCharacterDeadS2C::MsgCharacterDeadS2C(const MsgCharacterDeadS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgCharacterDeadS2C)
}

void MsgCharacterDeadS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1093;
  mapobjectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCharacterDeadS2C::~MsgCharacterDeadS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgCharacterDeadS2C)
  SharedDtor();
}

void MsgCharacterDeadS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCharacterDeadS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCharacterDeadS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCharacterDeadS2C_descriptor_;
}

const MsgCharacterDeadS2C& MsgCharacterDeadS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgCharacterDeadS2C* MsgCharacterDeadS2C::default_instance_ = NULL;

MsgCharacterDeadS2C* MsgCharacterDeadS2C::New() const {
  return new MsgCharacterDeadS2C;
}

void MsgCharacterDeadS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1093;
    mapobjectid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCharacterDeadS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgCharacterDeadS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHARACTOR_DEAD_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapObjectId;
        break;
      }

      // optional int32 mapObjectId = 2;
      case 2: {
        if (tag == 16) {
         parse_mapObjectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapobjectid_)));
          set_has_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgCharacterDeadS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgCharacterDeadS2C)
  return false;
#undef DO_
}

void MsgCharacterDeadS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgCharacterDeadS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHARACTOR_DEAD_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 mapObjectId = 2;
  if (has_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapobjectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgCharacterDeadS2C)
}

::google::protobuf::uint8* MsgCharacterDeadS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgCharacterDeadS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHARACTOR_DEAD_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 mapObjectId = 2;
  if (has_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapobjectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgCharacterDeadS2C)
  return target;
}

int MsgCharacterDeadS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHARACTOR_DEAD_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 mapObjectId = 2;
    if (has_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapobjectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCharacterDeadS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCharacterDeadS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCharacterDeadS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCharacterDeadS2C::MergeFrom(const MsgCharacterDeadS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_mapobjectid()) {
      set_mapobjectid(from.mapobjectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCharacterDeadS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCharacterDeadS2C::CopyFrom(const MsgCharacterDeadS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCharacterDeadS2C::IsInitialized() const {

  return true;
}

void MsgCharacterDeadS2C::Swap(MsgCharacterDeadS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(mapobjectid_, other->mapobjectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCharacterDeadS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCharacterDeadS2C_descriptor_;
  metadata.reflection = MsgCharacterDeadS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCharacterReviveS2C::kMsgTypeFieldNumber;
const int MsgCharacterReviveS2C::kMapObjectIdFieldNumber;
const int MsgCharacterReviveS2C::kHpFieldNumber;
const int MsgCharacterReviveS2C::kMpFieldNumber;
const int MsgCharacterReviveS2C::kPosXFieldNumber;
const int MsgCharacterReviveS2C::kPosYFieldNumber;
const int MsgCharacterReviveS2C::kResFieldNumber;
const int MsgCharacterReviveS2C::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgCharacterReviveS2C::MsgCharacterReviveS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgCharacterReviveS2C)
}

void MsgCharacterReviveS2C::InitAsDefaultInstance() {
}

MsgCharacterReviveS2C::MsgCharacterReviveS2C(const MsgCharacterReviveS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgCharacterReviveS2C)
}

void MsgCharacterReviveS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1095;
  mapobjectid_ = 0;
  hp_ = 0;
  mp_ = 0;
  posx_ = 0;
  posy_ = 0;
  res_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCharacterReviveS2C::~MsgCharacterReviveS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgCharacterReviveS2C)
  SharedDtor();
}

void MsgCharacterReviveS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCharacterReviveS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCharacterReviveS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCharacterReviveS2C_descriptor_;
}

const MsgCharacterReviveS2C& MsgCharacterReviveS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgCharacterReviveS2C* MsgCharacterReviveS2C::default_instance_ = NULL;

MsgCharacterReviveS2C* MsgCharacterReviveS2C::New() const {
  return new MsgCharacterReviveS2C;
}

void MsgCharacterReviveS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCharacterReviveS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mapobjectid_, res_);
    msgtype_ = 1095;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCharacterReviveS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgCharacterReviveS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHARACTOR_REVIVE_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapObjectId;
        break;
      }

      // optional int32 mapObjectId = 2;
      case 2: {
        if (tag == 16) {
         parse_mapObjectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapobjectid_)));
          set_has_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // optional int32 hp = 3;
      case 3: {
        if (tag == 24) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mp;
        break;
      }

      // optional int32 mp = 4;
      case 4: {
        if (tag == 32) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_posX;
        break;
      }

      // optional int32 posX = 5;
      case 5: {
        if (tag == 40) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_posY;
        break;
      }

      // optional int32 posY = 6;
      case 6: {
        if (tag == 48) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_res;
        break;
      }

      // optional .MsgPB.REVIVE_RES res = 7;
      case 7: {
        if (tag == 56) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::REVIVE_RES_IsValid(value)) {
            set_res(static_cast< ::MsgPB::REVIVE_RES >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 8;
      case 8: {
        if (tag == 64) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgCharacterReviveS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgCharacterReviveS2C)
  return false;
#undef DO_
}

void MsgCharacterReviveS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgCharacterReviveS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHARACTOR_REVIVE_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 mapObjectId = 2;
  if (has_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapobjectid(), output);
  }

  // optional int32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  // optional int32 mp = 4;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mp(), output);
  }

  // optional int32 posX = 5;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->posx(), output);
  }

  // optional int32 posY = 6;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->posy(), output);
  }

  // optional .MsgPB.REVIVE_RES res = 7;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->res(), output);
  }

  // optional int64 iggid = 8;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgCharacterReviveS2C)
}

::google::protobuf::uint8* MsgCharacterReviveS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgCharacterReviveS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHARACTOR_REVIVE_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 mapObjectId = 2;
  if (has_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapobjectid(), target);
  }

  // optional int32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }

  // optional int32 mp = 4;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mp(), target);
  }

  // optional int32 posX = 5;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->posx(), target);
  }

  // optional int32 posY = 6;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->posy(), target);
  }

  // optional .MsgPB.REVIVE_RES res = 7;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->res(), target);
  }

  // optional int64 iggid = 8;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgCharacterReviveS2C)
  return target;
}

int MsgCharacterReviveS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHARACTOR_REVIVE_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 mapObjectId = 2;
    if (has_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapobjectid());
    }

    // optional int32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 4;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional int32 posX = 5;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posY = 6;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional .MsgPB.REVIVE_RES res = 7;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional int64 iggid = 8;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCharacterReviveS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCharacterReviveS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCharacterReviveS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCharacterReviveS2C::MergeFrom(const MsgCharacterReviveS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_mapobjectid()) {
      set_mapobjectid(from.mapobjectid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCharacterReviveS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCharacterReviveS2C::CopyFrom(const MsgCharacterReviveS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCharacterReviveS2C::IsInitialized() const {

  return true;
}

void MsgCharacterReviveS2C::Swap(MsgCharacterReviveS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(mapobjectid_, other->mapobjectid_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(res_, other->res_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCharacterReviveS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCharacterReviveS2C_descriptor_;
  metadata.reflection = MsgCharacterReviveS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSyncPlayerDataToMapServerDone_GS2MS::kMsgTypeFieldNumber;
const int MsgSyncPlayerDataToMapServerDone_GS2MS::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgSyncPlayerDataToMapServerDone_GS2MS::MsgSyncPlayerDataToMapServerDone_GS2MS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgSyncPlayerDataToMapServerDone_GS2MS)
}

void MsgSyncPlayerDataToMapServerDone_GS2MS::InitAsDefaultInstance() {
}

MsgSyncPlayerDataToMapServerDone_GS2MS::MsgSyncPlayerDataToMapServerDone_GS2MS(const MsgSyncPlayerDataToMapServerDone_GS2MS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgSyncPlayerDataToMapServerDone_GS2MS)
}

void MsgSyncPlayerDataToMapServerDone_GS2MS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1056;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSyncPlayerDataToMapServerDone_GS2MS::~MsgSyncPlayerDataToMapServerDone_GS2MS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgSyncPlayerDataToMapServerDone_GS2MS)
  SharedDtor();
}

void MsgSyncPlayerDataToMapServerDone_GS2MS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSyncPlayerDataToMapServerDone_GS2MS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSyncPlayerDataToMapServerDone_GS2MS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSyncPlayerDataToMapServerDone_GS2MS_descriptor_;
}

const MsgSyncPlayerDataToMapServerDone_GS2MS& MsgSyncPlayerDataToMapServerDone_GS2MS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgSyncPlayerDataToMapServerDone_GS2MS* MsgSyncPlayerDataToMapServerDone_GS2MS::default_instance_ = NULL;

MsgSyncPlayerDataToMapServerDone_GS2MS* MsgSyncPlayerDataToMapServerDone_GS2MS::New() const {
  return new MsgSyncPlayerDataToMapServerDone_GS2MS;
}

void MsgSyncPlayerDataToMapServerDone_GS2MS::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1056;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSyncPlayerDataToMapServerDone_GS2MS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgSyncPlayerDataToMapServerDone_GS2MS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_PLAYERDATA_TO_MAPSERVER_DONE_GS2MS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgSyncPlayerDataToMapServerDone_GS2MS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgSyncPlayerDataToMapServerDone_GS2MS)
  return false;
#undef DO_
}

void MsgSyncPlayerDataToMapServerDone_GS2MS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgSyncPlayerDataToMapServerDone_GS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_PLAYERDATA_TO_MAPSERVER_DONE_GS2MS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgSyncPlayerDataToMapServerDone_GS2MS)
}

::google::protobuf::uint8* MsgSyncPlayerDataToMapServerDone_GS2MS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgSyncPlayerDataToMapServerDone_GS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_PLAYERDATA_TO_MAPSERVER_DONE_GS2MS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgSyncPlayerDataToMapServerDone_GS2MS)
  return target;
}

int MsgSyncPlayerDataToMapServerDone_GS2MS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_PLAYERDATA_TO_MAPSERVER_DONE_GS2MS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSyncPlayerDataToMapServerDone_GS2MS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSyncPlayerDataToMapServerDone_GS2MS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSyncPlayerDataToMapServerDone_GS2MS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSyncPlayerDataToMapServerDone_GS2MS::MergeFrom(const MsgSyncPlayerDataToMapServerDone_GS2MS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSyncPlayerDataToMapServerDone_GS2MS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSyncPlayerDataToMapServerDone_GS2MS::CopyFrom(const MsgSyncPlayerDataToMapServerDone_GS2MS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSyncPlayerDataToMapServerDone_GS2MS::IsInitialized() const {

  return true;
}

void MsgSyncPlayerDataToMapServerDone_GS2MS::Swap(MsgSyncPlayerDataToMapServerDone_GS2MS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSyncPlayerDataToMapServerDone_GS2MS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSyncPlayerDataToMapServerDone_GS2MS_descriptor_;
  metadata.reflection = MsgSyncPlayerDataToMapServerDone_GS2MS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTriggerGateC2S::kMsgTypeFieldNumber;
const int MsgTriggerGateC2S::kIggidFieldNumber;
const int MsgTriggerGateC2S::kGateIdFieldNumber;
const int MsgTriggerGateC2S::kTargetIdFieldNumber;
#endif  // !_MSC_VER

MsgTriggerGateC2S::MsgTriggerGateC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTriggerGateC2S)
}

void MsgTriggerGateC2S::InitAsDefaultInstance() {
}

MsgTriggerGateC2S::MsgTriggerGateC2S(const MsgTriggerGateC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTriggerGateC2S)
}

void MsgTriggerGateC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1061;
  iggid_ = GOOGLE_LONGLONG(0);
  gateid_ = 0;
  targetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTriggerGateC2S::~MsgTriggerGateC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTriggerGateC2S)
  SharedDtor();
}

void MsgTriggerGateC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTriggerGateC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTriggerGateC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTriggerGateC2S_descriptor_;
}

const MsgTriggerGateC2S& MsgTriggerGateC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgTriggerGateC2S* MsgTriggerGateC2S::default_instance_ = NULL;

MsgTriggerGateC2S* MsgTriggerGateC2S::New() const {
  return new MsgTriggerGateC2S;
}

void MsgTriggerGateC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTriggerGateC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(gateid_, targetid_);
    msgtype_ = 1061;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTriggerGateC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTriggerGateC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRIGGER_GATE_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gateId;
        break;
      }

      // optional int32 gateId = 3;
      case 3: {
        if (tag == 24) {
         parse_gateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetId;
        break;
      }

      // optional int32 targetId = 4;
      case 4: {
        if (tag == 32) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTriggerGateC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTriggerGateC2S)
  return false;
#undef DO_
}

void MsgTriggerGateC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTriggerGateC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRIGGER_GATE_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 gateId = 3;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gateid(), output);
  }

  // optional int32 targetId = 4;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTriggerGateC2S)
}

::google::protobuf::uint8* MsgTriggerGateC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTriggerGateC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRIGGER_GATE_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 gateId = 3;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gateid(), target);
  }

  // optional int32 targetId = 4;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTriggerGateC2S)
  return target;
}

int MsgTriggerGateC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRIGGER_GATE_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 gateId = 3;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

    // optional int32 targetId = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTriggerGateC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTriggerGateC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTriggerGateC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTriggerGateC2S::MergeFrom(const MsgTriggerGateC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTriggerGateC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTriggerGateC2S::CopyFrom(const MsgTriggerGateC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTriggerGateC2S::IsInitialized() const {

  return true;
}

void MsgTriggerGateC2S::Swap(MsgTriggerGateC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(gateid_, other->gateid_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTriggerGateC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTriggerGateC2S_descriptor_;
  metadata.reflection = MsgTriggerGateC2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgTriggerGateS2C_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTriggerGateS2C_Result_descriptor_;
}
bool MsgTriggerGateS2C_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgTriggerGateS2C_Result MsgTriggerGateS2C::SUCCESS;
const MsgTriggerGateS2C_Result MsgTriggerGateS2C::FAILURE;
const MsgTriggerGateS2C_Result MsgTriggerGateS2C::MAP_NULL;
const MsgTriggerGateS2C_Result MsgTriggerGateS2C::MAPTEMPLATE_NULL;
const MsgTriggerGateS2C_Result MsgTriggerGateS2C::GATEID_ERROR;
const MsgTriggerGateS2C_Result MsgTriggerGateS2C::TOO_FAR;
const MsgTriggerGateS2C_Result MsgTriggerGateS2C::TARGET_NULL;
const MsgTriggerGateS2C_Result MsgTriggerGateS2C::TARGET_MAPID_IS_ERROR;
const MsgTriggerGateS2C_Result MsgTriggerGateS2C::TARGET_NONE;
const MsgTriggerGateS2C_Result MsgTriggerGateS2C::STRATEGY_NONE;
const MsgTriggerGateS2C_Result MsgTriggerGateS2C::ENDLESS_ERROR;
const MsgTriggerGateS2C_Result MsgTriggerGateS2C::Result_MIN;
const MsgTriggerGateS2C_Result MsgTriggerGateS2C::Result_MAX;
const int MsgTriggerGateS2C::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgTriggerGateS2C::kMsgTypeFieldNumber;
const int MsgTriggerGateS2C::kIggidFieldNumber;
const int MsgTriggerGateS2C::kGateIdFieldNumber;
const int MsgTriggerGateS2C::kTargetIdFieldNumber;
const int MsgTriggerGateS2C::kResultFieldNumber;
#endif  // !_MSC_VER

MsgTriggerGateS2C::MsgTriggerGateS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTriggerGateS2C)
}

void MsgTriggerGateS2C::InitAsDefaultInstance() {
}

MsgTriggerGateS2C::MsgTriggerGateS2C(const MsgTriggerGateS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTriggerGateS2C)
}

void MsgTriggerGateS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1062;
  iggid_ = GOOGLE_LONGLONG(0);
  gateid_ = 0;
  targetid_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTriggerGateS2C::~MsgTriggerGateS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTriggerGateS2C)
  SharedDtor();
}

void MsgTriggerGateS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTriggerGateS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTriggerGateS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTriggerGateS2C_descriptor_;
}

const MsgTriggerGateS2C& MsgTriggerGateS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgTriggerGateS2C* MsgTriggerGateS2C::default_instance_ = NULL;

MsgTriggerGateS2C* MsgTriggerGateS2C::New() const {
  return new MsgTriggerGateS2C;
}

void MsgTriggerGateS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTriggerGateS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(gateid_, result_);
    msgtype_ = 1062;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTriggerGateS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTriggerGateS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRIGGER_GATE_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gateId;
        break;
      }

      // optional int32 gateId = 3;
      case 3: {
        if (tag == 24) {
         parse_gateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetId;
        break;
      }

      // optional int32 targetId = 4;
      case 4: {
        if (tag == 32) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .MsgPB.MsgTriggerGateS2C.Result result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgTriggerGateS2C_Result_IsValid(value)) {
            set_result(static_cast< ::MsgPB::MsgTriggerGateS2C_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTriggerGateS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTriggerGateS2C)
  return false;
#undef DO_
}

void MsgTriggerGateS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTriggerGateS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRIGGER_GATE_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 gateId = 3;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gateid(), output);
  }

  // optional int32 targetId = 4;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetid(), output);
  }

  // optional .MsgPB.MsgTriggerGateS2C.Result result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTriggerGateS2C)
}

::google::protobuf::uint8* MsgTriggerGateS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTriggerGateS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRIGGER_GATE_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 gateId = 3;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gateid(), target);
  }

  // optional int32 targetId = 4;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetid(), target);
  }

  // optional .MsgPB.MsgTriggerGateS2C.Result result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTriggerGateS2C)
  return target;
}

int MsgTriggerGateS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRIGGER_GATE_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 gateId = 3;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

    // optional int32 targetId = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional .MsgPB.MsgTriggerGateS2C.Result result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTriggerGateS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTriggerGateS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTriggerGateS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTriggerGateS2C::MergeFrom(const MsgTriggerGateS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTriggerGateS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTriggerGateS2C::CopyFrom(const MsgTriggerGateS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTriggerGateS2C::IsInitialized() const {

  return true;
}

void MsgTriggerGateS2C::Swap(MsgTriggerGateS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(gateid_, other->gateid_);
    std::swap(targetid_, other->targetid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTriggerGateS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTriggerGateS2C_descriptor_;
  metadata.reflection = MsgTriggerGateS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGatePoint_Target::kIdFieldNumber;
const int MsgGatePoint_Target::kTypeFieldNumber;
const int MsgGatePoint_Target::kMapIdFieldNumber;
const int MsgGatePoint_Target::kGateidFieldNumber;
const int MsgGatePoint_Target::kPosFieldNumber;
#endif  // !_MSC_VER

MsgGatePoint_Target::MsgGatePoint_Target()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgGatePoint.Target)
}

void MsgGatePoint_Target::InitAsDefaultInstance() {
  pos_ = const_cast< ::MsgPB::MsgPoint*>(&::MsgPB::MsgPoint::default_instance());
}

MsgGatePoint_Target::MsgGatePoint_Target(const MsgGatePoint_Target& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgGatePoint.Target)
}

void MsgGatePoint_Target::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  mapid_ = 0;
  gateid_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGatePoint_Target::~MsgGatePoint_Target() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgGatePoint.Target)
  SharedDtor();
}

void MsgGatePoint_Target::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void MsgGatePoint_Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGatePoint_Target::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGatePoint_Target_descriptor_;
}

const MsgGatePoint_Target& MsgGatePoint_Target::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgGatePoint_Target* MsgGatePoint_Target::default_instance_ = NULL;

MsgGatePoint_Target* MsgGatePoint_Target::New() const {
  return new MsgGatePoint_Target;
}

void MsgGatePoint_Target::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGatePoint_Target*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, gateid_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::MsgPB::MsgPoint::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGatePoint_Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgGatePoint.Target)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapId;
        break;
      }

      // optional int32 mapId = 3;
      case 3: {
        if (tag == 24) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gateid;
        break;
      }

      // optional int32 gateid = 4;
      case 4: {
        if (tag == 32) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .MsgPB.MsgPoint pos = 5;
      case 5: {
        if (tag == 42) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgGatePoint.Target)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgGatePoint.Target)
  return false;
#undef DO_
}

void MsgGatePoint_Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgGatePoint.Target)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 mapId = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  // optional int32 gateid = 4;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gateid(), output);
  }

  // optional .MsgPB.MsgPoint pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgGatePoint.Target)
}

::google::protobuf::uint8* MsgGatePoint_Target::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgGatePoint.Target)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 mapId = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  // optional int32 gateid = 4;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gateid(), target);
  }

  // optional .MsgPB.MsgPoint pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgGatePoint.Target)
  return target;
}

int MsgGatePoint_Target::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 mapId = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 gateid = 4;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

    // optional .MsgPB.MsgPoint pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGatePoint_Target::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGatePoint_Target* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGatePoint_Target*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGatePoint_Target::MergeFrom(const MsgGatePoint_Target& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_pos()) {
      mutable_pos()->::MsgPB::MsgPoint::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGatePoint_Target::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGatePoint_Target::CopyFrom(const MsgGatePoint_Target& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGatePoint_Target::IsInitialized() const {

  return true;
}

void MsgGatePoint_Target::Swap(MsgGatePoint_Target* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(mapid_, other->mapid_);
    std::swap(gateid_, other->gateid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGatePoint_Target::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGatePoint_Target_descriptor_;
  metadata.reflection = MsgGatePoint_Target_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgGatePoint::kIdFieldNumber;
const int MsgGatePoint::kTypeFieldNumber;
const int MsgGatePoint::kPosFieldNumber;
const int MsgGatePoint::kTargetsFieldNumber;
#endif  // !_MSC_VER

MsgGatePoint::MsgGatePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgGatePoint)
}

void MsgGatePoint::InitAsDefaultInstance() {
  pos_ = const_cast< ::MsgPB::MsgPoint*>(&::MsgPB::MsgPoint::default_instance());
}

MsgGatePoint::MsgGatePoint(const MsgGatePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgGatePoint)
}

void MsgGatePoint::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGatePoint::~MsgGatePoint() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgGatePoint)
  SharedDtor();
}

void MsgGatePoint::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void MsgGatePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGatePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGatePoint_descriptor_;
}

const MsgGatePoint& MsgGatePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgGatePoint* MsgGatePoint::default_instance_ = NULL;

MsgGatePoint* MsgGatePoint::New() const {
  return new MsgGatePoint;
}

void MsgGatePoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGatePoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, type_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::MsgPB::MsgPoint::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGatePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgGatePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .MsgPB.MsgPoint pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_targets;
        break;
      }

      // repeated .MsgPB.MsgGateTarget targets = 4;
      case 4: {
        if (tag == 34) {
         parse_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_targets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgGatePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgGatePoint)
  return false;
#undef DO_
}

void MsgGatePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgGatePoint)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional .MsgPB.MsgPoint pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // repeated .MsgPB.MsgGateTarget targets = 4;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgGatePoint)
}

::google::protobuf::uint8* MsgGatePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgGatePoint)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional .MsgPB.MsgPoint pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // repeated .MsgPB.MsgGateTarget targets = 4;
  for (int i = 0; i < this->targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgGatePoint)
  return target;
}

int MsgGatePoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .MsgPB.MsgPoint pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  // repeated .MsgPB.MsgGateTarget targets = 4;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGatePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGatePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGatePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGatePoint::MergeFrom(const MsgGatePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  targets_.MergeFrom(from.targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::MsgPB::MsgPoint::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGatePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGatePoint::CopyFrom(const MsgGatePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGatePoint::IsInitialized() const {

  return true;
}

void MsgGatePoint::Swap(MsgGatePoint* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    targets_.Swap(&other->targets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGatePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGatePoint_descriptor_;
  metadata.reflection = MsgGatePoint_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgMapCfgInfo_Layout_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapCfgInfo_Layout_Type_descriptor_;
}
bool MsgMapCfgInfo_Layout_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgMapCfgInfo_Layout_Type MsgMapCfgInfo_Layout::NEWBIEROOM;
const MsgMapCfgInfo_Layout_Type MsgMapCfgInfo_Layout::PRIVATEDUNGEON;
const MsgMapCfgInfo_Layout_Type MsgMapCfgInfo_Layout::Type_MIN;
const MsgMapCfgInfo_Layout_Type MsgMapCfgInfo_Layout::Type_MAX;
const int MsgMapCfgInfo_Layout::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgMapCfgInfo_Layout::kTypeFieldNumber;
const int MsgMapCfgInfo_Layout::kAreaFieldNumber;
#endif  // !_MSC_VER

MsgMapCfgInfo_Layout::MsgMapCfgInfo_Layout()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapCfgInfo.Layout)
}

void MsgMapCfgInfo_Layout::InitAsDefaultInstance() {
  area_ = const_cast< ::MsgPB::MsgArea*>(&::MsgPB::MsgArea::default_instance());
}

MsgMapCfgInfo_Layout::MsgMapCfgInfo_Layout(const MsgMapCfgInfo_Layout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapCfgInfo.Layout)
}

void MsgMapCfgInfo_Layout::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  area_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapCfgInfo_Layout::~MsgMapCfgInfo_Layout() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapCfgInfo.Layout)
  SharedDtor();
}

void MsgMapCfgInfo_Layout::SharedDtor() {
  if (this != default_instance_) {
    delete area_;
  }
}

void MsgMapCfgInfo_Layout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapCfgInfo_Layout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapCfgInfo_Layout_descriptor_;
}

const MsgMapCfgInfo_Layout& MsgMapCfgInfo_Layout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapCfgInfo_Layout* MsgMapCfgInfo_Layout::default_instance_ = NULL;

MsgMapCfgInfo_Layout* MsgMapCfgInfo_Layout::New() const {
  return new MsgMapCfgInfo_Layout;
}

void MsgMapCfgInfo_Layout::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_area()) {
      if (area_ != NULL) area_->::MsgPB::MsgArea::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapCfgInfo_Layout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapCfgInfo.Layout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.MsgMapCfgInfo.Layout.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgMapCfgInfo_Layout_Type_IsValid(value)) {
            set_type(static_cast< ::MsgPB::MsgMapCfgInfo_Layout_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_area;
        break;
      }

      // optional .MsgPB.MsgArea area = 2;
      case 2: {
        if (tag == 18) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapCfgInfo.Layout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapCfgInfo.Layout)
  return false;
#undef DO_
}

void MsgMapCfgInfo_Layout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapCfgInfo.Layout)
  // optional .MsgPB.MsgMapCfgInfo.Layout.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .MsgPB.MsgArea area = 2;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapCfgInfo.Layout)
}

::google::protobuf::uint8* MsgMapCfgInfo_Layout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapCfgInfo.Layout)
  // optional .MsgPB.MsgMapCfgInfo.Layout.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .MsgPB.MsgArea area = 2;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapCfgInfo.Layout)
  return target;
}

int MsgMapCfgInfo_Layout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.MsgMapCfgInfo.Layout.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .MsgPB.MsgArea area = 2;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->area());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapCfgInfo_Layout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapCfgInfo_Layout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapCfgInfo_Layout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapCfgInfo_Layout::MergeFrom(const MsgMapCfgInfo_Layout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_area()) {
      mutable_area()->::MsgPB::MsgArea::MergeFrom(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapCfgInfo_Layout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapCfgInfo_Layout::CopyFrom(const MsgMapCfgInfo_Layout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapCfgInfo_Layout::IsInitialized() const {

  return true;
}

void MsgMapCfgInfo_Layout::Swap(MsgMapCfgInfo_Layout* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapCfgInfo_Layout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapCfgInfo_Layout_descriptor_;
  metadata.reflection = MsgMapCfgInfo_Layout_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgMapCfgInfo_PopBoxBase_Pop::kDefidFieldNumber;
const int MsgMapCfgInfo_PopBoxBase_Pop::kMobmaxFieldNumber;
const int MsgMapCfgInfo_PopBoxBase_Pop::kPoptimeFieldNumber;
const int MsgMapCfgInfo_PopBoxBase_Pop::kProbFieldNumber;
const int MsgMapCfgInfo_PopBoxBase_Pop::kPopareaFieldNumber;
#endif  // !_MSC_VER

MsgMapCfgInfo_PopBoxBase_Pop::MsgMapCfgInfo_PopBoxBase_Pop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapCfgInfo.PopBoxBase.Pop)
}

void MsgMapCfgInfo_PopBoxBase_Pop::InitAsDefaultInstance() {
  poparea_ = const_cast< ::MsgPB::MsgArea*>(&::MsgPB::MsgArea::default_instance());
}

MsgMapCfgInfo_PopBoxBase_Pop::MsgMapCfgInfo_PopBoxBase_Pop(const MsgMapCfgInfo_PopBoxBase_Pop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapCfgInfo.PopBoxBase.Pop)
}

void MsgMapCfgInfo_PopBoxBase_Pop::SharedCtor() {
  _cached_size_ = 0;
  defid_ = 0;
  mobmax_ = 0;
  poptime_ = 0;
  prob_ = 0;
  poparea_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapCfgInfo_PopBoxBase_Pop::~MsgMapCfgInfo_PopBoxBase_Pop() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapCfgInfo.PopBoxBase.Pop)
  SharedDtor();
}

void MsgMapCfgInfo_PopBoxBase_Pop::SharedDtor() {
  if (this != default_instance_) {
    delete poparea_;
  }
}

void MsgMapCfgInfo_PopBoxBase_Pop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopBoxBase_Pop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapCfgInfo_PopBoxBase_Pop_descriptor_;
}

const MsgMapCfgInfo_PopBoxBase_Pop& MsgMapCfgInfo_PopBoxBase_Pop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapCfgInfo_PopBoxBase_Pop* MsgMapCfgInfo_PopBoxBase_Pop::default_instance_ = NULL;

MsgMapCfgInfo_PopBoxBase_Pop* MsgMapCfgInfo_PopBoxBase_Pop::New() const {
  return new MsgMapCfgInfo_PopBoxBase_Pop;
}

void MsgMapCfgInfo_PopBoxBase_Pop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMapCfgInfo_PopBoxBase_Pop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(defid_, prob_);
    if (has_poparea()) {
      if (poparea_ != NULL) poparea_->::MsgPB::MsgArea::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapCfgInfo_PopBoxBase_Pop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapCfgInfo.PopBoxBase.Pop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 defid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defid_)));
          set_has_defid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mobmax;
        break;
      }

      // optional int32 mobmax = 2;
      case 2: {
        if (tag == 16) {
         parse_mobmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobmax_)));
          set_has_mobmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_poptime;
        break;
      }

      // optional int32 poptime = 3;
      case 3: {
        if (tag == 24) {
         parse_poptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poptime_)));
          set_has_poptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prob;
        break;
      }

      // optional int32 prob = 4;
      case 4: {
        if (tag == 32) {
         parse_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_poparea;
        break;
      }

      // optional .MsgPB.MsgArea poparea = 5;
      case 5: {
        if (tag == 42) {
         parse_poparea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poparea()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapCfgInfo.PopBoxBase.Pop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapCfgInfo.PopBoxBase.Pop)
  return false;
#undef DO_
}

void MsgMapCfgInfo_PopBoxBase_Pop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapCfgInfo.PopBoxBase.Pop)
  // optional int32 defid = 1;
  if (has_defid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->defid(), output);
  }

  // optional int32 mobmax = 2;
  if (has_mobmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mobmax(), output);
  }

  // optional int32 poptime = 3;
  if (has_poptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->poptime(), output);
  }

  // optional int32 prob = 4;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prob(), output);
  }

  // optional .MsgPB.MsgArea poparea = 5;
  if (has_poparea()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->poparea(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapCfgInfo.PopBoxBase.Pop)
}

::google::protobuf::uint8* MsgMapCfgInfo_PopBoxBase_Pop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapCfgInfo.PopBoxBase.Pop)
  // optional int32 defid = 1;
  if (has_defid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->defid(), target);
  }

  // optional int32 mobmax = 2;
  if (has_mobmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mobmax(), target);
  }

  // optional int32 poptime = 3;
  if (has_poptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->poptime(), target);
  }

  // optional int32 prob = 4;
  if (has_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prob(), target);
  }

  // optional .MsgPB.MsgArea poparea = 5;
  if (has_poparea()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->poparea(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapCfgInfo.PopBoxBase.Pop)
  return target;
}

int MsgMapCfgInfo_PopBoxBase_Pop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 defid = 1;
    if (has_defid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defid());
    }

    // optional int32 mobmax = 2;
    if (has_mobmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mobmax());
    }

    // optional int32 poptime = 3;
    if (has_poptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poptime());
    }

    // optional int32 prob = 4;
    if (has_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prob());
    }

    // optional .MsgPB.MsgArea poparea = 5;
    if (has_poparea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poparea());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapCfgInfo_PopBoxBase_Pop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapCfgInfo_PopBoxBase_Pop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapCfgInfo_PopBoxBase_Pop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapCfgInfo_PopBoxBase_Pop::MergeFrom(const MsgMapCfgInfo_PopBoxBase_Pop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defid()) {
      set_defid(from.defid());
    }
    if (from.has_mobmax()) {
      set_mobmax(from.mobmax());
    }
    if (from.has_poptime()) {
      set_poptime(from.poptime());
    }
    if (from.has_prob()) {
      set_prob(from.prob());
    }
    if (from.has_poparea()) {
      mutable_poparea()->::MsgPB::MsgArea::MergeFrom(from.poparea());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapCfgInfo_PopBoxBase_Pop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapCfgInfo_PopBoxBase_Pop::CopyFrom(const MsgMapCfgInfo_PopBoxBase_Pop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapCfgInfo_PopBoxBase_Pop::IsInitialized() const {

  return true;
}

void MsgMapCfgInfo_PopBoxBase_Pop::Swap(MsgMapCfgInfo_PopBoxBase_Pop* other) {
  if (other != this) {
    std::swap(defid_, other->defid_);
    std::swap(mobmax_, other->mobmax_);
    std::swap(poptime_, other->poptime_);
    std::swap(prob_, other->prob_);
    std::swap(poparea_, other->poparea_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapCfgInfo_PopBoxBase_Pop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapCfgInfo_PopBoxBase_Pop_descriptor_;
  metadata.reflection = MsgMapCfgInfo_PopBoxBase_Pop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgMapCfgInfo_PopBoxBase_Mob::kThisFieldNumber;
#endif  // !_MSC_VER

MsgMapCfgInfo_PopBoxBase_Mob::MsgMapCfgInfo_PopBoxBase_Mob()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapCfgInfo.PopBoxBase.Mob)
}

void MsgMapCfgInfo_PopBoxBase_Mob::InitAsDefaultInstance() {
  this__ = const_cast< ::MsgPB::MsgMapCfgInfo_PopBoxBase_Pop*>(&::MsgPB::MsgMapCfgInfo_PopBoxBase_Pop::default_instance());
}

MsgMapCfgInfo_PopBoxBase_Mob::MsgMapCfgInfo_PopBoxBase_Mob(const MsgMapCfgInfo_PopBoxBase_Mob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapCfgInfo.PopBoxBase.Mob)
}

void MsgMapCfgInfo_PopBoxBase_Mob::SharedCtor() {
  _cached_size_ = 0;
  this__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapCfgInfo_PopBoxBase_Mob::~MsgMapCfgInfo_PopBoxBase_Mob() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapCfgInfo.PopBoxBase.Mob)
  SharedDtor();
}

void MsgMapCfgInfo_PopBoxBase_Mob::SharedDtor() {
  if (this != default_instance_) {
    delete this__;
  }
}

void MsgMapCfgInfo_PopBoxBase_Mob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopBoxBase_Mob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapCfgInfo_PopBoxBase_Mob_descriptor_;
}

const MsgMapCfgInfo_PopBoxBase_Mob& MsgMapCfgInfo_PopBoxBase_Mob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapCfgInfo_PopBoxBase_Mob* MsgMapCfgInfo_PopBoxBase_Mob::default_instance_ = NULL;

MsgMapCfgInfo_PopBoxBase_Mob* MsgMapCfgInfo_PopBoxBase_Mob::New() const {
  return new MsgMapCfgInfo_PopBoxBase_Mob;
}

void MsgMapCfgInfo_PopBoxBase_Mob::Clear() {
  if (has_this_()) {
    if (this__ != NULL) this__->::MsgPB::MsgMapCfgInfo_PopBoxBase_Pop::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapCfgInfo_PopBoxBase_Mob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapCfgInfo.PopBoxBase.Mob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.MsgMapCfgInfo.PopBoxBase.Pop this = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_this_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapCfgInfo.PopBoxBase.Mob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapCfgInfo.PopBoxBase.Mob)
  return false;
#undef DO_
}

void MsgMapCfgInfo_PopBoxBase_Mob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapCfgInfo.PopBoxBase.Mob)
  // optional .MsgPB.MsgMapCfgInfo.PopBoxBase.Pop this = 1;
  if (has_this_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->this_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapCfgInfo.PopBoxBase.Mob)
}

::google::protobuf::uint8* MsgMapCfgInfo_PopBoxBase_Mob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapCfgInfo.PopBoxBase.Mob)
  // optional .MsgPB.MsgMapCfgInfo.PopBoxBase.Pop this = 1;
  if (has_this_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->this_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapCfgInfo.PopBoxBase.Mob)
  return target;
}

int MsgMapCfgInfo_PopBoxBase_Mob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.MsgMapCfgInfo.PopBoxBase.Pop this = 1;
    if (has_this_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->this_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapCfgInfo_PopBoxBase_Mob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapCfgInfo_PopBoxBase_Mob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapCfgInfo_PopBoxBase_Mob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapCfgInfo_PopBoxBase_Mob::MergeFrom(const MsgMapCfgInfo_PopBoxBase_Mob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_this_()) {
      mutable_this_()->::MsgPB::MsgMapCfgInfo_PopBoxBase_Pop::MergeFrom(from.this_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapCfgInfo_PopBoxBase_Mob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapCfgInfo_PopBoxBase_Mob::CopyFrom(const MsgMapCfgInfo_PopBoxBase_Mob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapCfgInfo_PopBoxBase_Mob::IsInitialized() const {

  return true;
}

void MsgMapCfgInfo_PopBoxBase_Mob::Swap(MsgMapCfgInfo_PopBoxBase_Mob* other) {
  if (other != this) {
    std::swap(this__, other->this__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapCfgInfo_PopBoxBase_Mob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapCfgInfo_PopBoxBase_Mob_descriptor_;
  metadata.reflection = MsgMapCfgInfo_PopBoxBase_Mob_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgMapCfgInfo_PopBoxBase_Build::kThisFieldNumber;
#endif  // !_MSC_VER

MsgMapCfgInfo_PopBoxBase_Build::MsgMapCfgInfo_PopBoxBase_Build()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapCfgInfo.PopBoxBase.Build)
}

void MsgMapCfgInfo_PopBoxBase_Build::InitAsDefaultInstance() {
  this__ = const_cast< ::MsgPB::MsgMapCfgInfo_PopBoxBase_Pop*>(&::MsgPB::MsgMapCfgInfo_PopBoxBase_Pop::default_instance());
}

MsgMapCfgInfo_PopBoxBase_Build::MsgMapCfgInfo_PopBoxBase_Build(const MsgMapCfgInfo_PopBoxBase_Build& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapCfgInfo.PopBoxBase.Build)
}

void MsgMapCfgInfo_PopBoxBase_Build::SharedCtor() {
  _cached_size_ = 0;
  this__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapCfgInfo_PopBoxBase_Build::~MsgMapCfgInfo_PopBoxBase_Build() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapCfgInfo.PopBoxBase.Build)
  SharedDtor();
}

void MsgMapCfgInfo_PopBoxBase_Build::SharedDtor() {
  if (this != default_instance_) {
    delete this__;
  }
}

void MsgMapCfgInfo_PopBoxBase_Build::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopBoxBase_Build::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapCfgInfo_PopBoxBase_Build_descriptor_;
}

const MsgMapCfgInfo_PopBoxBase_Build& MsgMapCfgInfo_PopBoxBase_Build::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapCfgInfo_PopBoxBase_Build* MsgMapCfgInfo_PopBoxBase_Build::default_instance_ = NULL;

MsgMapCfgInfo_PopBoxBase_Build* MsgMapCfgInfo_PopBoxBase_Build::New() const {
  return new MsgMapCfgInfo_PopBoxBase_Build;
}

void MsgMapCfgInfo_PopBoxBase_Build::Clear() {
  if (has_this_()) {
    if (this__ != NULL) this__->::MsgPB::MsgMapCfgInfo_PopBoxBase_Pop::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapCfgInfo_PopBoxBase_Build::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapCfgInfo.PopBoxBase.Build)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.MsgMapCfgInfo.PopBoxBase.Pop this = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_this_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapCfgInfo.PopBoxBase.Build)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapCfgInfo.PopBoxBase.Build)
  return false;
#undef DO_
}

void MsgMapCfgInfo_PopBoxBase_Build::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapCfgInfo.PopBoxBase.Build)
  // optional .MsgPB.MsgMapCfgInfo.PopBoxBase.Pop this = 1;
  if (has_this_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->this_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapCfgInfo.PopBoxBase.Build)
}

::google::protobuf::uint8* MsgMapCfgInfo_PopBoxBase_Build::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapCfgInfo.PopBoxBase.Build)
  // optional .MsgPB.MsgMapCfgInfo.PopBoxBase.Pop this = 1;
  if (has_this_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->this_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapCfgInfo.PopBoxBase.Build)
  return target;
}

int MsgMapCfgInfo_PopBoxBase_Build::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.MsgMapCfgInfo.PopBoxBase.Pop this = 1;
    if (has_this_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->this_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapCfgInfo_PopBoxBase_Build::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapCfgInfo_PopBoxBase_Build* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapCfgInfo_PopBoxBase_Build*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapCfgInfo_PopBoxBase_Build::MergeFrom(const MsgMapCfgInfo_PopBoxBase_Build& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_this_()) {
      mutable_this_()->::MsgPB::MsgMapCfgInfo_PopBoxBase_Pop::MergeFrom(from.this_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapCfgInfo_PopBoxBase_Build::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapCfgInfo_PopBoxBase_Build::CopyFrom(const MsgMapCfgInfo_PopBoxBase_Build& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapCfgInfo_PopBoxBase_Build::IsInitialized() const {

  return true;
}

void MsgMapCfgInfo_PopBoxBase_Build::Swap(MsgMapCfgInfo_PopBoxBase_Build* other) {
  if (other != this) {
    std::swap(this__, other->this__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapCfgInfo_PopBoxBase_Build::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapCfgInfo_PopBoxBase_Build_descriptor_;
  metadata.reflection = MsgMapCfgInfo_PopBoxBase_Build_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgMapCfgInfo_PopBoxBase_UserData::kKeyFieldNumber;
const int MsgMapCfgInfo_PopBoxBase_UserData::kValueFieldNumber;
#endif  // !_MSC_VER

MsgMapCfgInfo_PopBoxBase_UserData::MsgMapCfgInfo_PopBoxBase_UserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapCfgInfo.PopBoxBase.UserData)
}

void MsgMapCfgInfo_PopBoxBase_UserData::InitAsDefaultInstance() {
}

MsgMapCfgInfo_PopBoxBase_UserData::MsgMapCfgInfo_PopBoxBase_UserData(const MsgMapCfgInfo_PopBoxBase_UserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapCfgInfo.PopBoxBase.UserData)
}

void MsgMapCfgInfo_PopBoxBase_UserData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapCfgInfo_PopBoxBase_UserData::~MsgMapCfgInfo_PopBoxBase_UserData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapCfgInfo.PopBoxBase.UserData)
  SharedDtor();
}

void MsgMapCfgInfo_PopBoxBase_UserData::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void MsgMapCfgInfo_PopBoxBase_UserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopBoxBase_UserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapCfgInfo_PopBoxBase_UserData_descriptor_;
}

const MsgMapCfgInfo_PopBoxBase_UserData& MsgMapCfgInfo_PopBoxBase_UserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapCfgInfo_PopBoxBase_UserData* MsgMapCfgInfo_PopBoxBase_UserData::default_instance_ = NULL;

MsgMapCfgInfo_PopBoxBase_UserData* MsgMapCfgInfo_PopBoxBase_UserData::New() const {
  return new MsgMapCfgInfo_PopBoxBase_UserData;
}

void MsgMapCfgInfo_PopBoxBase_UserData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapCfgInfo_PopBoxBase_UserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapCfgInfo.PopBoxBase.UserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapCfgInfo.PopBoxBase.UserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapCfgInfo.PopBoxBase.UserData)
  return false;
#undef DO_
}

void MsgMapCfgInfo_PopBoxBase_UserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapCfgInfo.PopBoxBase.UserData)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapCfgInfo.PopBoxBase.UserData)
}

::google::protobuf::uint8* MsgMapCfgInfo_PopBoxBase_UserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapCfgInfo.PopBoxBase.UserData)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapCfgInfo.PopBoxBase.UserData)
  return target;
}

int MsgMapCfgInfo_PopBoxBase_UserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapCfgInfo_PopBoxBase_UserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapCfgInfo_PopBoxBase_UserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapCfgInfo_PopBoxBase_UserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapCfgInfo_PopBoxBase_UserData::MergeFrom(const MsgMapCfgInfo_PopBoxBase_UserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapCfgInfo_PopBoxBase_UserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapCfgInfo_PopBoxBase_UserData::CopyFrom(const MsgMapCfgInfo_PopBoxBase_UserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapCfgInfo_PopBoxBase_UserData::IsInitialized() const {

  return true;
}

void MsgMapCfgInfo_PopBoxBase_UserData::Swap(MsgMapCfgInfo_PopBoxBase_UserData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapCfgInfo_PopBoxBase_UserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapCfgInfo_PopBoxBase_UserData_descriptor_;
  metadata.reflection = MsgMapCfgInfo_PopBoxBase_UserData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgMapCfgInfo_PopBoxBase::kCoordFieldNumber;
const int MsgMapCfgInfo_PopBoxBase::kTriggerdistanceFieldNumber;
const int MsgMapCfgInfo_PopBoxBase::kMobsFieldNumber;
const int MsgMapCfgInfo_PopBoxBase::kBuildsFieldNumber;
const int MsgMapCfgInfo_PopBoxBase::kUserdatasFieldNumber;
const int MsgMapCfgInfo_PopBoxBase::kIdFieldNumber;
const int MsgMapCfgInfo_PopBoxBase::kUuidFieldNumber;
#endif  // !_MSC_VER

MsgMapCfgInfo_PopBoxBase::MsgMapCfgInfo_PopBoxBase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapCfgInfo.PopBoxBase)
}

void MsgMapCfgInfo_PopBoxBase::InitAsDefaultInstance() {
  coord_ = const_cast< ::MsgPB::MsgPoint*>(&::MsgPB::MsgPoint::default_instance());
}

MsgMapCfgInfo_PopBoxBase::MsgMapCfgInfo_PopBoxBase(const MsgMapCfgInfo_PopBoxBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapCfgInfo.PopBoxBase)
}

void MsgMapCfgInfo_PopBoxBase::SharedCtor() {
  _cached_size_ = 0;
  coord_ = NULL;
  triggerdistance_ = 0;
  id_ = 0;
  uuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapCfgInfo_PopBoxBase::~MsgMapCfgInfo_PopBoxBase() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapCfgInfo.PopBoxBase)
  SharedDtor();
}

void MsgMapCfgInfo_PopBoxBase::SharedDtor() {
  if (this != default_instance_) {
    delete coord_;
  }
}

void MsgMapCfgInfo_PopBoxBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopBoxBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapCfgInfo_PopBoxBase_descriptor_;
}

const MsgMapCfgInfo_PopBoxBase& MsgMapCfgInfo_PopBoxBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapCfgInfo_PopBoxBase* MsgMapCfgInfo_PopBoxBase::default_instance_ = NULL;

MsgMapCfgInfo_PopBoxBase* MsgMapCfgInfo_PopBoxBase::New() const {
  return new MsgMapCfgInfo_PopBoxBase;
}

void MsgMapCfgInfo_PopBoxBase::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMapCfgInfo_PopBoxBase*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 99) {
    ZR_(triggerdistance_, id_);
    if (has_coord()) {
      if (coord_ != NULL) coord_->::MsgPB::MsgPoint::Clear();
    }
    uuid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mobs_.Clear();
  builds_.Clear();
  userdatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapCfgInfo_PopBoxBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapCfgInfo.PopBoxBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.MsgPoint coord = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_triggerdistance;
        break;
      }

      // optional int32 triggerdistance = 2;
      case 2: {
        if (tag == 16) {
         parse_triggerdistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerdistance_)));
          set_has_triggerdistance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobs;
        break;
      }

      // repeated .MsgPB.MsgMapCfgInfo.PopBoxBase.Mob mobs = 3;
      case 3: {
        if (tag == 26) {
         parse_mobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobs;
        if (input->ExpectTag(34)) goto parse_builds;
        break;
      }

      // repeated .MsgPB.MsgMapCfgInfo.PopBoxBase.Build builds = 4;
      case 4: {
        if (tag == 34) {
         parse_builds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_builds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_builds;
        if (input->ExpectTag(42)) goto parse_userdatas;
        break;
      }

      // repeated .MsgPB.MsgMapCfgInfo.PopBoxBase.UserData userdatas = 5;
      case 5: {
        if (tag == 42) {
         parse_userdatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userdatas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_userdatas;
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }

      // optional int32 id = 6;
      case 6: {
        if (tag == 48) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_uuid;
        break;
      }

      // optional int32 uuid = 7;
      case 7: {
        if (tag == 56) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapCfgInfo.PopBoxBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapCfgInfo.PopBoxBase)
  return false;
#undef DO_
}

void MsgMapCfgInfo_PopBoxBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapCfgInfo.PopBoxBase)
  // optional .MsgPB.MsgPoint coord = 1;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coord(), output);
  }

  // optional int32 triggerdistance = 2;
  if (has_triggerdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->triggerdistance(), output);
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopBoxBase.Mob mobs = 3;
  for (int i = 0; i < this->mobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mobs(i), output);
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopBoxBase.Build builds = 4;
  for (int i = 0; i < this->builds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->builds(i), output);
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopBoxBase.UserData userdatas = 5;
  for (int i = 0; i < this->userdatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userdatas(i), output);
  }

  // optional int32 id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->id(), output);
  }

  // optional int32 uuid = 7;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapCfgInfo.PopBoxBase)
}

::google::protobuf::uint8* MsgMapCfgInfo_PopBoxBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapCfgInfo.PopBoxBase)
  // optional .MsgPB.MsgPoint coord = 1;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coord(), target);
  }

  // optional int32 triggerdistance = 2;
  if (has_triggerdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->triggerdistance(), target);
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopBoxBase.Mob mobs = 3;
  for (int i = 0; i < this->mobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mobs(i), target);
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopBoxBase.Build builds = 4;
  for (int i = 0; i < this->builds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->builds(i), target);
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopBoxBase.UserData userdatas = 5;
  for (int i = 0; i < this->userdatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userdatas(i), target);
  }

  // optional int32 id = 6;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->id(), target);
  }

  // optional int32 uuid = 7;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapCfgInfo.PopBoxBase)
  return target;
}

int MsgMapCfgInfo_PopBoxBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.MsgPoint coord = 1;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coord());
    }

    // optional int32 triggerdistance = 2;
    if (has_triggerdistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerdistance());
    }

    // optional int32 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 uuid = 7;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uuid());
    }

  }
  // repeated .MsgPB.MsgMapCfgInfo.PopBoxBase.Mob mobs = 3;
  total_size += 1 * this->mobs_size();
  for (int i = 0; i < this->mobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mobs(i));
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopBoxBase.Build builds = 4;
  total_size += 1 * this->builds_size();
  for (int i = 0; i < this->builds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->builds(i));
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopBoxBase.UserData userdatas = 5;
  total_size += 1 * this->userdatas_size();
  for (int i = 0; i < this->userdatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userdatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapCfgInfo_PopBoxBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapCfgInfo_PopBoxBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapCfgInfo_PopBoxBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapCfgInfo_PopBoxBase::MergeFrom(const MsgMapCfgInfo_PopBoxBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  mobs_.MergeFrom(from.mobs_);
  builds_.MergeFrom(from.builds_);
  userdatas_.MergeFrom(from.userdatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coord()) {
      mutable_coord()->::MsgPB::MsgPoint::MergeFrom(from.coord());
    }
    if (from.has_triggerdistance()) {
      set_triggerdistance(from.triggerdistance());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapCfgInfo_PopBoxBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapCfgInfo_PopBoxBase::CopyFrom(const MsgMapCfgInfo_PopBoxBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapCfgInfo_PopBoxBase::IsInitialized() const {

  return true;
}

void MsgMapCfgInfo_PopBoxBase::Swap(MsgMapCfgInfo_PopBoxBase* other) {
  if (other != this) {
    std::swap(coord_, other->coord_);
    std::swap(triggerdistance_, other->triggerdistance_);
    mobs_.Swap(&other->mobs_);
    builds_.Swap(&other->builds_);
    userdatas_.Swap(&other->userdatas_);
    std::swap(id_, other->id_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapCfgInfo_PopBoxBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapCfgInfo_PopBoxBase_descriptor_;
  metadata.reflection = MsgMapCfgInfo_PopBoxBase_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgMapCfgInfo_PopBox::kThisFieldNumber;
#endif  // !_MSC_VER

MsgMapCfgInfo_PopBox::MsgMapCfgInfo_PopBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapCfgInfo.PopBox)
}

void MsgMapCfgInfo_PopBox::InitAsDefaultInstance() {
  this__ = const_cast< ::MsgPB::MsgMapCfgInfo_PopBoxBase*>(&::MsgPB::MsgMapCfgInfo_PopBoxBase::default_instance());
}

MsgMapCfgInfo_PopBox::MsgMapCfgInfo_PopBox(const MsgMapCfgInfo_PopBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapCfgInfo.PopBox)
}

void MsgMapCfgInfo_PopBox::SharedCtor() {
  _cached_size_ = 0;
  this__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapCfgInfo_PopBox::~MsgMapCfgInfo_PopBox() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapCfgInfo.PopBox)
  SharedDtor();
}

void MsgMapCfgInfo_PopBox::SharedDtor() {
  if (this != default_instance_) {
    delete this__;
  }
}

void MsgMapCfgInfo_PopBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapCfgInfo_PopBox_descriptor_;
}

const MsgMapCfgInfo_PopBox& MsgMapCfgInfo_PopBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapCfgInfo_PopBox* MsgMapCfgInfo_PopBox::default_instance_ = NULL;

MsgMapCfgInfo_PopBox* MsgMapCfgInfo_PopBox::New() const {
  return new MsgMapCfgInfo_PopBox;
}

void MsgMapCfgInfo_PopBox::Clear() {
  if (has_this_()) {
    if (this__ != NULL) this__->::MsgPB::MsgMapCfgInfo_PopBoxBase::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapCfgInfo_PopBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapCfgInfo.PopBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.MsgMapCfgInfo.PopBoxBase this = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_this_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapCfgInfo.PopBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapCfgInfo.PopBox)
  return false;
#undef DO_
}

void MsgMapCfgInfo_PopBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapCfgInfo.PopBox)
  // optional .MsgPB.MsgMapCfgInfo.PopBoxBase this = 1;
  if (has_this_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->this_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapCfgInfo.PopBox)
}

::google::protobuf::uint8* MsgMapCfgInfo_PopBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapCfgInfo.PopBox)
  // optional .MsgPB.MsgMapCfgInfo.PopBoxBase this = 1;
  if (has_this_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->this_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapCfgInfo.PopBox)
  return target;
}

int MsgMapCfgInfo_PopBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.MsgMapCfgInfo.PopBoxBase this = 1;
    if (has_this_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->this_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapCfgInfo_PopBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapCfgInfo_PopBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapCfgInfo_PopBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapCfgInfo_PopBox::MergeFrom(const MsgMapCfgInfo_PopBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_this_()) {
      mutable_this_()->::MsgPB::MsgMapCfgInfo_PopBoxBase::MergeFrom(from.this_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapCfgInfo_PopBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapCfgInfo_PopBox::CopyFrom(const MsgMapCfgInfo_PopBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapCfgInfo_PopBox::IsInitialized() const {

  return true;
}

void MsgMapCfgInfo_PopBox::Swap(MsgMapCfgInfo_PopBox* other) {
  if (other != this) {
    std::swap(this__, other->this__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapCfgInfo_PopBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapCfgInfo_PopBox_descriptor_;
  metadata.reflection = MsgMapCfgInfo_PopBox_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgMapCfgInfo_PopSavedBox::kThisFieldNumber;
#endif  // !_MSC_VER

MsgMapCfgInfo_PopSavedBox::MsgMapCfgInfo_PopSavedBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapCfgInfo.PopSavedBox)
}

void MsgMapCfgInfo_PopSavedBox::InitAsDefaultInstance() {
  this__ = const_cast< ::MsgPB::MsgMapCfgInfo_PopBoxBase*>(&::MsgPB::MsgMapCfgInfo_PopBoxBase::default_instance());
}

MsgMapCfgInfo_PopSavedBox::MsgMapCfgInfo_PopSavedBox(const MsgMapCfgInfo_PopSavedBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapCfgInfo.PopSavedBox)
}

void MsgMapCfgInfo_PopSavedBox::SharedCtor() {
  _cached_size_ = 0;
  this__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapCfgInfo_PopSavedBox::~MsgMapCfgInfo_PopSavedBox() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapCfgInfo.PopSavedBox)
  SharedDtor();
}

void MsgMapCfgInfo_PopSavedBox::SharedDtor() {
  if (this != default_instance_) {
    delete this__;
  }
}

void MsgMapCfgInfo_PopSavedBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapCfgInfo_PopSavedBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapCfgInfo_PopSavedBox_descriptor_;
}

const MsgMapCfgInfo_PopSavedBox& MsgMapCfgInfo_PopSavedBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapCfgInfo_PopSavedBox* MsgMapCfgInfo_PopSavedBox::default_instance_ = NULL;

MsgMapCfgInfo_PopSavedBox* MsgMapCfgInfo_PopSavedBox::New() const {
  return new MsgMapCfgInfo_PopSavedBox;
}

void MsgMapCfgInfo_PopSavedBox::Clear() {
  if (has_this_()) {
    if (this__ != NULL) this__->::MsgPB::MsgMapCfgInfo_PopBoxBase::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapCfgInfo_PopSavedBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapCfgInfo.PopSavedBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.MsgMapCfgInfo.PopBoxBase this = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_this_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapCfgInfo.PopSavedBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapCfgInfo.PopSavedBox)
  return false;
#undef DO_
}

void MsgMapCfgInfo_PopSavedBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapCfgInfo.PopSavedBox)
  // optional .MsgPB.MsgMapCfgInfo.PopBoxBase this = 1;
  if (has_this_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->this_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapCfgInfo.PopSavedBox)
}

::google::protobuf::uint8* MsgMapCfgInfo_PopSavedBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapCfgInfo.PopSavedBox)
  // optional .MsgPB.MsgMapCfgInfo.PopBoxBase this = 1;
  if (has_this_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->this_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapCfgInfo.PopSavedBox)
  return target;
}

int MsgMapCfgInfo_PopSavedBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.MsgMapCfgInfo.PopBoxBase this = 1;
    if (has_this_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->this_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapCfgInfo_PopSavedBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapCfgInfo_PopSavedBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapCfgInfo_PopSavedBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapCfgInfo_PopSavedBox::MergeFrom(const MsgMapCfgInfo_PopSavedBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_this_()) {
      mutable_this_()->::MsgPB::MsgMapCfgInfo_PopBoxBase::MergeFrom(from.this_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapCfgInfo_PopSavedBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapCfgInfo_PopSavedBox::CopyFrom(const MsgMapCfgInfo_PopSavedBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapCfgInfo_PopSavedBox::IsInitialized() const {

  return true;
}

void MsgMapCfgInfo_PopSavedBox::Swap(MsgMapCfgInfo_PopSavedBox* other) {
  if (other != this) {
    std::swap(this__, other->this__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapCfgInfo_PopSavedBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapCfgInfo_PopSavedBox_descriptor_;
  metadata.reflection = MsgMapCfgInfo_PopSavedBox_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* MsgMapCfgInfo_Vehicle_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapCfgInfo_Vehicle_Type_descriptor_;
}
bool MsgMapCfgInfo_Vehicle_Type_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgMapCfgInfo_Vehicle_Type MsgMapCfgInfo_Vehicle::NONE;
const MsgMapCfgInfo_Vehicle_Type MsgMapCfgInfo_Vehicle::Type_MIN;
const MsgMapCfgInfo_Vehicle_Type MsgMapCfgInfo_Vehicle::Type_MAX;
const int MsgMapCfgInfo_Vehicle::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgMapCfgInfo_Vehicle::kTypeFieldNumber;
const int MsgMapCfgInfo_Vehicle::kDefIDFieldNumber;
const int MsgMapCfgInfo_Vehicle::kSpeedFieldNumber;
const int MsgMapCfgInfo_Vehicle::kStartFieldNumber;
const int MsgMapCfgInfo_Vehicle::kEndFieldNumber;
const int MsgMapCfgInfo_Vehicle::kSizeFieldNumber;
#endif  // !_MSC_VER

MsgMapCfgInfo_Vehicle::MsgMapCfgInfo_Vehicle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapCfgInfo.Vehicle)
}

void MsgMapCfgInfo_Vehicle::InitAsDefaultInstance() {
  start_ = const_cast< ::MsgPB::MsgPoint*>(&::MsgPB::MsgPoint::default_instance());
  end_ = const_cast< ::MsgPB::MsgPoint*>(&::MsgPB::MsgPoint::default_instance());
  size_ = const_cast< ::MsgPB::MsgSize*>(&::MsgPB::MsgSize::default_instance());
}

MsgMapCfgInfo_Vehicle::MsgMapCfgInfo_Vehicle(const MsgMapCfgInfo_Vehicle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapCfgInfo.Vehicle)
}

void MsgMapCfgInfo_Vehicle::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  defid_ = 0;
  speed_ = 0;
  start_ = NULL;
  end_ = NULL;
  size_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapCfgInfo_Vehicle::~MsgMapCfgInfo_Vehicle() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapCfgInfo.Vehicle)
  SharedDtor();
}

void MsgMapCfgInfo_Vehicle::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete end_;
    delete size_;
  }
}

void MsgMapCfgInfo_Vehicle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapCfgInfo_Vehicle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapCfgInfo_Vehicle_descriptor_;
}

const MsgMapCfgInfo_Vehicle& MsgMapCfgInfo_Vehicle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapCfgInfo_Vehicle* MsgMapCfgInfo_Vehicle::default_instance_ = NULL;

MsgMapCfgInfo_Vehicle* MsgMapCfgInfo_Vehicle::New() const {
  return new MsgMapCfgInfo_Vehicle;
}

void MsgMapCfgInfo_Vehicle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMapCfgInfo_Vehicle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(type_, defid_);
    speed_ = 0;
    if (has_start()) {
      if (start_ != NULL) start_->::MsgPB::MsgPoint::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::MsgPB::MsgPoint::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::MsgPB::MsgSize::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapCfgInfo_Vehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapCfgInfo.Vehicle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.MsgMapCfgInfo.Vehicle.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgMapCfgInfo_Vehicle_Type_IsValid(value)) {
            set_type(static_cast< ::MsgPB::MsgMapCfgInfo_Vehicle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_defID;
        break;
      }

      // optional int32 defID = 2;
      case 2: {
        if (tag == 16) {
         parse_defID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defid_)));
          set_has_defid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_speed;
        break;
      }

      // optional int32 speed = 3;
      case 3: {
        if (tag == 24) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_start;
        break;
      }

      // optional .MsgPB.MsgPoint start = 4;
      case 4: {
        if (tag == 34) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_end;
        break;
      }

      // optional .MsgPB.MsgPoint end = 5;
      case 5: {
        if (tag == 42) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_size;
        break;
      }

      // optional .MsgPB.MsgSize size = 6;
      case 6: {
        if (tag == 50) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapCfgInfo.Vehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapCfgInfo.Vehicle)
  return false;
#undef DO_
}

void MsgMapCfgInfo_Vehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapCfgInfo.Vehicle)
  // optional .MsgPB.MsgMapCfgInfo.Vehicle.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 defID = 2;
  if (has_defid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->defid(), output);
  }

  // optional int32 speed = 3;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->speed(), output);
  }

  // optional .MsgPB.MsgPoint start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->start(), output);
  }

  // optional .MsgPB.MsgPoint end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->end(), output);
  }

  // optional .MsgPB.MsgSize size = 6;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapCfgInfo.Vehicle)
}

::google::protobuf::uint8* MsgMapCfgInfo_Vehicle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapCfgInfo.Vehicle)
  // optional .MsgPB.MsgMapCfgInfo.Vehicle.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 defID = 2;
  if (has_defid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->defid(), target);
  }

  // optional int32 speed = 3;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->speed(), target);
  }

  // optional .MsgPB.MsgPoint start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->start(), target);
  }

  // optional .MsgPB.MsgPoint end = 5;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->end(), target);
  }

  // optional .MsgPB.MsgSize size = 6;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapCfgInfo.Vehicle)
  return target;
}

int MsgMapCfgInfo_Vehicle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.MsgMapCfgInfo.Vehicle.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 defID = 2;
    if (has_defid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defid());
    }

    // optional int32 speed = 3;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional .MsgPB.MsgPoint start = 4;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // optional .MsgPB.MsgPoint end = 5;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

    // optional .MsgPB.MsgSize size = 6;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapCfgInfo_Vehicle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapCfgInfo_Vehicle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapCfgInfo_Vehicle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapCfgInfo_Vehicle::MergeFrom(const MsgMapCfgInfo_Vehicle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_defid()) {
      set_defid(from.defid());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_start()) {
      mutable_start()->::MsgPB::MsgPoint::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::MsgPB::MsgPoint::MergeFrom(from.end());
    }
    if (from.has_size()) {
      mutable_size()->::MsgPB::MsgSize::MergeFrom(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapCfgInfo_Vehicle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapCfgInfo_Vehicle::CopyFrom(const MsgMapCfgInfo_Vehicle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapCfgInfo_Vehicle::IsInitialized() const {

  return true;
}

void MsgMapCfgInfo_Vehicle::Swap(MsgMapCfgInfo_Vehicle* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(defid_, other->defid_);
    std::swap(speed_, other->speed_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapCfgInfo_Vehicle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapCfgInfo_Vehicle_descriptor_;
  metadata.reflection = MsgMapCfgInfo_Vehicle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgMapCfgInfo_Airship::kCoordFieldNumber;
#endif  // !_MSC_VER

MsgMapCfgInfo_Airship::MsgMapCfgInfo_Airship()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapCfgInfo.Airship)
}

void MsgMapCfgInfo_Airship::InitAsDefaultInstance() {
  coord_ = const_cast< ::MsgPB::MsgPoint*>(&::MsgPB::MsgPoint::default_instance());
}

MsgMapCfgInfo_Airship::MsgMapCfgInfo_Airship(const MsgMapCfgInfo_Airship& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapCfgInfo.Airship)
}

void MsgMapCfgInfo_Airship::SharedCtor() {
  _cached_size_ = 0;
  coord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapCfgInfo_Airship::~MsgMapCfgInfo_Airship() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapCfgInfo.Airship)
  SharedDtor();
}

void MsgMapCfgInfo_Airship::SharedDtor() {
  if (this != default_instance_) {
    delete coord_;
  }
}

void MsgMapCfgInfo_Airship::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapCfgInfo_Airship::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapCfgInfo_Airship_descriptor_;
}

const MsgMapCfgInfo_Airship& MsgMapCfgInfo_Airship::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapCfgInfo_Airship* MsgMapCfgInfo_Airship::default_instance_ = NULL;

MsgMapCfgInfo_Airship* MsgMapCfgInfo_Airship::New() const {
  return new MsgMapCfgInfo_Airship;
}

void MsgMapCfgInfo_Airship::Clear() {
  if (has_coord()) {
    if (coord_ != NULL) coord_->::MsgPB::MsgPoint::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapCfgInfo_Airship::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapCfgInfo.Airship)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.MsgPoint coord = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapCfgInfo.Airship)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapCfgInfo.Airship)
  return false;
#undef DO_
}

void MsgMapCfgInfo_Airship::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapCfgInfo.Airship)
  // optional .MsgPB.MsgPoint coord = 1;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapCfgInfo.Airship)
}

::google::protobuf::uint8* MsgMapCfgInfo_Airship::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapCfgInfo.Airship)
  // optional .MsgPB.MsgPoint coord = 1;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapCfgInfo.Airship)
  return target;
}

int MsgMapCfgInfo_Airship::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.MsgPoint coord = 1;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapCfgInfo_Airship::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapCfgInfo_Airship* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapCfgInfo_Airship*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapCfgInfo_Airship::MergeFrom(const MsgMapCfgInfo_Airship& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coord()) {
      mutable_coord()->::MsgPB::MsgPoint::MergeFrom(from.coord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapCfgInfo_Airship::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapCfgInfo_Airship::CopyFrom(const MsgMapCfgInfo_Airship& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapCfgInfo_Airship::IsInitialized() const {

  return true;
}

void MsgMapCfgInfo_Airship::Swap(MsgMapCfgInfo_Airship* other) {
  if (other != this) {
    std::swap(coord_, other->coord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapCfgInfo_Airship::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapCfgInfo_Airship_descriptor_;
  metadata.reflection = MsgMapCfgInfo_Airship_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgMapCfgInfo::kMsgTypeFieldNumber;
const int MsgMapCfgInfo::kIggidFieldNumber;
const int MsgMapCfgInfo::kPlantLstFieldNumber;
const int MsgMapCfgInfo::kGatePointsFieldNumber;
const int MsgMapCfgInfo::kForbiddenSpawnerFieldNumber;
const int MsgMapCfgInfo::kForbiddenBuildFieldNumber;
const int MsgMapCfgInfo::kLayoutsFieldNumber;
const int MsgMapCfgInfo::kPopBoxesFieldNumber;
const int MsgMapCfgInfo::kSafePointFieldNumber;
const int MsgMapCfgInfo::kPopSavedBoxesFieldNumber;
const int MsgMapCfgInfo::kVehiclesFieldNumber;
const int MsgMapCfgInfo::kAirshipsFieldNumber;
const int MsgMapCfgInfo::kClientmodeFieldNumber;
#endif  // !_MSC_VER

MsgMapCfgInfo::MsgMapCfgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapCfgInfo)
}

void MsgMapCfgInfo::InitAsDefaultInstance() {
  safepoint_ = const_cast< ::MsgPB::MsgPoint*>(&::MsgPB::MsgPoint::default_instance());
}

MsgMapCfgInfo::MsgMapCfgInfo(const MsgMapCfgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapCfgInfo)
}

void MsgMapCfgInfo::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1128;
  iggid_ = GOOGLE_LONGLONG(0);
  safepoint_ = NULL;
  clientmode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapCfgInfo::~MsgMapCfgInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapCfgInfo)
  SharedDtor();
}

void MsgMapCfgInfo::SharedDtor() {
  if (this != default_instance_) {
    delete safepoint_;
  }
}

void MsgMapCfgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapCfgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapCfgInfo_descriptor_;
}

const MsgMapCfgInfo& MsgMapCfgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapCfgInfo* MsgMapCfgInfo::default_instance_ = NULL;

MsgMapCfgInfo* MsgMapCfgInfo::New() const {
  return new MsgMapCfgInfo;
}

void MsgMapCfgInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1128;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 4352) {
    if (has_safepoint()) {
      if (safepoint_ != NULL) safepoint_->::MsgPB::MsgPoint::Clear();
    }
    clientmode_ = false;
  }
  plant_lst_.Clear();
  gatepoints_.Clear();
  forbiddenspawner_.Clear();
  forbiddenbuild_.Clear();
  layouts_.Clear();
  popboxes_.Clear();
  popsavedboxes_.Clear();
  vehicles_.Clear();
  airships_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapCfgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapCfgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_CFG_INFO];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_plant_lst;
        break;
      }

      // repeated .MsgPB.MsgPlantCfg plant_lst = 3;
      case 3: {
        if (tag == 26) {
         parse_plant_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plant_lst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_plant_lst;
        if (input->ExpectTag(34)) goto parse_gatePoints;
        break;
      }

      // repeated .MsgPB.MsgGatePoint gatePoints = 4;
      case 4: {
        if (tag == 34) {
         parse_gatePoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gatepoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gatePoints;
        if (input->ExpectTag(42)) goto parse_forbiddenSpawner;
        break;
      }

      // repeated .MsgPB.MsgArea forbiddenSpawner = 5;
      case 5: {
        if (tag == 42) {
         parse_forbiddenSpawner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forbiddenspawner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_forbiddenSpawner;
        if (input->ExpectTag(50)) goto parse_forbiddenBuild;
        break;
      }

      // repeated .MsgPB.MsgArea forbiddenBuild = 6;
      case 6: {
        if (tag == 50) {
         parse_forbiddenBuild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forbiddenbuild()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_forbiddenBuild;
        if (input->ExpectTag(58)) goto parse_layouts;
        break;
      }

      // repeated .MsgPB.MsgMapCfgInfo.Layout layouts = 7;
      case 7: {
        if (tag == 58) {
         parse_layouts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layouts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_layouts;
        if (input->ExpectTag(66)) goto parse_popBoxes;
        break;
      }

      // repeated .MsgPB.MsgMapCfgInfo.PopBox popBoxes = 8;
      case 8: {
        if (tag == 66) {
         parse_popBoxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_popboxes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_popBoxes;
        if (input->ExpectTag(74)) goto parse_safePoint;
        break;
      }

      // optional .MsgPB.MsgPoint safePoint = 9;
      case 9: {
        if (tag == 74) {
         parse_safePoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_safepoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_popSavedBoxes;
        break;
      }

      // repeated .MsgPB.MsgMapCfgInfo.PopSavedBox popSavedBoxes = 10;
      case 10: {
        if (tag == 82) {
         parse_popSavedBoxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_popsavedboxes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_popSavedBoxes;
        if (input->ExpectTag(90)) goto parse_vehicles;
        break;
      }

      // repeated .MsgPB.MsgMapCfgInfo.Vehicle vehicles = 11;
      case 11: {
        if (tag == 90) {
         parse_vehicles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vehicles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vehicles;
        if (input->ExpectTag(98)) goto parse_Airships;
        break;
      }

      // repeated .MsgPB.MsgMapCfgInfo.Airship Airships = 12;
      case 12: {
        if (tag == 98) {
         parse_Airships:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_airships()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Airships;
        if (input->ExpectTag(792)) goto parse_clientmode;
        break;
      }

      // optional bool clientmode = 99 [default = false];
      case 99: {
        if (tag == 792) {
         parse_clientmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientmode_)));
          set_has_clientmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapCfgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapCfgInfo)
  return false;
#undef DO_
}

void MsgMapCfgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapCfgInfo)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_CFG_INFO];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // repeated .MsgPB.MsgPlantCfg plant_lst = 3;
  for (int i = 0; i < this->plant_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->plant_lst(i), output);
  }

  // repeated .MsgPB.MsgGatePoint gatePoints = 4;
  for (int i = 0; i < this->gatepoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gatepoints(i), output);
  }

  // repeated .MsgPB.MsgArea forbiddenSpawner = 5;
  for (int i = 0; i < this->forbiddenspawner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->forbiddenspawner(i), output);
  }

  // repeated .MsgPB.MsgArea forbiddenBuild = 6;
  for (int i = 0; i < this->forbiddenbuild_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->forbiddenbuild(i), output);
  }

  // repeated .MsgPB.MsgMapCfgInfo.Layout layouts = 7;
  for (int i = 0; i < this->layouts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->layouts(i), output);
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopBox popBoxes = 8;
  for (int i = 0; i < this->popboxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->popboxes(i), output);
  }

  // optional .MsgPB.MsgPoint safePoint = 9;
  if (has_safepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->safepoint(), output);
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopSavedBox popSavedBoxes = 10;
  for (int i = 0; i < this->popsavedboxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->popsavedboxes(i), output);
  }

  // repeated .MsgPB.MsgMapCfgInfo.Vehicle vehicles = 11;
  for (int i = 0; i < this->vehicles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vehicles(i), output);
  }

  // repeated .MsgPB.MsgMapCfgInfo.Airship Airships = 12;
  for (int i = 0; i < this->airships_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->airships(i), output);
  }

  // optional bool clientmode = 99 [default = false];
  if (has_clientmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(99, this->clientmode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapCfgInfo)
}

::google::protobuf::uint8* MsgMapCfgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapCfgInfo)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_CFG_INFO];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // repeated .MsgPB.MsgPlantCfg plant_lst = 3;
  for (int i = 0; i < this->plant_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->plant_lst(i), target);
  }

  // repeated .MsgPB.MsgGatePoint gatePoints = 4;
  for (int i = 0; i < this->gatepoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gatepoints(i), target);
  }

  // repeated .MsgPB.MsgArea forbiddenSpawner = 5;
  for (int i = 0; i < this->forbiddenspawner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->forbiddenspawner(i), target);
  }

  // repeated .MsgPB.MsgArea forbiddenBuild = 6;
  for (int i = 0; i < this->forbiddenbuild_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->forbiddenbuild(i), target);
  }

  // repeated .MsgPB.MsgMapCfgInfo.Layout layouts = 7;
  for (int i = 0; i < this->layouts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->layouts(i), target);
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopBox popBoxes = 8;
  for (int i = 0; i < this->popboxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->popboxes(i), target);
  }

  // optional .MsgPB.MsgPoint safePoint = 9;
  if (has_safepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->safepoint(), target);
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopSavedBox popSavedBoxes = 10;
  for (int i = 0; i < this->popsavedboxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->popsavedboxes(i), target);
  }

  // repeated .MsgPB.MsgMapCfgInfo.Vehicle vehicles = 11;
  for (int i = 0; i < this->vehicles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vehicles(i), target);
  }

  // repeated .MsgPB.MsgMapCfgInfo.Airship Airships = 12;
  for (int i = 0; i < this->airships_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->airships(i), target);
  }

  // optional bool clientmode = 99 [default = false];
  if (has_clientmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(99, this->clientmode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapCfgInfo)
  return target;
}

int MsgMapCfgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_CFG_INFO];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .MsgPB.MsgPoint safePoint = 9;
    if (has_safepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->safepoint());
    }

    // optional bool clientmode = 99 [default = false];
    if (has_clientmode()) {
      total_size += 2 + 1;
    }

  }
  // repeated .MsgPB.MsgPlantCfg plant_lst = 3;
  total_size += 1 * this->plant_lst_size();
  for (int i = 0; i < this->plant_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plant_lst(i));
  }

  // repeated .MsgPB.MsgGatePoint gatePoints = 4;
  total_size += 1 * this->gatepoints_size();
  for (int i = 0; i < this->gatepoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gatepoints(i));
  }

  // repeated .MsgPB.MsgArea forbiddenSpawner = 5;
  total_size += 1 * this->forbiddenspawner_size();
  for (int i = 0; i < this->forbiddenspawner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forbiddenspawner(i));
  }

  // repeated .MsgPB.MsgArea forbiddenBuild = 6;
  total_size += 1 * this->forbiddenbuild_size();
  for (int i = 0; i < this->forbiddenbuild_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forbiddenbuild(i));
  }

  // repeated .MsgPB.MsgMapCfgInfo.Layout layouts = 7;
  total_size += 1 * this->layouts_size();
  for (int i = 0; i < this->layouts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layouts(i));
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopBox popBoxes = 8;
  total_size += 1 * this->popboxes_size();
  for (int i = 0; i < this->popboxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->popboxes(i));
  }

  // repeated .MsgPB.MsgMapCfgInfo.PopSavedBox popSavedBoxes = 10;
  total_size += 1 * this->popsavedboxes_size();
  for (int i = 0; i < this->popsavedboxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->popsavedboxes(i));
  }

  // repeated .MsgPB.MsgMapCfgInfo.Vehicle vehicles = 11;
  total_size += 1 * this->vehicles_size();
  for (int i = 0; i < this->vehicles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehicles(i));
  }

  // repeated .MsgPB.MsgMapCfgInfo.Airship Airships = 12;
  total_size += 1 * this->airships_size();
  for (int i = 0; i < this->airships_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->airships(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapCfgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapCfgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapCfgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapCfgInfo::MergeFrom(const MsgMapCfgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  plant_lst_.MergeFrom(from.plant_lst_);
  gatepoints_.MergeFrom(from.gatepoints_);
  forbiddenspawner_.MergeFrom(from.forbiddenspawner_);
  forbiddenbuild_.MergeFrom(from.forbiddenbuild_);
  layouts_.MergeFrom(from.layouts_);
  popboxes_.MergeFrom(from.popboxes_);
  popsavedboxes_.MergeFrom(from.popsavedboxes_);
  vehicles_.MergeFrom(from.vehicles_);
  airships_.MergeFrom(from.airships_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_safepoint()) {
      mutable_safepoint()->::MsgPB::MsgPoint::MergeFrom(from.safepoint());
    }
    if (from.has_clientmode()) {
      set_clientmode(from.clientmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapCfgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapCfgInfo::CopyFrom(const MsgMapCfgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapCfgInfo::IsInitialized() const {

  return true;
}

void MsgMapCfgInfo::Swap(MsgMapCfgInfo* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    plant_lst_.Swap(&other->plant_lst_);
    gatepoints_.Swap(&other->gatepoints_);
    forbiddenspawner_.Swap(&other->forbiddenspawner_);
    forbiddenbuild_.Swap(&other->forbiddenbuild_);
    layouts_.Swap(&other->layouts_);
    popboxes_.Swap(&other->popboxes_);
    std::swap(safepoint_, other->safepoint_);
    popsavedboxes_.Swap(&other->popsavedboxes_);
    vehicles_.Swap(&other->vehicles_);
    airships_.Swap(&other->airships_);
    std::swap(clientmode_, other->clientmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapCfgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapCfgInfo_descriptor_;
  metadata.reflection = MsgMapCfgInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGateTargetMS2GS::kMsgTypeFieldNumber;
const int MsgGateTargetMS2GS::kIggidFieldNumber;
const int MsgGateTargetMS2GS::kTargetFieldNumber;
#endif  // !_MSC_VER

MsgGateTargetMS2GS::MsgGateTargetMS2GS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgGateTargetMS2GS)
}

void MsgGateTargetMS2GS::InitAsDefaultInstance() {
  target_ = const_cast< ::MsgPB::MsgGateTarget*>(&::MsgPB::MsgGateTarget::default_instance());
}

MsgGateTargetMS2GS::MsgGateTargetMS2GS(const MsgGateTargetMS2GS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgGateTargetMS2GS)
}

void MsgGateTargetMS2GS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1063;
  iggid_ = GOOGLE_LONGLONG(0);
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGateTargetMS2GS::~MsgGateTargetMS2GS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgGateTargetMS2GS)
  SharedDtor();
}

void MsgGateTargetMS2GS::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void MsgGateTargetMS2GS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGateTargetMS2GS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGateTargetMS2GS_descriptor_;
}

const MsgGateTargetMS2GS& MsgGateTargetMS2GS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgGateTargetMS2GS* MsgGateTargetMS2GS::default_instance_ = NULL;

MsgGateTargetMS2GS* MsgGateTargetMS2GS::New() const {
  return new MsgGateTargetMS2GS;
}

void MsgGateTargetMS2GS::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1063;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_target()) {
      if (target_ != NULL) target_->::MsgPB::MsgGateTarget::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGateTargetMS2GS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgGateTargetMS2GS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GATE_TARGET_MS2GS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // optional .MsgPB.MsgGateTarget target = 3;
      case 3: {
        if (tag == 26) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgGateTargetMS2GS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgGateTargetMS2GS)
  return false;
#undef DO_
}

void MsgGateTargetMS2GS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgGateTargetMS2GS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GATE_TARGET_MS2GS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.MsgGateTarget target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgGateTargetMS2GS)
}

::google::protobuf::uint8* MsgGateTargetMS2GS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgGateTargetMS2GS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GATE_TARGET_MS2GS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.MsgGateTarget target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgGateTargetMS2GS)
  return target;
}

int MsgGateTargetMS2GS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GATE_TARGET_MS2GS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.MsgGateTarget target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGateTargetMS2GS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGateTargetMS2GS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGateTargetMS2GS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGateTargetMS2GS::MergeFrom(const MsgGateTargetMS2GS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_target()) {
      mutable_target()->::MsgPB::MsgGateTarget::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGateTargetMS2GS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGateTargetMS2GS::CopyFrom(const MsgGateTargetMS2GS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGateTargetMS2GS::IsInitialized() const {

  return true;
}

void MsgGateTargetMS2GS::Swap(MsgGateTargetMS2GS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGateTargetMS2GS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGateTargetMS2GS_descriptor_;
  metadata.reflection = MsgGateTargetMS2GS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJoinMap::kMsgTypeFieldNumber;
const int MsgJoinMap::kIggidFieldNumber;
const int MsgJoinMap::kMaptypeFieldNumber;
const int MsgJoinMap::kMapuuidFieldNumber;
const int MsgJoinMap::kMapidFieldNumber;
const int MsgJoinMap::kReturndungeonFieldNumber;
const int MsgJoinMap::kMapserveridFieldNumber;
const int MsgJoinMap::kTargetFieldNumber;
const int MsgJoinMap::kClientmodeFieldNumber;
const int MsgJoinMap::kDbkeyFieldNumber;
const int MsgJoinMap::kGameSrvIdFieldNumber;
const int MsgJoinMap::kProxySvrIdFieldNumber;
const int MsgJoinMap::kLastMapSrvIdFieldNumber;
const int MsgJoinMap::kIdTargetFieldNumber;
const int MsgJoinMap::kBLoginEnterMapFieldNumber;
const int MsgJoinMap::kGameIdFieldNumber;
#endif  // !_MSC_VER

MsgJoinMap::MsgJoinMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgJoinMap)
}

void MsgJoinMap::InitAsDefaultInstance() {
  target_ = const_cast< ::MsgPB::MsgGateTarget*>(&::MsgPB::MsgGateTarget::default_instance());
}

MsgJoinMap::MsgJoinMap(const MsgJoinMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgJoinMap)
}

void MsgJoinMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1100;
  iggid_ = GOOGLE_LONGLONG(0);
  maptype_ = 0;
  mapuuid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  returndungeon_ = false;
  mapserverid_ = 0;
  target_ = NULL;
  clientmode_ = false;
  dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_srv_id_ = 0;
  proxy_svr_id_ = 0;
  last_map_srv_id_ = -1;
  idtarget_ = GOOGLE_LONGLONG(0);
  bloginentermap_ = false;
  game_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJoinMap::~MsgJoinMap() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgJoinMap)
  SharedDtor();
}

void MsgJoinMap::SharedDtor() {
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbkey_;
  }
  if (this != default_instance_) {
    delete target_;
  }
}

void MsgJoinMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgJoinMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJoinMap_descriptor_;
}

const MsgJoinMap& MsgJoinMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgJoinMap* MsgJoinMap::default_instance_ = NULL;

MsgJoinMap* MsgJoinMap::New() const {
  return new MsgJoinMap;
}

void MsgJoinMap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgJoinMap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(maptype_, mapserverid_);
    msgtype_ = 1100;
    iggid_ = GOOGLE_LONGLONG(0);
    returndungeon_ = false;
    if (has_target()) {
      if (target_ != NULL) target_->::MsgPB::MsgGateTarget::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(clientmode_, proxy_svr_id_);
    ZR_(idtarget_, game_id_);
    if (has_dbkey()) {
      if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbkey_->clear();
      }
    }
    last_map_srv_id_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJoinMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgJoinMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maptype;
        break;
      }

      // optional int32 maptype = 3;
      case 3: {
        if (tag == 24) {
         parse_maptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maptype_)));
          set_has_maptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapuuid;
        break;
      }

      // optional int64 mapuuid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapuuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapuuid_)));
          set_has_mapuuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 5;
      case 5: {
        if (tag == 40) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_returndungeon;
        break;
      }

      // optional bool returndungeon = 6;
      case 6: {
        if (tag == 48) {
         parse_returndungeon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &returndungeon_)));
          set_has_returndungeon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mapserverid;
        break;
      }

      // optional int32 mapserverid = 7;
      case 7: {
        if (tag == 56) {
         parse_mapserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapserverid_)));
          set_has_mapserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_target;
        break;
      }

      // optional .MsgPB.MsgGateTarget target = 8;
      case 8: {
        if (tag == 66) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_clientmode;
        break;
      }

      // optional bool clientmode = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_clientmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientmode_)));
          set_has_clientmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_dbkey;
        break;
      }

      // optional string dbkey = 10;
      case 10: {
        if (tag == 82) {
         parse_dbkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbkey().data(), this->dbkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_game_srv_id;
        break;
      }

      // optional int32 game_srv_id = 11;
      case 11: {
        if (tag == 88) {
         parse_game_srv_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_srv_id_)));
          set_has_game_srv_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_proxy_svr_id;
        break;
      }

      // optional int32 proxy_svr_id = 12;
      case 12: {
        if (tag == 96) {
         parse_proxy_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxy_svr_id_)));
          set_has_proxy_svr_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_last_map_srv_id;
        break;
      }

      // optional int32 last_map_srv_id = 13 [default = -1];
      case 13: {
        if (tag == 104) {
         parse_last_map_srv_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_map_srv_id_)));
          set_has_last_map_srv_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_idTarget;
        break;
      }

      // optional int64 idTarget = 14;
      case 14: {
        if (tag == 112) {
         parse_idTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &idtarget_)));
          set_has_idtarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_bLoginEnterMap;
        break;
      }

      // optional bool bLoginEnterMap = 15;
      case 15: {
        if (tag == 120) {
         parse_bLoginEnterMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bloginentermap_)));
          set_has_bloginentermap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_game_id;
        break;
      }

      // optional int32 game_id = 16;
      case 16: {
        if (tag == 128) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgJoinMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgJoinMap)
  return false;
#undef DO_
}

void MsgJoinMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgJoinMap)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 maptype = 3;
  if (has_maptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maptype(), output);
  }

  // optional int64 mapuuid = 4;
  if (has_mapuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->mapuuid(), output);
  }

  // optional int32 mapid = 5;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapid(), output);
  }

  // optional bool returndungeon = 6;
  if (has_returndungeon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->returndungeon(), output);
  }

  // optional int32 mapserverid = 7;
  if (has_mapserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mapserverid(), output);
  }

  // optional .MsgPB.MsgGateTarget target = 8;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->target(), output);
  }

  // optional bool clientmode = 9 [default = false];
  if (has_clientmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->clientmode(), output);
  }

  // optional string dbkey = 10;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->dbkey(), output);
  }

  // optional int32 game_srv_id = 11;
  if (has_game_srv_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->game_srv_id(), output);
  }

  // optional int32 proxy_svr_id = 12;
  if (has_proxy_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->proxy_svr_id(), output);
  }

  // optional int32 last_map_srv_id = 13 [default = -1];
  if (has_last_map_srv_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->last_map_srv_id(), output);
  }

  // optional int64 idTarget = 14;
  if (has_idtarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->idtarget(), output);
  }

  // optional bool bLoginEnterMap = 15;
  if (has_bloginentermap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->bloginentermap(), output);
  }

  // optional int32 game_id = 16;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgJoinMap)
}

::google::protobuf::uint8* MsgJoinMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgJoinMap)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 maptype = 3;
  if (has_maptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maptype(), target);
  }

  // optional int64 mapuuid = 4;
  if (has_mapuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->mapuuid(), target);
  }

  // optional int32 mapid = 5;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapid(), target);
  }

  // optional bool returndungeon = 6;
  if (has_returndungeon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->returndungeon(), target);
  }

  // optional int32 mapserverid = 7;
  if (has_mapserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mapserverid(), target);
  }

  // optional .MsgPB.MsgGateTarget target = 8;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->target(), target);
  }

  // optional bool clientmode = 9 [default = false];
  if (has_clientmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->clientmode(), target);
  }

  // optional string dbkey = 10;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->dbkey(), target);
  }

  // optional int32 game_srv_id = 11;
  if (has_game_srv_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->game_srv_id(), target);
  }

  // optional int32 proxy_svr_id = 12;
  if (has_proxy_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->proxy_svr_id(), target);
  }

  // optional int32 last_map_srv_id = 13 [default = -1];
  if (has_last_map_srv_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->last_map_srv_id(), target);
  }

  // optional int64 idTarget = 14;
  if (has_idtarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->idtarget(), target);
  }

  // optional bool bLoginEnterMap = 15;
  if (has_bloginentermap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->bloginentermap(), target);
  }

  // optional int32 game_id = 16;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgJoinMap)
  return target;
}

int MsgJoinMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 maptype = 3;
    if (has_maptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maptype());
    }

    // optional int64 mapuuid = 4;
    if (has_mapuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapuuid());
    }

    // optional int32 mapid = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional bool returndungeon = 6;
    if (has_returndungeon()) {
      total_size += 1 + 1;
    }

    // optional int32 mapserverid = 7;
    if (has_mapserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapserverid());
    }

    // optional .MsgPB.MsgGateTarget target = 8;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool clientmode = 9 [default = false];
    if (has_clientmode()) {
      total_size += 1 + 1;
    }

    // optional string dbkey = 10;
    if (has_dbkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbkey());
    }

    // optional int32 game_srv_id = 11;
    if (has_game_srv_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_srv_id());
    }

    // optional int32 proxy_svr_id = 12;
    if (has_proxy_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proxy_svr_id());
    }

    // optional int32 last_map_srv_id = 13 [default = -1];
    if (has_last_map_srv_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_map_srv_id());
    }

    // optional int64 idTarget = 14;
    if (has_idtarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->idtarget());
    }

    // optional bool bLoginEnterMap = 15;
    if (has_bloginentermap()) {
      total_size += 1 + 1;
    }

    // optional int32 game_id = 16;
    if (has_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgJoinMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJoinMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJoinMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJoinMap::MergeFrom(const MsgJoinMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_maptype()) {
      set_maptype(from.maptype());
    }
    if (from.has_mapuuid()) {
      set_mapuuid(from.mapuuid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_returndungeon()) {
      set_returndungeon(from.returndungeon());
    }
    if (from.has_mapserverid()) {
      set_mapserverid(from.mapserverid());
    }
    if (from.has_target()) {
      mutable_target()->::MsgPB::MsgGateTarget::MergeFrom(from.target());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clientmode()) {
      set_clientmode(from.clientmode());
    }
    if (from.has_dbkey()) {
      set_dbkey(from.dbkey());
    }
    if (from.has_game_srv_id()) {
      set_game_srv_id(from.game_srv_id());
    }
    if (from.has_proxy_svr_id()) {
      set_proxy_svr_id(from.proxy_svr_id());
    }
    if (from.has_last_map_srv_id()) {
      set_last_map_srv_id(from.last_map_srv_id());
    }
    if (from.has_idtarget()) {
      set_idtarget(from.idtarget());
    }
    if (from.has_bloginentermap()) {
      set_bloginentermap(from.bloginentermap());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJoinMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJoinMap::CopyFrom(const MsgJoinMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJoinMap::IsInitialized() const {

  return true;
}

void MsgJoinMap::Swap(MsgJoinMap* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(maptype_, other->maptype_);
    std::swap(mapuuid_, other->mapuuid_);
    std::swap(mapid_, other->mapid_);
    std::swap(returndungeon_, other->returndungeon_);
    std::swap(mapserverid_, other->mapserverid_);
    std::swap(target_, other->target_);
    std::swap(clientmode_, other->clientmode_);
    std::swap(dbkey_, other->dbkey_);
    std::swap(game_srv_id_, other->game_srv_id_);
    std::swap(proxy_svr_id_, other->proxy_svr_id_);
    std::swap(last_map_srv_id_, other->last_map_srv_id_);
    std::swap(idtarget_, other->idtarget_);
    std::swap(bloginentermap_, other->bloginentermap_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJoinMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJoinMap_descriptor_;
  metadata.reflection = MsgJoinMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJoinMapRs_MS2GS::kMsgTypeFieldNumber;
const int MsgJoinMapRs_MS2GS::kIggidFieldNumber;
const int MsgJoinMapRs_MS2GS::kMapServerIdFieldNumber;
#endif  // !_MSC_VER

MsgJoinMapRs_MS2GS::MsgJoinMapRs_MS2GS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgJoinMapRs_MS2GS)
}

void MsgJoinMapRs_MS2GS::InitAsDefaultInstance() {
}

MsgJoinMapRs_MS2GS::MsgJoinMapRs_MS2GS(const MsgJoinMapRs_MS2GS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgJoinMapRs_MS2GS)
}

void MsgJoinMapRs_MS2GS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1106;
  iggid_ = GOOGLE_LONGLONG(0);
  map_server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJoinMapRs_MS2GS::~MsgJoinMapRs_MS2GS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgJoinMapRs_MS2GS)
  SharedDtor();
}

void MsgJoinMapRs_MS2GS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgJoinMapRs_MS2GS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgJoinMapRs_MS2GS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJoinMapRs_MS2GS_descriptor_;
}

const MsgJoinMapRs_MS2GS& MsgJoinMapRs_MS2GS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgJoinMapRs_MS2GS* MsgJoinMapRs_MS2GS::default_instance_ = NULL;

MsgJoinMapRs_MS2GS* MsgJoinMapRs_MS2GS::New() const {
  return new MsgJoinMapRs_MS2GS;
}

void MsgJoinMapRs_MS2GS::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1106;
    iggid_ = GOOGLE_LONGLONG(0);
    map_server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJoinMapRs_MS2GS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgJoinMapRs_MS2GS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP_RS_MS2GS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_map_server_id;
        break;
      }

      // optional int32 map_server_id = 3;
      case 3: {
        if (tag == 24) {
         parse_map_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_server_id_)));
          set_has_map_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgJoinMapRs_MS2GS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgJoinMapRs_MS2GS)
  return false;
#undef DO_
}

void MsgJoinMapRs_MS2GS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgJoinMapRs_MS2GS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP_RS_MS2GS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 map_server_id = 3;
  if (has_map_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgJoinMapRs_MS2GS)
}

::google::protobuf::uint8* MsgJoinMapRs_MS2GS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgJoinMapRs_MS2GS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP_RS_MS2GS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 map_server_id = 3;
  if (has_map_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgJoinMapRs_MS2GS)
  return target;
}

int MsgJoinMapRs_MS2GS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP_RS_MS2GS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 map_server_id = 3;
    if (has_map_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgJoinMapRs_MS2GS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJoinMapRs_MS2GS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJoinMapRs_MS2GS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJoinMapRs_MS2GS::MergeFrom(const MsgJoinMapRs_MS2GS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_map_server_id()) {
      set_map_server_id(from.map_server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJoinMapRs_MS2GS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJoinMapRs_MS2GS::CopyFrom(const MsgJoinMapRs_MS2GS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJoinMapRs_MS2GS::IsInitialized() const {

  return true;
}

void MsgJoinMapRs_MS2GS::Swap(MsgJoinMapRs_MS2GS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(map_server_id_, other->map_server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJoinMapRs_MS2GS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJoinMapRs_MS2GS_descriptor_;
  metadata.reflection = MsgJoinMapRs_MS2GS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJoinMapRs::kMsgTypeFieldNumber;
const int MsgJoinMapRs::kIggidFieldNumber;
const int MsgJoinMapRs::kMapidFieldNumber;
const int MsgJoinMapRs::kMapobjectidFieldNumber;
const int MsgJoinMapRs::kServertimeFieldNumber;
const int MsgJoinMapRs::kResultFieldNumber;
const int MsgJoinMapRs::kEmodeFieldNumber;
const int MsgJoinMapRs::kPosxFieldNumber;
const int MsgJoinMapRs::kPosyFieldNumber;
const int MsgJoinMapRs::kHpFieldNumber;
const int MsgJoinMapRs::kMpFieldNumber;
const int MsgJoinMapRs::kTimeRateFieldNumber;
const int MsgJoinMapRs::kFoodFieldNumber;
const int MsgJoinMapRs::kMapuuidFieldNumber;
const int MsgJoinMapRs::kDirFieldNumber;
const int MsgJoinMapRs::kMaxhpFieldNumber;
const int MsgJoinMapRs::kMaxmpFieldNumber;
#endif  // !_MSC_VER

MsgJoinMapRs::MsgJoinMapRs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgJoinMapRs)
}

void MsgJoinMapRs::InitAsDefaultInstance() {
}

MsgJoinMapRs::MsgJoinMapRs(const MsgJoinMapRs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgJoinMapRs)
}

void MsgJoinMapRs::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1101;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  mapobjectid_ = 0;
  servertime_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  emode_ = 0;
  posx_ = 0;
  posy_ = 0;
  hp_ = 0;
  mp_ = 0;
  timerate_ = 0;
  food_ = 0;
  mapuuid_ = GOOGLE_LONGLONG(0);
  dir_ = 0;
  maxhp_ = 0;
  maxmp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJoinMapRs::~MsgJoinMapRs() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgJoinMapRs)
  SharedDtor();
}

void MsgJoinMapRs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgJoinMapRs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgJoinMapRs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJoinMapRs_descriptor_;
}

const MsgJoinMapRs& MsgJoinMapRs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgJoinMapRs* MsgJoinMapRs::default_instance_ = NULL;

MsgJoinMapRs* MsgJoinMapRs::New() const {
  return new MsgJoinMapRs;
}

void MsgJoinMapRs::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgJoinMapRs*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mapid_, posx_);
    msgtype_ = 1101;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(posy_, maxhp_);
  }
  maxmp_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJoinMapRs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgJoinMapRs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP_RS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapobjectid;
        break;
      }

      // optional int32 mapobjectid = 5;
      case 5: {
        if (tag == 40) {
         parse_mapobjectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapobjectid_)));
          set_has_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_servertime;
        break;
      }

      // optional int64 servertime = 6;
      case 6: {
        if (tag == 48) {
         parse_servertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_result;
        break;
      }

      // optional .MsgPB.JOIN_MAP_RS result = 7;
      case 7: {
        if (tag == 56) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::JOIN_MAP_RS_IsValid(value)) {
            set_result(static_cast< ::MsgPB::JOIN_MAP_RS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_emode;
        break;
      }

      // optional .MsgPB.EN_GAME_MAP_MODE emode = 8;
      case 8: {
        if (tag == 64) {
         parse_emode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EN_GAME_MAP_MODE_IsValid(value)) {
            set_emode(static_cast< ::MsgPB::EN_GAME_MAP_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_posx;
        break;
      }

      // optional int32 posx = 9;
      case 9: {
        if (tag == 72) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_posy;
        break;
      }

      // optional int32 posy = 10;
      case 10: {
        if (tag == 80) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_hp;
        break;
      }

      // optional int32 hp = 11;
      case 11: {
        if (tag == 88) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mp;
        break;
      }

      // optional int32 mp = 12;
      case 12: {
        if (tag == 96) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_timeRate;
        break;
      }

      // optional int32 timeRate = 13;
      case 13: {
        if (tag == 104) {
         parse_timeRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timerate_)));
          set_has_timerate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_food;
        break;
      }

      // optional int32 food = 14;
      case 14: {
        if (tag == 112) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mapuuid;
        break;
      }

      // optional int64 mapuuid = 15;
      case 15: {
        if (tag == 120) {
         parse_mapuuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapuuid_)));
          set_has_mapuuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_dir;
        break;
      }

      // optional .MsgPB.MSG_MOVE_DIR dir = 16;
      case 16: {
        if (tag == 128) {
         parse_dir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MSG_MOVE_DIR_IsValid(value)) {
            set_dir(static_cast< ::MsgPB::MSG_MOVE_DIR >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_maxhp;
        break;
      }

      // optional int32 maxhp = 17;
      case 17: {
        if (tag == 136) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_maxmp;
        break;
      }

      // optional int32 maxmp = 18;
      case 18: {
        if (tag == 144) {
         parse_maxmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmp_)));
          set_has_maxmp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgJoinMapRs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgJoinMapRs)
  return false;
#undef DO_
}

void MsgJoinMapRs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgJoinMapRs)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP_RS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapid(), output);
  }

  // optional int32 mapobjectid = 5;
  if (has_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapobjectid(), output);
  }

  // optional int64 servertime = 6;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->servertime(), output);
  }

  // optional .MsgPB.JOIN_MAP_RS result = 7;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->result(), output);
  }

  // optional .MsgPB.EN_GAME_MAP_MODE emode = 8;
  if (has_emode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->emode(), output);
  }

  // optional int32 posx = 9;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->posx(), output);
  }

  // optional int32 posy = 10;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->posy(), output);
  }

  // optional int32 hp = 11;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->hp(), output);
  }

  // optional int32 mp = 12;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mp(), output);
  }

  // optional int32 timeRate = 13;
  if (has_timerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->timerate(), output);
  }

  // optional int32 food = 14;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->food(), output);
  }

  // optional int64 mapuuid = 15;
  if (has_mapuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->mapuuid(), output);
  }

  // optional .MsgPB.MSG_MOVE_DIR dir = 16;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->dir(), output);
  }

  // optional int32 maxhp = 17;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->maxhp(), output);
  }

  // optional int32 maxmp = 18;
  if (has_maxmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->maxmp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgJoinMapRs)
}

::google::protobuf::uint8* MsgJoinMapRs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgJoinMapRs)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP_RS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapid(), target);
  }

  // optional int32 mapobjectid = 5;
  if (has_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapobjectid(), target);
  }

  // optional int64 servertime = 6;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->servertime(), target);
  }

  // optional .MsgPB.JOIN_MAP_RS result = 7;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->result(), target);
  }

  // optional .MsgPB.EN_GAME_MAP_MODE emode = 8;
  if (has_emode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->emode(), target);
  }

  // optional int32 posx = 9;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->posx(), target);
  }

  // optional int32 posy = 10;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->posy(), target);
  }

  // optional int32 hp = 11;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->hp(), target);
  }

  // optional int32 mp = 12;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mp(), target);
  }

  // optional int32 timeRate = 13;
  if (has_timerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->timerate(), target);
  }

  // optional int32 food = 14;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->food(), target);
  }

  // optional int64 mapuuid = 15;
  if (has_mapuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->mapuuid(), target);
  }

  // optional .MsgPB.MSG_MOVE_DIR dir = 16;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->dir(), target);
  }

  // optional int32 maxhp = 17;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->maxhp(), target);
  }

  // optional int32 maxmp = 18;
  if (has_maxmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->maxmp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgJoinMapRs)
  return target;
}

int MsgJoinMapRs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_JOIN_MAP_RS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 mapobjectid = 5;
    if (has_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapobjectid());
    }

    // optional int64 servertime = 6;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }

    // optional .MsgPB.JOIN_MAP_RS result = 7;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .MsgPB.EN_GAME_MAP_MODE emode = 8;
    if (has_emode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->emode());
    }

    // optional int32 posx = 9;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 posy = 10;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int32 hp = 11;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 12;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional int32 timeRate = 13;
    if (has_timerate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timerate());
    }

    // optional int32 food = 14;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->food());
    }

    // optional int64 mapuuid = 15;
    if (has_mapuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapuuid());
    }

    // optional .MsgPB.MSG_MOVE_DIR dir = 16;
    if (has_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
    }

    // optional int32 maxhp = 17;
    if (has_maxhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 maxmp = 18;
    if (has_maxmp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgJoinMapRs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJoinMapRs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJoinMapRs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJoinMapRs::MergeFrom(const MsgJoinMapRs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_mapobjectid()) {
      set_mapobjectid(from.mapobjectid());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_emode()) {
      set_emode(from.emode());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_timerate()) {
      set_timerate(from.timerate());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_mapuuid()) {
      set_mapuuid(from.mapuuid());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_maxmp()) {
      set_maxmp(from.maxmp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJoinMapRs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJoinMapRs::CopyFrom(const MsgJoinMapRs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJoinMapRs::IsInitialized() const {

  return true;
}

void MsgJoinMapRs::Swap(MsgJoinMapRs* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    std::swap(mapobjectid_, other->mapobjectid_);
    std::swap(servertime_, other->servertime_);
    std::swap(result_, other->result_);
    std::swap(emode_, other->emode_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(timerate_, other->timerate_);
    std::swap(food_, other->food_);
    std::swap(mapuuid_, other->mapuuid_);
    std::swap(dir_, other->dir_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(maxmp_, other->maxmp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJoinMapRs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJoinMapRs_descriptor_;
  metadata.reflection = MsgJoinMapRs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQuitMapC2S::kMsgTypeFieldNumber;
const int MsgQuitMapC2S::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgQuitMapC2S::MsgQuitMapC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgQuitMapC2S)
}

void MsgQuitMapC2S::InitAsDefaultInstance() {
}

MsgQuitMapC2S::MsgQuitMapC2S(const MsgQuitMapC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgQuitMapC2S)
}

void MsgQuitMapC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 30002;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQuitMapC2S::~MsgQuitMapC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgQuitMapC2S)
  SharedDtor();
}

void MsgQuitMapC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQuitMapC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQuitMapC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQuitMapC2S_descriptor_;
}

const MsgQuitMapC2S& MsgQuitMapC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgQuitMapC2S* MsgQuitMapC2S::default_instance_ = NULL;

MsgQuitMapC2S* MsgQuitMapC2S::New() const {
  return new MsgQuitMapC2S;
}

void MsgQuitMapC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 30002;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQuitMapC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgQuitMapC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUIT_MAP_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgQuitMapC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgQuitMapC2S)
  return false;
#undef DO_
}

void MsgQuitMapC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgQuitMapC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUIT_MAP_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgQuitMapC2S)
}

::google::protobuf::uint8* MsgQuitMapC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgQuitMapC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUIT_MAP_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgQuitMapC2S)
  return target;
}

int MsgQuitMapC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUIT_MAP_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQuitMapC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQuitMapC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQuitMapC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQuitMapC2S::MergeFrom(const MsgQuitMapC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQuitMapC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQuitMapC2S::CopyFrom(const MsgQuitMapC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQuitMapC2S::IsInitialized() const {

  return true;
}

void MsgQuitMapC2S::Swap(MsgQuitMapC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQuitMapC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQuitMapC2S_descriptor_;
  metadata.reflection = MsgQuitMapC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgEnterPublicMapC2S::kMsgTypeFieldNumber;
const int MsgEnterPublicMapC2S::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgEnterPublicMapC2S::MsgEnterPublicMapC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgEnterPublicMapC2S)
}

void MsgEnterPublicMapC2S::InitAsDefaultInstance() {
}

MsgEnterPublicMapC2S::MsgEnterPublicMapC2S(const MsgEnterPublicMapC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgEnterPublicMapC2S)
}

void MsgEnterPublicMapC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 30037;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgEnterPublicMapC2S::~MsgEnterPublicMapC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgEnterPublicMapC2S)
  SharedDtor();
}

void MsgEnterPublicMapC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgEnterPublicMapC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgEnterPublicMapC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgEnterPublicMapC2S_descriptor_;
}

const MsgEnterPublicMapC2S& MsgEnterPublicMapC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgEnterPublicMapC2S* MsgEnterPublicMapC2S::default_instance_ = NULL;

MsgEnterPublicMapC2S* MsgEnterPublicMapC2S::New() const {
  return new MsgEnterPublicMapC2S;
}

void MsgEnterPublicMapC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 30037;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgEnterPublicMapC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgEnterPublicMapC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_ENTER_PUBLIC_MAP_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgEnterPublicMapC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgEnterPublicMapC2S)
  return false;
#undef DO_
}

void MsgEnterPublicMapC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgEnterPublicMapC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_ENTER_PUBLIC_MAP_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgEnterPublicMapC2S)
}

::google::protobuf::uint8* MsgEnterPublicMapC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgEnterPublicMapC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_ENTER_PUBLIC_MAP_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgEnterPublicMapC2S)
  return target;
}

int MsgEnterPublicMapC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_ENTER_PUBLIC_MAP_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgEnterPublicMapC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgEnterPublicMapC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgEnterPublicMapC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgEnterPublicMapC2S::MergeFrom(const MsgEnterPublicMapC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgEnterPublicMapC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEnterPublicMapC2S::CopyFrom(const MsgEnterPublicMapC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEnterPublicMapC2S::IsInitialized() const {

  return true;
}

void MsgEnterPublicMapC2S::Swap(MsgEnterPublicMapC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgEnterPublicMapC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgEnterPublicMapC2S_descriptor_;
  metadata.reflection = MsgEnterPublicMapC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgObjectS2C::kMsgTypeFieldNumber;
const int MsgObjectS2C::kIggidFieldNumber;
const int MsgObjectS2C::kMapObjectIdFieldNumber;
const int MsgObjectS2C::kGroupFieldNumber;
#endif  // !_MSC_VER

MsgObjectS2C::MsgObjectS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgObjectS2C)
}

void MsgObjectS2C::InitAsDefaultInstance() {
}

MsgObjectS2C::MsgObjectS2C(const MsgObjectS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgObjectS2C)
}

void MsgObjectS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1123;
  iggid_ = GOOGLE_LONGLONG(0);
  mapobjectid_ = 0;
  group_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgObjectS2C::~MsgObjectS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgObjectS2C)
  SharedDtor();
}

void MsgObjectS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgObjectS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgObjectS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgObjectS2C_descriptor_;
}

const MsgObjectS2C& MsgObjectS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgObjectS2C* MsgObjectS2C::default_instance_ = NULL;

MsgObjectS2C* MsgObjectS2C::New() const {
  return new MsgObjectS2C;
}

void MsgObjectS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgObjectS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mapobjectid_, group_);
    msgtype_ = 1123;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgObjectS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgObjectS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_OBJECT_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapObjectId;
        break;
      }

      // optional int32 mapObjectId = 3;
      case 3: {
        if (tag == 24) {
         parse_mapObjectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapobjectid_)));
          set_has_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group;
        break;
      }

      // optional uint32 group = 4;
      case 4: {
        if (tag == 32) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgObjectS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgObjectS2C)
  return false;
#undef DO_
}

void MsgObjectS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgObjectS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_OBJECT_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapObjectId = 3;
  if (has_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapobjectid(), output);
  }

  // optional uint32 group = 4;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgObjectS2C)
}

::google::protobuf::uint8* MsgObjectS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgObjectS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_OBJECT_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapObjectId = 3;
  if (has_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapobjectid(), target);
  }

  // optional uint32 group = 4;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgObjectS2C)
  return target;
}

int MsgObjectS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_OBJECT_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapObjectId = 3;
    if (has_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapobjectid());
    }

    // optional uint32 group = 4;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgObjectS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgObjectS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgObjectS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgObjectS2C::MergeFrom(const MsgObjectS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapobjectid()) {
      set_mapobjectid(from.mapobjectid());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgObjectS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgObjectS2C::CopyFrom(const MsgObjectS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgObjectS2C::IsInitialized() const {

  return true;
}

void MsgObjectS2C::Swap(MsgObjectS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapobjectid_, other->mapobjectid_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgObjectS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgObjectS2C_descriptor_;
  metadata.reflection = MsgObjectS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapObjMoveS2C::kMsgTypeFieldNumber;
const int MsgMapObjMoveS2C::kIggidFieldNumber;
const int MsgMapObjMoveS2C::kSerialIDFieldNumber;
const int MsgMapObjMoveS2C::kObjectidFieldNumber;
const int MsgMapObjMoveS2C::kSkillIdFieldNumber;
const int MsgMapObjMoveS2C::kSpeedFieldNumber;
const int MsgMapObjMoveS2C::kTargetPosXFieldNumber;
const int MsgMapObjMoveS2C::kTargetPosYFieldNumber;
const int MsgMapObjMoveS2C::kCasterPosXFieldNumber;
const int MsgMapObjMoveS2C::kCasterPosYFieldNumber;
#endif  // !_MSC_VER

MsgMapObjMoveS2C::MsgMapObjMoveS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapObjMoveS2C)
}

void MsgMapObjMoveS2C::InitAsDefaultInstance() {
}

MsgMapObjMoveS2C::MsgMapObjMoveS2C(const MsgMapObjMoveS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapObjMoveS2C)
}

void MsgMapObjMoveS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1124;
  iggid_ = GOOGLE_LONGLONG(0);
  serialid_ = GOOGLE_LONGLONG(0);
  objectid_ = 0;
  skill_id_ = 0;
  speed_ = 0;
  target_pos_x_ = GOOGLE_LONGLONG(0);
  target_pos_y_ = GOOGLE_LONGLONG(0);
  caster_pos_x_ = GOOGLE_LONGLONG(0);
  caster_pos_y_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapObjMoveS2C::~MsgMapObjMoveS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapObjMoveS2C)
  SharedDtor();
}

void MsgMapObjMoveS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMapObjMoveS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapObjMoveS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapObjMoveS2C_descriptor_;
}

const MsgMapObjMoveS2C& MsgMapObjMoveS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapObjMoveS2C* MsgMapObjMoveS2C::default_instance_ = NULL;

MsgMapObjMoveS2C* MsgMapObjMoveS2C::New() const {
  return new MsgMapObjMoveS2C;
}

void MsgMapObjMoveS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMapObjMoveS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(objectid_, target_pos_y_);
    msgtype_ = 1124;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ZR_(caster_pos_x_, caster_pos_y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapObjMoveS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapObjMoveS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJ_MOVE_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SerialID;
        break;
      }

      // optional int64 SerialID = 3;
      case 3: {
        if (tag == 24) {
         parse_SerialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_objectid;
        break;
      }

      // optional int32 objectid = 4;
      case 4: {
        if (tag == 32) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 5;
      case 5: {
        if (tag == 40) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // optional int32 speed = 6;
      case 6: {
        if (tag == 48) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_target_pos_x;
        break;
      }

      // optional int64 target_pos_x = 7;
      case 7: {
        if (tag == 56) {
         parse_target_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_pos_x_)));
          set_has_target_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_target_pos_y;
        break;
      }

      // optional int64 target_pos_y = 8;
      case 8: {
        if (tag == 64) {
         parse_target_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_pos_y_)));
          set_has_target_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_caster_pos_x;
        break;
      }

      // optional int64 caster_pos_x = 9;
      case 9: {
        if (tag == 72) {
         parse_caster_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &caster_pos_x_)));
          set_has_caster_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_caster_pos_y;
        break;
      }

      // optional int64 caster_pos_y = 10;
      case 10: {
        if (tag == 80) {
         parse_caster_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &caster_pos_y_)));
          set_has_caster_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapObjMoveS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapObjMoveS2C)
  return false;
#undef DO_
}

void MsgMapObjMoveS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapObjMoveS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJ_MOVE_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int64 SerialID = 3;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->serialid(), output);
  }

  // optional int32 objectid = 4;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->objectid(), output);
  }

  // optional int32 skill_id = 5;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skill_id(), output);
  }

  // optional int32 speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speed(), output);
  }

  // optional int64 target_pos_x = 7;
  if (has_target_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->target_pos_x(), output);
  }

  // optional int64 target_pos_y = 8;
  if (has_target_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->target_pos_y(), output);
  }

  // optional int64 caster_pos_x = 9;
  if (has_caster_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->caster_pos_x(), output);
  }

  // optional int64 caster_pos_y = 10;
  if (has_caster_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->caster_pos_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapObjMoveS2C)
}

::google::protobuf::uint8* MsgMapObjMoveS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapObjMoveS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJ_MOVE_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int64 SerialID = 3;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->serialid(), target);
  }

  // optional int32 objectid = 4;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->objectid(), target);
  }

  // optional int32 skill_id = 5;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skill_id(), target);
  }

  // optional int32 speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speed(), target);
  }

  // optional int64 target_pos_x = 7;
  if (has_target_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->target_pos_x(), target);
  }

  // optional int64 target_pos_y = 8;
  if (has_target_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->target_pos_y(), target);
  }

  // optional int64 caster_pos_x = 9;
  if (has_caster_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->caster_pos_x(), target);
  }

  // optional int64 caster_pos_y = 10;
  if (has_caster_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->caster_pos_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapObjMoveS2C)
  return target;
}

int MsgMapObjMoveS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPOBJ_MOVE_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 SerialID = 3;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serialid());
    }

    // optional int32 objectid = 4;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 skill_id = 5;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 speed = 6;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int64 target_pos_x = 7;
    if (has_target_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_pos_x());
    }

    // optional int64 target_pos_y = 8;
    if (has_target_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_pos_y());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 caster_pos_x = 9;
    if (has_caster_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->caster_pos_x());
    }

    // optional int64 caster_pos_y = 10;
    if (has_caster_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->caster_pos_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapObjMoveS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapObjMoveS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapObjMoveS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapObjMoveS2C::MergeFrom(const MsgMapObjMoveS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_target_pos_x()) {
      set_target_pos_x(from.target_pos_x());
    }
    if (from.has_target_pos_y()) {
      set_target_pos_y(from.target_pos_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_caster_pos_x()) {
      set_caster_pos_x(from.caster_pos_x());
    }
    if (from.has_caster_pos_y()) {
      set_caster_pos_y(from.caster_pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapObjMoveS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapObjMoveS2C::CopyFrom(const MsgMapObjMoveS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapObjMoveS2C::IsInitialized() const {

  return true;
}

void MsgMapObjMoveS2C::Swap(MsgMapObjMoveS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(serialid_, other->serialid_);
    std::swap(objectid_, other->objectid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(speed_, other->speed_);
    std::swap(target_pos_x_, other->target_pos_x_);
    std::swap(target_pos_y_, other->target_pos_y_);
    std::swap(caster_pos_x_, other->caster_pos_x_);
    std::swap(caster_pos_y_, other->caster_pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapObjMoveS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapObjMoveS2C_descriptor_;
  metadata.reflection = MsgMapObjMoveS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapLayoutInfo_MS2C_LayoutRoomInfo::kTopleftXFieldNumber;
const int MsgMapLayoutInfo_MS2C_LayoutRoomInfo::kTopleftYFieldNumber;
const int MsgMapLayoutInfo_MS2C_LayoutRoomInfo::kBottomrightXFieldNumber;
const int MsgMapLayoutInfo_MS2C_LayoutRoomInfo::kBottomrightYFieldNumber;
const int MsgMapLayoutInfo_MS2C_LayoutRoomInfo::kRoomNameFieldNumber;
#endif  // !_MSC_VER

MsgMapLayoutInfo_MS2C_LayoutRoomInfo::MsgMapLayoutInfo_MS2C_LayoutRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo)
}

void MsgMapLayoutInfo_MS2C_LayoutRoomInfo::InitAsDefaultInstance() {
}

MsgMapLayoutInfo_MS2C_LayoutRoomInfo::MsgMapLayoutInfo_MS2C_LayoutRoomInfo(const MsgMapLayoutInfo_MS2C_LayoutRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo)
}

void MsgMapLayoutInfo_MS2C_LayoutRoomInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  topleft_x_ = 0;
  topleft_y_ = 0;
  bottomright_x_ = 0;
  bottomright_y_ = 0;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapLayoutInfo_MS2C_LayoutRoomInfo::~MsgMapLayoutInfo_MS2C_LayoutRoomInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo)
  SharedDtor();
}

void MsgMapLayoutInfo_MS2C_LayoutRoomInfo::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void MsgMapLayoutInfo_MS2C_LayoutRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapLayoutInfo_MS2C_LayoutRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapLayoutInfo_MS2C_LayoutRoomInfo_descriptor_;
}

const MsgMapLayoutInfo_MS2C_LayoutRoomInfo& MsgMapLayoutInfo_MS2C_LayoutRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapLayoutInfo_MS2C_LayoutRoomInfo* MsgMapLayoutInfo_MS2C_LayoutRoomInfo::default_instance_ = NULL;

MsgMapLayoutInfo_MS2C_LayoutRoomInfo* MsgMapLayoutInfo_MS2C_LayoutRoomInfo::New() const {
  return new MsgMapLayoutInfo_MS2C_LayoutRoomInfo;
}

void MsgMapLayoutInfo_MS2C_LayoutRoomInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMapLayoutInfo_MS2C_LayoutRoomInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(topleft_x_, bottomright_y_);
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapLayoutInfo_MS2C_LayoutRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 topleft_x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topleft_x_)));
          set_has_topleft_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_topleft_y;
        break;
      }

      // optional int32 topleft_y = 2;
      case 2: {
        if (tag == 16) {
         parse_topleft_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topleft_y_)));
          set_has_topleft_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bottomright_x;
        break;
      }

      // optional int32 bottomright_x = 3;
      case 3: {
        if (tag == 24) {
         parse_bottomright_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottomright_x_)));
          set_has_bottomright_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bottomright_y;
        break;
      }

      // optional int32 bottomright_y = 4;
      case 4: {
        if (tag == 32) {
         parse_bottomright_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottomright_y_)));
          set_has_bottomright_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_room_name;
        break;
      }

      // optional string room_name = 5;
      case 5: {
        if (tag == 42) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo)
  return false;
#undef DO_
}

void MsgMapLayoutInfo_MS2C_LayoutRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo)
  // optional int32 topleft_x = 1;
  if (has_topleft_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->topleft_x(), output);
  }

  // optional int32 topleft_y = 2;
  if (has_topleft_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topleft_y(), output);
  }

  // optional int32 bottomright_x = 3;
  if (has_bottomright_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bottomright_x(), output);
  }

  // optional int32 bottomright_y = 4;
  if (has_bottomright_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bottomright_y(), output);
  }

  // optional string room_name = 5;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->room_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo)
}

::google::protobuf::uint8* MsgMapLayoutInfo_MS2C_LayoutRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo)
  // optional int32 topleft_x = 1;
  if (has_topleft_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->topleft_x(), target);
  }

  // optional int32 topleft_y = 2;
  if (has_topleft_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->topleft_y(), target);
  }

  // optional int32 bottomright_x = 3;
  if (has_bottomright_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bottomright_x(), target);
  }

  // optional int32 bottomright_y = 4;
  if (has_bottomright_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bottomright_y(), target);
  }

  // optional string room_name = 5;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->room_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo)
  return target;
}

int MsgMapLayoutInfo_MS2C_LayoutRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 topleft_x = 1;
    if (has_topleft_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topleft_x());
    }

    // optional int32 topleft_y = 2;
    if (has_topleft_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topleft_y());
    }

    // optional int32 bottomright_x = 3;
    if (has_bottomright_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottomright_x());
    }

    // optional int32 bottomright_y = 4;
    if (has_bottomright_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottomright_y());
    }

    // optional string room_name = 5;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapLayoutInfo_MS2C_LayoutRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapLayoutInfo_MS2C_LayoutRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapLayoutInfo_MS2C_LayoutRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapLayoutInfo_MS2C_LayoutRoomInfo::MergeFrom(const MsgMapLayoutInfo_MS2C_LayoutRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topleft_x()) {
      set_topleft_x(from.topleft_x());
    }
    if (from.has_topleft_y()) {
      set_topleft_y(from.topleft_y());
    }
    if (from.has_bottomright_x()) {
      set_bottomright_x(from.bottomright_x());
    }
    if (from.has_bottomright_y()) {
      set_bottomright_y(from.bottomright_y());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapLayoutInfo_MS2C_LayoutRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapLayoutInfo_MS2C_LayoutRoomInfo::CopyFrom(const MsgMapLayoutInfo_MS2C_LayoutRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapLayoutInfo_MS2C_LayoutRoomInfo::IsInitialized() const {

  return true;
}

void MsgMapLayoutInfo_MS2C_LayoutRoomInfo::Swap(MsgMapLayoutInfo_MS2C_LayoutRoomInfo* other) {
  if (other != this) {
    std::swap(topleft_x_, other->topleft_x_);
    std::swap(topleft_y_, other->topleft_y_);
    std::swap(bottomright_x_, other->bottomright_x_);
    std::swap(bottomright_y_, other->bottomright_y_);
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapLayoutInfo_MS2C_LayoutRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapLayoutInfo_MS2C_LayoutRoomInfo_descriptor_;
  metadata.reflection = MsgMapLayoutInfo_MS2C_LayoutRoomInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgMapLayoutInfo_MS2C::kMsgTypeFieldNumber;
const int MsgMapLayoutInfo_MS2C::kIggidFieldNumber;
const int MsgMapLayoutInfo_MS2C::kLayoutRoomFieldNumber;
#endif  // !_MSC_VER

MsgMapLayoutInfo_MS2C::MsgMapLayoutInfo_MS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapLayoutInfo_MS2C)
}

void MsgMapLayoutInfo_MS2C::InitAsDefaultInstance() {
}

MsgMapLayoutInfo_MS2C::MsgMapLayoutInfo_MS2C(const MsgMapLayoutInfo_MS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapLayoutInfo_MS2C)
}

void MsgMapLayoutInfo_MS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1129;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapLayoutInfo_MS2C::~MsgMapLayoutInfo_MS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapLayoutInfo_MS2C)
  SharedDtor();
}

void MsgMapLayoutInfo_MS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMapLayoutInfo_MS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapLayoutInfo_MS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapLayoutInfo_MS2C_descriptor_;
}

const MsgMapLayoutInfo_MS2C& MsgMapLayoutInfo_MS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapLayoutInfo_MS2C* MsgMapLayoutInfo_MS2C::default_instance_ = NULL;

MsgMapLayoutInfo_MS2C* MsgMapLayoutInfo_MS2C::New() const {
  return new MsgMapLayoutInfo_MS2C;
}

void MsgMapLayoutInfo_MS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1129;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  layout_room_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapLayoutInfo_MS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapLayoutInfo_MS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_LAYOUT_INFO_MS2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_layout_room;
        break;
      }

      // repeated .MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo layout_room = 3;
      case 3: {
        if (tag == 26) {
         parse_layout_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layout_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_layout_room;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapLayoutInfo_MS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapLayoutInfo_MS2C)
  return false;
#undef DO_
}

void MsgMapLayoutInfo_MS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapLayoutInfo_MS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_LAYOUT_INFO_MS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // repeated .MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo layout_room = 3;
  for (int i = 0; i < this->layout_room_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->layout_room(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapLayoutInfo_MS2C)
}

::google::protobuf::uint8* MsgMapLayoutInfo_MS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapLayoutInfo_MS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_LAYOUT_INFO_MS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // repeated .MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo layout_room = 3;
  for (int i = 0; i < this->layout_room_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->layout_room(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapLayoutInfo_MS2C)
  return target;
}

int MsgMapLayoutInfo_MS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_LAYOUT_INFO_MS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  // repeated .MsgPB.MsgMapLayoutInfo_MS2C.LayoutRoomInfo layout_room = 3;
  total_size += 1 * this->layout_room_size();
  for (int i = 0; i < this->layout_room_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layout_room(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapLayoutInfo_MS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapLayoutInfo_MS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapLayoutInfo_MS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapLayoutInfo_MS2C::MergeFrom(const MsgMapLayoutInfo_MS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  layout_room_.MergeFrom(from.layout_room_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapLayoutInfo_MS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapLayoutInfo_MS2C::CopyFrom(const MsgMapLayoutInfo_MS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapLayoutInfo_MS2C::IsInitialized() const {

  return true;
}

void MsgMapLayoutInfo_MS2C::Swap(MsgMapLayoutInfo_MS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    layout_room_.Swap(&other->layout_room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapLayoutInfo_MS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapLayoutInfo_MS2C_descriptor_;
  metadata.reflection = MsgMapLayoutInfo_MS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRequestSyncDataGS2MS::kMsgTypeFieldNumber;
const int MsgRequestSyncDataGS2MS::kIggidFieldNumber;
const int MsgRequestSyncDataGS2MS::kBCloseFieldNumber;
#endif  // !_MSC_VER

MsgRequestSyncDataGS2MS::MsgRequestSyncDataGS2MS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgRequestSyncDataGS2MS)
}

void MsgRequestSyncDataGS2MS::InitAsDefaultInstance() {
}

MsgRequestSyncDataGS2MS::MsgRequestSyncDataGS2MS(const MsgRequestSyncDataGS2MS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgRequestSyncDataGS2MS)
}

void MsgRequestSyncDataGS2MS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1070;
  iggid_ = GOOGLE_LONGLONG(0);
  bclose_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRequestSyncDataGS2MS::~MsgRequestSyncDataGS2MS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgRequestSyncDataGS2MS)
  SharedDtor();
}

void MsgRequestSyncDataGS2MS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRequestSyncDataGS2MS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRequestSyncDataGS2MS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRequestSyncDataGS2MS_descriptor_;
}

const MsgRequestSyncDataGS2MS& MsgRequestSyncDataGS2MS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgRequestSyncDataGS2MS* MsgRequestSyncDataGS2MS::default_instance_ = NULL;

MsgRequestSyncDataGS2MS* MsgRequestSyncDataGS2MS::New() const {
  return new MsgRequestSyncDataGS2MS;
}

void MsgRequestSyncDataGS2MS::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1070;
    iggid_ = GOOGLE_LONGLONG(0);
    bclose_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRequestSyncDataGS2MS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgRequestSyncDataGS2MS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REQUEST_SYNCDATA_GS2MS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bClose;
        break;
      }

      // optional bool bClose = 3;
      case 3: {
        if (tag == 24) {
         parse_bClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bclose_)));
          set_has_bclose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgRequestSyncDataGS2MS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgRequestSyncDataGS2MS)
  return false;
#undef DO_
}

void MsgRequestSyncDataGS2MS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgRequestSyncDataGS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REQUEST_SYNCDATA_GS2MS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional bool bClose = 3;
  if (has_bclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bclose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgRequestSyncDataGS2MS)
}

::google::protobuf::uint8* MsgRequestSyncDataGS2MS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgRequestSyncDataGS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REQUEST_SYNCDATA_GS2MS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional bool bClose = 3;
  if (has_bclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bclose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgRequestSyncDataGS2MS)
  return target;
}

int MsgRequestSyncDataGS2MS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REQUEST_SYNCDATA_GS2MS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional bool bClose = 3;
    if (has_bclose()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRequestSyncDataGS2MS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRequestSyncDataGS2MS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRequestSyncDataGS2MS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRequestSyncDataGS2MS::MergeFrom(const MsgRequestSyncDataGS2MS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_bclose()) {
      set_bclose(from.bclose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRequestSyncDataGS2MS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRequestSyncDataGS2MS::CopyFrom(const MsgRequestSyncDataGS2MS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRequestSyncDataGS2MS::IsInitialized() const {

  return true;
}

void MsgRequestSyncDataGS2MS::Swap(MsgRequestSyncDataGS2MS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(bclose_, other->bclose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRequestSyncDataGS2MS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRequestSyncDataGS2MS_descriptor_;
  metadata.reflection = MsgRequestSyncDataGS2MS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSyncTowerBuildData::kUuidFieldNumber;
const int MsgSyncTowerBuildData::kTowerDataFieldNumber;
const int MsgSyncTowerBuildData::kOpFieldNumber;
#endif  // !_MSC_VER

MsgSyncTowerBuildData::MsgSyncTowerBuildData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgSyncTowerBuildData)
}

void MsgSyncTowerBuildData::InitAsDefaultInstance() {
  tower_data_ = const_cast< ::MsgPB::MsgBuildTowerData*>(&::MsgPB::MsgBuildTowerData::default_instance());
}

MsgSyncTowerBuildData::MsgSyncTowerBuildData(const MsgSyncTowerBuildData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgSyncTowerBuildData)
}

void MsgSyncTowerBuildData::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  tower_data_ = NULL;
  op_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSyncTowerBuildData::~MsgSyncTowerBuildData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgSyncTowerBuildData)
  SharedDtor();
}

void MsgSyncTowerBuildData::SharedDtor() {
  if (this != default_instance_) {
    delete tower_data_;
  }
}

void MsgSyncTowerBuildData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSyncTowerBuildData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSyncTowerBuildData_descriptor_;
}

const MsgSyncTowerBuildData& MsgSyncTowerBuildData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgSyncTowerBuildData* MsgSyncTowerBuildData::default_instance_ = NULL;

MsgSyncTowerBuildData* MsgSyncTowerBuildData::New() const {
  return new MsgSyncTowerBuildData;
}

void MsgSyncTowerBuildData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    uuid_ = GOOGLE_LONGLONG(0);
    if (has_tower_data()) {
      if (tower_data_ != NULL) tower_data_->::MsgPB::MsgBuildTowerData::Clear();
    }
    op_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSyncTowerBuildData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgSyncTowerBuildData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tower_data;
        break;
      }

      // optional .MsgPB.MsgBuildTowerData tower_data = 2;
      case 2: {
        if (tag == 18) {
         parse_tower_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_op;
        break;
      }

      // optional .MsgPB.SYNC_TOWERBUILD_OP op = 3;
      case 3: {
        if (tag == 24) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::SYNC_TOWERBUILD_OP_IsValid(value)) {
            set_op(static_cast< ::MsgPB::SYNC_TOWERBUILD_OP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgSyncTowerBuildData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgSyncTowerBuildData)
  return false;
#undef DO_
}

void MsgSyncTowerBuildData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgSyncTowerBuildData)
  // optional int64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uuid(), output);
  }

  // optional .MsgPB.MsgBuildTowerData tower_data = 2;
  if (has_tower_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tower_data(), output);
  }

  // optional .MsgPB.SYNC_TOWERBUILD_OP op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgSyncTowerBuildData)
}

::google::protobuf::uint8* MsgSyncTowerBuildData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgSyncTowerBuildData)
  // optional int64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uuid(), target);
  }

  // optional .MsgPB.MsgBuildTowerData tower_data = 2;
  if (has_tower_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tower_data(), target);
  }

  // optional .MsgPB.SYNC_TOWERBUILD_OP op = 3;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgSyncTowerBuildData)
  return target;
}

int MsgSyncTowerBuildData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional .MsgPB.MsgBuildTowerData tower_data = 2;
    if (has_tower_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower_data());
    }

    // optional .MsgPB.SYNC_TOWERBUILD_OP op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSyncTowerBuildData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSyncTowerBuildData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSyncTowerBuildData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSyncTowerBuildData::MergeFrom(const MsgSyncTowerBuildData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_tower_data()) {
      mutable_tower_data()->::MsgPB::MsgBuildTowerData::MergeFrom(from.tower_data());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSyncTowerBuildData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSyncTowerBuildData::CopyFrom(const MsgSyncTowerBuildData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSyncTowerBuildData::IsInitialized() const {

  return true;
}

void MsgSyncTowerBuildData::Swap(MsgSyncTowerBuildData* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(tower_data_, other->tower_data_);
    std::swap(op_, other->op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSyncTowerBuildData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSyncTowerBuildData_descriptor_;
  metadata.reflection = MsgSyncTowerBuildData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlantUserData::kPlantIdFieldNumber;
const int MsgPlantUserData::kPlantTypeFieldNumber;
const int MsgPlantUserData::kPosXFieldNumber;
const int MsgPlantUserData::kPosYFieldNumber;
const int MsgPlantUserData::kGrowStageFieldNumber;
const int MsgPlantUserData::kTemplateidFieldNumber;
const int MsgPlantUserData::kGrowBeginFieldNumber;
const int MsgPlantUserData::kGrowTimeFieldNumber;
#endif  // !_MSC_VER

MsgPlantUserData::MsgPlantUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantUserData)
}

void MsgPlantUserData::InitAsDefaultInstance() {
}

MsgPlantUserData::MsgPlantUserData(const MsgPlantUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantUserData)
}

void MsgPlantUserData::SharedCtor() {
  _cached_size_ = 0;
  plant_id_ = GOOGLE_LONGLONG(0);
  plant_type_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  grow_stage_ = 0;
  templateid_ = 0;
  grow_begin_ = GOOGLE_LONGLONG(0);
  grow_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantUserData::~MsgPlantUserData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantUserData)
  SharedDtor();
}

void MsgPlantUserData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantUserData_descriptor_;
}

const MsgPlantUserData& MsgPlantUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgPlantUserData* MsgPlantUserData::default_instance_ = NULL;

MsgPlantUserData* MsgPlantUserData::New() const {
  return new MsgPlantUserData;
}

void MsgPlantUserData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantUserData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(plant_id_, grow_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 plant_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &plant_id_)));
          set_has_plant_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plant_type;
        break;
      }

      // optional int32 plant_type = 2;
      case 2: {
        if (tag == 16) {
         parse_plant_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plant_type_)));
          set_has_plant_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 3;
      case 3: {
        if (tag == 24) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 4;
      case 4: {
        if (tag == 32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_grow_stage;
        break;
      }

      // optional int32 grow_stage = 5;
      case 5: {
        if (tag == 40) {
         parse_grow_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grow_stage_)));
          set_has_grow_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_templateid;
        break;
      }

      // optional int32 templateid = 6;
      case 6: {
        if (tag == 48) {
         parse_templateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_grow_begin;
        break;
      }

      // optional int64 grow_begin = 7;
      case 7: {
        if (tag == 56) {
         parse_grow_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &grow_begin_)));
          set_has_grow_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_grow_time;
        break;
      }

      // optional int32 grow_time = 8;
      case 8: {
        if (tag == 64) {
         parse_grow_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grow_time_)));
          set_has_grow_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantUserData)
  return false;
#undef DO_
}

void MsgPlantUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantUserData)
  // optional int64 plant_id = 1;
  if (has_plant_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->plant_id(), output);
  }

  // optional int32 plant_type = 2;
  if (has_plant_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plant_type(), output);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_x(), output);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_y(), output);
  }

  // optional int32 grow_stage = 5;
  if (has_grow_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->grow_stage(), output);
  }

  // optional int32 templateid = 6;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->templateid(), output);
  }

  // optional int64 grow_begin = 7;
  if (has_grow_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->grow_begin(), output);
  }

  // optional int32 grow_time = 8;
  if (has_grow_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->grow_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantUserData)
}

::google::protobuf::uint8* MsgPlantUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantUserData)
  // optional int64 plant_id = 1;
  if (has_plant_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->plant_id(), target);
  }

  // optional int32 plant_type = 2;
  if (has_plant_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plant_type(), target);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_x(), target);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_y(), target);
  }

  // optional int32 grow_stage = 5;
  if (has_grow_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->grow_stage(), target);
  }

  // optional int32 templateid = 6;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->templateid(), target);
  }

  // optional int64 grow_begin = 7;
  if (has_grow_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->grow_begin(), target);
  }

  // optional int32 grow_time = 8;
  if (has_grow_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->grow_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantUserData)
  return target;
}

int MsgPlantUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 plant_id = 1;
    if (has_plant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->plant_id());
    }

    // optional int32 plant_type = 2;
    if (has_plant_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plant_type());
    }

    // optional int32 pos_x = 3;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 4;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int32 grow_stage = 5;
    if (has_grow_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grow_stage());
    }

    // optional int32 templateid = 6;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templateid());
    }

    // optional int64 grow_begin = 7;
    if (has_grow_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->grow_begin());
    }

    // optional int32 grow_time = 8;
    if (has_grow_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grow_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantUserData::MergeFrom(const MsgPlantUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plant_id()) {
      set_plant_id(from.plant_id());
    }
    if (from.has_plant_type()) {
      set_plant_type(from.plant_type());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_grow_stage()) {
      set_grow_stage(from.grow_stage());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_grow_begin()) {
      set_grow_begin(from.grow_begin());
    }
    if (from.has_grow_time()) {
      set_grow_time(from.grow_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantUserData::CopyFrom(const MsgPlantUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantUserData::IsInitialized() const {

  return true;
}

void MsgPlantUserData::Swap(MsgPlantUserData* other) {
  if (other != this) {
    std::swap(plant_id_, other->plant_id_);
    std::swap(plant_type_, other->plant_type_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(grow_stage_, other->grow_stage_);
    std::swap(templateid_, other->templateid_);
    std::swap(grow_begin_, other->grow_begin_);
    std::swap(grow_time_, other->grow_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantUserData_descriptor_;
  metadata.reflection = MsgPlantUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSyncPlantUserData::kPlantIdFieldNumber;
const int MsgSyncPlantUserData::kPlantDataFieldNumber;
const int MsgSyncPlantUserData::kOpFieldNumber;
#endif  // !_MSC_VER

MsgSyncPlantUserData::MsgSyncPlantUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgSyncPlantUserData)
}

void MsgSyncPlantUserData::InitAsDefaultInstance() {
  plant_data_ = const_cast< ::MsgPB::MsgPlantUserData*>(&::MsgPB::MsgPlantUserData::default_instance());
}

MsgSyncPlantUserData::MsgSyncPlantUserData(const MsgSyncPlantUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgSyncPlantUserData)
}

void MsgSyncPlantUserData::SharedCtor() {
  _cached_size_ = 0;
  plant_id_ = GOOGLE_LONGLONG(0);
  plant_data_ = NULL;
  op_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSyncPlantUserData::~MsgSyncPlantUserData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgSyncPlantUserData)
  SharedDtor();
}

void MsgSyncPlantUserData::SharedDtor() {
  if (this != default_instance_) {
    delete plant_data_;
  }
}

void MsgSyncPlantUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSyncPlantUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSyncPlantUserData_descriptor_;
}

const MsgSyncPlantUserData& MsgSyncPlantUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgSyncPlantUserData* MsgSyncPlantUserData::default_instance_ = NULL;

MsgSyncPlantUserData* MsgSyncPlantUserData::New() const {
  return new MsgSyncPlantUserData;
}

void MsgSyncPlantUserData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    plant_id_ = GOOGLE_LONGLONG(0);
    if (has_plant_data()) {
      if (plant_data_ != NULL) plant_data_->::MsgPB::MsgPlantUserData::Clear();
    }
    op_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSyncPlantUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgSyncPlantUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 plant_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &plant_id_)));
          set_has_plant_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_plant_data;
        break;
      }

      // optional .MsgPB.MsgPlantUserData plant_data = 2;
      case 2: {
        if (tag == 18) {
         parse_plant_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plant_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_op;
        break;
      }

      // optional .MsgPB.SYNC_PLANT_OP op = 3;
      case 3: {
        if (tag == 24) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::SYNC_PLANT_OP_IsValid(value)) {
            set_op(static_cast< ::MsgPB::SYNC_PLANT_OP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgSyncPlantUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgSyncPlantUserData)
  return false;
#undef DO_
}

void MsgSyncPlantUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgSyncPlantUserData)
  // optional int64 plant_id = 1;
  if (has_plant_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->plant_id(), output);
  }

  // optional .MsgPB.MsgPlantUserData plant_data = 2;
  if (has_plant_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->plant_data(), output);
  }

  // optional .MsgPB.SYNC_PLANT_OP op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgSyncPlantUserData)
}

::google::protobuf::uint8* MsgSyncPlantUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgSyncPlantUserData)
  // optional int64 plant_id = 1;
  if (has_plant_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->plant_id(), target);
  }

  // optional .MsgPB.MsgPlantUserData plant_data = 2;
  if (has_plant_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->plant_data(), target);
  }

  // optional .MsgPB.SYNC_PLANT_OP op = 3;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgSyncPlantUserData)
  return target;
}

int MsgSyncPlantUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 plant_id = 1;
    if (has_plant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->plant_id());
    }

    // optional .MsgPB.MsgPlantUserData plant_data = 2;
    if (has_plant_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plant_data());
    }

    // optional .MsgPB.SYNC_PLANT_OP op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSyncPlantUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSyncPlantUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSyncPlantUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSyncPlantUserData::MergeFrom(const MsgSyncPlantUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plant_id()) {
      set_plant_id(from.plant_id());
    }
    if (from.has_plant_data()) {
      mutable_plant_data()->::MsgPB::MsgPlantUserData::MergeFrom(from.plant_data());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSyncPlantUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSyncPlantUserData::CopyFrom(const MsgSyncPlantUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSyncPlantUserData::IsInitialized() const {

  return true;
}

void MsgSyncPlantUserData::Swap(MsgSyncPlantUserData* other) {
  if (other != this) {
    std::swap(plant_id_, other->plant_id_);
    std::swap(plant_data_, other->plant_data_);
    std::swap(op_, other->op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSyncPlantUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSyncPlantUserData_descriptor_;
  metadata.reflection = MsgSyncPlantUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTriggerProbabilityData::kUuidFieldNumber;
const int MsgTriggerProbabilityData::kProbabilityFieldNumber;
const int MsgTriggerProbabilityData::kNumFieldNumber;
const int MsgTriggerProbabilityData::kDirtyFieldNumber;
#endif  // !_MSC_VER

MsgTriggerProbabilityData::MsgTriggerProbabilityData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTriggerProbabilityData)
}

void MsgTriggerProbabilityData::InitAsDefaultInstance() {
}

MsgTriggerProbabilityData::MsgTriggerProbabilityData(const MsgTriggerProbabilityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTriggerProbabilityData)
}

void MsgTriggerProbabilityData::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  probability_ = 0;
  num_ = 0;
  dirty_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTriggerProbabilityData::~MsgTriggerProbabilityData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTriggerProbabilityData)
  SharedDtor();
}

void MsgTriggerProbabilityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTriggerProbabilityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTriggerProbabilityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTriggerProbabilityData_descriptor_;
}

const MsgTriggerProbabilityData& MsgTriggerProbabilityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgTriggerProbabilityData* MsgTriggerProbabilityData::default_instance_ = NULL;

MsgTriggerProbabilityData* MsgTriggerProbabilityData::New() const {
  return new MsgTriggerProbabilityData;
}

void MsgTriggerProbabilityData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTriggerProbabilityData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uuid_, dirty_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTriggerProbabilityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTriggerProbabilityData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_probability;
        break;
      }

      // optional int32 probability = 2;
      case 2: {
        if (tag == 16) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dirty;
        break;
      }

      // optional int64 dirty = 4;
      case 4: {
        if (tag == 32) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTriggerProbabilityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTriggerProbabilityData)
  return false;
#undef DO_
}

void MsgTriggerProbabilityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTriggerProbabilityData)
  // optional int64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uuid(), output);
  }

  // optional int32 probability = 2;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->probability(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int64 dirty = 4;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dirty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTriggerProbabilityData)
}

::google::protobuf::uint8* MsgTriggerProbabilityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTriggerProbabilityData)
  // optional int64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 probability = 2;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->probability(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int64 dirty = 4;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->dirty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTriggerProbabilityData)
  return target;
}

int MsgTriggerProbabilityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional int32 probability = 2;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->probability());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 dirty = 4;
    if (has_dirty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTriggerProbabilityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTriggerProbabilityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTriggerProbabilityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTriggerProbabilityData::MergeFrom(const MsgTriggerProbabilityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTriggerProbabilityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTriggerProbabilityData::CopyFrom(const MsgTriggerProbabilityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTriggerProbabilityData::IsInitialized() const {

  return true;
}

void MsgTriggerProbabilityData::Swap(MsgTriggerProbabilityData* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(probability_, other->probability_);
    std::swap(num_, other->num_);
    std::swap(dirty_, other->dirty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTriggerProbabilityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTriggerProbabilityData_descriptor_;
  metadata.reflection = MsgTriggerProbabilityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLSSurvivalEventFlagData::kIdxFieldNumber;
const int MsgLSSurvivalEventFlagData::kValueFieldNumber;
#endif  // !_MSC_VER

MsgLSSurvivalEventFlagData::MsgLSSurvivalEventFlagData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgLSSurvivalEventFlagData)
}

void MsgLSSurvivalEventFlagData::InitAsDefaultInstance() {
}

MsgLSSurvivalEventFlagData::MsgLSSurvivalEventFlagData(const MsgLSSurvivalEventFlagData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgLSSurvivalEventFlagData)
}

void MsgLSSurvivalEventFlagData::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLSSurvivalEventFlagData::~MsgLSSurvivalEventFlagData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgLSSurvivalEventFlagData)
  SharedDtor();
}

void MsgLSSurvivalEventFlagData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLSSurvivalEventFlagData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLSSurvivalEventFlagData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLSSurvivalEventFlagData_descriptor_;
}

const MsgLSSurvivalEventFlagData& MsgLSSurvivalEventFlagData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgLSSurvivalEventFlagData* MsgLSSurvivalEventFlagData::default_instance_ = NULL;

MsgLSSurvivalEventFlagData* MsgLSSurvivalEventFlagData::New() const {
  return new MsgLSSurvivalEventFlagData;
}

void MsgLSSurvivalEventFlagData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgLSSurvivalEventFlagData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(idx_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLSSurvivalEventFlagData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgLSSurvivalEventFlagData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgLSSurvivalEventFlagData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgLSSurvivalEventFlagData)
  return false;
#undef DO_
}

void MsgLSSurvivalEventFlagData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgLSSurvivalEventFlagData)
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgLSSurvivalEventFlagData)
}

::google::protobuf::uint8* MsgLSSurvivalEventFlagData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgLSSurvivalEventFlagData)
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgLSSurvivalEventFlagData)
  return target;
}

int MsgLSSurvivalEventFlagData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLSSurvivalEventFlagData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLSSurvivalEventFlagData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLSSurvivalEventFlagData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLSSurvivalEventFlagData::MergeFrom(const MsgLSSurvivalEventFlagData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLSSurvivalEventFlagData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLSSurvivalEventFlagData::CopyFrom(const MsgLSSurvivalEventFlagData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLSSurvivalEventFlagData::IsInitialized() const {

  return true;
}

void MsgLSSurvivalEventFlagData::Swap(MsgLSSurvivalEventFlagData* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLSSurvivalEventFlagData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLSSurvivalEventFlagData_descriptor_;
  metadata.reflection = MsgLSSurvivalEventFlagData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSyncFeedingProductSpeed::kIiFenceUuidFieldNumber;
const int MsgSyncFeedingProductSpeed::kIiAnimalUuidFieldNumber;
const int MsgSyncFeedingProductSpeed::kISpeedProduct1SecFieldNumber;
const int MsgSyncFeedingProductSpeed::kISpeedProduct2SecFieldNumber;
const int MsgSyncFeedingProductSpeed::kISpeedHugSecFieldNumber;
#endif  // !_MSC_VER

MsgSyncFeedingProductSpeed::MsgSyncFeedingProductSpeed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgSyncFeedingProductSpeed)
}

void MsgSyncFeedingProductSpeed::InitAsDefaultInstance() {
}

MsgSyncFeedingProductSpeed::MsgSyncFeedingProductSpeed(const MsgSyncFeedingProductSpeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgSyncFeedingProductSpeed)
}

void MsgSyncFeedingProductSpeed::SharedCtor() {
  _cached_size_ = 0;
  iifenceuuid_ = GOOGLE_LONGLONG(0);
  iianimaluuid_ = GOOGLE_LONGLONG(0);
  ispeedproduct1sec_ = 0;
  ispeedproduct2sec_ = 0;
  ispeedhugsec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSyncFeedingProductSpeed::~MsgSyncFeedingProductSpeed() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgSyncFeedingProductSpeed)
  SharedDtor();
}

void MsgSyncFeedingProductSpeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSyncFeedingProductSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSyncFeedingProductSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSyncFeedingProductSpeed_descriptor_;
}

const MsgSyncFeedingProductSpeed& MsgSyncFeedingProductSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgSyncFeedingProductSpeed* MsgSyncFeedingProductSpeed::default_instance_ = NULL;

MsgSyncFeedingProductSpeed* MsgSyncFeedingProductSpeed::New() const {
  return new MsgSyncFeedingProductSpeed;
}

void MsgSyncFeedingProductSpeed::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSyncFeedingProductSpeed*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(iifenceuuid_, ispeedhugsec_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSyncFeedingProductSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgSyncFeedingProductSpeed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iiFenceUuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iifenceuuid_)));
          set_has_iifenceuuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iiAnimalUuid;
        break;
      }

      // optional int64 iiAnimalUuid = 2;
      case 2: {
        if (tag == 16) {
         parse_iiAnimalUuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iianimaluuid_)));
          set_has_iianimaluuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iSpeedProduct1Sec;
        break;
      }

      // optional int32 iSpeedProduct1Sec = 3;
      case 3: {
        if (tag == 24) {
         parse_iSpeedProduct1Sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ispeedproduct1sec_)));
          set_has_ispeedproduct1sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iSpeedProduct2Sec;
        break;
      }

      // optional int32 iSpeedProduct2Sec = 4;
      case 4: {
        if (tag == 32) {
         parse_iSpeedProduct2Sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ispeedproduct2sec_)));
          set_has_ispeedproduct2sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iSpeedHugSec;
        break;
      }

      // optional int32 iSpeedHugSec = 5;
      case 5: {
        if (tag == 40) {
         parse_iSpeedHugSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ispeedhugsec_)));
          set_has_ispeedhugsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgSyncFeedingProductSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgSyncFeedingProductSpeed)
  return false;
#undef DO_
}

void MsgSyncFeedingProductSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgSyncFeedingProductSpeed)
  // optional int64 iiFenceUuid = 1;
  if (has_iifenceuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iifenceuuid(), output);
  }

  // optional int64 iiAnimalUuid = 2;
  if (has_iianimaluuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iianimaluuid(), output);
  }

  // optional int32 iSpeedProduct1Sec = 3;
  if (has_ispeedproduct1sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ispeedproduct1sec(), output);
  }

  // optional int32 iSpeedProduct2Sec = 4;
  if (has_ispeedproduct2sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ispeedproduct2sec(), output);
  }

  // optional int32 iSpeedHugSec = 5;
  if (has_ispeedhugsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ispeedhugsec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgSyncFeedingProductSpeed)
}

::google::protobuf::uint8* MsgSyncFeedingProductSpeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgSyncFeedingProductSpeed)
  // optional int64 iiFenceUuid = 1;
  if (has_iifenceuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iifenceuuid(), target);
  }

  // optional int64 iiAnimalUuid = 2;
  if (has_iianimaluuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iianimaluuid(), target);
  }

  // optional int32 iSpeedProduct1Sec = 3;
  if (has_ispeedproduct1sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ispeedproduct1sec(), target);
  }

  // optional int32 iSpeedProduct2Sec = 4;
  if (has_ispeedproduct2sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ispeedproduct2sec(), target);
  }

  // optional int32 iSpeedHugSec = 5;
  if (has_ispeedhugsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ispeedhugsec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgSyncFeedingProductSpeed)
  return target;
}

int MsgSyncFeedingProductSpeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iiFenceUuid = 1;
    if (has_iifenceuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iifenceuuid());
    }

    // optional int64 iiAnimalUuid = 2;
    if (has_iianimaluuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iianimaluuid());
    }

    // optional int32 iSpeedProduct1Sec = 3;
    if (has_ispeedproduct1sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ispeedproduct1sec());
    }

    // optional int32 iSpeedProduct2Sec = 4;
    if (has_ispeedproduct2sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ispeedproduct2sec());
    }

    // optional int32 iSpeedHugSec = 5;
    if (has_ispeedhugsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ispeedhugsec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSyncFeedingProductSpeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSyncFeedingProductSpeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSyncFeedingProductSpeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSyncFeedingProductSpeed::MergeFrom(const MsgSyncFeedingProductSpeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iifenceuuid()) {
      set_iifenceuuid(from.iifenceuuid());
    }
    if (from.has_iianimaluuid()) {
      set_iianimaluuid(from.iianimaluuid());
    }
    if (from.has_ispeedproduct1sec()) {
      set_ispeedproduct1sec(from.ispeedproduct1sec());
    }
    if (from.has_ispeedproduct2sec()) {
      set_ispeedproduct2sec(from.ispeedproduct2sec());
    }
    if (from.has_ispeedhugsec()) {
      set_ispeedhugsec(from.ispeedhugsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSyncFeedingProductSpeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSyncFeedingProductSpeed::CopyFrom(const MsgSyncFeedingProductSpeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSyncFeedingProductSpeed::IsInitialized() const {

  return true;
}

void MsgSyncFeedingProductSpeed::Swap(MsgSyncFeedingProductSpeed* other) {
  if (other != this) {
    std::swap(iifenceuuid_, other->iifenceuuid_);
    std::swap(iianimaluuid_, other->iianimaluuid_);
    std::swap(ispeedproduct1sec_, other->ispeedproduct1sec_);
    std::swap(ispeedproduct2sec_, other->ispeedproduct2sec_);
    std::swap(ispeedhugsec_, other->ispeedhugsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSyncFeedingProductSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSyncFeedingProductSpeed_descriptor_;
  metadata.reflection = MsgSyncFeedingProductSpeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReportKillMobRequest::kMsgTypeFieldNumber;
const int MsgReportKillMobRequest::kIggidFieldNumber;
const int MsgReportKillMobRequest::kMobTypeIdFieldNumber;
const int MsgReportKillMobRequest::kMapTypeIdFieldNumber;
const int MsgReportKillMobRequest::kDropLstFieldNumber;
#endif  // !_MSC_VER

MsgReportKillMobRequest::MsgReportKillMobRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgReportKillMobRequest)
}

void MsgReportKillMobRequest::InitAsDefaultInstance() {
}

MsgReportKillMobRequest::MsgReportKillMobRequest(const MsgReportKillMobRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgReportKillMobRequest)
}

void MsgReportKillMobRequest::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1090;
  iggid_ = GOOGLE_LONGLONG(0);
  mob_type_id_ = GOOGLE_LONGLONG(0);
  map_type_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReportKillMobRequest::~MsgReportKillMobRequest() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgReportKillMobRequest)
  SharedDtor();
}

void MsgReportKillMobRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgReportKillMobRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReportKillMobRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReportKillMobRequest_descriptor_;
}

const MsgReportKillMobRequest& MsgReportKillMobRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgReportKillMobRequest* MsgReportKillMobRequest::default_instance_ = NULL;

MsgReportKillMobRequest* MsgReportKillMobRequest::New() const {
  return new MsgReportKillMobRequest;
}

void MsgReportKillMobRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgReportKillMobRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, map_type_id_);
    msgtype_ = 1090;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  drop_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReportKillMobRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgReportKillMobRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REPORT_KILL_MOB];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mob_type_id;
        break;
      }

      // required int64 mob_type_id = 3;
      case 3: {
        if (tag == 24) {
         parse_mob_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mob_type_id_)));
          set_has_mob_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_map_type_id;
        break;
      }

      // required int64 map_type_id = 4;
      case 4: {
        if (tag == 32) {
         parse_map_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &map_type_id_)));
          set_has_map_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_drop_lst;
        break;
      }

      // repeated int64 drop_lst = 5;
      case 5: {
        if (tag == 40) {
         parse_drop_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_drop_lst())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_drop_lst())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_drop_lst;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgReportKillMobRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgReportKillMobRequest)
  return false;
#undef DO_
}

void MsgReportKillMobRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgReportKillMobRequest)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REPORT_KILL_MOB];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // required int64 mob_type_id = 3;
  if (has_mob_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mob_type_id(), output);
  }

  // required int64 map_type_id = 4;
  if (has_map_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->map_type_id(), output);
  }

  // repeated int64 drop_lst = 5;
  for (int i = 0; i < this->drop_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->drop_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgReportKillMobRequest)
}

::google::protobuf::uint8* MsgReportKillMobRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgReportKillMobRequest)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REPORT_KILL_MOB];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // required int64 mob_type_id = 3;
  if (has_mob_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mob_type_id(), target);
  }

  // required int64 map_type_id = 4;
  if (has_map_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->map_type_id(), target);
  }

  // repeated int64 drop_lst = 5;
  for (int i = 0; i < this->drop_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->drop_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgReportKillMobRequest)
  return target;
}

int MsgReportKillMobRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REPORT_KILL_MOB];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // required int64 mob_type_id = 3;
    if (has_mob_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mob_type_id());
    }

    // required int64 map_type_id = 4;
    if (has_map_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->map_type_id());
    }

  }
  // repeated int64 drop_lst = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->drop_lst(i));
    }
    total_size += 1 * this->drop_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReportKillMobRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReportKillMobRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReportKillMobRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReportKillMobRequest::MergeFrom(const MsgReportKillMobRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  drop_lst_.MergeFrom(from.drop_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mob_type_id()) {
      set_mob_type_id(from.mob_type_id());
    }
    if (from.has_map_type_id()) {
      set_map_type_id(from.map_type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReportKillMobRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReportKillMobRequest::CopyFrom(const MsgReportKillMobRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReportKillMobRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void MsgReportKillMobRequest::Swap(MsgReportKillMobRequest* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mob_type_id_, other->mob_type_id_);
    std::swap(map_type_id_, other->map_type_id_);
    drop_lst_.Swap(&other->drop_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReportKillMobRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReportKillMobRequest_descriptor_;
  metadata.reflection = MsgReportKillMobRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSyncClientLocalDataC2S_BlockGrid::kXFieldNumber;
const int MsgSyncClientLocalDataC2S_BlockGrid::kYFieldNumber;
const int MsgSyncClientLocalDataC2S_BlockGrid::kDataFieldNumber;
const int MsgSyncClientLocalDataC2S_BlockGrid::kIsWaterFogFieldNumber;
const int MsgSyncClientLocalDataC2S_BlockGrid::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

MsgSyncClientLocalDataC2S_BlockGrid::MsgSyncClientLocalDataC2S_BlockGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgSyncClientLocalDataC2S.BlockGrid)
}

void MsgSyncClientLocalDataC2S_BlockGrid::InitAsDefaultInstance() {
}

MsgSyncClientLocalDataC2S_BlockGrid::MsgSyncClientLocalDataC2S_BlockGrid(const MsgSyncClientLocalDataC2S_BlockGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgSyncClientLocalDataC2S.BlockGrid)
}

void MsgSyncClientLocalDataC2S_BlockGrid::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  data_ = 0u;
  iswaterfog_ = false;
  debug_info_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSyncClientLocalDataC2S_BlockGrid::~MsgSyncClientLocalDataC2S_BlockGrid() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgSyncClientLocalDataC2S.BlockGrid)
  SharedDtor();
}

void MsgSyncClientLocalDataC2S_BlockGrid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSyncClientLocalDataC2S_BlockGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSyncClientLocalDataC2S_BlockGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSyncClientLocalDataC2S_BlockGrid_descriptor_;
}

const MsgSyncClientLocalDataC2S_BlockGrid& MsgSyncClientLocalDataC2S_BlockGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgSyncClientLocalDataC2S_BlockGrid* MsgSyncClientLocalDataC2S_BlockGrid::default_instance_ = NULL;

MsgSyncClientLocalDataC2S_BlockGrid* MsgSyncClientLocalDataC2S_BlockGrid::New() const {
  return new MsgSyncClientLocalDataC2S_BlockGrid;
}

void MsgSyncClientLocalDataC2S_BlockGrid::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSyncClientLocalDataC2S_BlockGrid*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(x_, debug_info_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSyncClientLocalDataC2S_BlockGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgSyncClientLocalDataC2S.BlockGrid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data;
        break;
      }

      // required uint32 data = 3;
      case 3: {
        if (tag == 24) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_IsWaterFog;
        break;
      }

      // optional bool IsWaterFog = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_IsWaterFog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswaterfog_)));
          set_has_iswaterfog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_debug_info;
        break;
      }

      // optional int32 debug_info = 5;
      case 5: {
        if (tag == 40) {
         parse_debug_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debug_info_)));
          set_has_debug_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgSyncClientLocalDataC2S.BlockGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgSyncClientLocalDataC2S.BlockGrid)
  return false;
#undef DO_
}

void MsgSyncClientLocalDataC2S_BlockGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgSyncClientLocalDataC2S.BlockGrid)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required uint32 data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data(), output);
  }

  // optional bool IsWaterFog = 4 [default = false];
  if (has_iswaterfog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->iswaterfog(), output);
  }

  // optional int32 debug_info = 5;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->debug_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgSyncClientLocalDataC2S.BlockGrid)
}

::google::protobuf::uint8* MsgSyncClientLocalDataC2S_BlockGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgSyncClientLocalDataC2S.BlockGrid)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required uint32 data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data(), target);
  }

  // optional bool IsWaterFog = 4 [default = false];
  if (has_iswaterfog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->iswaterfog(), target);
  }

  // optional int32 debug_info = 5;
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->debug_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgSyncClientLocalDataC2S.BlockGrid)
  return target;
}

int MsgSyncClientLocalDataC2S_BlockGrid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required uint32 data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data());
    }

    // optional bool IsWaterFog = 4 [default = false];
    if (has_iswaterfog()) {
      total_size += 1 + 1;
    }

    // optional int32 debug_info = 5;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debug_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSyncClientLocalDataC2S_BlockGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSyncClientLocalDataC2S_BlockGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSyncClientLocalDataC2S_BlockGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSyncClientLocalDataC2S_BlockGrid::MergeFrom(const MsgSyncClientLocalDataC2S_BlockGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_iswaterfog()) {
      set_iswaterfog(from.iswaterfog());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSyncClientLocalDataC2S_BlockGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSyncClientLocalDataC2S_BlockGrid::CopyFrom(const MsgSyncClientLocalDataC2S_BlockGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSyncClientLocalDataC2S_BlockGrid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgSyncClientLocalDataC2S_BlockGrid::Swap(MsgSyncClientLocalDataC2S_BlockGrid* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(data_, other->data_);
    std::swap(iswaterfog_, other->iswaterfog_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSyncClientLocalDataC2S_BlockGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSyncClientLocalDataC2S_BlockGrid_descriptor_;
  metadata.reflection = MsgSyncClientLocalDataC2S_BlockGrid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgSyncClientLocalDataC2S_MobKillCount::kDataidFieldNumber;
const int MsgSyncClientLocalDataC2S_MobKillCount::kCountFieldNumber;
#endif  // !_MSC_VER

MsgSyncClientLocalDataC2S_MobKillCount::MsgSyncClientLocalDataC2S_MobKillCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgSyncClientLocalDataC2S.MobKillCount)
}

void MsgSyncClientLocalDataC2S_MobKillCount::InitAsDefaultInstance() {
}

MsgSyncClientLocalDataC2S_MobKillCount::MsgSyncClientLocalDataC2S_MobKillCount(const MsgSyncClientLocalDataC2S_MobKillCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgSyncClientLocalDataC2S.MobKillCount)
}

void MsgSyncClientLocalDataC2S_MobKillCount::SharedCtor() {
  _cached_size_ = 0;
  dataid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSyncClientLocalDataC2S_MobKillCount::~MsgSyncClientLocalDataC2S_MobKillCount() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgSyncClientLocalDataC2S.MobKillCount)
  SharedDtor();
}

void MsgSyncClientLocalDataC2S_MobKillCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSyncClientLocalDataC2S_MobKillCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSyncClientLocalDataC2S_MobKillCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSyncClientLocalDataC2S_MobKillCount_descriptor_;
}

const MsgSyncClientLocalDataC2S_MobKillCount& MsgSyncClientLocalDataC2S_MobKillCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgSyncClientLocalDataC2S_MobKillCount* MsgSyncClientLocalDataC2S_MobKillCount::default_instance_ = NULL;

MsgSyncClientLocalDataC2S_MobKillCount* MsgSyncClientLocalDataC2S_MobKillCount::New() const {
  return new MsgSyncClientLocalDataC2S_MobKillCount;
}

void MsgSyncClientLocalDataC2S_MobKillCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSyncClientLocalDataC2S_MobKillCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dataid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSyncClientLocalDataC2S_MobKillCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgSyncClientLocalDataC2S.MobKillCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dataid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgSyncClientLocalDataC2S.MobKillCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgSyncClientLocalDataC2S.MobKillCount)
  return false;
#undef DO_
}

void MsgSyncClientLocalDataC2S_MobKillCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgSyncClientLocalDataC2S.MobKillCount)
  // required int32 dataid = 1;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dataid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgSyncClientLocalDataC2S.MobKillCount)
}

::google::protobuf::uint8* MsgSyncClientLocalDataC2S_MobKillCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgSyncClientLocalDataC2S.MobKillCount)
  // required int32 dataid = 1;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dataid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgSyncClientLocalDataC2S.MobKillCount)
  return target;
}

int MsgSyncClientLocalDataC2S_MobKillCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dataid = 1;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataid());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSyncClientLocalDataC2S_MobKillCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSyncClientLocalDataC2S_MobKillCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSyncClientLocalDataC2S_MobKillCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSyncClientLocalDataC2S_MobKillCount::MergeFrom(const MsgSyncClientLocalDataC2S_MobKillCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSyncClientLocalDataC2S_MobKillCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSyncClientLocalDataC2S_MobKillCount::CopyFrom(const MsgSyncClientLocalDataC2S_MobKillCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSyncClientLocalDataC2S_MobKillCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgSyncClientLocalDataC2S_MobKillCount::Swap(MsgSyncClientLocalDataC2S_MobKillCount* other) {
  if (other != this) {
    std::swap(dataid_, other->dataid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSyncClientLocalDataC2S_MobKillCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSyncClientLocalDataC2S_MobKillCount_descriptor_;
  metadata.reflection = MsgSyncClientLocalDataC2S_MobKillCount_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgSyncClientLocalDataC2S::kMsgTypeFieldNumber;
const int MsgSyncClientLocalDataC2S::kIggidFieldNumber;
const int MsgSyncClientLocalDataC2S::kFlagFieldNumber;
const int MsgSyncClientLocalDataC2S::kSerialFieldNumber;
const int MsgSyncClientLocalDataC2S::kSessionIDFieldNumber;
const int MsgSyncClientLocalDataC2S::kDebugStringFieldNumber;
const int MsgSyncClientLocalDataC2S::kTimeStampFieldNumber;
const int MsgSyncClientLocalDataC2S::kLevelFieldNumber;
const int MsgSyncClientLocalDataC2S::kExpFieldNumber;
const int MsgSyncClientLocalDataC2S::kCoinFieldNumber;
const int MsgSyncClientLocalDataC2S::kHpFieldNumber;
const int MsgSyncClientLocalDataC2S::kMpFieldNumber;
const int MsgSyncClientLocalDataC2S::kOxyFieldNumber;
const int MsgSyncClientLocalDataC2S::kFoodFieldNumber;
const int MsgSyncClientLocalDataC2S::kPosXFieldNumber;
const int MsgSyncClientLocalDataC2S::kPosYFieldNumber;
const int MsgSyncClientLocalDataC2S::kWeaponUUIDFieldNumber;
const int MsgSyncClientLocalDataC2S::kToolUUIDFieldNumber;
const int MsgSyncClientLocalDataC2S::kFoodCountFieldNumber;
const int MsgSyncClientLocalDataC2S::kMapCacheDataFieldNumber;
const int MsgSyncClientLocalDataC2S::kDigMineExpCountFieldNumber;
const int MsgSyncClientLocalDataC2S::kDigPlantExpCountFieldNumber;
const int MsgSyncClientLocalDataC2S::kMapIDFieldNumber;
const int MsgSyncClientLocalDataC2S::kBlockGridsFieldNumber;
const int MsgSyncClientLocalDataC2S::kItemsFieldNumber;
const int MsgSyncClientLocalDataC2S::kProtectorsFieldNumber;
const int MsgSyncClientLocalDataC2S::kMobkillcountsFieldNumber;
const int MsgSyncClientLocalDataC2S::kAchievedataFieldNumber;
const int MsgSyncClientLocalDataC2S::kTowerbuildDataFieldNumber;
const int MsgSyncClientLocalDataC2S::kPlantDataFieldNumber;
const int MsgSyncClientLocalDataC2S::kTriggerProbabilityDataFieldNumber;
const int MsgSyncClientLocalDataC2S::kSurvivalEventFlagDataFieldNumber;
const int MsgSyncClientLocalDataC2S::kSurvivalTrigCountFieldNumber;
const int MsgSyncClientLocalDataC2S::kNpcDakDataFieldNumber;
const int MsgSyncClientLocalDataC2S::kBuffDataFieldNumber;
const int MsgSyncClientLocalDataC2S::kTaskDataFieldNumber;
#endif  // !_MSC_VER

MsgSyncClientLocalDataC2S::MsgSyncClientLocalDataC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgSyncClientLocalDataC2S)
}

void MsgSyncClientLocalDataC2S::InitAsDefaultInstance() {
}

MsgSyncClientLocalDataC2S::MsgSyncClientLocalDataC2S(const MsgSyncClientLocalDataC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgSyncClientLocalDataC2S)
}

void MsgSyncClientLocalDataC2S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1098;
  iggid_ = GOOGLE_LONGLONG(0);
  flag_ = 0;
  serial_ = GOOGLE_LONGLONG(0);
  sessionid_ = GOOGLE_LONGLONG(0);
  debug_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  coin_ = 0;
  hp_ = 0;
  mp_ = 0;
  oxy_ = 0;
  food_ = 0;
  posx_ = 0;
  posy_ = 0;
  weaponuuid_ = GOOGLE_LONGLONG(0);
  tooluuid_ = GOOGLE_LONGLONG(0);
  food_count_ = 0;
  map_cache_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dig_mine_exp_count_ = 0;
  dig_plant_exp_count_ = 0;
  mapid_ = 0;
  survivaltrigcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSyncClientLocalDataC2S::~MsgSyncClientLocalDataC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgSyncClientLocalDataC2S)
  SharedDtor();
}

void MsgSyncClientLocalDataC2S::SharedDtor() {
  if (debug_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete debug_string_;
  }
  if (map_cache_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_cache_data_;
  }
  if (this != default_instance_) {
  }
}

void MsgSyncClientLocalDataC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSyncClientLocalDataC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSyncClientLocalDataC2S_descriptor_;
}

const MsgSyncClientLocalDataC2S& MsgSyncClientLocalDataC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgSyncClientLocalDataC2S* MsgSyncClientLocalDataC2S::default_instance_ = NULL;

MsgSyncClientLocalDataC2S* MsgSyncClientLocalDataC2S::New() const {
  return new MsgSyncClientLocalDataC2S;
}

void MsgSyncClientLocalDataC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSyncClientLocalDataC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(flag_, sessionid_);
    msgtype_ = 1098;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_debug_string()) {
      if (debug_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        debug_string_->clear();
      }
    }
    time_stamp_ = GOOGLE_LONGLONG(0);
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(coin_, posy_);
    exp_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(weaponuuid_, tooluuid_);
    ZR_(food_count_, mapid_);
    if (has_map_cache_data()) {
      if (map_cache_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        map_cache_data_->clear();
      }
    }
  }
  survivaltrigcount_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  blockgrids_.Clear();
  items_.Clear();
  protectors_.Clear();
  mobkillcounts_.Clear();
  achievedata_.Clear();
  towerbuild_data_.Clear();
  plant_data_.Clear();
  trigger_probability_data_.Clear();
  survival_event_flag_data_.Clear();
  npc_dak_data_.Clear();
  buff_data_.Clear();
  task_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSyncClientLocalDataC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgSyncClientLocalDataC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_CLIENT_LOCALDATA_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional .MsgPB.SYNC_CLIENT_LOCAL_DATA_FLAG flag = 3;
      case 3: {
        if (tag == 24) {
         parse_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::SYNC_CLIENT_LOCAL_DATA_FLAG_IsValid(value)) {
            set_flag(static_cast< ::MsgPB::SYNC_CLIENT_LOCAL_DATA_FLAG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_serial;
        break;
      }

      // required int64 serial = 4;
      case 4: {
        if (tag == 32) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sessionID;
        break;
      }

      // required int64 sessionID = 5;
      case 5: {
        if (tag == 40) {
         parse_sessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_debug_string;
        break;
      }

      // optional string debug_string = 6;
      case 6: {
        if (tag == 50) {
         parse_debug_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_string().data(), this->debug_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "debug_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time_stamp;
        break;
      }

      // optional int64 time_stamp = 7;
      case 7: {
        if (tag == 56) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional int32 level = 8;
      case 8: {
        if (tag == 64) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // optional int64 exp = 9;
      case 9: {
        if (tag == 72) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_coin;
        break;
      }

      // optional int32 coin = 10;
      case 10: {
        if (tag == 80) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_hp;
        break;
      }

      // optional int32 hp = 12;
      case 12: {
        if (tag == 96) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mp;
        break;
      }

      // optional int32 mp = 13;
      case 13: {
        if (tag == 104) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_oxy;
        break;
      }

      // optional int32 oxy = 14;
      case 14: {
        if (tag == 112) {
         parse_oxy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oxy_)));
          set_has_oxy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_food;
        break;
      }

      // optional int32 food = 15;
      case 15: {
        if (tag == 120) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_posX;
        break;
      }

      // optional int32 posX = 16;
      case 16: {
        if (tag == 128) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_posY;
        break;
      }

      // optional int32 posY = 17;
      case 17: {
        if (tag == 136) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_weaponUUID;
        break;
      }

      // optional int64 weaponUUID = 18;
      case 18: {
        if (tag == 144) {
         parse_weaponUUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weaponuuid_)));
          set_has_weaponuuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_toolUUID;
        break;
      }

      // optional int64 toolUUID = 19;
      case 19: {
        if (tag == 152) {
         parse_toolUUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tooluuid_)));
          set_has_tooluuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_food_count;
        break;
      }

      // optional int32 food_count = 20;
      case 20: {
        if (tag == 160) {
         parse_food_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &food_count_)));
          set_has_food_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_map_cache_data;
        break;
      }

      // optional bytes map_cache_data = 21;
      case 21: {
        if (tag == 170) {
         parse_map_cache_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_cache_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_dig_mine_exp_count;
        break;
      }

      // optional int32 dig_mine_exp_count = 22;
      case 22: {
        if (tag == 176) {
         parse_dig_mine_exp_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dig_mine_exp_count_)));
          set_has_dig_mine_exp_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_dig_plant_exp_count;
        break;
      }

      // optional int32 dig_plant_exp_count = 23;
      case 23: {
        if (tag == 184) {
         parse_dig_plant_exp_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dig_plant_exp_count_)));
          set_has_dig_plant_exp_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800)) goto parse_mapID;
        break;
      }

      // required int32 mapID = 100;
      case 100: {
        if (tag == 800) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_blockGrids;
        break;
      }

      // repeated .MsgPB.MsgSyncClientLocalDataC2S.BlockGrid blockGrids = 101;
      case 101: {
        if (tag == 810) {
         parse_blockGrids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blockgrids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_blockGrids;
        if (input->ExpectTag(818)) goto parse_items;
        break;
      }

      // repeated .MsgPB.MsgItemCommonData items = 102;
      case 102: {
        if (tag == 818) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_items;
        if (input->ExpectTag(826)) goto parse_protectors;
        break;
      }

      // repeated .MsgPB.MsgProtectorData protectors = 103;
      case 103: {
        if (tag == 826) {
         parse_protectors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_protectors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_protectors;
        if (input->ExpectTag(834)) goto parse_mobkillcounts;
        break;
      }

      // repeated .MsgPB.MsgSyncClientLocalDataC2S.MobKillCount mobkillcounts = 104;
      case 104: {
        if (tag == 834) {
         parse_mobkillcounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mobkillcounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_mobkillcounts;
        if (input->ExpectTag(842)) goto parse_achievedata;
        break;
      }

      // repeated .MsgPB.MsgAchieveData achievedata = 105;
      case 105: {
        if (tag == 842) {
         parse_achievedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_achievedata;
        if (input->ExpectTag(850)) goto parse_towerbuild_data;
        break;
      }

      // repeated .MsgPB.MsgSyncTowerBuildData towerbuild_data = 106;
      case 106: {
        if (tag == 850) {
         parse_towerbuild_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_towerbuild_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(850)) goto parse_towerbuild_data;
        if (input->ExpectTag(858)) goto parse_plant_data;
        break;
      }

      // repeated .MsgPB.MsgSyncPlantUserData plant_data = 107;
      case 107: {
        if (tag == 858) {
         parse_plant_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plant_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(858)) goto parse_plant_data;
        if (input->ExpectTag(866)) goto parse_trigger_probability_data;
        break;
      }

      // repeated .MsgPB.MsgTriggerProbabilityData trigger_probability_data = 108;
      case 108: {
        if (tag == 866) {
         parse_trigger_probability_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trigger_probability_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(866)) goto parse_trigger_probability_data;
        if (input->ExpectTag(874)) goto parse_survival_event_flag_data;
        break;
      }

      // repeated .MsgPB.MsgLSSurvivalEventFlagData survival_event_flag_data = 109;
      case 109: {
        if (tag == 874) {
         parse_survival_event_flag_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_survival_event_flag_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(874)) goto parse_survival_event_flag_data;
        if (input->ExpectTag(904)) goto parse_survivalTrigCount;
        break;
      }

      // optional int32 survivalTrigCount = 113;
      case 113: {
        if (tag == 904) {
         parse_survivalTrigCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &survivaltrigcount_)));
          set_has_survivaltrigcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(922)) goto parse_npc_dak_data;
        break;
      }

      // repeated .MsgPB.MsgNpcDakData npc_dak_data = 115;
      case 115: {
        if (tag == 922) {
         parse_npc_dak_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npc_dak_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(922)) goto parse_npc_dak_data;
        if (input->ExpectTag(930)) goto parse_buff_data;
        break;
      }

      // repeated .MsgPB.MsgUserBuffData buff_data = 116;
      case 116: {
        if (tag == 930) {
         parse_buff_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(930)) goto parse_buff_data;
        if (input->ExpectTag(938)) goto parse_task_data;
        break;
      }

      // repeated .MsgPB.MsgTaskData task_data = 117;
      case 117: {
        if (tag == 938) {
         parse_task_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(938)) goto parse_task_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgSyncClientLocalDataC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgSyncClientLocalDataC2S)
  return false;
#undef DO_
}

void MsgSyncClientLocalDataC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgSyncClientLocalDataC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_CLIENT_LOCALDATA_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.SYNC_CLIENT_LOCAL_DATA_FLAG flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->flag(), output);
  }

  // required int64 serial = 4;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->serial(), output);
  }

  // required int64 sessionID = 5;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sessionid(), output);
  }

  // optional string debug_string = 6;
  if (has_debug_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_string().data(), this->debug_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "debug_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->debug_string(), output);
  }

  // optional int64 time_stamp = 7;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->time_stamp(), output);
  }

  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }

  // optional int64 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->exp(), output);
  }

  // optional int32 coin = 10;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->coin(), output);
  }

  // optional int32 hp = 12;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->hp(), output);
  }

  // optional int32 mp = 13;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mp(), output);
  }

  // optional int32 oxy = 14;
  if (has_oxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->oxy(), output);
  }

  // optional int32 food = 15;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->food(), output);
  }

  // optional int32 posX = 16;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->posx(), output);
  }

  // optional int32 posY = 17;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->posy(), output);
  }

  // optional int64 weaponUUID = 18;
  if (has_weaponuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->weaponuuid(), output);
  }

  // optional int64 toolUUID = 19;
  if (has_tooluuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->tooluuid(), output);
  }

  // optional int32 food_count = 20;
  if (has_food_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->food_count(), output);
  }

  // optional bytes map_cache_data = 21;
  if (has_map_cache_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->map_cache_data(), output);
  }

  // optional int32 dig_mine_exp_count = 22;
  if (has_dig_mine_exp_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->dig_mine_exp_count(), output);
  }

  // optional int32 dig_plant_exp_count = 23;
  if (has_dig_plant_exp_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->dig_plant_exp_count(), output);
  }

  // required int32 mapID = 100;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->mapid(), output);
  }

  // repeated .MsgPB.MsgSyncClientLocalDataC2S.BlockGrid blockGrids = 101;
  for (int i = 0; i < this->blockgrids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->blockgrids(i), output);
  }

  // repeated .MsgPB.MsgItemCommonData items = 102;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->items(i), output);
  }

  // repeated .MsgPB.MsgProtectorData protectors = 103;
  for (int i = 0; i < this->protectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->protectors(i), output);
  }

  // repeated .MsgPB.MsgSyncClientLocalDataC2S.MobKillCount mobkillcounts = 104;
  for (int i = 0; i < this->mobkillcounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->mobkillcounts(i), output);
  }

  // repeated .MsgPB.MsgAchieveData achievedata = 105;
  for (int i = 0; i < this->achievedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->achievedata(i), output);
  }

  // repeated .MsgPB.MsgSyncTowerBuildData towerbuild_data = 106;
  for (int i = 0; i < this->towerbuild_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->towerbuild_data(i), output);
  }

  // repeated .MsgPB.MsgSyncPlantUserData plant_data = 107;
  for (int i = 0; i < this->plant_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->plant_data(i), output);
  }

  // repeated .MsgPB.MsgTriggerProbabilityData trigger_probability_data = 108;
  for (int i = 0; i < this->trigger_probability_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->trigger_probability_data(i), output);
  }

  // repeated .MsgPB.MsgLSSurvivalEventFlagData survival_event_flag_data = 109;
  for (int i = 0; i < this->survival_event_flag_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, this->survival_event_flag_data(i), output);
  }

  // optional int32 survivalTrigCount = 113;
  if (has_survivaltrigcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(113, this->survivaltrigcount(), output);
  }

  // repeated .MsgPB.MsgNpcDakData npc_dak_data = 115;
  for (int i = 0; i < this->npc_dak_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      115, this->npc_dak_data(i), output);
  }

  // repeated .MsgPB.MsgUserBuffData buff_data = 116;
  for (int i = 0; i < this->buff_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, this->buff_data(i), output);
  }

  // repeated .MsgPB.MsgTaskData task_data = 117;
  for (int i = 0; i < this->task_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, this->task_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgSyncClientLocalDataC2S)
}

::google::protobuf::uint8* MsgSyncClientLocalDataC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgSyncClientLocalDataC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_CLIENT_LOCALDATA_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.SYNC_CLIENT_LOCAL_DATA_FLAG flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->flag(), target);
  }

  // required int64 serial = 4;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->serial(), target);
  }

  // required int64 sessionID = 5;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sessionid(), target);
  }

  // optional string debug_string = 6;
  if (has_debug_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_string().data(), this->debug_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "debug_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->debug_string(), target);
  }

  // optional int64 time_stamp = 7;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->time_stamp(), target);
  }

  // optional int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }

  // optional int64 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->exp(), target);
  }

  // optional int32 coin = 10;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->coin(), target);
  }

  // optional int32 hp = 12;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->hp(), target);
  }

  // optional int32 mp = 13;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mp(), target);
  }

  // optional int32 oxy = 14;
  if (has_oxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->oxy(), target);
  }

  // optional int32 food = 15;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->food(), target);
  }

  // optional int32 posX = 16;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->posx(), target);
  }

  // optional int32 posY = 17;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->posy(), target);
  }

  // optional int64 weaponUUID = 18;
  if (has_weaponuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->weaponuuid(), target);
  }

  // optional int64 toolUUID = 19;
  if (has_tooluuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->tooluuid(), target);
  }

  // optional int32 food_count = 20;
  if (has_food_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->food_count(), target);
  }

  // optional bytes map_cache_data = 21;
  if (has_map_cache_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->map_cache_data(), target);
  }

  // optional int32 dig_mine_exp_count = 22;
  if (has_dig_mine_exp_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->dig_mine_exp_count(), target);
  }

  // optional int32 dig_plant_exp_count = 23;
  if (has_dig_plant_exp_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->dig_plant_exp_count(), target);
  }

  // required int32 mapID = 100;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->mapid(), target);
  }

  // repeated .MsgPB.MsgSyncClientLocalDataC2S.BlockGrid blockGrids = 101;
  for (int i = 0; i < this->blockgrids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->blockgrids(i), target);
  }

  // repeated .MsgPB.MsgItemCommonData items = 102;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->items(i), target);
  }

  // repeated .MsgPB.MsgProtectorData protectors = 103;
  for (int i = 0; i < this->protectors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->protectors(i), target);
  }

  // repeated .MsgPB.MsgSyncClientLocalDataC2S.MobKillCount mobkillcounts = 104;
  for (int i = 0; i < this->mobkillcounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->mobkillcounts(i), target);
  }

  // repeated .MsgPB.MsgAchieveData achievedata = 105;
  for (int i = 0; i < this->achievedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->achievedata(i), target);
  }

  // repeated .MsgPB.MsgSyncTowerBuildData towerbuild_data = 106;
  for (int i = 0; i < this->towerbuild_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->towerbuild_data(i), target);
  }

  // repeated .MsgPB.MsgSyncPlantUserData plant_data = 107;
  for (int i = 0; i < this->plant_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->plant_data(i), target);
  }

  // repeated .MsgPB.MsgTriggerProbabilityData trigger_probability_data = 108;
  for (int i = 0; i < this->trigger_probability_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->trigger_probability_data(i), target);
  }

  // repeated .MsgPB.MsgLSSurvivalEventFlagData survival_event_flag_data = 109;
  for (int i = 0; i < this->survival_event_flag_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, this->survival_event_flag_data(i), target);
  }

  // optional int32 survivalTrigCount = 113;
  if (has_survivaltrigcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(113, this->survivaltrigcount(), target);
  }

  // repeated .MsgPB.MsgNpcDakData npc_dak_data = 115;
  for (int i = 0; i < this->npc_dak_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        115, this->npc_dak_data(i), target);
  }

  // repeated .MsgPB.MsgUserBuffData buff_data = 116;
  for (int i = 0; i < this->buff_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        116, this->buff_data(i), target);
  }

  // repeated .MsgPB.MsgTaskData task_data = 117;
  for (int i = 0; i < this->task_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        117, this->task_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgSyncClientLocalDataC2S)
  return target;
}

int MsgSyncClientLocalDataC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_CLIENT_LOCALDATA_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.SYNC_CLIENT_LOCAL_DATA_FLAG flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

    // required int64 serial = 4;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serial());
    }

    // required int64 sessionID = 5;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }

    // optional string debug_string = 6;
    if (has_debug_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_string());
    }

    // optional int64 time_stamp = 7;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 coin = 10;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // optional int32 hp = 12;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 13;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional int32 oxy = 14;
    if (has_oxy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oxy());
    }

    // optional int32 food = 15;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->food());
    }

    // optional int32 posX = 16;
    if (has_posx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posY = 17;
    if (has_posy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 weaponUUID = 18;
    if (has_weaponuuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->weaponuuid());
    }

    // optional int64 toolUUID = 19;
    if (has_tooluuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tooluuid());
    }

    // optional int32 food_count = 20;
    if (has_food_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->food_count());
    }

    // optional bytes map_cache_data = 21;
    if (has_map_cache_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_cache_data());
    }

    // optional int32 dig_mine_exp_count = 22;
    if (has_dig_mine_exp_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dig_mine_exp_count());
    }

    // optional int32 dig_plant_exp_count = 23;
    if (has_dig_plant_exp_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dig_plant_exp_count());
    }

    // required int32 mapID = 100;
    if (has_mapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 survivalTrigCount = 113;
    if (has_survivaltrigcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->survivaltrigcount());
    }

  }
  // repeated .MsgPB.MsgSyncClientLocalDataC2S.BlockGrid blockGrids = 101;
  total_size += 2 * this->blockgrids_size();
  for (int i = 0; i < this->blockgrids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blockgrids(i));
  }

  // repeated .MsgPB.MsgItemCommonData items = 102;
  total_size += 2 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .MsgPB.MsgProtectorData protectors = 103;
  total_size += 2 * this->protectors_size();
  for (int i = 0; i < this->protectors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->protectors(i));
  }

  // repeated .MsgPB.MsgSyncClientLocalDataC2S.MobKillCount mobkillcounts = 104;
  total_size += 2 * this->mobkillcounts_size();
  for (int i = 0; i < this->mobkillcounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mobkillcounts(i));
  }

  // repeated .MsgPB.MsgAchieveData achievedata = 105;
  total_size += 2 * this->achievedata_size();
  for (int i = 0; i < this->achievedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievedata(i));
  }

  // repeated .MsgPB.MsgSyncTowerBuildData towerbuild_data = 106;
  total_size += 2 * this->towerbuild_data_size();
  for (int i = 0; i < this->towerbuild_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->towerbuild_data(i));
  }

  // repeated .MsgPB.MsgSyncPlantUserData plant_data = 107;
  total_size += 2 * this->plant_data_size();
  for (int i = 0; i < this->plant_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plant_data(i));
  }

  // repeated .MsgPB.MsgTriggerProbabilityData trigger_probability_data = 108;
  total_size += 2 * this->trigger_probability_data_size();
  for (int i = 0; i < this->trigger_probability_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trigger_probability_data(i));
  }

  // repeated .MsgPB.MsgLSSurvivalEventFlagData survival_event_flag_data = 109;
  total_size += 2 * this->survival_event_flag_data_size();
  for (int i = 0; i < this->survival_event_flag_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->survival_event_flag_data(i));
  }

  // repeated .MsgPB.MsgNpcDakData npc_dak_data = 115;
  total_size += 2 * this->npc_dak_data_size();
  for (int i = 0; i < this->npc_dak_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npc_dak_data(i));
  }

  // repeated .MsgPB.MsgUserBuffData buff_data = 116;
  total_size += 2 * this->buff_data_size();
  for (int i = 0; i < this->buff_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_data(i));
  }

  // repeated .MsgPB.MsgTaskData task_data = 117;
  total_size += 2 * this->task_data_size();
  for (int i = 0; i < this->task_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSyncClientLocalDataC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSyncClientLocalDataC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSyncClientLocalDataC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSyncClientLocalDataC2S::MergeFrom(const MsgSyncClientLocalDataC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  blockgrids_.MergeFrom(from.blockgrids_);
  items_.MergeFrom(from.items_);
  protectors_.MergeFrom(from.protectors_);
  mobkillcounts_.MergeFrom(from.mobkillcounts_);
  achievedata_.MergeFrom(from.achievedata_);
  towerbuild_data_.MergeFrom(from.towerbuild_data_);
  plant_data_.MergeFrom(from.plant_data_);
  trigger_probability_data_.MergeFrom(from.trigger_probability_data_);
  survival_event_flag_data_.MergeFrom(from.survival_event_flag_data_);
  npc_dak_data_.MergeFrom(from.npc_dak_data_);
  buff_data_.MergeFrom(from.buff_data_);
  task_data_.MergeFrom(from.task_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_debug_string()) {
      set_debug_string(from.debug_string());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_oxy()) {
      set_oxy(from.oxy());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_weaponuuid()) {
      set_weaponuuid(from.weaponuuid());
    }
    if (from.has_tooluuid()) {
      set_tooluuid(from.tooluuid());
    }
    if (from.has_food_count()) {
      set_food_count(from.food_count());
    }
    if (from.has_map_cache_data()) {
      set_map_cache_data(from.map_cache_data());
    }
    if (from.has_dig_mine_exp_count()) {
      set_dig_mine_exp_count(from.dig_mine_exp_count());
    }
    if (from.has_dig_plant_exp_count()) {
      set_dig_plant_exp_count(from.dig_plant_exp_count());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_survivaltrigcount()) {
      set_survivaltrigcount(from.survivaltrigcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSyncClientLocalDataC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSyncClientLocalDataC2S::CopyFrom(const MsgSyncClientLocalDataC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSyncClientLocalDataC2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00400018) != 0x00400018) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->blockgrids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->mobkillcounts())) return false;
  return true;
}

void MsgSyncClientLocalDataC2S::Swap(MsgSyncClientLocalDataC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(flag_, other->flag_);
    std::swap(serial_, other->serial_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(debug_string_, other->debug_string_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(oxy_, other->oxy_);
    std::swap(food_, other->food_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(weaponuuid_, other->weaponuuid_);
    std::swap(tooluuid_, other->tooluuid_);
    std::swap(food_count_, other->food_count_);
    std::swap(map_cache_data_, other->map_cache_data_);
    std::swap(dig_mine_exp_count_, other->dig_mine_exp_count_);
    std::swap(dig_plant_exp_count_, other->dig_plant_exp_count_);
    std::swap(mapid_, other->mapid_);
    blockgrids_.Swap(&other->blockgrids_);
    items_.Swap(&other->items_);
    protectors_.Swap(&other->protectors_);
    mobkillcounts_.Swap(&other->mobkillcounts_);
    achievedata_.Swap(&other->achievedata_);
    towerbuild_data_.Swap(&other->towerbuild_data_);
    plant_data_.Swap(&other->plant_data_);
    trigger_probability_data_.Swap(&other->trigger_probability_data_);
    survival_event_flag_data_.Swap(&other->survival_event_flag_data_);
    std::swap(survivaltrigcount_, other->survivaltrigcount_);
    npc_dak_data_.Swap(&other->npc_dak_data_);
    buff_data_.Swap(&other->buff_data_);
    task_data_.Swap(&other->task_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSyncClientLocalDataC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSyncClientLocalDataC2S_descriptor_;
  metadata.reflection = MsgSyncClientLocalDataC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSyncClientLocalDataS2C::kMsgTypeFieldNumber;
const int MsgSyncClientLocalDataS2C::kIggidFieldNumber;
const int MsgSyncClientLocalDataS2C::kResFieldNumber;
const int MsgSyncClientLocalDataS2C::kSerailFieldNumber;
const int MsgSyncClientLocalDataS2C::kSessionIDFieldNumber;
const int MsgSyncClientLocalDataS2C::kFlagFieldNumber;
#endif  // !_MSC_VER

MsgSyncClientLocalDataS2C::MsgSyncClientLocalDataS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgSyncClientLocalDataS2C)
}

void MsgSyncClientLocalDataS2C::InitAsDefaultInstance() {
}

MsgSyncClientLocalDataS2C::MsgSyncClientLocalDataS2C(const MsgSyncClientLocalDataS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgSyncClientLocalDataS2C)
}

void MsgSyncClientLocalDataS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1099;
  iggid_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  serail_ = GOOGLE_LONGLONG(0);
  sessionid_ = GOOGLE_LONGLONG(0);
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSyncClientLocalDataS2C::~MsgSyncClientLocalDataS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgSyncClientLocalDataS2C)
  SharedDtor();
}

void MsgSyncClientLocalDataS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSyncClientLocalDataS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSyncClientLocalDataS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSyncClientLocalDataS2C_descriptor_;
}

const MsgSyncClientLocalDataS2C& MsgSyncClientLocalDataS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgSyncClientLocalDataS2C* MsgSyncClientLocalDataS2C::default_instance_ = NULL;

MsgSyncClientLocalDataS2C* MsgSyncClientLocalDataS2C::New() const {
  return new MsgSyncClientLocalDataS2C;
}

void MsgSyncClientLocalDataS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSyncClientLocalDataS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(res_, flag_);
    msgtype_ = 1099;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSyncClientLocalDataS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgSyncClientLocalDataS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_CLIENT_LOCALDATA_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }

      // required .MsgPB.SYNC_CLIENT_LOCAL_DATA_RES res = 3;
      case 3: {
        if (tag == 24) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::SYNC_CLIENT_LOCAL_DATA_RES_IsValid(value)) {
            set_res(static_cast< ::MsgPB::SYNC_CLIENT_LOCAL_DATA_RES >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_serail;
        break;
      }

      // required int64 serail = 5;
      case 5: {
        if (tag == 40) {
         parse_serail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serail_)));
          set_has_serail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sessionID;
        break;
      }

      // required int64 sessionID = 6;
      case 6: {
        if (tag == 48) {
         parse_sessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_flag;
        break;
      }

      // optional .MsgPB.SYNC_CLIENT_LOCAL_DATA_FLAG flag = 7 [default = SYNC_CLIENT_LOCAL_DATA_FLAG_BEGIN];
      case 7: {
        if (tag == 56) {
         parse_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::SYNC_CLIENT_LOCAL_DATA_FLAG_IsValid(value)) {
            set_flag(static_cast< ::MsgPB::SYNC_CLIENT_LOCAL_DATA_FLAG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgSyncClientLocalDataS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgSyncClientLocalDataS2C)
  return false;
#undef DO_
}

void MsgSyncClientLocalDataS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgSyncClientLocalDataS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_CLIENT_LOCALDATA_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // required .MsgPB.SYNC_CLIENT_LOCAL_DATA_RES res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->res(), output);
  }

  // required int64 serail = 5;
  if (has_serail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->serail(), output);
  }

  // required int64 sessionID = 6;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->sessionid(), output);
  }

  // optional .MsgPB.SYNC_CLIENT_LOCAL_DATA_FLAG flag = 7 [default = SYNC_CLIENT_LOCAL_DATA_FLAG_BEGIN];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgSyncClientLocalDataS2C)
}

::google::protobuf::uint8* MsgSyncClientLocalDataS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgSyncClientLocalDataS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_CLIENT_LOCALDATA_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // required .MsgPB.SYNC_CLIENT_LOCAL_DATA_RES res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->res(), target);
  }

  // required int64 serail = 5;
  if (has_serail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->serail(), target);
  }

  // required int64 sessionID = 6;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->sessionid(), target);
  }

  // optional .MsgPB.SYNC_CLIENT_LOCAL_DATA_FLAG flag = 7 [default = SYNC_CLIENT_LOCAL_DATA_FLAG_BEGIN];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgSyncClientLocalDataS2C)
  return target;
}

int MsgSyncClientLocalDataS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYNC_CLIENT_LOCALDATA_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // required .MsgPB.SYNC_CLIENT_LOCAL_DATA_RES res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // required int64 serail = 5;
    if (has_serail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serail());
    }

    // required int64 sessionID = 6;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }

    // optional .MsgPB.SYNC_CLIENT_LOCAL_DATA_FLAG flag = 7 [default = SYNC_CLIENT_LOCAL_DATA_FLAG_BEGIN];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSyncClientLocalDataS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSyncClientLocalDataS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSyncClientLocalDataS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSyncClientLocalDataS2C::MergeFrom(const MsgSyncClientLocalDataS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_serail()) {
      set_serail(from.serail());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSyncClientLocalDataS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSyncClientLocalDataS2C::CopyFrom(const MsgSyncClientLocalDataS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSyncClientLocalDataS2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  return true;
}

void MsgSyncClientLocalDataS2C::Swap(MsgSyncClientLocalDataS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(res_, other->res_);
    std::swap(serail_, other->serail_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSyncClientLocalDataS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSyncClientLocalDataS2C_descriptor_;
  metadata.reflection = MsgSyncClientLocalDataS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUpdateTriggerProbabilityData::kMsgTypeFieldNumber;
const int MsgUpdateTriggerProbabilityData::kDataFieldNumber;
#endif  // !_MSC_VER

MsgUpdateTriggerProbabilityData::MsgUpdateTriggerProbabilityData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgUpdateTriggerProbabilityData)
}

void MsgUpdateTriggerProbabilityData::InitAsDefaultInstance() {
}

MsgUpdateTriggerProbabilityData::MsgUpdateTriggerProbabilityData(const MsgUpdateTriggerProbabilityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgUpdateTriggerProbabilityData)
}

void MsgUpdateTriggerProbabilityData::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2350;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUpdateTriggerProbabilityData::~MsgUpdateTriggerProbabilityData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgUpdateTriggerProbabilityData)
  SharedDtor();
}

void MsgUpdateTriggerProbabilityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUpdateTriggerProbabilityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUpdateTriggerProbabilityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUpdateTriggerProbabilityData_descriptor_;
}

const MsgUpdateTriggerProbabilityData& MsgUpdateTriggerProbabilityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgUpdateTriggerProbabilityData* MsgUpdateTriggerProbabilityData::default_instance_ = NULL;

MsgUpdateTriggerProbabilityData* MsgUpdateTriggerProbabilityData::New() const {
  return new MsgUpdateTriggerProbabilityData;
}

void MsgUpdateTriggerProbabilityData::Clear() {
  msgtype_ = 2350;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUpdateTriggerProbabilityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgUpdateTriggerProbabilityData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_UPDATE_TRIGGER_PROBABILITY_DATA_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .MsgPB.MsgTriggerProbabilityData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgUpdateTriggerProbabilityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgUpdateTriggerProbabilityData)
  return false;
#undef DO_
}

void MsgUpdateTriggerProbabilityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgUpdateTriggerProbabilityData)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_UPDATE_TRIGGER_PROBABILITY_DATA_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // repeated .MsgPB.MsgTriggerProbabilityData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgUpdateTriggerProbabilityData)
}

::google::protobuf::uint8* MsgUpdateTriggerProbabilityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgUpdateTriggerProbabilityData)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_UPDATE_TRIGGER_PROBABILITY_DATA_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // repeated .MsgPB.MsgTriggerProbabilityData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgUpdateTriggerProbabilityData)
  return target;
}

int MsgUpdateTriggerProbabilityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_UPDATE_TRIGGER_PROBABILITY_DATA_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  // repeated .MsgPB.MsgTriggerProbabilityData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUpdateTriggerProbabilityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUpdateTriggerProbabilityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUpdateTriggerProbabilityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUpdateTriggerProbabilityData::MergeFrom(const MsgUpdateTriggerProbabilityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUpdateTriggerProbabilityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUpdateTriggerProbabilityData::CopyFrom(const MsgUpdateTriggerProbabilityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpdateTriggerProbabilityData::IsInitialized() const {

  return true;
}

void MsgUpdateTriggerProbabilityData::Swap(MsgUpdateTriggerProbabilityData* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUpdateTriggerProbabilityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUpdateTriggerProbabilityData_descriptor_;
  metadata.reflection = MsgUpdateTriggerProbabilityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRemovePrivateMapMGS2MS::kMsgTypeFieldNumber;
const int MsgRemovePrivateMapMGS2MS::kIggidFieldNumber;
const int MsgRemovePrivateMapMGS2MS::kMapidFieldNumber;
#endif  // !_MSC_VER

MsgRemovePrivateMapMGS2MS::MsgRemovePrivateMapMGS2MS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgRemovePrivateMapMGS2MS)
}

void MsgRemovePrivateMapMGS2MS::InitAsDefaultInstance() {
}

MsgRemovePrivateMapMGS2MS::MsgRemovePrivateMapMGS2MS(const MsgRemovePrivateMapMGS2MS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgRemovePrivateMapMGS2MS)
}

void MsgRemovePrivateMapMGS2MS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1140;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRemovePrivateMapMGS2MS::~MsgRemovePrivateMapMGS2MS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgRemovePrivateMapMGS2MS)
  SharedDtor();
}

void MsgRemovePrivateMapMGS2MS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRemovePrivateMapMGS2MS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRemovePrivateMapMGS2MS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRemovePrivateMapMGS2MS_descriptor_;
}

const MsgRemovePrivateMapMGS2MS& MsgRemovePrivateMapMGS2MS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgRemovePrivateMapMGS2MS* MsgRemovePrivateMapMGS2MS::default_instance_ = NULL;

MsgRemovePrivateMapMGS2MS* MsgRemovePrivateMapMGS2MS::New() const {
  return new MsgRemovePrivateMapMGS2MS;
}

void MsgRemovePrivateMapMGS2MS::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1140;
    iggid_ = GOOGLE_LONGLONG(0);
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRemovePrivateMapMGS2MS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgRemovePrivateMapMGS2MS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_PRIVATE_MAP_MGS2MS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgRemovePrivateMapMGS2MS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgRemovePrivateMapMGS2MS)
  return false;
#undef DO_
}

void MsgRemovePrivateMapMGS2MS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgRemovePrivateMapMGS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_PRIVATE_MAP_MGS2MS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgRemovePrivateMapMGS2MS)
}

::google::protobuf::uint8* MsgRemovePrivateMapMGS2MS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgRemovePrivateMapMGS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_PRIVATE_MAP_MGS2MS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgRemovePrivateMapMGS2MS)
  return target;
}

int MsgRemovePrivateMapMGS2MS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_PRIVATE_MAP_MGS2MS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRemovePrivateMapMGS2MS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRemovePrivateMapMGS2MS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRemovePrivateMapMGS2MS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRemovePrivateMapMGS2MS::MergeFrom(const MsgRemovePrivateMapMGS2MS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRemovePrivateMapMGS2MS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRemovePrivateMapMGS2MS::CopyFrom(const MsgRemovePrivateMapMGS2MS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRemovePrivateMapMGS2MS::IsInitialized() const {

  return true;
}

void MsgRemovePrivateMapMGS2MS::Swap(MsgRemovePrivateMapMGS2MS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRemovePrivateMapMGS2MS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRemovePrivateMapMGS2MS_descriptor_;
  metadata.reflection = MsgRemovePrivateMapMGS2MS_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgRemovePrivateMapResultMS2MGS_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRemovePrivateMapResultMS2MGS_RESULT_descriptor_;
}
bool MsgRemovePrivateMapResultMS2MGS_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgRemovePrivateMapResultMS2MGS_RESULT MsgRemovePrivateMapResultMS2MGS::SUCCESS;
const MsgRemovePrivateMapResultMS2MGS_RESULT MsgRemovePrivateMapResultMS2MGS::FAILURE;
const MsgRemovePrivateMapResultMS2MGS_RESULT MsgRemovePrivateMapResultMS2MGS::RESULT_MIN;
const MsgRemovePrivateMapResultMS2MGS_RESULT MsgRemovePrivateMapResultMS2MGS::RESULT_MAX;
const int MsgRemovePrivateMapResultMS2MGS::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgRemovePrivateMapResultMS2MGS::kMsgTypeFieldNumber;
const int MsgRemovePrivateMapResultMS2MGS::kResultFieldNumber;
const int MsgRemovePrivateMapResultMS2MGS::kIggidFieldNumber;
const int MsgRemovePrivateMapResultMS2MGS::kMapidFieldNumber;
const int MsgRemovePrivateMapResultMS2MGS::kMapserveridFieldNumber;
#endif  // !_MSC_VER

MsgRemovePrivateMapResultMS2MGS::MsgRemovePrivateMapResultMS2MGS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgRemovePrivateMapResultMS2MGS)
}

void MsgRemovePrivateMapResultMS2MGS::InitAsDefaultInstance() {
}

MsgRemovePrivateMapResultMS2MGS::MsgRemovePrivateMapResultMS2MGS(const MsgRemovePrivateMapResultMS2MGS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgRemovePrivateMapResultMS2MGS)
}

void MsgRemovePrivateMapResultMS2MGS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1141;
  result_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  mapserverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRemovePrivateMapResultMS2MGS::~MsgRemovePrivateMapResultMS2MGS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgRemovePrivateMapResultMS2MGS)
  SharedDtor();
}

void MsgRemovePrivateMapResultMS2MGS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRemovePrivateMapResultMS2MGS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRemovePrivateMapResultMS2MGS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRemovePrivateMapResultMS2MGS_descriptor_;
}

const MsgRemovePrivateMapResultMS2MGS& MsgRemovePrivateMapResultMS2MGS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgRemovePrivateMapResultMS2MGS* MsgRemovePrivateMapResultMS2MGS::default_instance_ = NULL;

MsgRemovePrivateMapResultMS2MGS* MsgRemovePrivateMapResultMS2MGS::New() const {
  return new MsgRemovePrivateMapResultMS2MGS;
}

void MsgRemovePrivateMapResultMS2MGS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRemovePrivateMapResultMS2MGS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(result_, mapserverid_);
    msgtype_ = 1141;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRemovePrivateMapResultMS2MGS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgRemovePrivateMapResultMS2MGS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_PRIVATE_MAP_RESULT_MS2MGS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MsgPB.MsgRemovePrivateMapResultMS2MGS.RESULT result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgRemovePrivateMapResultMS2MGS_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::MsgRemovePrivateMapResultMS2MGS_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapserverid;
        break;
      }

      // optional int32 mapserverid = 5;
      case 5: {
        if (tag == 40) {
         parse_mapserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapserverid_)));
          set_has_mapserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgRemovePrivateMapResultMS2MGS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgRemovePrivateMapResultMS2MGS)
  return false;
#undef DO_
}

void MsgRemovePrivateMapResultMS2MGS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgRemovePrivateMapResultMS2MGS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_PRIVATE_MAP_RESULT_MS2MGS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.MsgRemovePrivateMapResultMS2MGS.RESULT result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapid(), output);
  }

  // optional int32 mapserverid = 5;
  if (has_mapserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgRemovePrivateMapResultMS2MGS)
}

::google::protobuf::uint8* MsgRemovePrivateMapResultMS2MGS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgRemovePrivateMapResultMS2MGS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_PRIVATE_MAP_RESULT_MS2MGS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.MsgRemovePrivateMapResultMS2MGS.RESULT result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapid(), target);
  }

  // optional int32 mapserverid = 5;
  if (has_mapserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgRemovePrivateMapResultMS2MGS)
  return target;
}

int MsgRemovePrivateMapResultMS2MGS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_PRIVATE_MAP_RESULT_MS2MGS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.MsgRemovePrivateMapResultMS2MGS.RESULT result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 mapserverid = 5;
    if (has_mapserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRemovePrivateMapResultMS2MGS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRemovePrivateMapResultMS2MGS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRemovePrivateMapResultMS2MGS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRemovePrivateMapResultMS2MGS::MergeFrom(const MsgRemovePrivateMapResultMS2MGS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_mapserverid()) {
      set_mapserverid(from.mapserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRemovePrivateMapResultMS2MGS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRemovePrivateMapResultMS2MGS::CopyFrom(const MsgRemovePrivateMapResultMS2MGS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRemovePrivateMapResultMS2MGS::IsInitialized() const {

  return true;
}

void MsgRemovePrivateMapResultMS2MGS::Swap(MsgRemovePrivateMapResultMS2MGS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(result_, other->result_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    std::swap(mapserverid_, other->mapserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRemovePrivateMapResultMS2MGS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRemovePrivateMapResultMS2MGS_descriptor_;
  metadata.reflection = MsgRemovePrivateMapResultMS2MGS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNotifyClearDirtyGS2MS::kMsgTypeFieldNumber;
const int MsgNotifyClearDirtyGS2MS::kIggidFieldNumber;
const int MsgNotifyClearDirtyGS2MS::kLastSyncToGameServerTimeFieldNumber;
#endif  // !_MSC_VER

MsgNotifyClearDirtyGS2MS::MsgNotifyClearDirtyGS2MS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNotifyClearDirtyGS2MS)
}

void MsgNotifyClearDirtyGS2MS::InitAsDefaultInstance() {
}

MsgNotifyClearDirtyGS2MS::MsgNotifyClearDirtyGS2MS(const MsgNotifyClearDirtyGS2MS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNotifyClearDirtyGS2MS)
}

void MsgNotifyClearDirtyGS2MS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1130;
  iggid_ = GOOGLE_LONGLONG(0);
  lastsynctogameservertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNotifyClearDirtyGS2MS::~MsgNotifyClearDirtyGS2MS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNotifyClearDirtyGS2MS)
  SharedDtor();
}

void MsgNotifyClearDirtyGS2MS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNotifyClearDirtyGS2MS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNotifyClearDirtyGS2MS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNotifyClearDirtyGS2MS_descriptor_;
}

const MsgNotifyClearDirtyGS2MS& MsgNotifyClearDirtyGS2MS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgNotifyClearDirtyGS2MS* MsgNotifyClearDirtyGS2MS::default_instance_ = NULL;

MsgNotifyClearDirtyGS2MS* MsgNotifyClearDirtyGS2MS::New() const {
  return new MsgNotifyClearDirtyGS2MS;
}

void MsgNotifyClearDirtyGS2MS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNotifyClearDirtyGS2MS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(iggid_, lastsynctogameservertime_);
    msgtype_ = 1130;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNotifyClearDirtyGS2MS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNotifyClearDirtyGS2MS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_NOTIFY_CLEAR_DIRTY_MS2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LastSyncToGameServerTime;
        break;
      }

      // optional int64 LastSyncToGameServerTime = 3;
      case 3: {
        if (tag == 24) {
         parse_LastSyncToGameServerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastsynctogameservertime_)));
          set_has_lastsynctogameservertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNotifyClearDirtyGS2MS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNotifyClearDirtyGS2MS)
  return false;
#undef DO_
}

void MsgNotifyClearDirtyGS2MS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNotifyClearDirtyGS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_NOTIFY_CLEAR_DIRTY_MS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int64 LastSyncToGameServerTime = 3;
  if (has_lastsynctogameservertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lastsynctogameservertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNotifyClearDirtyGS2MS)
}

::google::protobuf::uint8* MsgNotifyClearDirtyGS2MS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNotifyClearDirtyGS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_NOTIFY_CLEAR_DIRTY_MS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int64 LastSyncToGameServerTime = 3;
  if (has_lastsynctogameservertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lastsynctogameservertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNotifyClearDirtyGS2MS)
  return target;
}

int MsgNotifyClearDirtyGS2MS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_NOTIFY_CLEAR_DIRTY_MS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 LastSyncToGameServerTime = 3;
    if (has_lastsynctogameservertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastsynctogameservertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNotifyClearDirtyGS2MS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNotifyClearDirtyGS2MS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNotifyClearDirtyGS2MS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNotifyClearDirtyGS2MS::MergeFrom(const MsgNotifyClearDirtyGS2MS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_lastsynctogameservertime()) {
      set_lastsynctogameservertime(from.lastsynctogameservertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNotifyClearDirtyGS2MS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNotifyClearDirtyGS2MS::CopyFrom(const MsgNotifyClearDirtyGS2MS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNotifyClearDirtyGS2MS::IsInitialized() const {

  return true;
}

void MsgNotifyClearDirtyGS2MS::Swap(MsgNotifyClearDirtyGS2MS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(lastsynctogameservertime_, other->lastsynctogameservertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNotifyClearDirtyGS2MS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNotifyClearDirtyGS2MS_descriptor_;
  metadata.reflection = MsgNotifyClearDirtyGS2MS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCharacterBeBeatBackS2C::kMsgTypeFieldNumber;
const int MsgCharacterBeBeatBackS2C::kObjIdFieldNumber;
const int MsgCharacterBeBeatBackS2C::kPosXFieldNumber;
const int MsgCharacterBeBeatBackS2C::kPosYFieldNumber;
const int MsgCharacterBeBeatBackS2C::kTimeFieldNumber;
const int MsgCharacterBeBeatBackS2C::kCastIdFieldNumber;
const int MsgCharacterBeBeatBackS2C::kSerialidFieldNumber;
#endif  // !_MSC_VER

MsgCharacterBeBeatBackS2C::MsgCharacterBeBeatBackS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgCharacterBeBeatBackS2C)
}

void MsgCharacterBeBeatBackS2C::InitAsDefaultInstance() {
}

MsgCharacterBeBeatBackS2C::MsgCharacterBeBeatBackS2C(const MsgCharacterBeBeatBackS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgCharacterBeBeatBackS2C)
}

void MsgCharacterBeBeatBackS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1132;
  obj_id_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  time_ = 0;
  cast_id_ = 0;
  serialid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCharacterBeBeatBackS2C::~MsgCharacterBeBeatBackS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgCharacterBeBeatBackS2C)
  SharedDtor();
}

void MsgCharacterBeBeatBackS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCharacterBeBeatBackS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCharacterBeBeatBackS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCharacterBeBeatBackS2C_descriptor_;
}

const MsgCharacterBeBeatBackS2C& MsgCharacterBeBeatBackS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgCharacterBeBeatBackS2C* MsgCharacterBeBeatBackS2C::default_instance_ = NULL;

MsgCharacterBeBeatBackS2C* MsgCharacterBeBeatBackS2C::New() const {
  return new MsgCharacterBeBeatBackS2C;
}

void MsgCharacterBeBeatBackS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCharacterBeBeatBackS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(obj_id_, serialid_);
    msgtype_ = 1132;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCharacterBeBeatBackS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgCharacterBeBeatBackS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHARACTER_BE_BEAT_BACK_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_obj_id;
        break;
      }

      // optional int32 obj_id = 2;
      case 2: {
        if (tag == 16) {
         parse_obj_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 3;
      case 3: {
        if (tag == 24) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 4;
      case 4: {
        if (tag == 32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cast_id;
        break;
      }

      // optional int32 cast_id = 6;
      case 6: {
        if (tag == 48) {
         parse_cast_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cast_id_)));
          set_has_cast_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_serialid;
        break;
      }

      // optional int64 serialid = 7;
      case 7: {
        if (tag == 56) {
         parse_serialid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgCharacterBeBeatBackS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgCharacterBeBeatBackS2C)
  return false;
#undef DO_
}

void MsgCharacterBeBeatBackS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgCharacterBeBeatBackS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHARACTER_BE_BEAT_BACK_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 obj_id = 2;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->obj_id(), output);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_x(), output);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_y(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // optional int32 cast_id = 6;
  if (has_cast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cast_id(), output);
  }

  // optional int64 serialid = 7;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->serialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgCharacterBeBeatBackS2C)
}

::google::protobuf::uint8* MsgCharacterBeBeatBackS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgCharacterBeBeatBackS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHARACTER_BE_BEAT_BACK_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 obj_id = 2;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->obj_id(), target);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_x(), target);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_y(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // optional int32 cast_id = 6;
  if (has_cast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cast_id(), target);
  }

  // optional int64 serialid = 7;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->serialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgCharacterBeBeatBackS2C)
  return target;
}

int MsgCharacterBeBeatBackS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHARACTER_BE_BEAT_BACK_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 obj_id = 2;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_id());
    }

    // optional int32 pos_x = 3;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 4;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 cast_id = 6;
    if (has_cast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cast_id());
    }

    // optional int64 serialid = 7;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCharacterBeBeatBackS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCharacterBeBeatBackS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCharacterBeBeatBackS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCharacterBeBeatBackS2C::MergeFrom(const MsgCharacterBeBeatBackS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_cast_id()) {
      set_cast_id(from.cast_id());
    }
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCharacterBeBeatBackS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCharacterBeBeatBackS2C::CopyFrom(const MsgCharacterBeBeatBackS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCharacterBeBeatBackS2C::IsInitialized() const {

  return true;
}

void MsgCharacterBeBeatBackS2C::Swap(MsgCharacterBeBeatBackS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(obj_id_, other->obj_id_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(time_, other->time_);
    std::swap(cast_id_, other->cast_id_);
    std::swap(serialid_, other->serialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCharacterBeBeatBackS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCharacterBeBeatBackS2C_descriptor_;
  metadata.reflection = MsgCharacterBeBeatBackS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerReleaseByMapServer::kMsgTypeFieldNumber;
const int MsgPlayerReleaseByMapServer::kIggidFieldNumber;
const int MsgPlayerReleaseByMapServer::kServerIdFieldNumber;
#endif  // !_MSC_VER

MsgPlayerReleaseByMapServer::MsgPlayerReleaseByMapServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerReleaseByMapServer)
}

void MsgPlayerReleaseByMapServer::InitAsDefaultInstance() {
}

MsgPlayerReleaseByMapServer::MsgPlayerReleaseByMapServer(const MsgPlayerReleaseByMapServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerReleaseByMapServer)
}

void MsgPlayerReleaseByMapServer::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1133;
  iggid_ = GOOGLE_LONGLONG(0);
  server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerReleaseByMapServer::~MsgPlayerReleaseByMapServer() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerReleaseByMapServer)
  SharedDtor();
}

void MsgPlayerReleaseByMapServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerReleaseByMapServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerReleaseByMapServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerReleaseByMapServer_descriptor_;
}

const MsgPlayerReleaseByMapServer& MsgPlayerReleaseByMapServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgPlayerReleaseByMapServer* MsgPlayerReleaseByMapServer::default_instance_ = NULL;

MsgPlayerReleaseByMapServer* MsgPlayerReleaseByMapServer::New() const {
  return new MsgPlayerReleaseByMapServer;
}

void MsgPlayerReleaseByMapServer::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1133;
    iggid_ = GOOGLE_LONGLONG(0);
    server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerReleaseByMapServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerReleaseByMapServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_RELEASE_PLAYER];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }

      // optional int32 server_id = 3;
      case 3: {
        if (tag == 24) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerReleaseByMapServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerReleaseByMapServer)
  return false;
#undef DO_
}

void MsgPlayerReleaseByMapServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerReleaseByMapServer)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_RELEASE_PLAYER];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerReleaseByMapServer)
}

::google::protobuf::uint8* MsgPlayerReleaseByMapServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerReleaseByMapServer)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_RELEASE_PLAYER];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerReleaseByMapServer)
  return target;
}

int MsgPlayerReleaseByMapServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_RELEASE_PLAYER];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerReleaseByMapServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerReleaseByMapServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerReleaseByMapServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerReleaseByMapServer::MergeFrom(const MsgPlayerReleaseByMapServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerReleaseByMapServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerReleaseByMapServer::CopyFrom(const MsgPlayerReleaseByMapServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerReleaseByMapServer::IsInitialized() const {

  return true;
}

void MsgPlayerReleaseByMapServer::Swap(MsgPlayerReleaseByMapServer* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerReleaseByMapServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerReleaseByMapServer_descriptor_;
  metadata.reflection = MsgPlayerReleaseByMapServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapServerRequestLockPlayer::kMsgTypeFieldNumber;
const int MsgMapServerRequestLockPlayer::kIggidFieldNumber;
const int MsgMapServerRequestLockPlayer::kServerIdFieldNumber;
#endif  // !_MSC_VER

MsgMapServerRequestLockPlayer::MsgMapServerRequestLockPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapServerRequestLockPlayer)
}

void MsgMapServerRequestLockPlayer::InitAsDefaultInstance() {
}

MsgMapServerRequestLockPlayer::MsgMapServerRequestLockPlayer(const MsgMapServerRequestLockPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapServerRequestLockPlayer)
}

void MsgMapServerRequestLockPlayer::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1134;
  iggid_ = GOOGLE_LONGLONG(0);
  server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapServerRequestLockPlayer::~MsgMapServerRequestLockPlayer() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapServerRequestLockPlayer)
  SharedDtor();
}

void MsgMapServerRequestLockPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMapServerRequestLockPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapServerRequestLockPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapServerRequestLockPlayer_descriptor_;
}

const MsgMapServerRequestLockPlayer& MsgMapServerRequestLockPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapServerRequestLockPlayer* MsgMapServerRequestLockPlayer::default_instance_ = NULL;

MsgMapServerRequestLockPlayer* MsgMapServerRequestLockPlayer::New() const {
  return new MsgMapServerRequestLockPlayer;
}

void MsgMapServerRequestLockPlayer::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1134;
    iggid_ = GOOGLE_LONGLONG(0);
    server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapServerRequestLockPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapServerRequestLockPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_REQUEST_LOCK_PLAYER];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }

      // optional int32 server_id = 3;
      case 3: {
        if (tag == 24) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapServerRequestLockPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapServerRequestLockPlayer)
  return false;
#undef DO_
}

void MsgMapServerRequestLockPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapServerRequestLockPlayer)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_REQUEST_LOCK_PLAYER];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapServerRequestLockPlayer)
}

::google::protobuf::uint8* MsgMapServerRequestLockPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapServerRequestLockPlayer)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_REQUEST_LOCK_PLAYER];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapServerRequestLockPlayer)
  return target;
}

int MsgMapServerRequestLockPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_REQUEST_LOCK_PLAYER];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapServerRequestLockPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapServerRequestLockPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapServerRequestLockPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapServerRequestLockPlayer::MergeFrom(const MsgMapServerRequestLockPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapServerRequestLockPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapServerRequestLockPlayer::CopyFrom(const MsgMapServerRequestLockPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapServerRequestLockPlayer::IsInitialized() const {

  return true;
}

void MsgMapServerRequestLockPlayer::Swap(MsgMapServerRequestLockPlayer* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapServerRequestLockPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapServerRequestLockPlayer_descriptor_;
  metadata.reflection = MsgMapServerRequestLockPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGameServerNotifyReleasePlayer::kMsgTypeFieldNumber;
const int MsgGameServerNotifyReleasePlayer::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgGameServerNotifyReleasePlayer::MsgGameServerNotifyReleasePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgGameServerNotifyReleasePlayer)
}

void MsgGameServerNotifyReleasePlayer::InitAsDefaultInstance() {
}

MsgGameServerNotifyReleasePlayer::MsgGameServerNotifyReleasePlayer(const MsgGameServerNotifyReleasePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgGameServerNotifyReleasePlayer)
}

void MsgGameServerNotifyReleasePlayer::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1135;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGameServerNotifyReleasePlayer::~MsgGameServerNotifyReleasePlayer() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgGameServerNotifyReleasePlayer)
  SharedDtor();
}

void MsgGameServerNotifyReleasePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGameServerNotifyReleasePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGameServerNotifyReleasePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGameServerNotifyReleasePlayer_descriptor_;
}

const MsgGameServerNotifyReleasePlayer& MsgGameServerNotifyReleasePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgGameServerNotifyReleasePlayer* MsgGameServerNotifyReleasePlayer::default_instance_ = NULL;

MsgGameServerNotifyReleasePlayer* MsgGameServerNotifyReleasePlayer::New() const {
  return new MsgGameServerNotifyReleasePlayer;
}

void MsgGameServerNotifyReleasePlayer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1135;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGameServerNotifyReleasePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgGameServerNotifyReleasePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GAMESERVER_NOTIFY_DEL_PLAYER];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgGameServerNotifyReleasePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgGameServerNotifyReleasePlayer)
  return false;
#undef DO_
}

void MsgGameServerNotifyReleasePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgGameServerNotifyReleasePlayer)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GAMESERVER_NOTIFY_DEL_PLAYER];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgGameServerNotifyReleasePlayer)
}

::google::protobuf::uint8* MsgGameServerNotifyReleasePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgGameServerNotifyReleasePlayer)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GAMESERVER_NOTIFY_DEL_PLAYER];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgGameServerNotifyReleasePlayer)
  return target;
}

int MsgGameServerNotifyReleasePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GAMESERVER_NOTIFY_DEL_PLAYER];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGameServerNotifyReleasePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGameServerNotifyReleasePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGameServerNotifyReleasePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGameServerNotifyReleasePlayer::MergeFrom(const MsgGameServerNotifyReleasePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGameServerNotifyReleasePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGameServerNotifyReleasePlayer::CopyFrom(const MsgGameServerNotifyReleasePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGameServerNotifyReleasePlayer::IsInitialized() const {

  return true;
}

void MsgGameServerNotifyReleasePlayer::Swap(MsgGameServerNotifyReleasePlayer* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGameServerNotifyReleasePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGameServerNotifyReleasePlayer_descriptor_;
  metadata.reflection = MsgGameServerNotifyReleasePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapServerInfoSync::kMsgTypeFieldNumber;
const int MsgMapServerInfoSync::kSrvIdFieldNumber;
const int MsgMapServerInfoSync::kTotalPlayerFieldNumber;
const int MsgMapServerInfoSync::kTotalMapFieldNumber;
const int MsgMapServerInfoSync::kTotalDungeonFieldNumber;
#endif  // !_MSC_VER

MsgMapServerInfoSync::MsgMapServerInfoSync()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapServerInfoSync)
}

void MsgMapServerInfoSync::InitAsDefaultInstance() {
}

MsgMapServerInfoSync::MsgMapServerInfoSync(const MsgMapServerInfoSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapServerInfoSync)
}

void MsgMapServerInfoSync::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1073;
  srv_id_ = 0;
  total_player_ = 0;
  total_map_ = 0;
  total_dungeon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapServerInfoSync::~MsgMapServerInfoSync() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapServerInfoSync)
  SharedDtor();
}

void MsgMapServerInfoSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMapServerInfoSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapServerInfoSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapServerInfoSync_descriptor_;
}

const MsgMapServerInfoSync& MsgMapServerInfoSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapServer_2eproto();
  return *default_instance_;
}

MsgMapServerInfoSync* MsgMapServerInfoSync::default_instance_ = NULL;

MsgMapServerInfoSync* MsgMapServerInfoSync::New() const {
  return new MsgMapServerInfoSync;
}

void MsgMapServerInfoSync::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMapServerInfoSync*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(srv_id_, total_dungeon_);
    msgtype_ = 1073;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapServerInfoSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapServerInfoSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_SERVER_INFO_SYNC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_srv_id;
        break;
      }

      // optional int32 srv_id = 2;
      case 2: {
        if (tag == 16) {
         parse_srv_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srv_id_)));
          set_has_srv_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_player;
        break;
      }

      // optional int32 total_player = 3;
      case 3: {
        if (tag == 24) {
         parse_total_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_player_)));
          set_has_total_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_map;
        break;
      }

      // optional int32 total_map = 4;
      case 4: {
        if (tag == 32) {
         parse_total_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_map_)));
          set_has_total_map();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_total_dungeon;
        break;
      }

      // optional int32 total_dungeon = 5;
      case 5: {
        if (tag == 40) {
         parse_total_dungeon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_dungeon_)));
          set_has_total_dungeon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapServerInfoSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapServerInfoSync)
  return false;
#undef DO_
}

void MsgMapServerInfoSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapServerInfoSync)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_SERVER_INFO_SYNC];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 srv_id = 2;
  if (has_srv_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->srv_id(), output);
  }

  // optional int32 total_player = 3;
  if (has_total_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_player(), output);
  }

  // optional int32 total_map = 4;
  if (has_total_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_map(), output);
  }

  // optional int32 total_dungeon = 5;
  if (has_total_dungeon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_dungeon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapServerInfoSync)
}

::google::protobuf::uint8* MsgMapServerInfoSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapServerInfoSync)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_SERVER_INFO_SYNC];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 srv_id = 2;
  if (has_srv_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->srv_id(), target);
  }

  // optional int32 total_player = 3;
  if (has_total_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_player(), target);
  }

  // optional int32 total_map = 4;
  if (has_total_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_map(), target);
  }

  // optional int32 total_dungeon = 5;
  if (has_total_dungeon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_dungeon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapServerInfoSync)
  return target;
}

int MsgMapServerInfoSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_SERVER_INFO_SYNC];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 srv_id = 2;
    if (has_srv_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srv_id());
    }

    // optional int32 total_player = 3;
    if (has_total_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_player());
    }

    // optional int32 total_map = 4;
    if (has_total_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_map());
    }

    // optional int32 total_dungeon = 5;
    if (has_total_dungeon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_dungeon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapServerInfoSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapServerInfoSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapServerInfoSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapServerInfoSync::MergeFrom(const MsgMapServerInfoSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_srv_id()) {
      set_srv_id(from.srv_id());
    }
    if (from.has_total_player()) {
      set_total_player(from.total_player());
    }
    if (from.has_total_map()) {
      set_total_map(from.total_map());
    }
    if (from.has_total_dungeon()) {
      set_total_dungeon(from.total_dungeon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapServerInfoSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapServerInfoSync::CopyFrom(const MsgMapServerInfoSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapServerInfoSync::IsInitialized() const {

  return true;
}

void MsgMapServerInfoSync::Swap(MsgMapServerInfoSync* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(srv_id_, other->srv_id_);
    std::swap(total_player_, other->total_player_);
    std::swap(total_map_, other->total_map_);
    std::swap(total_dungeon_, other->total_dungeon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapServerInfoSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapServerInfoSync_descriptor_;
  metadata.reflection = MsgMapServerInfoSync_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
