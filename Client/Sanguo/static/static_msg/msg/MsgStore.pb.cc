// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgStore.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgStore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgStoreData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStoreSellLimitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreSellLimitData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStoreSellItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreSellItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStoreGoodsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreGoodsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStoreGoodsData_GoodsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreGoodsData_GoodsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStoreSellLimitDataS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreSellLimitDataS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStoreGetDataC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreGetDataC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStoreGetDataResultS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreGetDataResultS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgStoreGetDataResultS2C_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgStoreBuyC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreBuyC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStoreBuyResultS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreBuyResultS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgStoreBuyResultS2C_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgStoreSellC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreSellC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStoreSellResultS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreSellResultS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgStoreSellResultS2C_RESULT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgStore_2eproto() {
  protobuf_AddDesc_MsgStore_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgStore.proto");
  GOOGLE_CHECK(file != NULL);
  MsgStoreData_descriptor_ = file->message_type(0);
  static const int MsgStoreData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreData, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreData, inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreData, reset_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreData, dirty_),
  };
  MsgStoreData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreData_descriptor_,
      MsgStoreData::default_instance_,
      MsgStoreData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreData));
  MsgStoreSellLimitData_descriptor_ = file->message_type(1);
  static const int MsgStoreSellLimitData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellLimitData, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellLimitData, ialreadysell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellLimitData, dirty_),
  };
  MsgStoreSellLimitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreSellLimitData_descriptor_,
      MsgStoreSellLimitData::default_instance_,
      MsgStoreSellLimitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellLimitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellLimitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreSellLimitData));
  MsgStoreSellItemData_descriptor_ = file->message_type(2);
  static const int MsgStoreSellItemData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellItemData, itemuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellItemData, inum_),
  };
  MsgStoreSellItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreSellItemData_descriptor_,
      MsgStoreSellItemData::default_instance_,
      MsgStoreSellItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreSellItemData));
  MsgStoreGoodsData_descriptor_ = file->message_type(3);
  static const int MsgStoreGoodsData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGoodsData, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGoodsData, goods_),
  };
  MsgStoreGoodsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreGoodsData_descriptor_,
      MsgStoreGoodsData::default_instance_,
      MsgStoreGoodsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGoodsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGoodsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreGoodsData));
  MsgStoreGoodsData_GoodsData_descriptor_ = MsgStoreGoodsData_descriptor_->nested_type(0);
  static const int MsgStoreGoodsData_GoodsData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGoodsData_GoodsData, buy_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGoodsData_GoodsData, buy_item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGoodsData_GoodsData, cost_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGoodsData_GoodsData, cost_item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGoodsData_GoodsData, inventory_),
  };
  MsgStoreGoodsData_GoodsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreGoodsData_GoodsData_descriptor_,
      MsgStoreGoodsData_GoodsData::default_instance_,
      MsgStoreGoodsData_GoodsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGoodsData_GoodsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGoodsData_GoodsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreGoodsData_GoodsData));
  MsgStoreSellLimitDataS2C_descriptor_ = file->message_type(4);
  static const int MsgStoreSellLimitDataS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellLimitDataS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellLimitDataS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellLimitDataS2C, selllimitdata_),
  };
  MsgStoreSellLimitDataS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreSellLimitDataS2C_descriptor_,
      MsgStoreSellLimitDataS2C::default_instance_,
      MsgStoreSellLimitDataS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellLimitDataS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellLimitDataS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreSellLimitDataS2C));
  MsgStoreGetDataC2S_descriptor_ = file->message_type(5);
  static const int MsgStoreGetDataC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGetDataC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGetDataC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGetDataC2S, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGetDataC2S, new_version_),
  };
  MsgStoreGetDataC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreGetDataC2S_descriptor_,
      MsgStoreGetDataC2S::default_instance_,
      MsgStoreGetDataC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGetDataC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGetDataC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreGetDataC2S));
  MsgStoreGetDataResultS2C_descriptor_ = file->message_type(6);
  static const int MsgStoreGetDataResultS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGetDataResultS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGetDataResultS2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGetDataResultS2C, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGetDataResultS2C, goods_data_),
  };
  MsgStoreGetDataResultS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreGetDataResultS2C_descriptor_,
      MsgStoreGetDataResultS2C::default_instance_,
      MsgStoreGetDataResultS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGetDataResultS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreGetDataResultS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreGetDataResultS2C));
  MsgStoreGetDataResultS2C_RESULT_descriptor_ = MsgStoreGetDataResultS2C_descriptor_->enum_type(0);
  MsgStoreBuyC2S_descriptor_ = file->message_type(7);
  static const int MsgStoreBuyC2S_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, protectorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, good_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, buy_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, buy_item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, cost_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, cost_item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, new_version_),
  };
  MsgStoreBuyC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreBuyC2S_descriptor_,
      MsgStoreBuyC2S::default_instance_,
      MsgStoreBuyC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreBuyC2S));
  MsgStoreBuyResultS2C_descriptor_ = file->message_type(8);
  static const int MsgStoreBuyResultS2C_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyResultS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyResultS2C, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyResultS2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyResultS2C, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyResultS2C, good_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyResultS2C, goods_data_),
  };
  MsgStoreBuyResultS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreBuyResultS2C_descriptor_,
      MsgStoreBuyResultS2C::default_instance_,
      MsgStoreBuyResultS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyResultS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyResultS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreBuyResultS2C));
  MsgStoreBuyResultS2C_RESULT_descriptor_ = MsgStoreBuyResultS2C_descriptor_->enum_type(0);
  MsgStoreSellC2S_descriptor_ = file->message_type(9);
  static const int MsgStoreSellC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellC2S, item_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellC2S, item_num_),
  };
  MsgStoreSellC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreSellC2S_descriptor_,
      MsgStoreSellC2S::default_instance_,
      MsgStoreSellC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreSellC2S));
  MsgStoreSellResultS2C_descriptor_ = file->message_type(10);
  static const int MsgStoreSellResultS2C_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellResultS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellResultS2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellResultS2C, total_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellResultS2C, total_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellResultS2C, total_endless_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellResultS2C, selllimitdata_),
  };
  MsgStoreSellResultS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreSellResultS2C_descriptor_,
      MsgStoreSellResultS2C::default_instance_,
      MsgStoreSellResultS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellResultS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreSellResultS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreSellResultS2C));
  MsgStoreSellResultS2C_RESULT_descriptor_ = MsgStoreSellResultS2C_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgStore_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreData_descriptor_, &MsgStoreData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreSellLimitData_descriptor_, &MsgStoreSellLimitData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreSellItemData_descriptor_, &MsgStoreSellItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreGoodsData_descriptor_, &MsgStoreGoodsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreGoodsData_GoodsData_descriptor_, &MsgStoreGoodsData_GoodsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreSellLimitDataS2C_descriptor_, &MsgStoreSellLimitDataS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreGetDataC2S_descriptor_, &MsgStoreGetDataC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreGetDataResultS2C_descriptor_, &MsgStoreGetDataResultS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreBuyC2S_descriptor_, &MsgStoreBuyC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreBuyResultS2C_descriptor_, &MsgStoreBuyResultS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreSellC2S_descriptor_, &MsgStoreSellC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreSellResultS2C_descriptor_, &MsgStoreSellResultS2C::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgStore_2eproto() {
  delete MsgStoreData::default_instance_;
  delete MsgStoreData_reflection_;
  delete MsgStoreSellLimitData::default_instance_;
  delete MsgStoreSellLimitData_reflection_;
  delete MsgStoreSellItemData::default_instance_;
  delete MsgStoreSellItemData_reflection_;
  delete MsgStoreGoodsData::default_instance_;
  delete MsgStoreGoodsData_reflection_;
  delete MsgStoreGoodsData_GoodsData::default_instance_;
  delete MsgStoreGoodsData_GoodsData_reflection_;
  delete MsgStoreSellLimitDataS2C::default_instance_;
  delete MsgStoreSellLimitDataS2C_reflection_;
  delete MsgStoreGetDataC2S::default_instance_;
  delete MsgStoreGetDataC2S_reflection_;
  delete MsgStoreGetDataResultS2C::default_instance_;
  delete MsgStoreGetDataResultS2C_reflection_;
  delete MsgStoreBuyC2S::default_instance_;
  delete MsgStoreBuyC2S_reflection_;
  delete MsgStoreBuyResultS2C::default_instance_;
  delete MsgStoreBuyResultS2C_reflection_;
  delete MsgStoreSellC2S::default_instance_;
  delete MsgStoreSellC2S_reflection_;
  delete MsgStoreSellResultS2C::default_instance_;
  delete MsgStoreSellResultS2C_reflection_;
}

void protobuf_AddDesc_MsgStore_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016MsgStore.proto\022\005MsgPB\032\rMsgType.proto\"Q"
    "\n\014MsgStoreData\022\014\n\004uuid\030\001 \001(\003\022\021\n\tinventor"
    "y\030\002 \003(\005\022\021\n\treset_day\030\003 \001(\005\022\r\n\005dirty\030\004 \001("
    "\003\"L\n\025MsgStoreSellLimitData\022\016\n\006itemId\030\001 \001"
    "(\005\022\024\n\014iAlreadySell\030\002 \001(\005\022\r\n\005dirty\030\037 \001(\003\""
    "6\n\024MsgStoreSellItemData\022\020\n\010itemUuid\030\001 \001("
    "\003\022\014\n\004iNum\030\002 \001(\005\"\316\001\n\021MsgStoreGoodsData\022\014\n"
    "\004uuid\030\001 \001(\003\0221\n\005goods\030\002 \003(\0132\".MsgPB.MsgSt"
    "oreGoodsData.GoodsData\032x\n\tGoodsData\022\022\n\nb"
    "uy_itemid\030\001 \001(\005\022\026\n\016buy_item_count\030\002 \001(\005\022"
    "\023\n\013cost_itemid\030\003 \001(\005\022\027\n\017cost_item_count\030"
    "\004 \001(\005\022\021\n\tinventory\030\005 \001(\005\"\232\001\n\030MsgStoreSel"
    "lLimitDataS2C\022:\n\007msgType\030\001 \001(\0162\017.MsgPB.E"
    "MsgType:\030_MSG_STORE_SELLLIMIT_S2C\022\r\n\005igg"
    "id\030\002 \001(\003\0223\n\rSellLimitData\030\003 \003(\0132\034.MsgPB."
    "MsgStoreSellLimitData\"\210\001\n\022MsgStoreGetDat"
    "aC2S\0229\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\027"
    "_MSG_STORE_GET_DATA_C2S\022\r\n\005iggid\030\002 \001(\003\022\014"
    "\n\004uuid\030\003 \001(\003\022\032\n\013new_version\030\004 \001(\010:\005false"
    "\"\222\002\n\030MsgStoreGetDataResultS2C\022@\n\007msgType"
    "\030\001 \001(\0162\017.MsgPB.EMsgType:\036_MSG_STORE_GET_"
    "DATA_RESULT_S2C\0226\n\006result\030\002 \001(\0162&.MsgPB."
    "MsgStoreGetDataResultS2C.RESULT\022!\n\004data\030"
    "\003 \001(\0132\023.MsgPB.MsgStoreData\022,\n\ngoods_data"
    "\030\004 \001(\0132\030.MsgPB.MsgStoreGoodsData\"+\n\006RESU"
    "LT\022\024\n\007FAILURE\020\377\377\377\377\377\377\377\377\377\001\022\013\n\007SUCCESS\020\000\"\244\002"
    "\n\016MsgStoreBuyC2S\0224\n\007msgType\030\001 \001(\0162\017.MsgP"
    "B.EMsgType:\022_MSG_STORE_BUY_C2S\022\r\n\005iggid\030"
    "\002 \001(\003\022\023\n\013protectorId\030\003 \001(\003\022\014\n\004uuid\030\004 \001(\003"
    "\022\022\n\ngood_index\030\005 \001(\005\022\023\n\013buy_item_id\030\006 \001("
    "\005\022\026\n\016buy_item_count\030\007 \001(\005\022\024\n\014cost_item_i"
    "d\030\010 \001(\005\022\027\n\017cost_item_count\030\t \001(\005\022\r\n\005batc"
    "h\030\n \001(\005\022\017\n\007country\030\013 \001(\003\022\032\n\013new_version\030"
    "\014 \001(\010:\005false\"\226\003\n\024MsgStoreBuyResultS2C\022;\n"
    "\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\031_MSG_ST"
    "ORE_BUY_RESULT_S2C\022\014\n\004uuid\030\002 \001(\003\0222\n\006resu"
    "lt\030\003 \001(\0162\".MsgPB.MsgStoreBuyResultS2C.RE"
    "SULT\022!\n\004data\030\004 \001(\0132\023.MsgPB.MsgStoreData\022"
    "\022\n\ngood_index\030\005 \001(\005\022,\n\ngoods_data\030\006 \001(\0132"
    "\030.MsgPB.MsgStoreGoodsData\"\231\001\n\006RESULT\022\024\n\007"
    "FAILURE\020\377\377\377\377\377\377\377\377\377\001\022\013\n\007SUCCESS\020\000\022\022\n\016TEMPL"
    "ATE_ERROR\020\001\022\014\n\010SOLD_OUT\020\002\022\022\n\016PACKET_IS_F"
    "ULL\020\003\022\020\n\014LAKE_OF_COIN\020\004\022\022\n\016LAKE_OF_TICKE"
    "T\020\005\022\020\n\014LAKE_OF_ITEM\020\006\"|\n\017MsgStoreSellC2S"
    "\0225\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\023_MSG"
    "_STORE_SELL_C2S\022\r\n\005iggid\030\002 \001(\003\022\021\n\titem_u"
    "uid\030\003 \001(\003\022\020\n\010item_num\030\004 \001(\005\"\241\003\n\025MsgStore"
    "SellResultS2C\022<\n\007msgType\030\001 \001(\0162\017.MsgPB.E"
    "MsgType:\032_MSG_STORE_SELL_RESULT_S2C\0223\n\006r"
    "esult\030\003 \001(\0162#.MsgPB.MsgStoreSellResultS2"
    "C.RESULT\022\022\n\ntotal_coin\030\004 \001(\005\022\024\n\014total_ti"
    "cket\030\005 \001(\005\022\032\n\022total_endless_coin\030\006 \001(\005\0223"
    "\n\rSellLimitData\030\007 \003(\0132\034.MsgPB.MsgStoreSe"
    "llLimitData\"\231\001\n\006RESULT\022\024\n\007FAILURE\020\377\377\377\377\377\377"
    "\377\377\377\001\022\013\n\007SUCCESS\020\000\022\022\n\016TEMPLATE_ERROR\020\001\022\020\n"
    "\014LAKE_OF_ITEM\020\002\022\020\n\014COIN_IS_FULL\020\003\022\022\n\016TIC"
    "KET_IS_FULL\020\004\022\014\n\010MAX_SELL\020\005\022\022\n\016ITEM_NOT_"
    "FOUND\020\006", 2287);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgStore.proto", &protobuf_RegisterTypes);
  MsgStoreData::default_instance_ = new MsgStoreData();
  MsgStoreSellLimitData::default_instance_ = new MsgStoreSellLimitData();
  MsgStoreSellItemData::default_instance_ = new MsgStoreSellItemData();
  MsgStoreGoodsData::default_instance_ = new MsgStoreGoodsData();
  MsgStoreGoodsData_GoodsData::default_instance_ = new MsgStoreGoodsData_GoodsData();
  MsgStoreSellLimitDataS2C::default_instance_ = new MsgStoreSellLimitDataS2C();
  MsgStoreGetDataC2S::default_instance_ = new MsgStoreGetDataC2S();
  MsgStoreGetDataResultS2C::default_instance_ = new MsgStoreGetDataResultS2C();
  MsgStoreBuyC2S::default_instance_ = new MsgStoreBuyC2S();
  MsgStoreBuyResultS2C::default_instance_ = new MsgStoreBuyResultS2C();
  MsgStoreSellC2S::default_instance_ = new MsgStoreSellC2S();
  MsgStoreSellResultS2C::default_instance_ = new MsgStoreSellResultS2C();
  MsgStoreData::default_instance_->InitAsDefaultInstance();
  MsgStoreSellLimitData::default_instance_->InitAsDefaultInstance();
  MsgStoreSellItemData::default_instance_->InitAsDefaultInstance();
  MsgStoreGoodsData::default_instance_->InitAsDefaultInstance();
  MsgStoreGoodsData_GoodsData::default_instance_->InitAsDefaultInstance();
  MsgStoreSellLimitDataS2C::default_instance_->InitAsDefaultInstance();
  MsgStoreGetDataC2S::default_instance_->InitAsDefaultInstance();
  MsgStoreGetDataResultS2C::default_instance_->InitAsDefaultInstance();
  MsgStoreBuyC2S::default_instance_->InitAsDefaultInstance();
  MsgStoreBuyResultS2C::default_instance_->InitAsDefaultInstance();
  MsgStoreSellC2S::default_instance_->InitAsDefaultInstance();
  MsgStoreSellResultS2C::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgStore_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgStore_2eproto {
  StaticDescriptorInitializer_MsgStore_2eproto() {
    protobuf_AddDesc_MsgStore_2eproto();
  }
} static_descriptor_initializer_MsgStore_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgStoreData::kUuidFieldNumber;
const int MsgStoreData::kInventoryFieldNumber;
const int MsgStoreData::kResetDayFieldNumber;
const int MsgStoreData::kDirtyFieldNumber;
#endif  // !_MSC_VER

MsgStoreData::MsgStoreData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgStoreData)
}

void MsgStoreData::InitAsDefaultInstance() {
}

MsgStoreData::MsgStoreData(const MsgStoreData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgStoreData)
}

void MsgStoreData::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  reset_day_ = 0;
  dirty_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreData::~MsgStoreData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgStoreData)
  SharedDtor();
}

void MsgStoreData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStoreData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreData_descriptor_;
}

const MsgStoreData& MsgStoreData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStore_2eproto();
  return *default_instance_;
}

MsgStoreData* MsgStoreData::default_instance_ = NULL;

MsgStoreData* MsgStoreData::New() const {
  return new MsgStoreData;
}

void MsgStoreData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgStoreData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(dirty_, reset_day_);
    uuid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  inventory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgStoreData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inventory;
        break;
      }

      // repeated int32 inventory = 2;
      case 2: {
        if (tag == 16) {
         parse_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_inventory())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_inventory())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inventory;
        if (input->ExpectTag(24)) goto parse_reset_day;
        break;
      }

      // optional int32 reset_day = 3;
      case 3: {
        if (tag == 24) {
         parse_reset_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_day_)));
          set_has_reset_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dirty;
        break;
      }

      // optional int64 dirty = 4;
      case 4: {
        if (tag == 32) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgStoreData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgStoreData)
  return false;
#undef DO_
}

void MsgStoreData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgStoreData)
  // optional int64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uuid(), output);
  }

  // repeated int32 inventory = 2;
  for (int i = 0; i < this->inventory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->inventory(i), output);
  }

  // optional int32 reset_day = 3;
  if (has_reset_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reset_day(), output);
  }

  // optional int64 dirty = 4;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dirty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgStoreData)
}

::google::protobuf::uint8* MsgStoreData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgStoreData)
  // optional int64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uuid(), target);
  }

  // repeated int32 inventory = 2;
  for (int i = 0; i < this->inventory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->inventory(i), target);
  }

  // optional int32 reset_day = 3;
  if (has_reset_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reset_day(), target);
  }

  // optional int64 dirty = 4;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->dirty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgStoreData)
  return target;
}

int MsgStoreData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional int32 reset_day = 3;
    if (has_reset_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset_day());
    }

    // optional int64 dirty = 4;
    if (has_dirty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirty());
    }

  }
  // repeated int32 inventory = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->inventory_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->inventory(i));
    }
    total_size += 1 * this->inventory_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreData::MergeFrom(const MsgStoreData& from) {
  GOOGLE_CHECK_NE(&from, this);
  inventory_.MergeFrom(from.inventory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_reset_day()) {
      set_reset_day(from.reset_day());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreData::CopyFrom(const MsgStoreData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreData::IsInitialized() const {

  return true;
}

void MsgStoreData::Swap(MsgStoreData* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    inventory_.Swap(&other->inventory_);
    std::swap(reset_day_, other->reset_day_);
    std::swap(dirty_, other->dirty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreData_descriptor_;
  metadata.reflection = MsgStoreData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStoreSellLimitData::kItemIdFieldNumber;
const int MsgStoreSellLimitData::kIAlreadySellFieldNumber;
const int MsgStoreSellLimitData::kDirtyFieldNumber;
#endif  // !_MSC_VER

MsgStoreSellLimitData::MsgStoreSellLimitData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgStoreSellLimitData)
}

void MsgStoreSellLimitData::InitAsDefaultInstance() {
}

MsgStoreSellLimitData::MsgStoreSellLimitData(const MsgStoreSellLimitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgStoreSellLimitData)
}

void MsgStoreSellLimitData::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  ialreadysell_ = 0;
  dirty_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreSellLimitData::~MsgStoreSellLimitData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgStoreSellLimitData)
  SharedDtor();
}

void MsgStoreSellLimitData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStoreSellLimitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreSellLimitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreSellLimitData_descriptor_;
}

const MsgStoreSellLimitData& MsgStoreSellLimitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStore_2eproto();
  return *default_instance_;
}

MsgStoreSellLimitData* MsgStoreSellLimitData::default_instance_ = NULL;

MsgStoreSellLimitData* MsgStoreSellLimitData::New() const {
  return new MsgStoreSellLimitData;
}

void MsgStoreSellLimitData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgStoreSellLimitData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, dirty_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreSellLimitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgStoreSellLimitData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iAlreadySell;
        break;
      }

      // optional int32 iAlreadySell = 2;
      case 2: {
        if (tag == 16) {
         parse_iAlreadySell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ialreadysell_)));
          set_has_ialreadysell();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_dirty;
        break;
      }

      // optional int64 dirty = 31;
      case 31: {
        if (tag == 248) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgStoreSellLimitData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgStoreSellLimitData)
  return false;
#undef DO_
}

void MsgStoreSellLimitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgStoreSellLimitData)
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 iAlreadySell = 2;
  if (has_ialreadysell()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ialreadysell(), output);
  }

  // optional int64 dirty = 31;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->dirty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgStoreSellLimitData)
}

::google::protobuf::uint8* MsgStoreSellLimitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgStoreSellLimitData)
  // optional int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 iAlreadySell = 2;
  if (has_ialreadysell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ialreadysell(), target);
  }

  // optional int64 dirty = 31;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->dirty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgStoreSellLimitData)
  return target;
}

int MsgStoreSellLimitData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 iAlreadySell = 2;
    if (has_ialreadysell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ialreadysell());
    }

    // optional int64 dirty = 31;
    if (has_dirty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreSellLimitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreSellLimitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreSellLimitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreSellLimitData::MergeFrom(const MsgStoreSellLimitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_ialreadysell()) {
      set_ialreadysell(from.ialreadysell());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreSellLimitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreSellLimitData::CopyFrom(const MsgStoreSellLimitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreSellLimitData::IsInitialized() const {

  return true;
}

void MsgStoreSellLimitData::Swap(MsgStoreSellLimitData* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(ialreadysell_, other->ialreadysell_);
    std::swap(dirty_, other->dirty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreSellLimitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreSellLimitData_descriptor_;
  metadata.reflection = MsgStoreSellLimitData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStoreSellItemData::kItemUuidFieldNumber;
const int MsgStoreSellItemData::kINumFieldNumber;
#endif  // !_MSC_VER

MsgStoreSellItemData::MsgStoreSellItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgStoreSellItemData)
}

void MsgStoreSellItemData::InitAsDefaultInstance() {
}

MsgStoreSellItemData::MsgStoreSellItemData(const MsgStoreSellItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgStoreSellItemData)
}

void MsgStoreSellItemData::SharedCtor() {
  _cached_size_ = 0;
  itemuuid_ = GOOGLE_LONGLONG(0);
  inum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreSellItemData::~MsgStoreSellItemData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgStoreSellItemData)
  SharedDtor();
}

void MsgStoreSellItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStoreSellItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreSellItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreSellItemData_descriptor_;
}

const MsgStoreSellItemData& MsgStoreSellItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStore_2eproto();
  return *default_instance_;
}

MsgStoreSellItemData* MsgStoreSellItemData::default_instance_ = NULL;

MsgStoreSellItemData* MsgStoreSellItemData::New() const {
  return new MsgStoreSellItemData;
}

void MsgStoreSellItemData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgStoreSellItemData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemuuid_, inum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreSellItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgStoreSellItemData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 itemUuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemuuid_)));
          set_has_itemuuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iNum;
        break;
      }

      // optional int32 iNum = 2;
      case 2: {
        if (tag == 16) {
         parse_iNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inum_)));
          set_has_inum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgStoreSellItemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgStoreSellItemData)
  return false;
#undef DO_
}

void MsgStoreSellItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgStoreSellItemData)
  // optional int64 itemUuid = 1;
  if (has_itemuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->itemuuid(), output);
  }

  // optional int32 iNum = 2;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgStoreSellItemData)
}

::google::protobuf::uint8* MsgStoreSellItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgStoreSellItemData)
  // optional int64 itemUuid = 1;
  if (has_itemuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->itemuuid(), target);
  }

  // optional int32 iNum = 2;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgStoreSellItemData)
  return target;
}

int MsgStoreSellItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 itemUuid = 1;
    if (has_itemuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemuuid());
    }

    // optional int32 iNum = 2;
    if (has_inum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreSellItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreSellItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreSellItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreSellItemData::MergeFrom(const MsgStoreSellItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemuuid()) {
      set_itemuuid(from.itemuuid());
    }
    if (from.has_inum()) {
      set_inum(from.inum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreSellItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreSellItemData::CopyFrom(const MsgStoreSellItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreSellItemData::IsInitialized() const {

  return true;
}

void MsgStoreSellItemData::Swap(MsgStoreSellItemData* other) {
  if (other != this) {
    std::swap(itemuuid_, other->itemuuid_);
    std::swap(inum_, other->inum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreSellItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreSellItemData_descriptor_;
  metadata.reflection = MsgStoreSellItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStoreGoodsData_GoodsData::kBuyItemidFieldNumber;
const int MsgStoreGoodsData_GoodsData::kBuyItemCountFieldNumber;
const int MsgStoreGoodsData_GoodsData::kCostItemidFieldNumber;
const int MsgStoreGoodsData_GoodsData::kCostItemCountFieldNumber;
const int MsgStoreGoodsData_GoodsData::kInventoryFieldNumber;
#endif  // !_MSC_VER

MsgStoreGoodsData_GoodsData::MsgStoreGoodsData_GoodsData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgStoreGoodsData.GoodsData)
}

void MsgStoreGoodsData_GoodsData::InitAsDefaultInstance() {
}

MsgStoreGoodsData_GoodsData::MsgStoreGoodsData_GoodsData(const MsgStoreGoodsData_GoodsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgStoreGoodsData.GoodsData)
}

void MsgStoreGoodsData_GoodsData::SharedCtor() {
  _cached_size_ = 0;
  buy_itemid_ = 0;
  buy_item_count_ = 0;
  cost_itemid_ = 0;
  cost_item_count_ = 0;
  inventory_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreGoodsData_GoodsData::~MsgStoreGoodsData_GoodsData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgStoreGoodsData.GoodsData)
  SharedDtor();
}

void MsgStoreGoodsData_GoodsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStoreGoodsData_GoodsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreGoodsData_GoodsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreGoodsData_GoodsData_descriptor_;
}

const MsgStoreGoodsData_GoodsData& MsgStoreGoodsData_GoodsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStore_2eproto();
  return *default_instance_;
}

MsgStoreGoodsData_GoodsData* MsgStoreGoodsData_GoodsData::default_instance_ = NULL;

MsgStoreGoodsData_GoodsData* MsgStoreGoodsData_GoodsData::New() const {
  return new MsgStoreGoodsData_GoodsData;
}

void MsgStoreGoodsData_GoodsData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgStoreGoodsData_GoodsData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(buy_itemid_, inventory_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreGoodsData_GoodsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgStoreGoodsData.GoodsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buy_itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_itemid_)));
          set_has_buy_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buy_item_count;
        break;
      }

      // optional int32 buy_item_count = 2;
      case 2: {
        if (tag == 16) {
         parse_buy_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_item_count_)));
          set_has_buy_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cost_itemid;
        break;
      }

      // optional int32 cost_itemid = 3;
      case 3: {
        if (tag == 24) {
         parse_cost_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_itemid_)));
          set_has_cost_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cost_item_count;
        break;
      }

      // optional int32 cost_item_count = 4;
      case 4: {
        if (tag == 32) {
         parse_cost_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_item_count_)));
          set_has_cost_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_inventory;
        break;
      }

      // optional int32 inventory = 5;
      case 5: {
        if (tag == 40) {
         parse_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inventory_)));
          set_has_inventory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgStoreGoodsData.GoodsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgStoreGoodsData.GoodsData)
  return false;
#undef DO_
}

void MsgStoreGoodsData_GoodsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgStoreGoodsData.GoodsData)
  // optional int32 buy_itemid = 1;
  if (has_buy_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buy_itemid(), output);
  }

  // optional int32 buy_item_count = 2;
  if (has_buy_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_item_count(), output);
  }

  // optional int32 cost_itemid = 3;
  if (has_cost_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost_itemid(), output);
  }

  // optional int32 cost_item_count = 4;
  if (has_cost_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost_item_count(), output);
  }

  // optional int32 inventory = 5;
  if (has_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->inventory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgStoreGoodsData.GoodsData)
}

::google::protobuf::uint8* MsgStoreGoodsData_GoodsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgStoreGoodsData.GoodsData)
  // optional int32 buy_itemid = 1;
  if (has_buy_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buy_itemid(), target);
  }

  // optional int32 buy_item_count = 2;
  if (has_buy_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy_item_count(), target);
  }

  // optional int32 cost_itemid = 3;
  if (has_cost_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cost_itemid(), target);
  }

  // optional int32 cost_item_count = 4;
  if (has_cost_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cost_item_count(), target);
  }

  // optional int32 inventory = 5;
  if (has_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->inventory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgStoreGoodsData.GoodsData)
  return target;
}

int MsgStoreGoodsData_GoodsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buy_itemid = 1;
    if (has_buy_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_itemid());
    }

    // optional int32 buy_item_count = 2;
    if (has_buy_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_item_count());
    }

    // optional int32 cost_itemid = 3;
    if (has_cost_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_itemid());
    }

    // optional int32 cost_item_count = 4;
    if (has_cost_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_item_count());
    }

    // optional int32 inventory = 5;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inventory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreGoodsData_GoodsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreGoodsData_GoodsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreGoodsData_GoodsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreGoodsData_GoodsData::MergeFrom(const MsgStoreGoodsData_GoodsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buy_itemid()) {
      set_buy_itemid(from.buy_itemid());
    }
    if (from.has_buy_item_count()) {
      set_buy_item_count(from.buy_item_count());
    }
    if (from.has_cost_itemid()) {
      set_cost_itemid(from.cost_itemid());
    }
    if (from.has_cost_item_count()) {
      set_cost_item_count(from.cost_item_count());
    }
    if (from.has_inventory()) {
      set_inventory(from.inventory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreGoodsData_GoodsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreGoodsData_GoodsData::CopyFrom(const MsgStoreGoodsData_GoodsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreGoodsData_GoodsData::IsInitialized() const {

  return true;
}

void MsgStoreGoodsData_GoodsData::Swap(MsgStoreGoodsData_GoodsData* other) {
  if (other != this) {
    std::swap(buy_itemid_, other->buy_itemid_);
    std::swap(buy_item_count_, other->buy_item_count_);
    std::swap(cost_itemid_, other->cost_itemid_);
    std::swap(cost_item_count_, other->cost_item_count_);
    std::swap(inventory_, other->inventory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreGoodsData_GoodsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreGoodsData_GoodsData_descriptor_;
  metadata.reflection = MsgStoreGoodsData_GoodsData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgStoreGoodsData::kUuidFieldNumber;
const int MsgStoreGoodsData::kGoodsFieldNumber;
#endif  // !_MSC_VER

MsgStoreGoodsData::MsgStoreGoodsData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgStoreGoodsData)
}

void MsgStoreGoodsData::InitAsDefaultInstance() {
}

MsgStoreGoodsData::MsgStoreGoodsData(const MsgStoreGoodsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgStoreGoodsData)
}

void MsgStoreGoodsData::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreGoodsData::~MsgStoreGoodsData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgStoreGoodsData)
  SharedDtor();
}

void MsgStoreGoodsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStoreGoodsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreGoodsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreGoodsData_descriptor_;
}

const MsgStoreGoodsData& MsgStoreGoodsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStore_2eproto();
  return *default_instance_;
}

MsgStoreGoodsData* MsgStoreGoodsData::default_instance_ = NULL;

MsgStoreGoodsData* MsgStoreGoodsData::New() const {
  return new MsgStoreGoodsData;
}

void MsgStoreGoodsData::Clear() {
  uuid_ = GOOGLE_LONGLONG(0);
  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreGoodsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgStoreGoodsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_goods;
        break;
      }

      // repeated .MsgPB.MsgStoreGoodsData.GoodsData goods = 2;
      case 2: {
        if (tag == 18) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_goods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgStoreGoodsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgStoreGoodsData)
  return false;
#undef DO_
}

void MsgStoreGoodsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgStoreGoodsData)
  // optional int64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uuid(), output);
  }

  // repeated .MsgPB.MsgStoreGoodsData.GoodsData goods = 2;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgStoreGoodsData)
}

::google::protobuf::uint8* MsgStoreGoodsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgStoreGoodsData)
  // optional int64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uuid(), target);
  }

  // repeated .MsgPB.MsgStoreGoodsData.GoodsData goods = 2;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgStoreGoodsData)
  return target;
}

int MsgStoreGoodsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

  }
  // repeated .MsgPB.MsgStoreGoodsData.GoodsData goods = 2;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreGoodsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreGoodsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreGoodsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreGoodsData::MergeFrom(const MsgStoreGoodsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreGoodsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreGoodsData::CopyFrom(const MsgStoreGoodsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreGoodsData::IsInitialized() const {

  return true;
}

void MsgStoreGoodsData::Swap(MsgStoreGoodsData* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    goods_.Swap(&other->goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreGoodsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreGoodsData_descriptor_;
  metadata.reflection = MsgStoreGoodsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStoreSellLimitDataS2C::kMsgTypeFieldNumber;
const int MsgStoreSellLimitDataS2C::kIggidFieldNumber;
const int MsgStoreSellLimitDataS2C::kSellLimitDataFieldNumber;
#endif  // !_MSC_VER

MsgStoreSellLimitDataS2C::MsgStoreSellLimitDataS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgStoreSellLimitDataS2C)
}

void MsgStoreSellLimitDataS2C::InitAsDefaultInstance() {
}

MsgStoreSellLimitDataS2C::MsgStoreSellLimitDataS2C(const MsgStoreSellLimitDataS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgStoreSellLimitDataS2C)
}

void MsgStoreSellLimitDataS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2806;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreSellLimitDataS2C::~MsgStoreSellLimitDataS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgStoreSellLimitDataS2C)
  SharedDtor();
}

void MsgStoreSellLimitDataS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStoreSellLimitDataS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreSellLimitDataS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreSellLimitDataS2C_descriptor_;
}

const MsgStoreSellLimitDataS2C& MsgStoreSellLimitDataS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStore_2eproto();
  return *default_instance_;
}

MsgStoreSellLimitDataS2C* MsgStoreSellLimitDataS2C::default_instance_ = NULL;

MsgStoreSellLimitDataS2C* MsgStoreSellLimitDataS2C::New() const {
  return new MsgStoreSellLimitDataS2C;
}

void MsgStoreSellLimitDataS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 2806;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  selllimitdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreSellLimitDataS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgStoreSellLimitDataS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_SELLLIMIT_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SellLimitData;
        break;
      }

      // repeated .MsgPB.MsgStoreSellLimitData SellLimitData = 3;
      case 3: {
        if (tag == 26) {
         parse_SellLimitData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selllimitdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SellLimitData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgStoreSellLimitDataS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgStoreSellLimitDataS2C)
  return false;
#undef DO_
}

void MsgStoreSellLimitDataS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgStoreSellLimitDataS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_SELLLIMIT_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // repeated .MsgPB.MsgStoreSellLimitData SellLimitData = 3;
  for (int i = 0; i < this->selllimitdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->selllimitdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgStoreSellLimitDataS2C)
}

::google::protobuf::uint8* MsgStoreSellLimitDataS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgStoreSellLimitDataS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_SELLLIMIT_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // repeated .MsgPB.MsgStoreSellLimitData SellLimitData = 3;
  for (int i = 0; i < this->selllimitdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->selllimitdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgStoreSellLimitDataS2C)
  return target;
}

int MsgStoreSellLimitDataS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_SELLLIMIT_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  // repeated .MsgPB.MsgStoreSellLimitData SellLimitData = 3;
  total_size += 1 * this->selllimitdata_size();
  for (int i = 0; i < this->selllimitdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selllimitdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreSellLimitDataS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreSellLimitDataS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreSellLimitDataS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreSellLimitDataS2C::MergeFrom(const MsgStoreSellLimitDataS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  selllimitdata_.MergeFrom(from.selllimitdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreSellLimitDataS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreSellLimitDataS2C::CopyFrom(const MsgStoreSellLimitDataS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreSellLimitDataS2C::IsInitialized() const {

  return true;
}

void MsgStoreSellLimitDataS2C::Swap(MsgStoreSellLimitDataS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    selllimitdata_.Swap(&other->selllimitdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreSellLimitDataS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreSellLimitDataS2C_descriptor_;
  metadata.reflection = MsgStoreSellLimitDataS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStoreGetDataC2S::kMsgTypeFieldNumber;
const int MsgStoreGetDataC2S::kIggidFieldNumber;
const int MsgStoreGetDataC2S::kUuidFieldNumber;
const int MsgStoreGetDataC2S::kNewVersionFieldNumber;
#endif  // !_MSC_VER

MsgStoreGetDataC2S::MsgStoreGetDataC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgStoreGetDataC2S)
}

void MsgStoreGetDataC2S::InitAsDefaultInstance() {
}

MsgStoreGetDataC2S::MsgStoreGetDataC2S(const MsgStoreGetDataC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgStoreGetDataC2S)
}

void MsgStoreGetDataC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2800;
  iggid_ = GOOGLE_LONGLONG(0);
  uuid_ = GOOGLE_LONGLONG(0);
  new_version_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreGetDataC2S::~MsgStoreGetDataC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgStoreGetDataC2S)
  SharedDtor();
}

void MsgStoreGetDataC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStoreGetDataC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreGetDataC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreGetDataC2S_descriptor_;
}

const MsgStoreGetDataC2S& MsgStoreGetDataC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStore_2eproto();
  return *default_instance_;
}

MsgStoreGetDataC2S* MsgStoreGetDataC2S::default_instance_ = NULL;

MsgStoreGetDataC2S* MsgStoreGetDataC2S::New() const {
  return new MsgStoreGetDataC2S;
}

void MsgStoreGetDataC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgStoreGetDataC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(new_version_, uuid_);
    msgtype_ = 2800;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreGetDataC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgStoreGetDataC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_GET_DATA_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_new_version;
        break;
      }

      // optional bool new_version = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_new_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_version_)));
          set_has_new_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgStoreGetDataC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgStoreGetDataC2S)
  return false;
#undef DO_
}

void MsgStoreGetDataC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgStoreGetDataC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_GET_DATA_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uuid(), output);
  }

  // optional bool new_version = 4 [default = false];
  if (has_new_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->new_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgStoreGetDataC2S)
}

::google::protobuf::uint8* MsgStoreGetDataC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgStoreGetDataC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_GET_DATA_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uuid(), target);
  }

  // optional bool new_version = 4 [default = false];
  if (has_new_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->new_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgStoreGetDataC2S)
  return target;
}

int MsgStoreGetDataC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_GET_DATA_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional bool new_version = 4 [default = false];
    if (has_new_version()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreGetDataC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreGetDataC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreGetDataC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreGetDataC2S::MergeFrom(const MsgStoreGetDataC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_new_version()) {
      set_new_version(from.new_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreGetDataC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreGetDataC2S::CopyFrom(const MsgStoreGetDataC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreGetDataC2S::IsInitialized() const {

  return true;
}

void MsgStoreGetDataC2S::Swap(MsgStoreGetDataC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(uuid_, other->uuid_);
    std::swap(new_version_, other->new_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreGetDataC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreGetDataC2S_descriptor_;
  metadata.reflection = MsgStoreGetDataC2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgStoreGetDataResultS2C_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreGetDataResultS2C_RESULT_descriptor_;
}
bool MsgStoreGetDataResultS2C_RESULT_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgStoreGetDataResultS2C_RESULT MsgStoreGetDataResultS2C::FAILURE;
const MsgStoreGetDataResultS2C_RESULT MsgStoreGetDataResultS2C::SUCCESS;
const MsgStoreGetDataResultS2C_RESULT MsgStoreGetDataResultS2C::RESULT_MIN;
const MsgStoreGetDataResultS2C_RESULT MsgStoreGetDataResultS2C::RESULT_MAX;
const int MsgStoreGetDataResultS2C::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgStoreGetDataResultS2C::kMsgTypeFieldNumber;
const int MsgStoreGetDataResultS2C::kResultFieldNumber;
const int MsgStoreGetDataResultS2C::kDataFieldNumber;
const int MsgStoreGetDataResultS2C::kGoodsDataFieldNumber;
#endif  // !_MSC_VER

MsgStoreGetDataResultS2C::MsgStoreGetDataResultS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgStoreGetDataResultS2C)
}

void MsgStoreGetDataResultS2C::InitAsDefaultInstance() {
  data_ = const_cast< ::MsgPB::MsgStoreData*>(&::MsgPB::MsgStoreData::default_instance());
  goods_data_ = const_cast< ::MsgPB::MsgStoreGoodsData*>(&::MsgPB::MsgStoreGoodsData::default_instance());
}

MsgStoreGetDataResultS2C::MsgStoreGetDataResultS2C(const MsgStoreGetDataResultS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgStoreGetDataResultS2C)
}

void MsgStoreGetDataResultS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2801;
  result_ = -1;
  data_ = NULL;
  goods_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreGetDataResultS2C::~MsgStoreGetDataResultS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgStoreGetDataResultS2C)
  SharedDtor();
}

void MsgStoreGetDataResultS2C::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete goods_data_;
  }
}

void MsgStoreGetDataResultS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreGetDataResultS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreGetDataResultS2C_descriptor_;
}

const MsgStoreGetDataResultS2C& MsgStoreGetDataResultS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStore_2eproto();
  return *default_instance_;
}

MsgStoreGetDataResultS2C* MsgStoreGetDataResultS2C::default_instance_ = NULL;

MsgStoreGetDataResultS2C* MsgStoreGetDataResultS2C::New() const {
  return new MsgStoreGetDataResultS2C;
}

void MsgStoreGetDataResultS2C::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 2801;
    result_ = -1;
    if (has_data()) {
      if (data_ != NULL) data_->::MsgPB::MsgStoreData::Clear();
    }
    if (has_goods_data()) {
      if (goods_data_ != NULL) goods_data_->::MsgPB::MsgStoreGoodsData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreGetDataResultS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgStoreGetDataResultS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_GET_DATA_RESULT_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MsgPB.MsgStoreGetDataResultS2C.RESULT result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgStoreGetDataResultS2C_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::MsgStoreGetDataResultS2C_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .MsgPB.MsgStoreData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_goods_data;
        break;
      }

      // optional .MsgPB.MsgStoreGoodsData goods_data = 4;
      case 4: {
        if (tag == 34) {
         parse_goods_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goods_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgStoreGetDataResultS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgStoreGetDataResultS2C)
  return false;
#undef DO_
}

void MsgStoreGetDataResultS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgStoreGetDataResultS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_GET_DATA_RESULT_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.MsgStoreGetDataResultS2C.RESULT result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .MsgPB.MsgStoreData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  // optional .MsgPB.MsgStoreGoodsData goods_data = 4;
  if (has_goods_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->goods_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgStoreGetDataResultS2C)
}

::google::protobuf::uint8* MsgStoreGetDataResultS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgStoreGetDataResultS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_GET_DATA_RESULT_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.MsgStoreGetDataResultS2C.RESULT result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .MsgPB.MsgStoreData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  // optional .MsgPB.MsgStoreGoodsData goods_data = 4;
  if (has_goods_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->goods_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgStoreGetDataResultS2C)
  return target;
}

int MsgStoreGetDataResultS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_GET_DATA_RESULT_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.MsgStoreGetDataResultS2C.RESULT result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .MsgPB.MsgStoreData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .MsgPB.MsgStoreGoodsData goods_data = 4;
    if (has_goods_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goods_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreGetDataResultS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreGetDataResultS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreGetDataResultS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreGetDataResultS2C::MergeFrom(const MsgStoreGetDataResultS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_data()) {
      mutable_data()->::MsgPB::MsgStoreData::MergeFrom(from.data());
    }
    if (from.has_goods_data()) {
      mutable_goods_data()->::MsgPB::MsgStoreGoodsData::MergeFrom(from.goods_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreGetDataResultS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreGetDataResultS2C::CopyFrom(const MsgStoreGetDataResultS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreGetDataResultS2C::IsInitialized() const {

  return true;
}

void MsgStoreGetDataResultS2C::Swap(MsgStoreGetDataResultS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(result_, other->result_);
    std::swap(data_, other->data_);
    std::swap(goods_data_, other->goods_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreGetDataResultS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreGetDataResultS2C_descriptor_;
  metadata.reflection = MsgStoreGetDataResultS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStoreBuyC2S::kMsgTypeFieldNumber;
const int MsgStoreBuyC2S::kIggidFieldNumber;
const int MsgStoreBuyC2S::kProtectorIdFieldNumber;
const int MsgStoreBuyC2S::kUuidFieldNumber;
const int MsgStoreBuyC2S::kGoodIndexFieldNumber;
const int MsgStoreBuyC2S::kBuyItemIdFieldNumber;
const int MsgStoreBuyC2S::kBuyItemCountFieldNumber;
const int MsgStoreBuyC2S::kCostItemIdFieldNumber;
const int MsgStoreBuyC2S::kCostItemCountFieldNumber;
const int MsgStoreBuyC2S::kBatchFieldNumber;
const int MsgStoreBuyC2S::kCountryFieldNumber;
const int MsgStoreBuyC2S::kNewVersionFieldNumber;
#endif  // !_MSC_VER

MsgStoreBuyC2S::MsgStoreBuyC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgStoreBuyC2S)
}

void MsgStoreBuyC2S::InitAsDefaultInstance() {
}

MsgStoreBuyC2S::MsgStoreBuyC2S(const MsgStoreBuyC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgStoreBuyC2S)
}

void MsgStoreBuyC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2802;
  iggid_ = GOOGLE_LONGLONG(0);
  protectorid_ = GOOGLE_LONGLONG(0);
  uuid_ = GOOGLE_LONGLONG(0);
  good_index_ = 0;
  buy_item_id_ = 0;
  buy_item_count_ = 0;
  cost_item_id_ = 0;
  cost_item_count_ = 0;
  batch_ = 0;
  country_ = GOOGLE_LONGLONG(0);
  new_version_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreBuyC2S::~MsgStoreBuyC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgStoreBuyC2S)
  SharedDtor();
}

void MsgStoreBuyC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStoreBuyC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreBuyC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreBuyC2S_descriptor_;
}

const MsgStoreBuyC2S& MsgStoreBuyC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStore_2eproto();
  return *default_instance_;
}

MsgStoreBuyC2S* MsgStoreBuyC2S::default_instance_ = NULL;

MsgStoreBuyC2S* MsgStoreBuyC2S::New() const {
  return new MsgStoreBuyC2S;
}

void MsgStoreBuyC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgStoreBuyC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(iggid_, protectorid_);
    ZR_(good_index_, cost_item_id_);
    msgtype_ = 2802;
  }
  ZR_(cost_item_count_, new_version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreBuyC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgStoreBuyC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_BUY_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_protectorId;
        break;
      }

      // optional int64 protectorId = 3;
      case 3: {
        if (tag == 24) {
         parse_protectorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &protectorid_)));
          set_has_protectorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 4;
      case 4: {
        if (tag == 32) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_good_index;
        break;
      }

      // optional int32 good_index = 5;
      case 5: {
        if (tag == 40) {
         parse_good_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &good_index_)));
          set_has_good_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_buy_item_id;
        break;
      }

      // optional int32 buy_item_id = 6;
      case 6: {
        if (tag == 48) {
         parse_buy_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_item_id_)));
          set_has_buy_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_buy_item_count;
        break;
      }

      // optional int32 buy_item_count = 7;
      case 7: {
        if (tag == 56) {
         parse_buy_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_item_count_)));
          set_has_buy_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cost_item_id;
        break;
      }

      // optional int32 cost_item_id = 8;
      case 8: {
        if (tag == 64) {
         parse_cost_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_item_id_)));
          set_has_cost_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cost_item_count;
        break;
      }

      // optional int32 cost_item_count = 9;
      case 9: {
        if (tag == 72) {
         parse_cost_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_item_count_)));
          set_has_cost_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_batch;
        break;
      }

      // optional int32 batch = 10;
      case 10: {
        if (tag == 80) {
         parse_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_)));
          set_has_batch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_country;
        break;
      }

      // optional int64 country = 11;
      case 11: {
        if (tag == 88) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_new_version;
        break;
      }

      // optional bool new_version = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_new_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_version_)));
          set_has_new_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgStoreBuyC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgStoreBuyC2S)
  return false;
#undef DO_
}

void MsgStoreBuyC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgStoreBuyC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_BUY_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int64 protectorId = 3;
  if (has_protectorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->protectorid(), output);
  }

  // optional int64 uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->uuid(), output);
  }

  // optional int32 good_index = 5;
  if (has_good_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->good_index(), output);
  }

  // optional int32 buy_item_id = 6;
  if (has_buy_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->buy_item_id(), output);
  }

  // optional int32 buy_item_count = 7;
  if (has_buy_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buy_item_count(), output);
  }

  // optional int32 cost_item_id = 8;
  if (has_cost_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cost_item_id(), output);
  }

  // optional int32 cost_item_count = 9;
  if (has_cost_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cost_item_count(), output);
  }

  // optional int32 batch = 10;
  if (has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->batch(), output);
  }

  // optional int64 country = 11;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->country(), output);
  }

  // optional bool new_version = 12 [default = false];
  if (has_new_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->new_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgStoreBuyC2S)
}

::google::protobuf::uint8* MsgStoreBuyC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgStoreBuyC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_BUY_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int64 protectorId = 3;
  if (has_protectorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->protectorid(), target);
  }

  // optional int64 uuid = 4;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->uuid(), target);
  }

  // optional int32 good_index = 5;
  if (has_good_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->good_index(), target);
  }

  // optional int32 buy_item_id = 6;
  if (has_buy_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->buy_item_id(), target);
  }

  // optional int32 buy_item_count = 7;
  if (has_buy_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buy_item_count(), target);
  }

  // optional int32 cost_item_id = 8;
  if (has_cost_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cost_item_id(), target);
  }

  // optional int32 cost_item_count = 9;
  if (has_cost_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cost_item_count(), target);
  }

  // optional int32 batch = 10;
  if (has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->batch(), target);
  }

  // optional int64 country = 11;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->country(), target);
  }

  // optional bool new_version = 12 [default = false];
  if (has_new_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->new_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgStoreBuyC2S)
  return target;
}

int MsgStoreBuyC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_BUY_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 protectorId = 3;
    if (has_protectorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->protectorid());
    }

    // optional int64 uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional int32 good_index = 5;
    if (has_good_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->good_index());
    }

    // optional int32 buy_item_id = 6;
    if (has_buy_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_item_id());
    }

    // optional int32 buy_item_count = 7;
    if (has_buy_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_item_count());
    }

    // optional int32 cost_item_id = 8;
    if (has_cost_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_item_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cost_item_count = 9;
    if (has_cost_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_item_count());
    }

    // optional int32 batch = 10;
    if (has_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch());
    }

    // optional int64 country = 11;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->country());
    }

    // optional bool new_version = 12 [default = false];
    if (has_new_version()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreBuyC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreBuyC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreBuyC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreBuyC2S::MergeFrom(const MsgStoreBuyC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_protectorid()) {
      set_protectorid(from.protectorid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_good_index()) {
      set_good_index(from.good_index());
    }
    if (from.has_buy_item_id()) {
      set_buy_item_id(from.buy_item_id());
    }
    if (from.has_buy_item_count()) {
      set_buy_item_count(from.buy_item_count());
    }
    if (from.has_cost_item_id()) {
      set_cost_item_id(from.cost_item_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cost_item_count()) {
      set_cost_item_count(from.cost_item_count());
    }
    if (from.has_batch()) {
      set_batch(from.batch());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_new_version()) {
      set_new_version(from.new_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreBuyC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreBuyC2S::CopyFrom(const MsgStoreBuyC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreBuyC2S::IsInitialized() const {

  return true;
}

void MsgStoreBuyC2S::Swap(MsgStoreBuyC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(protectorid_, other->protectorid_);
    std::swap(uuid_, other->uuid_);
    std::swap(good_index_, other->good_index_);
    std::swap(buy_item_id_, other->buy_item_id_);
    std::swap(buy_item_count_, other->buy_item_count_);
    std::swap(cost_item_id_, other->cost_item_id_);
    std::swap(cost_item_count_, other->cost_item_count_);
    std::swap(batch_, other->batch_);
    std::swap(country_, other->country_);
    std::swap(new_version_, other->new_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreBuyC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreBuyC2S_descriptor_;
  metadata.reflection = MsgStoreBuyC2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgStoreBuyResultS2C_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreBuyResultS2C_RESULT_descriptor_;
}
bool MsgStoreBuyResultS2C_RESULT_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgStoreBuyResultS2C_RESULT MsgStoreBuyResultS2C::FAILURE;
const MsgStoreBuyResultS2C_RESULT MsgStoreBuyResultS2C::SUCCESS;
const MsgStoreBuyResultS2C_RESULT MsgStoreBuyResultS2C::TEMPLATE_ERROR;
const MsgStoreBuyResultS2C_RESULT MsgStoreBuyResultS2C::SOLD_OUT;
const MsgStoreBuyResultS2C_RESULT MsgStoreBuyResultS2C::PACKET_IS_FULL;
const MsgStoreBuyResultS2C_RESULT MsgStoreBuyResultS2C::LAKE_OF_COIN;
const MsgStoreBuyResultS2C_RESULT MsgStoreBuyResultS2C::LAKE_OF_TICKET;
const MsgStoreBuyResultS2C_RESULT MsgStoreBuyResultS2C::LAKE_OF_ITEM;
const MsgStoreBuyResultS2C_RESULT MsgStoreBuyResultS2C::RESULT_MIN;
const MsgStoreBuyResultS2C_RESULT MsgStoreBuyResultS2C::RESULT_MAX;
const int MsgStoreBuyResultS2C::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgStoreBuyResultS2C::kMsgTypeFieldNumber;
const int MsgStoreBuyResultS2C::kUuidFieldNumber;
const int MsgStoreBuyResultS2C::kResultFieldNumber;
const int MsgStoreBuyResultS2C::kDataFieldNumber;
const int MsgStoreBuyResultS2C::kGoodIndexFieldNumber;
const int MsgStoreBuyResultS2C::kGoodsDataFieldNumber;
#endif  // !_MSC_VER

MsgStoreBuyResultS2C::MsgStoreBuyResultS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgStoreBuyResultS2C)
}

void MsgStoreBuyResultS2C::InitAsDefaultInstance() {
  data_ = const_cast< ::MsgPB::MsgStoreData*>(&::MsgPB::MsgStoreData::default_instance());
  goods_data_ = const_cast< ::MsgPB::MsgStoreGoodsData*>(&::MsgPB::MsgStoreGoodsData::default_instance());
}

MsgStoreBuyResultS2C::MsgStoreBuyResultS2C(const MsgStoreBuyResultS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgStoreBuyResultS2C)
}

void MsgStoreBuyResultS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2803;
  uuid_ = GOOGLE_LONGLONG(0);
  result_ = -1;
  data_ = NULL;
  good_index_ = 0;
  goods_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreBuyResultS2C::~MsgStoreBuyResultS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgStoreBuyResultS2C)
  SharedDtor();
}

void MsgStoreBuyResultS2C::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete goods_data_;
  }
}

void MsgStoreBuyResultS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreBuyResultS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreBuyResultS2C_descriptor_;
}

const MsgStoreBuyResultS2C& MsgStoreBuyResultS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStore_2eproto();
  return *default_instance_;
}

MsgStoreBuyResultS2C* MsgStoreBuyResultS2C::default_instance_ = NULL;

MsgStoreBuyResultS2C* MsgStoreBuyResultS2C::New() const {
  return new MsgStoreBuyResultS2C;
}

void MsgStoreBuyResultS2C::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    msgtype_ = 2803;
    uuid_ = GOOGLE_LONGLONG(0);
    result_ = -1;
    if (has_data()) {
      if (data_ != NULL) data_->::MsgPB::MsgStoreData::Clear();
    }
    good_index_ = 0;
    if (has_goods_data()) {
      if (goods_data_ != NULL) goods_data_->::MsgPB::MsgStoreGoodsData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreBuyResultS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgStoreBuyResultS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_BUY_RESULT_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 2;
      case 2: {
        if (tag == 16) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .MsgPB.MsgStoreBuyResultS2C.RESULT result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgStoreBuyResultS2C_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::MsgStoreBuyResultS2C_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .MsgPB.MsgStoreData data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_good_index;
        break;
      }

      // optional int32 good_index = 5;
      case 5: {
        if (tag == 40) {
         parse_good_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &good_index_)));
          set_has_good_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_goods_data;
        break;
      }

      // optional .MsgPB.MsgStoreGoodsData goods_data = 6;
      case 6: {
        if (tag == 50) {
         parse_goods_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goods_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgStoreBuyResultS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgStoreBuyResultS2C)
  return false;
#undef DO_
}

void MsgStoreBuyResultS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgStoreBuyResultS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_BUY_RESULT_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uuid(), output);
  }

  // optional .MsgPB.MsgStoreBuyResultS2C.RESULT result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional .MsgPB.MsgStoreData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  // optional int32 good_index = 5;
  if (has_good_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->good_index(), output);
  }

  // optional .MsgPB.MsgStoreGoodsData goods_data = 6;
  if (has_goods_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->goods_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgStoreBuyResultS2C)
}

::google::protobuf::uint8* MsgStoreBuyResultS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgStoreBuyResultS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_BUY_RESULT_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uuid(), target);
  }

  // optional .MsgPB.MsgStoreBuyResultS2C.RESULT result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional .MsgPB.MsgStoreData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  // optional int32 good_index = 5;
  if (has_good_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->good_index(), target);
  }

  // optional .MsgPB.MsgStoreGoodsData goods_data = 6;
  if (has_goods_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->goods_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgStoreBuyResultS2C)
  return target;
}

int MsgStoreBuyResultS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_BUY_RESULT_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional .MsgPB.MsgStoreBuyResultS2C.RESULT result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .MsgPB.MsgStoreData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int32 good_index = 5;
    if (has_good_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->good_index());
    }

    // optional .MsgPB.MsgStoreGoodsData goods_data = 6;
    if (has_goods_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goods_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreBuyResultS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreBuyResultS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreBuyResultS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreBuyResultS2C::MergeFrom(const MsgStoreBuyResultS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_data()) {
      mutable_data()->::MsgPB::MsgStoreData::MergeFrom(from.data());
    }
    if (from.has_good_index()) {
      set_good_index(from.good_index());
    }
    if (from.has_goods_data()) {
      mutable_goods_data()->::MsgPB::MsgStoreGoodsData::MergeFrom(from.goods_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreBuyResultS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreBuyResultS2C::CopyFrom(const MsgStoreBuyResultS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreBuyResultS2C::IsInitialized() const {

  return true;
}

void MsgStoreBuyResultS2C::Swap(MsgStoreBuyResultS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(uuid_, other->uuid_);
    std::swap(result_, other->result_);
    std::swap(data_, other->data_);
    std::swap(good_index_, other->good_index_);
    std::swap(goods_data_, other->goods_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreBuyResultS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreBuyResultS2C_descriptor_;
  metadata.reflection = MsgStoreBuyResultS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStoreSellC2S::kMsgTypeFieldNumber;
const int MsgStoreSellC2S::kIggidFieldNumber;
const int MsgStoreSellC2S::kItemUuidFieldNumber;
const int MsgStoreSellC2S::kItemNumFieldNumber;
#endif  // !_MSC_VER

MsgStoreSellC2S::MsgStoreSellC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgStoreSellC2S)
}

void MsgStoreSellC2S::InitAsDefaultInstance() {
}

MsgStoreSellC2S::MsgStoreSellC2S(const MsgStoreSellC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgStoreSellC2S)
}

void MsgStoreSellC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2804;
  iggid_ = GOOGLE_LONGLONG(0);
  item_uuid_ = GOOGLE_LONGLONG(0);
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreSellC2S::~MsgStoreSellC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgStoreSellC2S)
  SharedDtor();
}

void MsgStoreSellC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStoreSellC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreSellC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreSellC2S_descriptor_;
}

const MsgStoreSellC2S& MsgStoreSellC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStore_2eproto();
  return *default_instance_;
}

MsgStoreSellC2S* MsgStoreSellC2S::default_instance_ = NULL;

MsgStoreSellC2S* MsgStoreSellC2S::New() const {
  return new MsgStoreSellC2S;
}

void MsgStoreSellC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgStoreSellC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(item_num_, item_uuid_);
    msgtype_ = 2804;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreSellC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgStoreSellC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_SELL_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_uuid;
        break;
      }

      // optional int64 item_uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_item_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_uuid_)));
          set_has_item_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 4;
      case 4: {
        if (tag == 32) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgStoreSellC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgStoreSellC2S)
  return false;
#undef DO_
}

void MsgStoreSellC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgStoreSellC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_SELL_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int64 item_uuid = 3;
  if (has_item_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->item_uuid(), output);
  }

  // optional int32 item_num = 4;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgStoreSellC2S)
}

::google::protobuf::uint8* MsgStoreSellC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgStoreSellC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_SELL_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int64 item_uuid = 3;
  if (has_item_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->item_uuid(), target);
  }

  // optional int32 item_num = 4;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgStoreSellC2S)
  return target;
}

int MsgStoreSellC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_SELL_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 item_uuid = 3;
    if (has_item_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_uuid());
    }

    // optional int32 item_num = 4;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreSellC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreSellC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreSellC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreSellC2S::MergeFrom(const MsgStoreSellC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_item_uuid()) {
      set_item_uuid(from.item_uuid());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreSellC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreSellC2S::CopyFrom(const MsgStoreSellC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreSellC2S::IsInitialized() const {

  return true;
}

void MsgStoreSellC2S::Swap(MsgStoreSellC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(item_uuid_, other->item_uuid_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreSellC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreSellC2S_descriptor_;
  metadata.reflection = MsgStoreSellC2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgStoreSellResultS2C_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreSellResultS2C_RESULT_descriptor_;
}
bool MsgStoreSellResultS2C_RESULT_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgStoreSellResultS2C_RESULT MsgStoreSellResultS2C::FAILURE;
const MsgStoreSellResultS2C_RESULT MsgStoreSellResultS2C::SUCCESS;
const MsgStoreSellResultS2C_RESULT MsgStoreSellResultS2C::TEMPLATE_ERROR;
const MsgStoreSellResultS2C_RESULT MsgStoreSellResultS2C::LAKE_OF_ITEM;
const MsgStoreSellResultS2C_RESULT MsgStoreSellResultS2C::COIN_IS_FULL;
const MsgStoreSellResultS2C_RESULT MsgStoreSellResultS2C::TICKET_IS_FULL;
const MsgStoreSellResultS2C_RESULT MsgStoreSellResultS2C::MAX_SELL;
const MsgStoreSellResultS2C_RESULT MsgStoreSellResultS2C::ITEM_NOT_FOUND;
const MsgStoreSellResultS2C_RESULT MsgStoreSellResultS2C::RESULT_MIN;
const MsgStoreSellResultS2C_RESULT MsgStoreSellResultS2C::RESULT_MAX;
const int MsgStoreSellResultS2C::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgStoreSellResultS2C::kMsgTypeFieldNumber;
const int MsgStoreSellResultS2C::kResultFieldNumber;
const int MsgStoreSellResultS2C::kTotalCoinFieldNumber;
const int MsgStoreSellResultS2C::kTotalTicketFieldNumber;
const int MsgStoreSellResultS2C::kTotalEndlessCoinFieldNumber;
const int MsgStoreSellResultS2C::kSellLimitDataFieldNumber;
#endif  // !_MSC_VER

MsgStoreSellResultS2C::MsgStoreSellResultS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgStoreSellResultS2C)
}

void MsgStoreSellResultS2C::InitAsDefaultInstance() {
}

MsgStoreSellResultS2C::MsgStoreSellResultS2C(const MsgStoreSellResultS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgStoreSellResultS2C)
}

void MsgStoreSellResultS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2805;
  result_ = -1;
  total_coin_ = 0;
  total_ticket_ = 0;
  total_endless_coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreSellResultS2C::~MsgStoreSellResultS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgStoreSellResultS2C)
  SharedDtor();
}

void MsgStoreSellResultS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStoreSellResultS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreSellResultS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreSellResultS2C_descriptor_;
}

const MsgStoreSellResultS2C& MsgStoreSellResultS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStore_2eproto();
  return *default_instance_;
}

MsgStoreSellResultS2C* MsgStoreSellResultS2C::default_instance_ = NULL;

MsgStoreSellResultS2C* MsgStoreSellResultS2C::New() const {
  return new MsgStoreSellResultS2C;
}

void MsgStoreSellResultS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgStoreSellResultS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(total_coin_, total_ticket_);
    msgtype_ = 2805;
    result_ = -1;
    total_endless_coin_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  selllimitdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreSellResultS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgStoreSellResultS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_SELL_RESULT_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .MsgPB.MsgStoreSellResultS2C.RESULT result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgStoreSellResultS2C_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::MsgStoreSellResultS2C_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_coin;
        break;
      }

      // optional int32 total_coin = 4;
      case 4: {
        if (tag == 32) {
         parse_total_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_coin_)));
          set_has_total_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_total_ticket;
        break;
      }

      // optional int32 total_ticket = 5;
      case 5: {
        if (tag == 40) {
         parse_total_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_ticket_)));
          set_has_total_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_total_endless_coin;
        break;
      }

      // optional int32 total_endless_coin = 6;
      case 6: {
        if (tag == 48) {
         parse_total_endless_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_endless_coin_)));
          set_has_total_endless_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SellLimitData;
        break;
      }

      // repeated .MsgPB.MsgStoreSellLimitData SellLimitData = 7;
      case 7: {
        if (tag == 58) {
         parse_SellLimitData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selllimitdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SellLimitData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgStoreSellResultS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgStoreSellResultS2C)
  return false;
#undef DO_
}

void MsgStoreSellResultS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgStoreSellResultS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_SELL_RESULT_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.MsgStoreSellResultS2C.RESULT result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional int32 total_coin = 4;
  if (has_total_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_coin(), output);
  }

  // optional int32 total_ticket = 5;
  if (has_total_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_ticket(), output);
  }

  // optional int32 total_endless_coin = 6;
  if (has_total_endless_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_endless_coin(), output);
  }

  // repeated .MsgPB.MsgStoreSellLimitData SellLimitData = 7;
  for (int i = 0; i < this->selllimitdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->selllimitdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgStoreSellResultS2C)
}

::google::protobuf::uint8* MsgStoreSellResultS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgStoreSellResultS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_SELL_RESULT_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.MsgStoreSellResultS2C.RESULT result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional int32 total_coin = 4;
  if (has_total_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_coin(), target);
  }

  // optional int32 total_ticket = 5;
  if (has_total_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_ticket(), target);
  }

  // optional int32 total_endless_coin = 6;
  if (has_total_endless_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total_endless_coin(), target);
  }

  // repeated .MsgPB.MsgStoreSellLimitData SellLimitData = 7;
  for (int i = 0; i < this->selllimitdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->selllimitdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgStoreSellResultS2C)
  return target;
}

int MsgStoreSellResultS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_STORE_SELL_RESULT_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.MsgStoreSellResultS2C.RESULT result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 total_coin = 4;
    if (has_total_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_coin());
    }

    // optional int32 total_ticket = 5;
    if (has_total_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_ticket());
    }

    // optional int32 total_endless_coin = 6;
    if (has_total_endless_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_endless_coin());
    }

  }
  // repeated .MsgPB.MsgStoreSellLimitData SellLimitData = 7;
  total_size += 1 * this->selllimitdata_size();
  for (int i = 0; i < this->selllimitdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selllimitdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreSellResultS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreSellResultS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreSellResultS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreSellResultS2C::MergeFrom(const MsgStoreSellResultS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  selllimitdata_.MergeFrom(from.selllimitdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_total_coin()) {
      set_total_coin(from.total_coin());
    }
    if (from.has_total_ticket()) {
      set_total_ticket(from.total_ticket());
    }
    if (from.has_total_endless_coin()) {
      set_total_endless_coin(from.total_endless_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreSellResultS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreSellResultS2C::CopyFrom(const MsgStoreSellResultS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreSellResultS2C::IsInitialized() const {

  return true;
}

void MsgStoreSellResultS2C::Swap(MsgStoreSellResultS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(result_, other->result_);
    std::swap(total_coin_, other->total_coin_);
    std::swap(total_ticket_, other->total_ticket_);
    std::swap(total_endless_coin_, other->total_endless_coin_);
    selllimitdata_.Swap(&other->selllimitdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreSellResultS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreSellResultS2C_descriptor_;
  metadata.reflection = MsgStoreSellResultS2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
