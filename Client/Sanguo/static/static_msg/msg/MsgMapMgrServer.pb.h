// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgMapMgrServer.proto

#ifndef PROTOBUF_MsgMapMgrServer_2eproto__INCLUDED
#define PROTOBUF_MsgMapMgrServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "MsgType.pb.h"
// @@protoc_insertion_point(includes)

namespace MsgPB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

class MsgToGlientWrap;
class MsgTransferToMapSrv;
class MsgTransferClientMsgToMapSrv;
class MsgTransferToGameSrv;
class MsgTransferToMatchSrv;
class MsgTransferToMailSrv;
class MsgTransferToAuctionSrv;
class MsgTransferToLeaderboardSrv;
class MsgTransferToMapSrvByMapSrvId;
class MsgRegisterEventLockTimerToGameSrv;
class MsgServerStartUpFinishS2S;
class MsgNotifyRemoveMap;
class MsgMapServerNotAvalible;
class MsgCommonNotification;
class MsgToMoreClient;
class PBServerInfo;
class MsgMapMgrAllMapServerInfo_MGR2GS;
class MsgRemoveCachePlayerS2S;
class MsgCreateMapSucMS2MGS;
class MsgPlayerMapBatchDBDataUnlockMGS2MS;

enum MsgCommonNotification_MODE {
  MsgCommonNotification_MODE_SERVER_NOT_YET_START_UP = 0,
  MsgCommonNotification_MODE_SERVER_IS_SHUTDOWN = 1,
  MsgCommonNotification_MODE_TOO_FREQUENTLY = 2,
  MsgCommonNotification_MODE_NOT_OPEN = 3
};
bool MsgCommonNotification_MODE_IsValid(int value);
const MsgCommonNotification_MODE MsgCommonNotification_MODE_MODE_MIN = MsgCommonNotification_MODE_SERVER_NOT_YET_START_UP;
const MsgCommonNotification_MODE MsgCommonNotification_MODE_MODE_MAX = MsgCommonNotification_MODE_NOT_OPEN;
const int MsgCommonNotification_MODE_MODE_ARRAYSIZE = MsgCommonNotification_MODE_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgCommonNotification_MODE_descriptor();
inline const ::std::string& MsgCommonNotification_MODE_Name(MsgCommonNotification_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgCommonNotification_MODE_descriptor(), value);
}
inline bool MsgCommonNotification_MODE_Parse(
    const ::std::string& name, MsgCommonNotification_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgCommonNotification_MODE>(
    MsgCommonNotification_MODE_descriptor(), name, value);
}
// ===================================================================

class MsgToGlientWrap : public ::google::protobuf::Message {
 public:
  MsgToGlientWrap();
  virtual ~MsgToGlientWrap();

  MsgToGlientWrap(const MsgToGlientWrap& from);

  inline MsgToGlientWrap& operator=(const MsgToGlientWrap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgToGlientWrap& default_instance();

  void Swap(MsgToGlientWrap* other);

  // implements Message ----------------------------------------------

  MsgToGlientWrap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgToGlientWrap& from);
  void MergeFrom(const MsgToGlientWrap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_TO_CLENT_WRAP];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggid = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggidFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional .MsgPB.EMsgType subType = 3;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 3;
  inline ::MsgPB::EMsgType subtype() const;
  inline void set_subtype(::MsgPB::EMsgType value);

  // optional bytes subMsg = 4;
  inline bool has_submsg() const;
  inline void clear_submsg();
  static const int kSubMsgFieldNumber = 4;
  inline const ::std::string& submsg() const;
  inline void set_submsg(const ::std::string& value);
  inline void set_submsg(const char* value);
  inline void set_submsg(const void* value, size_t size);
  inline ::std::string* mutable_submsg();
  inline ::std::string* release_submsg();
  inline void set_allocated_submsg(::std::string* submsg);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgToGlientWrap)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_submsg();
  inline void clear_has_submsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  int msgtype_;
  int subtype_;
  ::std::string* submsg_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgToGlientWrap* default_instance_;
};
// -------------------------------------------------------------------

class MsgTransferToMapSrv : public ::google::protobuf::Message {
 public:
  MsgTransferToMapSrv();
  virtual ~MsgTransferToMapSrv();

  MsgTransferToMapSrv(const MsgTransferToMapSrv& from);

  inline MsgTransferToMapSrv& operator=(const MsgTransferToMapSrv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTransferToMapSrv& default_instance();

  void Swap(MsgTransferToMapSrv* other);

  // implements Message ----------------------------------------------

  MsgTransferToMapSrv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTransferToMapSrv& from);
  void MergeFrom(const MsgTransferToMapSrv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAPSRV];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggId = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggIdFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional .MsgPB.EMsgType subType = 3;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 3;
  inline ::MsgPB::EMsgType subtype() const;
  inline void set_subtype(::MsgPB::EMsgType value);

  // optional bytes transMsg = 4;
  inline bool has_transmsg() const;
  inline void clear_transmsg();
  static const int kTransMsgFieldNumber = 4;
  inline const ::std::string& transmsg() const;
  inline void set_transmsg(const ::std::string& value);
  inline void set_transmsg(const char* value);
  inline void set_transmsg(const void* value, size_t size);
  inline ::std::string* mutable_transmsg();
  inline ::std::string* release_transmsg();
  inline void set_allocated_transmsg(::std::string* transmsg);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgTransferToMapSrv)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_transmsg();
  inline void clear_has_transmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  int msgtype_;
  int subtype_;
  ::std::string* transmsg_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgTransferToMapSrv* default_instance_;
};
// -------------------------------------------------------------------

class MsgTransferClientMsgToMapSrv : public ::google::protobuf::Message {
 public:
  MsgTransferClientMsgToMapSrv();
  virtual ~MsgTransferClientMsgToMapSrv();

  MsgTransferClientMsgToMapSrv(const MsgTransferClientMsgToMapSrv& from);

  inline MsgTransferClientMsgToMapSrv& operator=(const MsgTransferClientMsgToMapSrv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTransferClientMsgToMapSrv& default_instance();

  void Swap(MsgTransferClientMsgToMapSrv* other);

  // implements Message ----------------------------------------------

  MsgTransferClientMsgToMapSrv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTransferClientMsgToMapSrv& from);
  void MergeFrom(const MsgTransferClientMsgToMapSrv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_CLIENTMSG_TO_MAPSRV];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggId = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggIdFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional .MsgPB.EMsgType subType = 3;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 3;
  inline ::MsgPB::EMsgType subtype() const;
  inline void set_subtype(::MsgPB::EMsgType value);

  // optional bytes transMsg = 4;
  inline bool has_transmsg() const;
  inline void clear_transmsg();
  static const int kTransMsgFieldNumber = 4;
  inline const ::std::string& transmsg() const;
  inline void set_transmsg(const ::std::string& value);
  inline void set_transmsg(const char* value);
  inline void set_transmsg(const void* value, size_t size);
  inline ::std::string* mutable_transmsg();
  inline ::std::string* release_transmsg();
  inline void set_allocated_transmsg(::std::string* transmsg);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgTransferClientMsgToMapSrv)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_transmsg();
  inline void clear_has_transmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  int msgtype_;
  int subtype_;
  ::std::string* transmsg_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgTransferClientMsgToMapSrv* default_instance_;
};
// -------------------------------------------------------------------

class MsgTransferToGameSrv : public ::google::protobuf::Message {
 public:
  MsgTransferToGameSrv();
  virtual ~MsgTransferToGameSrv();

  MsgTransferToGameSrv(const MsgTransferToGameSrv& from);

  inline MsgTransferToGameSrv& operator=(const MsgTransferToGameSrv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTransferToGameSrv& default_instance();

  void Swap(MsgTransferToGameSrv* other);

  // implements Message ----------------------------------------------

  MsgTransferToGameSrv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTransferToGameSrv& from);
  void MergeFrom(const MsgTransferToGameSrv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_GAMESRV];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggId = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggIdFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional .MsgPB.EMsgType subType = 3;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 3;
  inline ::MsgPB::EMsgType subtype() const;
  inline void set_subtype(::MsgPB::EMsgType value);

  // optional bytes transMsg = 4;
  inline bool has_transmsg() const;
  inline void clear_transmsg();
  static const int kTransMsgFieldNumber = 4;
  inline const ::std::string& transmsg() const;
  inline void set_transmsg(const ::std::string& value);
  inline void set_transmsg(const char* value);
  inline void set_transmsg(const void* value, size_t size);
  inline ::std::string* mutable_transmsg();
  inline ::std::string* release_transmsg();
  inline void set_allocated_transmsg(::std::string* transmsg);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgTransferToGameSrv)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_transmsg();
  inline void clear_has_transmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  int msgtype_;
  int subtype_;
  ::std::string* transmsg_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgTransferToGameSrv* default_instance_;
};
// -------------------------------------------------------------------

class MsgTransferToMatchSrv : public ::google::protobuf::Message {
 public:
  MsgTransferToMatchSrv();
  virtual ~MsgTransferToMatchSrv();

  MsgTransferToMatchSrv(const MsgTransferToMatchSrv& from);

  inline MsgTransferToMatchSrv& operator=(const MsgTransferToMatchSrv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTransferToMatchSrv& default_instance();

  void Swap(MsgTransferToMatchSrv* other);

  // implements Message ----------------------------------------------

  MsgTransferToMatchSrv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTransferToMatchSrv& from);
  void MergeFrom(const MsgTransferToMatchSrv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MATCHSRV];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggId = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggIdFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional .MsgPB.EMsgType subType = 3;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 3;
  inline ::MsgPB::EMsgType subtype() const;
  inline void set_subtype(::MsgPB::EMsgType value);

  // optional bytes transMsg = 4;
  inline bool has_transmsg() const;
  inline void clear_transmsg();
  static const int kTransMsgFieldNumber = 4;
  inline const ::std::string& transmsg() const;
  inline void set_transmsg(const ::std::string& value);
  inline void set_transmsg(const char* value);
  inline void set_transmsg(const void* value, size_t size);
  inline ::std::string* mutable_transmsg();
  inline ::std::string* release_transmsg();
  inline void set_allocated_transmsg(::std::string* transmsg);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgTransferToMatchSrv)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_transmsg();
  inline void clear_has_transmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  int msgtype_;
  int subtype_;
  ::std::string* transmsg_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgTransferToMatchSrv* default_instance_;
};
// -------------------------------------------------------------------

class MsgTransferToMailSrv : public ::google::protobuf::Message {
 public:
  MsgTransferToMailSrv();
  virtual ~MsgTransferToMailSrv();

  MsgTransferToMailSrv(const MsgTransferToMailSrv& from);

  inline MsgTransferToMailSrv& operator=(const MsgTransferToMailSrv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTransferToMailSrv& default_instance();

  void Swap(MsgTransferToMailSrv* other);

  // implements Message ----------------------------------------------

  MsgTransferToMailSrv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTransferToMailSrv& from);
  void MergeFrom(const MsgTransferToMailSrv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAILSRV];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggId = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggIdFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional .MsgPB.EMsgType subType = 3;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 3;
  inline ::MsgPB::EMsgType subtype() const;
  inline void set_subtype(::MsgPB::EMsgType value);

  // optional bytes transMsg = 4;
  inline bool has_transmsg() const;
  inline void clear_transmsg();
  static const int kTransMsgFieldNumber = 4;
  inline const ::std::string& transmsg() const;
  inline void set_transmsg(const ::std::string& value);
  inline void set_transmsg(const char* value);
  inline void set_transmsg(const void* value, size_t size);
  inline ::std::string* mutable_transmsg();
  inline ::std::string* release_transmsg();
  inline void set_allocated_transmsg(::std::string* transmsg);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgTransferToMailSrv)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_transmsg();
  inline void clear_has_transmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  int msgtype_;
  int subtype_;
  ::std::string* transmsg_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgTransferToMailSrv* default_instance_;
};
// -------------------------------------------------------------------

class MsgTransferToAuctionSrv : public ::google::protobuf::Message {
 public:
  MsgTransferToAuctionSrv();
  virtual ~MsgTransferToAuctionSrv();

  MsgTransferToAuctionSrv(const MsgTransferToAuctionSrv& from);

  inline MsgTransferToAuctionSrv& operator=(const MsgTransferToAuctionSrv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTransferToAuctionSrv& default_instance();

  void Swap(MsgTransferToAuctionSrv* other);

  // implements Message ----------------------------------------------

  MsgTransferToAuctionSrv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTransferToAuctionSrv& from);
  void MergeFrom(const MsgTransferToAuctionSrv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_AUCTIONSRV];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggId = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggIdFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional .MsgPB.EMsgType subType = 3;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 3;
  inline ::MsgPB::EMsgType subtype() const;
  inline void set_subtype(::MsgPB::EMsgType value);

  // optional bytes transMsg = 4;
  inline bool has_transmsg() const;
  inline void clear_transmsg();
  static const int kTransMsgFieldNumber = 4;
  inline const ::std::string& transmsg() const;
  inline void set_transmsg(const ::std::string& value);
  inline void set_transmsg(const char* value);
  inline void set_transmsg(const void* value, size_t size);
  inline ::std::string* mutable_transmsg();
  inline ::std::string* release_transmsg();
  inline void set_allocated_transmsg(::std::string* transmsg);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgTransferToAuctionSrv)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_transmsg();
  inline void clear_has_transmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  int msgtype_;
  int subtype_;
  ::std::string* transmsg_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgTransferToAuctionSrv* default_instance_;
};
// -------------------------------------------------------------------

class MsgTransferToLeaderboardSrv : public ::google::protobuf::Message {
 public:
  MsgTransferToLeaderboardSrv();
  virtual ~MsgTransferToLeaderboardSrv();

  MsgTransferToLeaderboardSrv(const MsgTransferToLeaderboardSrv& from);

  inline MsgTransferToLeaderboardSrv& operator=(const MsgTransferToLeaderboardSrv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTransferToLeaderboardSrv& default_instance();

  void Swap(MsgTransferToLeaderboardSrv* other);

  // implements Message ----------------------------------------------

  MsgTransferToLeaderboardSrv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTransferToLeaderboardSrv& from);
  void MergeFrom(const MsgTransferToLeaderboardSrv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_LEADERBOARDSRV];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggId = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggIdFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional .MsgPB.EMsgType subType = 3;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 3;
  inline ::MsgPB::EMsgType subtype() const;
  inline void set_subtype(::MsgPB::EMsgType value);

  // optional bytes transMsg = 4;
  inline bool has_transmsg() const;
  inline void clear_transmsg();
  static const int kTransMsgFieldNumber = 4;
  inline const ::std::string& transmsg() const;
  inline void set_transmsg(const ::std::string& value);
  inline void set_transmsg(const char* value);
  inline void set_transmsg(const void* value, size_t size);
  inline ::std::string* mutable_transmsg();
  inline ::std::string* release_transmsg();
  inline void set_allocated_transmsg(::std::string* transmsg);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgTransferToLeaderboardSrv)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_transmsg();
  inline void clear_has_transmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  int msgtype_;
  int subtype_;
  ::std::string* transmsg_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgTransferToLeaderboardSrv* default_instance_;
};
// -------------------------------------------------------------------

class MsgTransferToMapSrvByMapSrvId : public ::google::protobuf::Message {
 public:
  MsgTransferToMapSrvByMapSrvId();
  virtual ~MsgTransferToMapSrvByMapSrvId();

  MsgTransferToMapSrvByMapSrvId(const MsgTransferToMapSrvByMapSrvId& from);

  inline MsgTransferToMapSrvByMapSrvId& operator=(const MsgTransferToMapSrvByMapSrvId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTransferToMapSrvByMapSrvId& default_instance();

  void Swap(MsgTransferToMapSrvByMapSrvId* other);

  // implements Message ----------------------------------------------

  MsgTransferToMapSrvByMapSrvId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTransferToMapSrvByMapSrvId& from);
  void MergeFrom(const MsgTransferToMapSrvByMapSrvId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAPSRV_BY_MAPSRVID];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int32 srvid = 2;
  inline bool has_srvid() const;
  inline void clear_srvid();
  static const int kSrvidFieldNumber = 2;
  inline ::google::protobuf::int32 srvid() const;
  inline void set_srvid(::google::protobuf::int32 value);

  // optional .MsgPB.EMsgType subType = 3;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 3;
  inline ::MsgPB::EMsgType subtype() const;
  inline void set_subtype(::MsgPB::EMsgType value);

  // optional bytes transMsg = 4;
  inline bool has_transmsg() const;
  inline void clear_transmsg();
  static const int kTransMsgFieldNumber = 4;
  inline const ::std::string& transmsg() const;
  inline void set_transmsg(const ::std::string& value);
  inline void set_transmsg(const char* value);
  inline void set_transmsg(const void* value, size_t size);
  inline ::std::string* mutable_transmsg();
  inline ::std::string* release_transmsg();
  inline void set_allocated_transmsg(::std::string* transmsg);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgTransferToMapSrvByMapSrvId)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_srvid();
  inline void clear_has_srvid();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_transmsg();
  inline void clear_has_transmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgtype_;
  ::google::protobuf::int32 srvid_;
  ::std::string* transmsg_;
  int subtype_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgTransferToMapSrvByMapSrvId* default_instance_;
};
// -------------------------------------------------------------------

class MsgRegisterEventLockTimerToGameSrv : public ::google::protobuf::Message {
 public:
  MsgRegisterEventLockTimerToGameSrv();
  virtual ~MsgRegisterEventLockTimerToGameSrv();

  MsgRegisterEventLockTimerToGameSrv(const MsgRegisterEventLockTimerToGameSrv& from);

  inline MsgRegisterEventLockTimerToGameSrv& operator=(const MsgRegisterEventLockTimerToGameSrv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgRegisterEventLockTimerToGameSrv& default_instance();

  void Swap(MsgRegisterEventLockTimerToGameSrv* other);

  // implements Message ----------------------------------------------

  MsgRegisterEventLockTimerToGameSrv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgRegisterEventLockTimerToGameSrv& from);
  void MergeFrom(const MsgRegisterEventLockTimerToGameSrv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_EVENT_LOCK_TIMER_TO_GAMESRV];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional .MsgPB.EMsgType subType = 2;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 2;
  inline ::MsgPB::EMsgType subtype() const;
  inline void set_subtype(::MsgPB::EMsgType value);

  // optional int64 eventLockTime = 3;
  inline bool has_eventlocktime() const;
  inline void clear_eventlocktime();
  static const int kEventLockTimeFieldNumber = 3;
  inline ::google::protobuf::int64 eventlocktime() const;
  inline void set_eventlocktime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgRegisterEventLockTimerToGameSrv)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_eventlocktime();
  inline void clear_has_eventlocktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgtype_;
  int subtype_;
  ::google::protobuf::int64 eventlocktime_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgRegisterEventLockTimerToGameSrv* default_instance_;
};
// -------------------------------------------------------------------

class MsgServerStartUpFinishS2S : public ::google::protobuf::Message {
 public:
  MsgServerStartUpFinishS2S();
  virtual ~MsgServerStartUpFinishS2S();

  MsgServerStartUpFinishS2S(const MsgServerStartUpFinishS2S& from);

  inline MsgServerStartUpFinishS2S& operator=(const MsgServerStartUpFinishS2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgServerStartUpFinishS2S& default_instance();

  void Swap(MsgServerStartUpFinishS2S* other);

  // implements Message ----------------------------------------------

  MsgServerStartUpFinishS2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgServerStartUpFinishS2S& from);
  void MergeFrom(const MsgServerStartUpFinishS2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_START_UP_FINISH_S2S];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int32 serverType = 2;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServerTypeFieldNumber = 2;
  inline ::google::protobuf::int32 servertype() const;
  inline void set_servertype(::google::protobuf::int32 value);

  // optional int32 serverId = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgServerStartUpFinishS2S)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_servertype();
  inline void clear_has_servertype();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgtype_;
  ::google::protobuf::int32 servertype_;
  ::google::protobuf::int32 serverid_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgServerStartUpFinishS2S* default_instance_;
};
// -------------------------------------------------------------------

class MsgNotifyRemoveMap : public ::google::protobuf::Message {
 public:
  MsgNotifyRemoveMap();
  virtual ~MsgNotifyRemoveMap();

  MsgNotifyRemoveMap(const MsgNotifyRemoveMap& from);

  inline MsgNotifyRemoveMap& operator=(const MsgNotifyRemoveMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgNotifyRemoveMap& default_instance();

  void Swap(MsgNotifyRemoveMap* other);

  // implements Message ----------------------------------------------

  MsgNotifyRemoveMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgNotifyRemoveMap& from);
  void MergeFrom(const MsgNotifyRemoveMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_REMOVE_MAP_MS2MMS];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 mapuuid = 2;
  inline bool has_mapuuid() const;
  inline void clear_mapuuid();
  static const int kMapuuidFieldNumber = 2;
  inline ::google::protobuf::int64 mapuuid() const;
  inline void set_mapuuid(::google::protobuf::int64 value);

  // optional int32 map_id = 3;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 3;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);

  // optional int64 owner_iggid = 4;
  inline bool has_owner_iggid() const;
  inline void clear_owner_iggid();
  static const int kOwnerIggidFieldNumber = 4;
  inline ::google::protobuf::int64 owner_iggid() const;
  inline void set_owner_iggid(::google::protobuf::int64 value);

  // optional int32 map_type = 5;
  inline bool has_map_type() const;
  inline void clear_map_type();
  static const int kMapTypeFieldNumber = 5;
  inline ::google::protobuf::int32 map_type() const;
  inline void set_map_type(::google::protobuf::int32 value);

  // optional int32 mapserverid = 6;
  inline bool has_mapserverid() const;
  inline void clear_mapserverid();
  static const int kMapserveridFieldNumber = 6;
  inline ::google::protobuf::int32 mapserverid() const;
  inline void set_mapserverid(::google::protobuf::int32 value);

  // optional int32 boss_room = 7;
  inline bool has_boss_room() const;
  inline void clear_boss_room();
  static const int kBossRoomFieldNumber = 7;
  inline ::google::protobuf::int32 boss_room() const;
  inline void set_boss_room(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgNotifyRemoveMap)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_mapuuid();
  inline void clear_has_mapuuid();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_owner_iggid();
  inline void clear_has_owner_iggid();
  inline void set_has_map_type();
  inline void clear_has_map_type();
  inline void set_has_mapserverid();
  inline void clear_has_mapserverid();
  inline void set_has_boss_room();
  inline void clear_has_boss_room();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 mapuuid_;
  int msgtype_;
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int64 owner_iggid_;
  ::google::protobuf::int32 map_type_;
  ::google::protobuf::int32 mapserverid_;
  ::google::protobuf::int32 boss_room_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgNotifyRemoveMap* default_instance_;
};
// -------------------------------------------------------------------

class MsgMapServerNotAvalible : public ::google::protobuf::Message {
 public:
  MsgMapServerNotAvalible();
  virtual ~MsgMapServerNotAvalible();

  MsgMapServerNotAvalible(const MsgMapServerNotAvalible& from);

  inline MsgMapServerNotAvalible& operator=(const MsgMapServerNotAvalible& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgMapServerNotAvalible& default_instance();

  void Swap(MsgMapServerNotAvalible* other);

  // implements Message ----------------------------------------------

  MsgMapServerNotAvalible* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgMapServerNotAvalible& from);
  void MergeFrom(const MsgMapServerNotAvalible& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_NOT_AVALIBLE];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggId = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggIdFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgMapServerNotAvalible)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  int msgtype_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgMapServerNotAvalible* default_instance_;
};
// -------------------------------------------------------------------

class MsgCommonNotification : public ::google::protobuf::Message {
 public:
  MsgCommonNotification();
  virtual ~MsgCommonNotification();

  MsgCommonNotification(const MsgCommonNotification& from);

  inline MsgCommonNotification& operator=(const MsgCommonNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCommonNotification& default_instance();

  void Swap(MsgCommonNotification* other);

  // implements Message ----------------------------------------------

  MsgCommonNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCommonNotification& from);
  void MergeFrom(const MsgCommonNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgCommonNotification_MODE MODE;
  static const MODE SERVER_NOT_YET_START_UP = MsgCommonNotification_MODE_SERVER_NOT_YET_START_UP;
  static const MODE SERVER_IS_SHUTDOWN = MsgCommonNotification_MODE_SERVER_IS_SHUTDOWN;
  static const MODE TOO_FREQUENTLY = MsgCommonNotification_MODE_TOO_FREQUENTLY;
  static const MODE NOT_OPEN = MsgCommonNotification_MODE_NOT_OPEN;
  static inline bool MODE_IsValid(int value) {
    return MsgCommonNotification_MODE_IsValid(value);
  }
  static const MODE MODE_MIN =
    MsgCommonNotification_MODE_MODE_MIN;
  static const MODE MODE_MAX =
    MsgCommonNotification_MODE_MODE_MAX;
  static const int MODE_ARRAYSIZE =
    MsgCommonNotification_MODE_MODE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MODE_descriptor() {
    return MsgCommonNotification_MODE_descriptor();
  }
  static inline const ::std::string& MODE_Name(MODE value) {
    return MsgCommonNotification_MODE_Name(value);
  }
  static inline bool MODE_Parse(const ::std::string& name,
      MODE* value) {
    return MsgCommonNotification_MODE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_COMMAON_NOTIFICATION];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional .MsgPB.MsgCommonNotification.MODE mode = 2;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline ::MsgPB::MsgCommonNotification_MODE mode() const;
  inline void set_mode(::MsgPB::MsgCommonNotification_MODE value);

  // optional int32 param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgCommonNotification)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_param1();
  inline void clear_has_param1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgtype_;
  int mode_;
  ::google::protobuf::int32 param1_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgCommonNotification* default_instance_;
};
// -------------------------------------------------------------------

class MsgToMoreClient : public ::google::protobuf::Message {
 public:
  MsgToMoreClient();
  virtual ~MsgToMoreClient();

  MsgToMoreClient(const MsgToMoreClient& from);

  inline MsgToMoreClient& operator=(const MsgToMoreClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgToMoreClient& default_instance();

  void Swap(MsgToMoreClient* other);

  // implements Message ----------------------------------------------

  MsgToMoreClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgToMoreClient& from);
  void MergeFrom(const MsgToMoreClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_TO_MORE_CLENT];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional .MsgPB.EMsgType subType = 2;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 2;
  inline ::MsgPB::EMsgType subtype() const;
  inline void set_subtype(::MsgPB::EMsgType value);

  // optional bytes subMsg = 3;
  inline bool has_submsg() const;
  inline void clear_submsg();
  static const int kSubMsgFieldNumber = 3;
  inline const ::std::string& submsg() const;
  inline void set_submsg(const ::std::string& value);
  inline void set_submsg(const char* value);
  inline void set_submsg(const void* value, size_t size);
  inline ::std::string* mutable_submsg();
  inline ::std::string* release_submsg();
  inline void set_allocated_submsg(::std::string* submsg);

  // repeated int64 iggidSet = 4;
  inline int iggidset_size() const;
  inline void clear_iggidset();
  static const int kIggidSetFieldNumber = 4;
  inline ::google::protobuf::int64 iggidset(int index) const;
  inline void set_iggidset(int index, ::google::protobuf::int64 value);
  inline void add_iggidset(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      iggidset() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_iggidset();

  // @@protoc_insertion_point(class_scope:MsgPB.MsgToMoreClient)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_submsg();
  inline void clear_has_submsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgtype_;
  int subtype_;
  ::std::string* submsg_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > iggidset_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgToMoreClient* default_instance_;
};
// -------------------------------------------------------------------

class PBServerInfo : public ::google::protobuf::Message {
 public:
  PBServerInfo();
  virtual ~PBServerInfo();

  PBServerInfo(const PBServerInfo& from);

  inline PBServerInfo& operator=(const PBServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBServerInfo& default_instance();

  void Swap(PBServerInfo* other);

  // implements Message ----------------------------------------------

  PBServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBServerInfo& from);
  void MergeFrom(const PBServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // optional int32 server_type = 2;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 2;
  inline ::google::protobuf::int32 server_type() const;
  inline void set_server_type(::google::protobuf::int32 value);

  // optional string listern_ip = 3;
  inline bool has_listern_ip() const;
  inline void clear_listern_ip();
  static const int kListernIpFieldNumber = 3;
  inline const ::std::string& listern_ip() const;
  inline void set_listern_ip(const ::std::string& value);
  inline void set_listern_ip(const char* value);
  inline void set_listern_ip(const char* value, size_t size);
  inline ::std::string* mutable_listern_ip();
  inline ::std::string* release_listern_ip();
  inline void set_allocated_listern_ip(::std::string* listern_ip);

  // optional int32 listern_port = 4;
  inline bool has_listern_port() const;
  inline void clear_listern_port();
  static const int kListernPortFieldNumber = 4;
  inline ::google::protobuf::int32 listern_port() const;
  inline void set_listern_port(::google::protobuf::int32 value);

  // optional int32 area_id = 5;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 5;
  inline ::google::protobuf::int32 area_id() const;
  inline void set_area_id(::google::protobuf::int32 value);

  // optional string domain_name = 6;
  inline bool has_domain_name() const;
  inline void clear_domain_name();
  static const int kDomainNameFieldNumber = 6;
  inline const ::std::string& domain_name() const;
  inline void set_domain_name(const ::std::string& value);
  inline void set_domain_name(const char* value);
  inline void set_domain_name(const char* value, size_t size);
  inline ::std::string* mutable_domain_name();
  inline ::std::string* release_domain_name();
  inline void set_allocated_domain_name(::std::string* domain_name);

  // @@protoc_insertion_point(class_scope:MsgPB.PBServerInfo)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_listern_ip();
  inline void clear_has_listern_ip();
  inline void set_has_listern_port();
  inline void clear_has_listern_port();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_domain_name();
  inline void clear_has_domain_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 server_type_;
  ::std::string* listern_ip_;
  ::google::protobuf::int32 listern_port_;
  ::google::protobuf::int32 area_id_;
  ::std::string* domain_name_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static PBServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgMapMgrAllMapServerInfo_MGR2GS : public ::google::protobuf::Message {
 public:
  MsgMapMgrAllMapServerInfo_MGR2GS();
  virtual ~MsgMapMgrAllMapServerInfo_MGR2GS();

  MsgMapMgrAllMapServerInfo_MGR2GS(const MsgMapMgrAllMapServerInfo_MGR2GS& from);

  inline MsgMapMgrAllMapServerInfo_MGR2GS& operator=(const MsgMapMgrAllMapServerInfo_MGR2GS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgMapMgrAllMapServerInfo_MGR2GS& default_instance();

  void Swap(MsgMapMgrAllMapServerInfo_MGR2GS* other);

  // implements Message ----------------------------------------------

  MsgMapMgrAllMapServerInfo_MGR2GS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgMapMgrAllMapServerInfo_MGR2GS& from);
  void MergeFrom(const MsgMapMgrAllMapServerInfo_MGR2GS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPMGR_ALL_MAPSERVER_INFO_MGR2GS];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // repeated .MsgPB.PBServerInfo server_info = 2;
  inline int server_info_size() const;
  inline void clear_server_info();
  static const int kServerInfoFieldNumber = 2;
  inline const ::MsgPB::PBServerInfo& server_info(int index) const;
  inline ::MsgPB::PBServerInfo* mutable_server_info(int index);
  inline ::MsgPB::PBServerInfo* add_server_info();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgPB::PBServerInfo >&
      server_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgPB::PBServerInfo >*
      mutable_server_info();

  // @@protoc_insertion_point(class_scope:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MsgPB::PBServerInfo > server_info_;
  int msgtype_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgMapMgrAllMapServerInfo_MGR2GS* default_instance_;
};
// -------------------------------------------------------------------

class MsgRemoveCachePlayerS2S : public ::google::protobuf::Message {
 public:
  MsgRemoveCachePlayerS2S();
  virtual ~MsgRemoveCachePlayerS2S();

  MsgRemoveCachePlayerS2S(const MsgRemoveCachePlayerS2S& from);

  inline MsgRemoveCachePlayerS2S& operator=(const MsgRemoveCachePlayerS2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgRemoveCachePlayerS2S& default_instance();

  void Swap(MsgRemoveCachePlayerS2S* other);

  // implements Message ----------------------------------------------

  MsgRemoveCachePlayerS2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgRemoveCachePlayerS2S& from);
  void MergeFrom(const MsgRemoveCachePlayerS2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_CACHE_PLAYER_S2S];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggid = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggidFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgRemoveCachePlayerS2S)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  int msgtype_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgRemoveCachePlayerS2S* default_instance_;
};
// -------------------------------------------------------------------

class MsgCreateMapSucMS2MGS : public ::google::protobuf::Message {
 public:
  MsgCreateMapSucMS2MGS();
  virtual ~MsgCreateMapSucMS2MGS();

  MsgCreateMapSucMS2MGS(const MsgCreateMapSucMS2MGS& from);

  inline MsgCreateMapSucMS2MGS& operator=(const MsgCreateMapSucMS2MGS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCreateMapSucMS2MGS& default_instance();

  void Swap(MsgCreateMapSucMS2MGS* other);

  // implements Message ----------------------------------------------

  MsgCreateMapSucMS2MGS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCreateMapSucMS2MGS& from);
  void MergeFrom(const MsgCreateMapSucMS2MGS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CREATE_MAP_SUC_MS2MGS];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 map_uuid = 2;
  inline bool has_map_uuid() const;
  inline void clear_map_uuid();
  static const int kMapUuidFieldNumber = 2;
  inline ::google::protobuf::int64 map_uuid() const;
  inline void set_map_uuid(::google::protobuf::int64 value);

  // optional int32 map_id = 3;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 3;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);

  // optional int64 owner_iggid = 4;
  inline bool has_owner_iggid() const;
  inline void clear_owner_iggid();
  static const int kOwnerIggidFieldNumber = 4;
  inline ::google::protobuf::int64 owner_iggid() const;
  inline void set_owner_iggid(::google::protobuf::int64 value);

  // optional int32 map_type = 5;
  inline bool has_map_type() const;
  inline void clear_map_type();
  static const int kMapTypeFieldNumber = 5;
  inline ::google::protobuf::int32 map_type() const;
  inline void set_map_type(::google::protobuf::int32 value);

  // optional int32 server_id = 6 [default = -1];
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 6;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgCreateMapSucMS2MGS)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_map_uuid();
  inline void clear_has_map_uuid();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_owner_iggid();
  inline void clear_has_owner_iggid();
  inline void set_has_map_type();
  inline void clear_has_map_type();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 map_uuid_;
  int msgtype_;
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int64 owner_iggid_;
  ::google::protobuf::int32 map_type_;
  ::google::protobuf::int32 server_id_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgCreateMapSucMS2MGS* default_instance_;
};
// -------------------------------------------------------------------

class MsgPlayerMapBatchDBDataUnlockMGS2MS : public ::google::protobuf::Message {
 public:
  MsgPlayerMapBatchDBDataUnlockMGS2MS();
  virtual ~MsgPlayerMapBatchDBDataUnlockMGS2MS();

  MsgPlayerMapBatchDBDataUnlockMGS2MS(const MsgPlayerMapBatchDBDataUnlockMGS2MS& from);

  inline MsgPlayerMapBatchDBDataUnlockMGS2MS& operator=(const MsgPlayerMapBatchDBDataUnlockMGS2MS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPlayerMapBatchDBDataUnlockMGS2MS& default_instance();

  void Swap(MsgPlayerMapBatchDBDataUnlockMGS2MS* other);

  // implements Message ----------------------------------------------

  MsgPlayerMapBatchDBDataUnlockMGS2MS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPlayerMapBatchDBDataUnlockMGS2MS& from);
  void MergeFrom(const MsgPlayerMapBatchDBDataUnlockMGS2MS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MAP_BATCH_DB_DATA_UNLOCK_BY_GM];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggid = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggidFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // optional int32 map_id = 3;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 3;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);

  // optional int64 party_id = 4 [default = -1];
  inline bool has_party_id() const;
  inline void clear_party_id();
  static const int kPartyIdFieldNumber = 4;
  inline ::google::protobuf::int64 party_id() const;
  inline void set_party_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_party_id();
  inline void clear_has_party_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  int msgtype_;
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int64 party_id_;
  friend void  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_AssignDesc_MsgMapMgrServer_2eproto();
  friend void protobuf_ShutdownFile_MsgMapMgrServer_2eproto();

  void InitAsDefaultInstance();
  static MsgPlayerMapBatchDBDataUnlockMGS2MS* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgToGlientWrap

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_TO_CLENT_WRAP];
inline bool MsgToGlientWrap::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgToGlientWrap::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgToGlientWrap::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgToGlientWrap::clear_msgtype() {
  msgtype_ = 1114;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgToGlientWrap::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgToGlientWrap.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgToGlientWrap::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgToGlientWrap.msgType)
}

// optional int64 iggid = 2;
inline bool MsgToGlientWrap::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgToGlientWrap::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgToGlientWrap::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgToGlientWrap::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgToGlientWrap::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgToGlientWrap.iggid)
  return iggid_;
}
inline void MsgToGlientWrap::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgToGlientWrap.iggid)
}

// optional .MsgPB.EMsgType subType = 3;
inline bool MsgToGlientWrap::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgToGlientWrap::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgToGlientWrap::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgToGlientWrap::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::MsgPB::EMsgType MsgToGlientWrap::subtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgToGlientWrap.subType)
  return static_cast< ::MsgPB::EMsgType >(subtype_);
}
inline void MsgToGlientWrap::set_subtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgToGlientWrap.subType)
}

// optional bytes subMsg = 4;
inline bool MsgToGlientWrap::has_submsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgToGlientWrap::set_has_submsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgToGlientWrap::clear_has_submsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgToGlientWrap::clear_submsg() {
  if (submsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    submsg_->clear();
  }
  clear_has_submsg();
}
inline const ::std::string& MsgToGlientWrap::submsg() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgToGlientWrap.subMsg)
  return *submsg_;
}
inline void MsgToGlientWrap::set_submsg(const ::std::string& value) {
  set_has_submsg();
  if (submsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    submsg_ = new ::std::string;
  }
  submsg_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgToGlientWrap.subMsg)
}
inline void MsgToGlientWrap::set_submsg(const char* value) {
  set_has_submsg();
  if (submsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    submsg_ = new ::std::string;
  }
  submsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgToGlientWrap.subMsg)
}
inline void MsgToGlientWrap::set_submsg(const void* value, size_t size) {
  set_has_submsg();
  if (submsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    submsg_ = new ::std::string;
  }
  submsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgToGlientWrap.subMsg)
}
inline ::std::string* MsgToGlientWrap::mutable_submsg() {
  set_has_submsg();
  if (submsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    submsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgToGlientWrap.subMsg)
  return submsg_;
}
inline ::std::string* MsgToGlientWrap::release_submsg() {
  clear_has_submsg();
  if (submsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = submsg_;
    submsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgToGlientWrap::set_allocated_submsg(::std::string* submsg) {
  if (submsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete submsg_;
  }
  if (submsg) {
    set_has_submsg();
    submsg_ = submsg;
  } else {
    clear_has_submsg();
    submsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgToGlientWrap.subMsg)
}

// -------------------------------------------------------------------

// MsgTransferToMapSrv

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAPSRV];
inline bool MsgTransferToMapSrv::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTransferToMapSrv::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTransferToMapSrv::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTransferToMapSrv::clear_msgtype() {
  msgtype_ = 1052;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgTransferToMapSrv::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMapSrv.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgTransferToMapSrv::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMapSrv.msgType)
}

// optional int64 iggId = 2;
inline bool MsgTransferToMapSrv::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTransferToMapSrv::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTransferToMapSrv::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTransferToMapSrv::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgTransferToMapSrv::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMapSrv.iggId)
  return iggid_;
}
inline void MsgTransferToMapSrv::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMapSrv.iggId)
}

// optional .MsgPB.EMsgType subType = 3;
inline bool MsgTransferToMapSrv::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTransferToMapSrv::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTransferToMapSrv::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTransferToMapSrv::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::MsgPB::EMsgType MsgTransferToMapSrv::subtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMapSrv.subType)
  return static_cast< ::MsgPB::EMsgType >(subtype_);
}
inline void MsgTransferToMapSrv::set_subtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMapSrv.subType)
}

// optional bytes transMsg = 4;
inline bool MsgTransferToMapSrv::has_transmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTransferToMapSrv::set_has_transmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTransferToMapSrv::clear_has_transmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTransferToMapSrv::clear_transmsg() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_->clear();
  }
  clear_has_transmsg();
}
inline const ::std::string& MsgTransferToMapSrv::transmsg() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMapSrv.transMsg)
  return *transmsg_;
}
inline void MsgTransferToMapSrv::set_transmsg(const ::std::string& value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMapSrv.transMsg)
}
inline void MsgTransferToMapSrv::set_transmsg(const char* value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgTransferToMapSrv.transMsg)
}
inline void MsgTransferToMapSrv::set_transmsg(const void* value, size_t size) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgTransferToMapSrv.transMsg)
}
inline ::std::string* MsgTransferToMapSrv::mutable_transmsg() {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgTransferToMapSrv.transMsg)
  return transmsg_;
}
inline ::std::string* MsgTransferToMapSrv::release_transmsg() {
  clear_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = transmsg_;
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgTransferToMapSrv::set_allocated_transmsg(::std::string* transmsg) {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (transmsg) {
    set_has_transmsg();
    transmsg_ = transmsg;
  } else {
    clear_has_transmsg();
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgTransferToMapSrv.transMsg)
}

// -------------------------------------------------------------------

// MsgTransferClientMsgToMapSrv

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_CLIENTMSG_TO_MAPSRV];
inline bool MsgTransferClientMsgToMapSrv::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTransferClientMsgToMapSrv::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTransferClientMsgToMapSrv::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTransferClientMsgToMapSrv::clear_msgtype() {
  msgtype_ = 1049;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgTransferClientMsgToMapSrv::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferClientMsgToMapSrv.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgTransferClientMsgToMapSrv::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferClientMsgToMapSrv.msgType)
}

// optional int64 iggId = 2;
inline bool MsgTransferClientMsgToMapSrv::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTransferClientMsgToMapSrv::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTransferClientMsgToMapSrv::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTransferClientMsgToMapSrv::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgTransferClientMsgToMapSrv::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferClientMsgToMapSrv.iggId)
  return iggid_;
}
inline void MsgTransferClientMsgToMapSrv::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferClientMsgToMapSrv.iggId)
}

// optional .MsgPB.EMsgType subType = 3;
inline bool MsgTransferClientMsgToMapSrv::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTransferClientMsgToMapSrv::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTransferClientMsgToMapSrv::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTransferClientMsgToMapSrv::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::MsgPB::EMsgType MsgTransferClientMsgToMapSrv::subtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferClientMsgToMapSrv.subType)
  return static_cast< ::MsgPB::EMsgType >(subtype_);
}
inline void MsgTransferClientMsgToMapSrv::set_subtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferClientMsgToMapSrv.subType)
}

// optional bytes transMsg = 4;
inline bool MsgTransferClientMsgToMapSrv::has_transmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTransferClientMsgToMapSrv::set_has_transmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTransferClientMsgToMapSrv::clear_has_transmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTransferClientMsgToMapSrv::clear_transmsg() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_->clear();
  }
  clear_has_transmsg();
}
inline const ::std::string& MsgTransferClientMsgToMapSrv::transmsg() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferClientMsgToMapSrv.transMsg)
  return *transmsg_;
}
inline void MsgTransferClientMsgToMapSrv::set_transmsg(const ::std::string& value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferClientMsgToMapSrv.transMsg)
}
inline void MsgTransferClientMsgToMapSrv::set_transmsg(const char* value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgTransferClientMsgToMapSrv.transMsg)
}
inline void MsgTransferClientMsgToMapSrv::set_transmsg(const void* value, size_t size) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgTransferClientMsgToMapSrv.transMsg)
}
inline ::std::string* MsgTransferClientMsgToMapSrv::mutable_transmsg() {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgTransferClientMsgToMapSrv.transMsg)
  return transmsg_;
}
inline ::std::string* MsgTransferClientMsgToMapSrv::release_transmsg() {
  clear_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = transmsg_;
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgTransferClientMsgToMapSrv::set_allocated_transmsg(::std::string* transmsg) {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (transmsg) {
    set_has_transmsg();
    transmsg_ = transmsg;
  } else {
    clear_has_transmsg();
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgTransferClientMsgToMapSrv.transMsg)
}

// -------------------------------------------------------------------

// MsgTransferToGameSrv

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_GAMESRV];
inline bool MsgTransferToGameSrv::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTransferToGameSrv::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTransferToGameSrv::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTransferToGameSrv::clear_msgtype() {
  msgtype_ = 1053;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgTransferToGameSrv::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToGameSrv.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgTransferToGameSrv::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToGameSrv.msgType)
}

// optional int64 iggId = 2;
inline bool MsgTransferToGameSrv::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTransferToGameSrv::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTransferToGameSrv::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTransferToGameSrv::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgTransferToGameSrv::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToGameSrv.iggId)
  return iggid_;
}
inline void MsgTransferToGameSrv::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToGameSrv.iggId)
}

// optional .MsgPB.EMsgType subType = 3;
inline bool MsgTransferToGameSrv::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTransferToGameSrv::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTransferToGameSrv::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTransferToGameSrv::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::MsgPB::EMsgType MsgTransferToGameSrv::subtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToGameSrv.subType)
  return static_cast< ::MsgPB::EMsgType >(subtype_);
}
inline void MsgTransferToGameSrv::set_subtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToGameSrv.subType)
}

// optional bytes transMsg = 4;
inline bool MsgTransferToGameSrv::has_transmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTransferToGameSrv::set_has_transmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTransferToGameSrv::clear_has_transmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTransferToGameSrv::clear_transmsg() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_->clear();
  }
  clear_has_transmsg();
}
inline const ::std::string& MsgTransferToGameSrv::transmsg() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToGameSrv.transMsg)
  return *transmsg_;
}
inline void MsgTransferToGameSrv::set_transmsg(const ::std::string& value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToGameSrv.transMsg)
}
inline void MsgTransferToGameSrv::set_transmsg(const char* value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgTransferToGameSrv.transMsg)
}
inline void MsgTransferToGameSrv::set_transmsg(const void* value, size_t size) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgTransferToGameSrv.transMsg)
}
inline ::std::string* MsgTransferToGameSrv::mutable_transmsg() {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgTransferToGameSrv.transMsg)
  return transmsg_;
}
inline ::std::string* MsgTransferToGameSrv::release_transmsg() {
  clear_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = transmsg_;
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgTransferToGameSrv::set_allocated_transmsg(::std::string* transmsg) {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (transmsg) {
    set_has_transmsg();
    transmsg_ = transmsg;
  } else {
    clear_has_transmsg();
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgTransferToGameSrv.transMsg)
}

// -------------------------------------------------------------------

// MsgTransferToMatchSrv

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MATCHSRV];
inline bool MsgTransferToMatchSrv::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTransferToMatchSrv::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTransferToMatchSrv::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTransferToMatchSrv::clear_msgtype() {
  msgtype_ = 1055;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgTransferToMatchSrv::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMatchSrv.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgTransferToMatchSrv::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMatchSrv.msgType)
}

// optional int64 iggId = 2;
inline bool MsgTransferToMatchSrv::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTransferToMatchSrv::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTransferToMatchSrv::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTransferToMatchSrv::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgTransferToMatchSrv::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMatchSrv.iggId)
  return iggid_;
}
inline void MsgTransferToMatchSrv::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMatchSrv.iggId)
}

// optional .MsgPB.EMsgType subType = 3;
inline bool MsgTransferToMatchSrv::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTransferToMatchSrv::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTransferToMatchSrv::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTransferToMatchSrv::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::MsgPB::EMsgType MsgTransferToMatchSrv::subtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMatchSrv.subType)
  return static_cast< ::MsgPB::EMsgType >(subtype_);
}
inline void MsgTransferToMatchSrv::set_subtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMatchSrv.subType)
}

// optional bytes transMsg = 4;
inline bool MsgTransferToMatchSrv::has_transmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTransferToMatchSrv::set_has_transmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTransferToMatchSrv::clear_has_transmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTransferToMatchSrv::clear_transmsg() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_->clear();
  }
  clear_has_transmsg();
}
inline const ::std::string& MsgTransferToMatchSrv::transmsg() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMatchSrv.transMsg)
  return *transmsg_;
}
inline void MsgTransferToMatchSrv::set_transmsg(const ::std::string& value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMatchSrv.transMsg)
}
inline void MsgTransferToMatchSrv::set_transmsg(const char* value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgTransferToMatchSrv.transMsg)
}
inline void MsgTransferToMatchSrv::set_transmsg(const void* value, size_t size) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgTransferToMatchSrv.transMsg)
}
inline ::std::string* MsgTransferToMatchSrv::mutable_transmsg() {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgTransferToMatchSrv.transMsg)
  return transmsg_;
}
inline ::std::string* MsgTransferToMatchSrv::release_transmsg() {
  clear_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = transmsg_;
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgTransferToMatchSrv::set_allocated_transmsg(::std::string* transmsg) {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (transmsg) {
    set_has_transmsg();
    transmsg_ = transmsg;
  } else {
    clear_has_transmsg();
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgTransferToMatchSrv.transMsg)
}

// -------------------------------------------------------------------

// MsgTransferToMailSrv

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAILSRV];
inline bool MsgTransferToMailSrv::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTransferToMailSrv::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTransferToMailSrv::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTransferToMailSrv::clear_msgtype() {
  msgtype_ = 1057;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgTransferToMailSrv::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMailSrv.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgTransferToMailSrv::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMailSrv.msgType)
}

// optional int64 iggId = 2;
inline bool MsgTransferToMailSrv::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTransferToMailSrv::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTransferToMailSrv::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTransferToMailSrv::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgTransferToMailSrv::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMailSrv.iggId)
  return iggid_;
}
inline void MsgTransferToMailSrv::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMailSrv.iggId)
}

// optional .MsgPB.EMsgType subType = 3;
inline bool MsgTransferToMailSrv::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTransferToMailSrv::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTransferToMailSrv::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTransferToMailSrv::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::MsgPB::EMsgType MsgTransferToMailSrv::subtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMailSrv.subType)
  return static_cast< ::MsgPB::EMsgType >(subtype_);
}
inline void MsgTransferToMailSrv::set_subtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMailSrv.subType)
}

// optional bytes transMsg = 4;
inline bool MsgTransferToMailSrv::has_transmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTransferToMailSrv::set_has_transmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTransferToMailSrv::clear_has_transmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTransferToMailSrv::clear_transmsg() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_->clear();
  }
  clear_has_transmsg();
}
inline const ::std::string& MsgTransferToMailSrv::transmsg() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMailSrv.transMsg)
  return *transmsg_;
}
inline void MsgTransferToMailSrv::set_transmsg(const ::std::string& value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMailSrv.transMsg)
}
inline void MsgTransferToMailSrv::set_transmsg(const char* value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgTransferToMailSrv.transMsg)
}
inline void MsgTransferToMailSrv::set_transmsg(const void* value, size_t size) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgTransferToMailSrv.transMsg)
}
inline ::std::string* MsgTransferToMailSrv::mutable_transmsg() {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgTransferToMailSrv.transMsg)
  return transmsg_;
}
inline ::std::string* MsgTransferToMailSrv::release_transmsg() {
  clear_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = transmsg_;
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgTransferToMailSrv::set_allocated_transmsg(::std::string* transmsg) {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (transmsg) {
    set_has_transmsg();
    transmsg_ = transmsg;
  } else {
    clear_has_transmsg();
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgTransferToMailSrv.transMsg)
}

// -------------------------------------------------------------------

// MsgTransferToAuctionSrv

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_AUCTIONSRV];
inline bool MsgTransferToAuctionSrv::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTransferToAuctionSrv::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTransferToAuctionSrv::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTransferToAuctionSrv::clear_msgtype() {
  msgtype_ = 1058;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgTransferToAuctionSrv::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToAuctionSrv.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgTransferToAuctionSrv::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToAuctionSrv.msgType)
}

// optional int64 iggId = 2;
inline bool MsgTransferToAuctionSrv::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTransferToAuctionSrv::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTransferToAuctionSrv::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTransferToAuctionSrv::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgTransferToAuctionSrv::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToAuctionSrv.iggId)
  return iggid_;
}
inline void MsgTransferToAuctionSrv::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToAuctionSrv.iggId)
}

// optional .MsgPB.EMsgType subType = 3;
inline bool MsgTransferToAuctionSrv::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTransferToAuctionSrv::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTransferToAuctionSrv::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTransferToAuctionSrv::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::MsgPB::EMsgType MsgTransferToAuctionSrv::subtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToAuctionSrv.subType)
  return static_cast< ::MsgPB::EMsgType >(subtype_);
}
inline void MsgTransferToAuctionSrv::set_subtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToAuctionSrv.subType)
}

// optional bytes transMsg = 4;
inline bool MsgTransferToAuctionSrv::has_transmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTransferToAuctionSrv::set_has_transmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTransferToAuctionSrv::clear_has_transmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTransferToAuctionSrv::clear_transmsg() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_->clear();
  }
  clear_has_transmsg();
}
inline const ::std::string& MsgTransferToAuctionSrv::transmsg() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToAuctionSrv.transMsg)
  return *transmsg_;
}
inline void MsgTransferToAuctionSrv::set_transmsg(const ::std::string& value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToAuctionSrv.transMsg)
}
inline void MsgTransferToAuctionSrv::set_transmsg(const char* value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgTransferToAuctionSrv.transMsg)
}
inline void MsgTransferToAuctionSrv::set_transmsg(const void* value, size_t size) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgTransferToAuctionSrv.transMsg)
}
inline ::std::string* MsgTransferToAuctionSrv::mutable_transmsg() {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgTransferToAuctionSrv.transMsg)
  return transmsg_;
}
inline ::std::string* MsgTransferToAuctionSrv::release_transmsg() {
  clear_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = transmsg_;
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgTransferToAuctionSrv::set_allocated_transmsg(::std::string* transmsg) {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (transmsg) {
    set_has_transmsg();
    transmsg_ = transmsg;
  } else {
    clear_has_transmsg();
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgTransferToAuctionSrv.transMsg)
}

// -------------------------------------------------------------------

// MsgTransferToLeaderboardSrv

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_LEADERBOARDSRV];
inline bool MsgTransferToLeaderboardSrv::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTransferToLeaderboardSrv::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTransferToLeaderboardSrv::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTransferToLeaderboardSrv::clear_msgtype() {
  msgtype_ = 1048;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgTransferToLeaderboardSrv::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToLeaderboardSrv.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgTransferToLeaderboardSrv::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToLeaderboardSrv.msgType)
}

// optional int64 iggId = 2;
inline bool MsgTransferToLeaderboardSrv::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTransferToLeaderboardSrv::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTransferToLeaderboardSrv::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTransferToLeaderboardSrv::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgTransferToLeaderboardSrv::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToLeaderboardSrv.iggId)
  return iggid_;
}
inline void MsgTransferToLeaderboardSrv::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToLeaderboardSrv.iggId)
}

// optional .MsgPB.EMsgType subType = 3;
inline bool MsgTransferToLeaderboardSrv::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTransferToLeaderboardSrv::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTransferToLeaderboardSrv::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTransferToLeaderboardSrv::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::MsgPB::EMsgType MsgTransferToLeaderboardSrv::subtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToLeaderboardSrv.subType)
  return static_cast< ::MsgPB::EMsgType >(subtype_);
}
inline void MsgTransferToLeaderboardSrv::set_subtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToLeaderboardSrv.subType)
}

// optional bytes transMsg = 4;
inline bool MsgTransferToLeaderboardSrv::has_transmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTransferToLeaderboardSrv::set_has_transmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTransferToLeaderboardSrv::clear_has_transmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTransferToLeaderboardSrv::clear_transmsg() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_->clear();
  }
  clear_has_transmsg();
}
inline const ::std::string& MsgTransferToLeaderboardSrv::transmsg() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToLeaderboardSrv.transMsg)
  return *transmsg_;
}
inline void MsgTransferToLeaderboardSrv::set_transmsg(const ::std::string& value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToLeaderboardSrv.transMsg)
}
inline void MsgTransferToLeaderboardSrv::set_transmsg(const char* value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgTransferToLeaderboardSrv.transMsg)
}
inline void MsgTransferToLeaderboardSrv::set_transmsg(const void* value, size_t size) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgTransferToLeaderboardSrv.transMsg)
}
inline ::std::string* MsgTransferToLeaderboardSrv::mutable_transmsg() {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgTransferToLeaderboardSrv.transMsg)
  return transmsg_;
}
inline ::std::string* MsgTransferToLeaderboardSrv::release_transmsg() {
  clear_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = transmsg_;
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgTransferToLeaderboardSrv::set_allocated_transmsg(::std::string* transmsg) {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (transmsg) {
    set_has_transmsg();
    transmsg_ = transmsg;
  } else {
    clear_has_transmsg();
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgTransferToLeaderboardSrv.transMsg)
}

// -------------------------------------------------------------------

// MsgTransferToMapSrvByMapSrvId

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAPSRV_BY_MAPSRVID];
inline bool MsgTransferToMapSrvByMapSrvId::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTransferToMapSrvByMapSrvId::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTransferToMapSrvByMapSrvId::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTransferToMapSrvByMapSrvId::clear_msgtype() {
  msgtype_ = 1047;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgTransferToMapSrvByMapSrvId::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMapSrvByMapSrvId.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgTransferToMapSrvByMapSrvId::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMapSrvByMapSrvId.msgType)
}

// optional int32 srvid = 2;
inline bool MsgTransferToMapSrvByMapSrvId::has_srvid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTransferToMapSrvByMapSrvId::set_has_srvid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTransferToMapSrvByMapSrvId::clear_has_srvid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTransferToMapSrvByMapSrvId::clear_srvid() {
  srvid_ = 0;
  clear_has_srvid();
}
inline ::google::protobuf::int32 MsgTransferToMapSrvByMapSrvId::srvid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMapSrvByMapSrvId.srvid)
  return srvid_;
}
inline void MsgTransferToMapSrvByMapSrvId::set_srvid(::google::protobuf::int32 value) {
  set_has_srvid();
  srvid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMapSrvByMapSrvId.srvid)
}

// optional .MsgPB.EMsgType subType = 3;
inline bool MsgTransferToMapSrvByMapSrvId::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTransferToMapSrvByMapSrvId::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTransferToMapSrvByMapSrvId::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTransferToMapSrvByMapSrvId::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::MsgPB::EMsgType MsgTransferToMapSrvByMapSrvId::subtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMapSrvByMapSrvId.subType)
  return static_cast< ::MsgPB::EMsgType >(subtype_);
}
inline void MsgTransferToMapSrvByMapSrvId::set_subtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMapSrvByMapSrvId.subType)
}

// optional bytes transMsg = 4;
inline bool MsgTransferToMapSrvByMapSrvId::has_transmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTransferToMapSrvByMapSrvId::set_has_transmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTransferToMapSrvByMapSrvId::clear_has_transmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTransferToMapSrvByMapSrvId::clear_transmsg() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_->clear();
  }
  clear_has_transmsg();
}
inline const ::std::string& MsgTransferToMapSrvByMapSrvId::transmsg() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgTransferToMapSrvByMapSrvId.transMsg)
  return *transmsg_;
}
inline void MsgTransferToMapSrvByMapSrvId::set_transmsg(const ::std::string& value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgTransferToMapSrvByMapSrvId.transMsg)
}
inline void MsgTransferToMapSrvByMapSrvId::set_transmsg(const char* value) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgTransferToMapSrvByMapSrvId.transMsg)
}
inline void MsgTransferToMapSrvByMapSrvId::set_transmsg(const void* value, size_t size) {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  transmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgTransferToMapSrvByMapSrvId.transMsg)
}
inline ::std::string* MsgTransferToMapSrvByMapSrvId::mutable_transmsg() {
  set_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgTransferToMapSrvByMapSrvId.transMsg)
  return transmsg_;
}
inline ::std::string* MsgTransferToMapSrvByMapSrvId::release_transmsg() {
  clear_has_transmsg();
  if (transmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = transmsg_;
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgTransferToMapSrvByMapSrvId::set_allocated_transmsg(::std::string* transmsg) {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (transmsg) {
    set_has_transmsg();
    transmsg_ = transmsg;
  } else {
    clear_has_transmsg();
    transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgTransferToMapSrvByMapSrvId.transMsg)
}

// -------------------------------------------------------------------

// MsgRegisterEventLockTimerToGameSrv

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_EVENT_LOCK_TIMER_TO_GAMESRV];
inline bool MsgRegisterEventLockTimerToGameSrv::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgRegisterEventLockTimerToGameSrv::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgRegisterEventLockTimerToGameSrv::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgRegisterEventLockTimerToGameSrv::clear_msgtype() {
  msgtype_ = 1071;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgRegisterEventLockTimerToGameSrv::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgRegisterEventLockTimerToGameSrv.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgRegisterEventLockTimerToGameSrv::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgRegisterEventLockTimerToGameSrv.msgType)
}

// optional .MsgPB.EMsgType subType = 2;
inline bool MsgRegisterEventLockTimerToGameSrv::has_subtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgRegisterEventLockTimerToGameSrv::set_has_subtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgRegisterEventLockTimerToGameSrv::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgRegisterEventLockTimerToGameSrv::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::MsgPB::EMsgType MsgRegisterEventLockTimerToGameSrv::subtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgRegisterEventLockTimerToGameSrv.subType)
  return static_cast< ::MsgPB::EMsgType >(subtype_);
}
inline void MsgRegisterEventLockTimerToGameSrv::set_subtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgRegisterEventLockTimerToGameSrv.subType)
}

// optional int64 eventLockTime = 3;
inline bool MsgRegisterEventLockTimerToGameSrv::has_eventlocktime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgRegisterEventLockTimerToGameSrv::set_has_eventlocktime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgRegisterEventLockTimerToGameSrv::clear_has_eventlocktime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgRegisterEventLockTimerToGameSrv::clear_eventlocktime() {
  eventlocktime_ = GOOGLE_LONGLONG(0);
  clear_has_eventlocktime();
}
inline ::google::protobuf::int64 MsgRegisterEventLockTimerToGameSrv::eventlocktime() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgRegisterEventLockTimerToGameSrv.eventLockTime)
  return eventlocktime_;
}
inline void MsgRegisterEventLockTimerToGameSrv::set_eventlocktime(::google::protobuf::int64 value) {
  set_has_eventlocktime();
  eventlocktime_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgRegisterEventLockTimerToGameSrv.eventLockTime)
}

// -------------------------------------------------------------------

// MsgServerStartUpFinishS2S

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_START_UP_FINISH_S2S];
inline bool MsgServerStartUpFinishS2S::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgServerStartUpFinishS2S::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgServerStartUpFinishS2S::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgServerStartUpFinishS2S::clear_msgtype() {
  msgtype_ = 1046;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgServerStartUpFinishS2S::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerStartUpFinishS2S.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgServerStartUpFinishS2S::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerStartUpFinishS2S.msgType)
}

// optional int32 serverType = 2;
inline bool MsgServerStartUpFinishS2S::has_servertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgServerStartUpFinishS2S::set_has_servertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgServerStartUpFinishS2S::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgServerStartUpFinishS2S::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
inline ::google::protobuf::int32 MsgServerStartUpFinishS2S::servertype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerStartUpFinishS2S.serverType)
  return servertype_;
}
inline void MsgServerStartUpFinishS2S::set_servertype(::google::protobuf::int32 value) {
  set_has_servertype();
  servertype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerStartUpFinishS2S.serverType)
}

// optional int32 serverId = 3;
inline bool MsgServerStartUpFinishS2S::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgServerStartUpFinishS2S::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgServerStartUpFinishS2S::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgServerStartUpFinishS2S::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 MsgServerStartUpFinishS2S::serverid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerStartUpFinishS2S.serverId)
  return serverid_;
}
inline void MsgServerStartUpFinishS2S::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerStartUpFinishS2S.serverId)
}

// -------------------------------------------------------------------

// MsgNotifyRemoveMap

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_REMOVE_MAP_MS2MMS];
inline bool MsgNotifyRemoveMap::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgNotifyRemoveMap::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgNotifyRemoveMap::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgNotifyRemoveMap::clear_msgtype() {
  msgtype_ = 1045;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgNotifyRemoveMap::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgNotifyRemoveMap.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgNotifyRemoveMap::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgNotifyRemoveMap.msgType)
}

// optional int64 mapuuid = 2;
inline bool MsgNotifyRemoveMap::has_mapuuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgNotifyRemoveMap::set_has_mapuuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgNotifyRemoveMap::clear_has_mapuuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgNotifyRemoveMap::clear_mapuuid() {
  mapuuid_ = GOOGLE_LONGLONG(0);
  clear_has_mapuuid();
}
inline ::google::protobuf::int64 MsgNotifyRemoveMap::mapuuid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgNotifyRemoveMap.mapuuid)
  return mapuuid_;
}
inline void MsgNotifyRemoveMap::set_mapuuid(::google::protobuf::int64 value) {
  set_has_mapuuid();
  mapuuid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgNotifyRemoveMap.mapuuid)
}

// optional int32 map_id = 3;
inline bool MsgNotifyRemoveMap::has_map_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgNotifyRemoveMap::set_has_map_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgNotifyRemoveMap::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgNotifyRemoveMap::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 MsgNotifyRemoveMap::map_id() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgNotifyRemoveMap.map_id)
  return map_id_;
}
inline void MsgNotifyRemoveMap::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgNotifyRemoveMap.map_id)
}

// optional int64 owner_iggid = 4;
inline bool MsgNotifyRemoveMap::has_owner_iggid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgNotifyRemoveMap::set_has_owner_iggid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgNotifyRemoveMap::clear_has_owner_iggid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgNotifyRemoveMap::clear_owner_iggid() {
  owner_iggid_ = GOOGLE_LONGLONG(0);
  clear_has_owner_iggid();
}
inline ::google::protobuf::int64 MsgNotifyRemoveMap::owner_iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgNotifyRemoveMap.owner_iggid)
  return owner_iggid_;
}
inline void MsgNotifyRemoveMap::set_owner_iggid(::google::protobuf::int64 value) {
  set_has_owner_iggid();
  owner_iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgNotifyRemoveMap.owner_iggid)
}

// optional int32 map_type = 5;
inline bool MsgNotifyRemoveMap::has_map_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgNotifyRemoveMap::set_has_map_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgNotifyRemoveMap::clear_has_map_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgNotifyRemoveMap::clear_map_type() {
  map_type_ = 0;
  clear_has_map_type();
}
inline ::google::protobuf::int32 MsgNotifyRemoveMap::map_type() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgNotifyRemoveMap.map_type)
  return map_type_;
}
inline void MsgNotifyRemoveMap::set_map_type(::google::protobuf::int32 value) {
  set_has_map_type();
  map_type_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgNotifyRemoveMap.map_type)
}

// optional int32 mapserverid = 6;
inline bool MsgNotifyRemoveMap::has_mapserverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgNotifyRemoveMap::set_has_mapserverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgNotifyRemoveMap::clear_has_mapserverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgNotifyRemoveMap::clear_mapserverid() {
  mapserverid_ = 0;
  clear_has_mapserverid();
}
inline ::google::protobuf::int32 MsgNotifyRemoveMap::mapserverid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgNotifyRemoveMap.mapserverid)
  return mapserverid_;
}
inline void MsgNotifyRemoveMap::set_mapserverid(::google::protobuf::int32 value) {
  set_has_mapserverid();
  mapserverid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgNotifyRemoveMap.mapserverid)
}

// optional int32 boss_room = 7;
inline bool MsgNotifyRemoveMap::has_boss_room() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgNotifyRemoveMap::set_has_boss_room() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgNotifyRemoveMap::clear_has_boss_room() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgNotifyRemoveMap::clear_boss_room() {
  boss_room_ = 0;
  clear_has_boss_room();
}
inline ::google::protobuf::int32 MsgNotifyRemoveMap::boss_room() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgNotifyRemoveMap.boss_room)
  return boss_room_;
}
inline void MsgNotifyRemoveMap::set_boss_room(::google::protobuf::int32 value) {
  set_has_boss_room();
  boss_room_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgNotifyRemoveMap.boss_room)
}

// -------------------------------------------------------------------

// MsgMapServerNotAvalible

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_NOT_AVALIBLE];
inline bool MsgMapServerNotAvalible::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgMapServerNotAvalible::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgMapServerNotAvalible::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgMapServerNotAvalible::clear_msgtype() {
  msgtype_ = 1054;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgMapServerNotAvalible::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgMapServerNotAvalible.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgMapServerNotAvalible::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgMapServerNotAvalible.msgType)
}

// optional int64 iggId = 2;
inline bool MsgMapServerNotAvalible::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgMapServerNotAvalible::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgMapServerNotAvalible::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgMapServerNotAvalible::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgMapServerNotAvalible::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgMapServerNotAvalible.iggId)
  return iggid_;
}
inline void MsgMapServerNotAvalible::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgMapServerNotAvalible.iggId)
}

// -------------------------------------------------------------------

// MsgCommonNotification

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_COMMAON_NOTIFICATION];
inline bool MsgCommonNotification::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCommonNotification::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCommonNotification::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCommonNotification::clear_msgtype() {
  msgtype_ = 1072;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgCommonNotification::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgCommonNotification.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgCommonNotification::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgCommonNotification.msgType)
}

// optional .MsgPB.MsgCommonNotification.MODE mode = 2;
inline bool MsgCommonNotification::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCommonNotification::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCommonNotification::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCommonNotification::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::MsgPB::MsgCommonNotification_MODE MsgCommonNotification::mode() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgCommonNotification.mode)
  return static_cast< ::MsgPB::MsgCommonNotification_MODE >(mode_);
}
inline void MsgCommonNotification::set_mode(::MsgPB::MsgCommonNotification_MODE value) {
  assert(::MsgPB::MsgCommonNotification_MODE_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgCommonNotification.mode)
}

// optional int32 param1 = 3;
inline bool MsgCommonNotification::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgCommonNotification::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgCommonNotification::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgCommonNotification::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 MsgCommonNotification::param1() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgCommonNotification.param1)
  return param1_;
}
inline void MsgCommonNotification::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgCommonNotification.param1)
}

// -------------------------------------------------------------------

// MsgToMoreClient

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_TO_MORE_CLENT];
inline bool MsgToMoreClient::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgToMoreClient::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgToMoreClient::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgToMoreClient::clear_msgtype() {
  msgtype_ = 1131;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgToMoreClient::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgToMoreClient.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgToMoreClient::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgToMoreClient.msgType)
}

// optional .MsgPB.EMsgType subType = 2;
inline bool MsgToMoreClient::has_subtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgToMoreClient::set_has_subtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgToMoreClient::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgToMoreClient::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::MsgPB::EMsgType MsgToMoreClient::subtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgToMoreClient.subType)
  return static_cast< ::MsgPB::EMsgType >(subtype_);
}
inline void MsgToMoreClient::set_subtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgToMoreClient.subType)
}

// optional bytes subMsg = 3;
inline bool MsgToMoreClient::has_submsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgToMoreClient::set_has_submsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgToMoreClient::clear_has_submsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgToMoreClient::clear_submsg() {
  if (submsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    submsg_->clear();
  }
  clear_has_submsg();
}
inline const ::std::string& MsgToMoreClient::submsg() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgToMoreClient.subMsg)
  return *submsg_;
}
inline void MsgToMoreClient::set_submsg(const ::std::string& value) {
  set_has_submsg();
  if (submsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    submsg_ = new ::std::string;
  }
  submsg_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgToMoreClient.subMsg)
}
inline void MsgToMoreClient::set_submsg(const char* value) {
  set_has_submsg();
  if (submsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    submsg_ = new ::std::string;
  }
  submsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgToMoreClient.subMsg)
}
inline void MsgToMoreClient::set_submsg(const void* value, size_t size) {
  set_has_submsg();
  if (submsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    submsg_ = new ::std::string;
  }
  submsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgToMoreClient.subMsg)
}
inline ::std::string* MsgToMoreClient::mutable_submsg() {
  set_has_submsg();
  if (submsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    submsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgToMoreClient.subMsg)
  return submsg_;
}
inline ::std::string* MsgToMoreClient::release_submsg() {
  clear_has_submsg();
  if (submsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = submsg_;
    submsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgToMoreClient::set_allocated_submsg(::std::string* submsg) {
  if (submsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete submsg_;
  }
  if (submsg) {
    set_has_submsg();
    submsg_ = submsg;
  } else {
    clear_has_submsg();
    submsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgToMoreClient.subMsg)
}

// repeated int64 iggidSet = 4;
inline int MsgToMoreClient::iggidset_size() const {
  return iggidset_.size();
}
inline void MsgToMoreClient::clear_iggidset() {
  iggidset_.Clear();
}
inline ::google::protobuf::int64 MsgToMoreClient::iggidset(int index) const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgToMoreClient.iggidSet)
  return iggidset_.Get(index);
}
inline void MsgToMoreClient::set_iggidset(int index, ::google::protobuf::int64 value) {
  iggidset_.Set(index, value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgToMoreClient.iggidSet)
}
inline void MsgToMoreClient::add_iggidset(::google::protobuf::int64 value) {
  iggidset_.Add(value);
  // @@protoc_insertion_point(field_add:MsgPB.MsgToMoreClient.iggidSet)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MsgToMoreClient::iggidset() const {
  // @@protoc_insertion_point(field_list:MsgPB.MsgToMoreClient.iggidSet)
  return iggidset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MsgToMoreClient::mutable_iggidset() {
  // @@protoc_insertion_point(field_mutable_list:MsgPB.MsgToMoreClient.iggidSet)
  return &iggidset_;
}

// -------------------------------------------------------------------

// PBServerInfo

// optional int32 server_id = 1;
inline bool PBServerInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBServerInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBServerInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBServerInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 PBServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBServerInfo.server_id)
  return server_id_;
}
inline void PBServerInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.PBServerInfo.server_id)
}

// optional int32 server_type = 2;
inline bool PBServerInfo::has_server_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBServerInfo::set_has_server_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBServerInfo::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBServerInfo::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::google::protobuf::int32 PBServerInfo::server_type() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBServerInfo.server_type)
  return server_type_;
}
inline void PBServerInfo::set_server_type(::google::protobuf::int32 value) {
  set_has_server_type();
  server_type_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.PBServerInfo.server_type)
}

// optional string listern_ip = 3;
inline bool PBServerInfo::has_listern_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBServerInfo::set_has_listern_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBServerInfo::clear_has_listern_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBServerInfo::clear_listern_ip() {
  if (listern_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listern_ip_->clear();
  }
  clear_has_listern_ip();
}
inline const ::std::string& PBServerInfo::listern_ip() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBServerInfo.listern_ip)
  return *listern_ip_;
}
inline void PBServerInfo::set_listern_ip(const ::std::string& value) {
  set_has_listern_ip();
  if (listern_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listern_ip_ = new ::std::string;
  }
  listern_ip_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.PBServerInfo.listern_ip)
}
inline void PBServerInfo::set_listern_ip(const char* value) {
  set_has_listern_ip();
  if (listern_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listern_ip_ = new ::std::string;
  }
  listern_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.PBServerInfo.listern_ip)
}
inline void PBServerInfo::set_listern_ip(const char* value, size_t size) {
  set_has_listern_ip();
  if (listern_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listern_ip_ = new ::std::string;
  }
  listern_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.PBServerInfo.listern_ip)
}
inline ::std::string* PBServerInfo::mutable_listern_ip() {
  set_has_listern_ip();
  if (listern_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listern_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.PBServerInfo.listern_ip)
  return listern_ip_;
}
inline ::std::string* PBServerInfo::release_listern_ip() {
  clear_has_listern_ip();
  if (listern_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = listern_ip_;
    listern_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBServerInfo::set_allocated_listern_ip(::std::string* listern_ip) {
  if (listern_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete listern_ip_;
  }
  if (listern_ip) {
    set_has_listern_ip();
    listern_ip_ = listern_ip;
  } else {
    clear_has_listern_ip();
    listern_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.PBServerInfo.listern_ip)
}

// optional int32 listern_port = 4;
inline bool PBServerInfo::has_listern_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBServerInfo::set_has_listern_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBServerInfo::clear_has_listern_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBServerInfo::clear_listern_port() {
  listern_port_ = 0;
  clear_has_listern_port();
}
inline ::google::protobuf::int32 PBServerInfo::listern_port() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBServerInfo.listern_port)
  return listern_port_;
}
inline void PBServerInfo::set_listern_port(::google::protobuf::int32 value) {
  set_has_listern_port();
  listern_port_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.PBServerInfo.listern_port)
}

// optional int32 area_id = 5;
inline bool PBServerInfo::has_area_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBServerInfo::set_has_area_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBServerInfo::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBServerInfo::clear_area_id() {
  area_id_ = 0;
  clear_has_area_id();
}
inline ::google::protobuf::int32 PBServerInfo::area_id() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBServerInfo.area_id)
  return area_id_;
}
inline void PBServerInfo::set_area_id(::google::protobuf::int32 value) {
  set_has_area_id();
  area_id_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.PBServerInfo.area_id)
}

// optional string domain_name = 6;
inline bool PBServerInfo::has_domain_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBServerInfo::set_has_domain_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBServerInfo::clear_has_domain_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBServerInfo::clear_domain_name() {
  if (domain_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_name_->clear();
  }
  clear_has_domain_name();
}
inline const ::std::string& PBServerInfo::domain_name() const {
  // @@protoc_insertion_point(field_get:MsgPB.PBServerInfo.domain_name)
  return *domain_name_;
}
inline void PBServerInfo::set_domain_name(const ::std::string& value) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.PBServerInfo.domain_name)
}
inline void PBServerInfo::set_domain_name(const char* value) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.PBServerInfo.domain_name)
}
inline void PBServerInfo::set_domain_name(const char* value, size_t size) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.PBServerInfo.domain_name)
}
inline ::std::string* PBServerInfo::mutable_domain_name() {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.PBServerInfo.domain_name)
  return domain_name_;
}
inline ::std::string* PBServerInfo::release_domain_name() {
  clear_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_name_;
    domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBServerInfo::set_allocated_domain_name(::std::string* domain_name) {
  if (domain_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_name_;
  }
  if (domain_name) {
    set_has_domain_name();
    domain_name_ = domain_name;
  } else {
    clear_has_domain_name();
    domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.PBServerInfo.domain_name)
}

// -------------------------------------------------------------------

// MsgMapMgrAllMapServerInfo_MGR2GS

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPMGR_ALL_MAPSERVER_INFO_MGR2GS];
inline bool MsgMapMgrAllMapServerInfo_MGR2GS::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgMapMgrAllMapServerInfo_MGR2GS::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgMapMgrAllMapServerInfo_MGR2GS::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgMapMgrAllMapServerInfo_MGR2GS::clear_msgtype() {
  msgtype_ = 9500;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgMapMgrAllMapServerInfo_MGR2GS::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgMapMgrAllMapServerInfo_MGR2GS::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS.msgType)
}

// repeated .MsgPB.PBServerInfo server_info = 2;
inline int MsgMapMgrAllMapServerInfo_MGR2GS::server_info_size() const {
  return server_info_.size();
}
inline void MsgMapMgrAllMapServerInfo_MGR2GS::clear_server_info() {
  server_info_.Clear();
}
inline const ::MsgPB::PBServerInfo& MsgMapMgrAllMapServerInfo_MGR2GS::server_info(int index) const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS.server_info)
  return server_info_.Get(index);
}
inline ::MsgPB::PBServerInfo* MsgMapMgrAllMapServerInfo_MGR2GS::mutable_server_info(int index) {
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS.server_info)
  return server_info_.Mutable(index);
}
inline ::MsgPB::PBServerInfo* MsgMapMgrAllMapServerInfo_MGR2GS::add_server_info() {
  // @@protoc_insertion_point(field_add:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS.server_info)
  return server_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgPB::PBServerInfo >&
MsgMapMgrAllMapServerInfo_MGR2GS::server_info() const {
  // @@protoc_insertion_point(field_list:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS.server_info)
  return server_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgPB::PBServerInfo >*
MsgMapMgrAllMapServerInfo_MGR2GS::mutable_server_info() {
  // @@protoc_insertion_point(field_mutable_list:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS.server_info)
  return &server_info_;
}

// -------------------------------------------------------------------

// MsgRemoveCachePlayerS2S

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_CACHE_PLAYER_S2S];
inline bool MsgRemoveCachePlayerS2S::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgRemoveCachePlayerS2S::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgRemoveCachePlayerS2S::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgRemoveCachePlayerS2S::clear_msgtype() {
  msgtype_ = 11000;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgRemoveCachePlayerS2S::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgRemoveCachePlayerS2S.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgRemoveCachePlayerS2S::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgRemoveCachePlayerS2S.msgType)
}

// optional int64 iggid = 2;
inline bool MsgRemoveCachePlayerS2S::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgRemoveCachePlayerS2S::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgRemoveCachePlayerS2S::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgRemoveCachePlayerS2S::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgRemoveCachePlayerS2S::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgRemoveCachePlayerS2S.iggid)
  return iggid_;
}
inline void MsgRemoveCachePlayerS2S::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgRemoveCachePlayerS2S.iggid)
}

// -------------------------------------------------------------------

// MsgCreateMapSucMS2MGS

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CREATE_MAP_SUC_MS2MGS];
inline bool MsgCreateMapSucMS2MGS::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCreateMapSucMS2MGS::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCreateMapSucMS2MGS::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCreateMapSucMS2MGS::clear_msgtype() {
  msgtype_ = 11001;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgCreateMapSucMS2MGS::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgCreateMapSucMS2MGS.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgCreateMapSucMS2MGS::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgCreateMapSucMS2MGS.msgType)
}

// optional int64 map_uuid = 2;
inline bool MsgCreateMapSucMS2MGS::has_map_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCreateMapSucMS2MGS::set_has_map_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCreateMapSucMS2MGS::clear_has_map_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCreateMapSucMS2MGS::clear_map_uuid() {
  map_uuid_ = GOOGLE_LONGLONG(0);
  clear_has_map_uuid();
}
inline ::google::protobuf::int64 MsgCreateMapSucMS2MGS::map_uuid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgCreateMapSucMS2MGS.map_uuid)
  return map_uuid_;
}
inline void MsgCreateMapSucMS2MGS::set_map_uuid(::google::protobuf::int64 value) {
  set_has_map_uuid();
  map_uuid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgCreateMapSucMS2MGS.map_uuid)
}

// optional int32 map_id = 3;
inline bool MsgCreateMapSucMS2MGS::has_map_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgCreateMapSucMS2MGS::set_has_map_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgCreateMapSucMS2MGS::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgCreateMapSucMS2MGS::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 MsgCreateMapSucMS2MGS::map_id() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgCreateMapSucMS2MGS.map_id)
  return map_id_;
}
inline void MsgCreateMapSucMS2MGS::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgCreateMapSucMS2MGS.map_id)
}

// optional int64 owner_iggid = 4;
inline bool MsgCreateMapSucMS2MGS::has_owner_iggid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgCreateMapSucMS2MGS::set_has_owner_iggid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgCreateMapSucMS2MGS::clear_has_owner_iggid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgCreateMapSucMS2MGS::clear_owner_iggid() {
  owner_iggid_ = GOOGLE_LONGLONG(0);
  clear_has_owner_iggid();
}
inline ::google::protobuf::int64 MsgCreateMapSucMS2MGS::owner_iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgCreateMapSucMS2MGS.owner_iggid)
  return owner_iggid_;
}
inline void MsgCreateMapSucMS2MGS::set_owner_iggid(::google::protobuf::int64 value) {
  set_has_owner_iggid();
  owner_iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgCreateMapSucMS2MGS.owner_iggid)
}

// optional int32 map_type = 5;
inline bool MsgCreateMapSucMS2MGS::has_map_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgCreateMapSucMS2MGS::set_has_map_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgCreateMapSucMS2MGS::clear_has_map_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgCreateMapSucMS2MGS::clear_map_type() {
  map_type_ = 0;
  clear_has_map_type();
}
inline ::google::protobuf::int32 MsgCreateMapSucMS2MGS::map_type() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgCreateMapSucMS2MGS.map_type)
  return map_type_;
}
inline void MsgCreateMapSucMS2MGS::set_map_type(::google::protobuf::int32 value) {
  set_has_map_type();
  map_type_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgCreateMapSucMS2MGS.map_type)
}

// optional int32 server_id = 6 [default = -1];
inline bool MsgCreateMapSucMS2MGS::has_server_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgCreateMapSucMS2MGS::set_has_server_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgCreateMapSucMS2MGS::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgCreateMapSucMS2MGS::clear_server_id() {
  server_id_ = -1;
  clear_has_server_id();
}
inline ::google::protobuf::int32 MsgCreateMapSucMS2MGS::server_id() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgCreateMapSucMS2MGS.server_id)
  return server_id_;
}
inline void MsgCreateMapSucMS2MGS::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgCreateMapSucMS2MGS.server_id)
}

// -------------------------------------------------------------------

// MsgPlayerMapBatchDBDataUnlockMGS2MS

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MAP_BATCH_DB_DATA_UNLOCK_BY_GM];
inline bool MsgPlayerMapBatchDBDataUnlockMGS2MS::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::clear_msgtype() {
  msgtype_ = 34001;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgPlayerMapBatchDBDataUnlockMGS2MS::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS.msgType)
}

// optional int64 iggid = 2;
inline bool MsgPlayerMapBatchDBDataUnlockMGS2MS::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgPlayerMapBatchDBDataUnlockMGS2MS::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS.iggid)
  return iggid_;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS.iggid)
}

// optional int32 map_id = 3;
inline bool MsgPlayerMapBatchDBDataUnlockMGS2MS::has_map_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::set_has_map_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 MsgPlayerMapBatchDBDataUnlockMGS2MS::map_id() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS.map_id)
  return map_id_;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS.map_id)
}

// optional int64 party_id = 4 [default = -1];
inline bool MsgPlayerMapBatchDBDataUnlockMGS2MS::has_party_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::set_has_party_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::clear_party_id() {
  party_id_ = GOOGLE_LONGLONG(-1);
  clear_has_party_id();
}
inline ::google::protobuf::int64 MsgPlayerMapBatchDBDataUnlockMGS2MS::party_id() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS.party_id)
  return party_id_;
}
inline void MsgPlayerMapBatchDBDataUnlockMGS2MS::set_party_id(::google::protobuf::int64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS.party_id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MsgPB::MsgCommonNotification_MODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgPB::MsgCommonNotification_MODE>() {
  return ::MsgPB::MsgCommonNotification_MODE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MsgMapMgrServer_2eproto__INCLUDED
