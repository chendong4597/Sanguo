// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgTroops.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgTroops.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* TroopsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TroopsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTroopsC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTroopsC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTroopsS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTroopsS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgTroopsS2C_RESULT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgTroops_2eproto() {
  protobuf_AddDesc_MsgTroops_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgTroops.proto");
  GOOGLE_CHECK(file != NULL);
  TroopsInfo_descriptor_ = file->message_type(0);
  static const int TroopsInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopsInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopsInfo, uuid_),
  };
  TroopsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TroopsInfo_descriptor_,
      TroopsInfo::default_instance_,
      TroopsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TroopsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TroopsInfo));
  MsgTroopsC2S_descriptor_ = file->message_type(1);
  static const int MsgTroopsC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTroopsC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTroopsC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTroopsC2S, troopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTroopsC2S, data_),
  };
  MsgTroopsC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTroopsC2S_descriptor_,
      MsgTroopsC2S::default_instance_,
      MsgTroopsC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTroopsC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTroopsC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTroopsC2S));
  MsgTroopsS2C_descriptor_ = file->message_type(2);
  static const int MsgTroopsS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTroopsS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTroopsS2C, result_),
  };
  MsgTroopsS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTroopsS2C_descriptor_,
      MsgTroopsS2C::default_instance_,
      MsgTroopsS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTroopsS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTroopsS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTroopsS2C));
  MsgTroopsS2C_RESULT_descriptor_ = MsgTroopsS2C_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgTroops_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TroopsInfo_descriptor_, &TroopsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTroopsC2S_descriptor_, &MsgTroopsC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTroopsS2C_descriptor_, &MsgTroopsS2C::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgTroops_2eproto() {
  delete TroopsInfo::default_instance_;
  delete TroopsInfo_reflection_;
  delete MsgTroopsC2S::default_instance_;
  delete MsgTroopsC2S_reflection_;
  delete MsgTroopsS2C::default_instance_;
  delete MsgTroopsS2C_reflection_;
}

void protobuf_AddDesc_MsgTroops_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MsgTroops.proto\022\005MsgPB\032\rMsgType.proto\""
    "\'\n\nTroopsInfo\022\013\n\003pos\030\001 \001(\005\022\014\n\004uuid\030\002 \001(\003"
    "\"\217\001\n\014MsgTroopsC2S\022>\n\007msgType\030\001 \001(\0162\017.Msg"
    "PB.EMsgType:\034_MSG_TROOPS_PROTECTOR_UP_C2"
    "S\022\r\n\005iggid\030\002 \001(\003\022\017\n\007troopId\030\003 \001(\005\022\037\n\004dat"
    "a\030\004 \003(\0132\021.MsgPB.TroopsInfo\"\247\001\n\014MsgTroops"
    "S2C\022>\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\034_"
    "MSG_TROOPS_PROTECTOR_UP_S2C\022*\n\006result\030\002 "
    "\001(\0162\032.MsgPB.MsgTroopsS2C.RESULT\"+\n\006RESUL"
    "T\022\024\n\007FAILURE\020\377\377\377\377\377\377\377\377\377\001\022\013\n\007SUCCESS\020\000", 396);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgTroops.proto", &protobuf_RegisterTypes);
  TroopsInfo::default_instance_ = new TroopsInfo();
  MsgTroopsC2S::default_instance_ = new MsgTroopsC2S();
  MsgTroopsS2C::default_instance_ = new MsgTroopsS2C();
  TroopsInfo::default_instance_->InitAsDefaultInstance();
  MsgTroopsC2S::default_instance_->InitAsDefaultInstance();
  MsgTroopsS2C::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgTroops_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgTroops_2eproto {
  StaticDescriptorInitializer_MsgTroops_2eproto() {
    protobuf_AddDesc_MsgTroops_2eproto();
  }
} static_descriptor_initializer_MsgTroops_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TroopsInfo::kPosFieldNumber;
const int TroopsInfo::kUuidFieldNumber;
#endif  // !_MSC_VER

TroopsInfo::TroopsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.TroopsInfo)
}

void TroopsInfo::InitAsDefaultInstance() {
}

TroopsInfo::TroopsInfo(const TroopsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.TroopsInfo)
}

void TroopsInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TroopsInfo::~TroopsInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.TroopsInfo)
  SharedDtor();
}

void TroopsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TroopsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TroopsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TroopsInfo_descriptor_;
}

const TroopsInfo& TroopsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTroops_2eproto();
  return *default_instance_;
}

TroopsInfo* TroopsInfo::default_instance_ = NULL;

TroopsInfo* TroopsInfo::New() const {
  return new TroopsInfo;
}

void TroopsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TroopsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uuid_, pos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TroopsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.TroopsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 2;
      case 2: {
        if (tag == 16) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.TroopsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.TroopsInfo)
  return false;
#undef DO_
}

void TroopsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.TroopsInfo)
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional int64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.TroopsInfo)
}

::google::protobuf::uint8* TroopsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.TroopsInfo)
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional int64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.TroopsInfo)
  return target;
}

int TroopsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TroopsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TroopsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TroopsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TroopsInfo::MergeFrom(const TroopsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TroopsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TroopsInfo::CopyFrom(const TroopsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TroopsInfo::IsInitialized() const {

  return true;
}

void TroopsInfo::Swap(TroopsInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TroopsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TroopsInfo_descriptor_;
  metadata.reflection = TroopsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTroopsC2S::kMsgTypeFieldNumber;
const int MsgTroopsC2S::kIggidFieldNumber;
const int MsgTroopsC2S::kTroopIdFieldNumber;
const int MsgTroopsC2S::kDataFieldNumber;
#endif  // !_MSC_VER

MsgTroopsC2S::MsgTroopsC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTroopsC2S)
}

void MsgTroopsC2S::InitAsDefaultInstance() {
}

MsgTroopsC2S::MsgTroopsC2S(const MsgTroopsC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTroopsC2S)
}

void MsgTroopsC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 8200;
  iggid_ = GOOGLE_LONGLONG(0);
  troopid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTroopsC2S::~MsgTroopsC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTroopsC2S)
  SharedDtor();
}

void MsgTroopsC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTroopsC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTroopsC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTroopsC2S_descriptor_;
}

const MsgTroopsC2S& MsgTroopsC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTroops_2eproto();
  return *default_instance_;
}

MsgTroopsC2S* MsgTroopsC2S::default_instance_ = NULL;

MsgTroopsC2S* MsgTroopsC2S::New() const {
  return new MsgTroopsC2S;
}

void MsgTroopsC2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 8200;
    iggid_ = GOOGLE_LONGLONG(0);
    troopid_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTroopsC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTroopsC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TROOPS_PROTECTOR_UP_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_troopId;
        break;
      }

      // optional int32 troopId = 3;
      case 3: {
        if (tag == 24) {
         parse_troopId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &troopid_)));
          set_has_troopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .MsgPB.TroopsInfo data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTroopsC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTroopsC2S)
  return false;
#undef DO_
}

void MsgTroopsC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTroopsC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TROOPS_PROTECTOR_UP_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 troopId = 3;
  if (has_troopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->troopid(), output);
  }

  // repeated .MsgPB.TroopsInfo data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTroopsC2S)
}

::google::protobuf::uint8* MsgTroopsC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTroopsC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TROOPS_PROTECTOR_UP_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 troopId = 3;
  if (has_troopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->troopid(), target);
  }

  // repeated .MsgPB.TroopsInfo data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTroopsC2S)
  return target;
}

int MsgTroopsC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TROOPS_PROTECTOR_UP_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 troopId = 3;
    if (has_troopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->troopid());
    }

  }
  // repeated .MsgPB.TroopsInfo data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTroopsC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTroopsC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTroopsC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTroopsC2S::MergeFrom(const MsgTroopsC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_troopid()) {
      set_troopid(from.troopid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTroopsC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTroopsC2S::CopyFrom(const MsgTroopsC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTroopsC2S::IsInitialized() const {

  return true;
}

void MsgTroopsC2S::Swap(MsgTroopsC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(troopid_, other->troopid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTroopsC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTroopsC2S_descriptor_;
  metadata.reflection = MsgTroopsC2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgTroopsS2C_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTroopsS2C_RESULT_descriptor_;
}
bool MsgTroopsS2C_RESULT_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgTroopsS2C_RESULT MsgTroopsS2C::FAILURE;
const MsgTroopsS2C_RESULT MsgTroopsS2C::SUCCESS;
const MsgTroopsS2C_RESULT MsgTroopsS2C::RESULT_MIN;
const MsgTroopsS2C_RESULT MsgTroopsS2C::RESULT_MAX;
const int MsgTroopsS2C::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgTroopsS2C::kMsgTypeFieldNumber;
const int MsgTroopsS2C::kResultFieldNumber;
#endif  // !_MSC_VER

MsgTroopsS2C::MsgTroopsS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTroopsS2C)
}

void MsgTroopsS2C::InitAsDefaultInstance() {
}

MsgTroopsS2C::MsgTroopsS2C(const MsgTroopsS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTroopsS2C)
}

void MsgTroopsS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 8201;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTroopsS2C::~MsgTroopsS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTroopsS2C)
  SharedDtor();
}

void MsgTroopsS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTroopsS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTroopsS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTroopsS2C_descriptor_;
}

const MsgTroopsS2C& MsgTroopsS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTroops_2eproto();
  return *default_instance_;
}

MsgTroopsS2C* MsgTroopsS2C::default_instance_ = NULL;

MsgTroopsS2C* MsgTroopsS2C::New() const {
  return new MsgTroopsS2C;
}

void MsgTroopsS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 8201;
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTroopsS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTroopsS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TROOPS_PROTECTOR_UP_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MsgPB.MsgTroopsS2C.RESULT result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgTroopsS2C_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::MsgTroopsS2C_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTroopsS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTroopsS2C)
  return false;
#undef DO_
}

void MsgTroopsS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTroopsS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TROOPS_PROTECTOR_UP_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.MsgTroopsS2C.RESULT result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTroopsS2C)
}

::google::protobuf::uint8* MsgTroopsS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTroopsS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TROOPS_PROTECTOR_UP_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.MsgTroopsS2C.RESULT result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTroopsS2C)
  return target;
}

int MsgTroopsS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TROOPS_PROTECTOR_UP_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.MsgTroopsS2C.RESULT result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTroopsS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTroopsS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTroopsS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTroopsS2C::MergeFrom(const MsgTroopsS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTroopsS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTroopsS2C::CopyFrom(const MsgTroopsS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTroopsS2C::IsInitialized() const {

  return true;
}

void MsgTroopsS2C::Swap(MsgTroopsS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTroopsS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTroopsS2C_descriptor_;
  metadata.reflection = MsgTroopsS2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
