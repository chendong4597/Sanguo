// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgPvPRandMap.proto

#ifndef PROTOBUF_MsgPvPRandMap_2eproto__INCLUDED
#define PROTOBUF_MsgPvPRandMap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "MsgType.pb.h"
// @@protoc_insertion_point(includes)

namespace MsgPB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MsgPvPRandMap_2eproto();
void protobuf_AssignDesc_MsgPvPRandMap_2eproto();
void protobuf_ShutdownFile_MsgPvPRandMap_2eproto();

class RandRoomInfo;
class MsgPvPRandRoomLst_MS2C;

// ===================================================================

class RandRoomInfo : public ::google::protobuf::Message {
 public:
  RandRoomInfo();
  virtual ~RandRoomInfo();

  RandRoomInfo(const RandRoomInfo& from);

  inline RandRoomInfo& operator=(const RandRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandRoomInfo& default_instance();

  void Swap(RandRoomInfo* other);

  // implements Message ----------------------------------------------

  RandRoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandRoomInfo& from);
  void MergeFrom(const RandRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pos_x = 1;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 1;
  inline ::google::protobuf::int32 pos_x() const;
  inline void set_pos_x(::google::protobuf::int32 value);

  // optional int32 pos_y = 2;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 2;
  inline ::google::protobuf::int32 pos_y() const;
  inline void set_pos_y(::google::protobuf::int32 value);

  // optional string file_name = 3;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:MsgPB.RandRoomInfo)
 private:
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  ::std::string* file_name_;
  friend void  protobuf_AddDesc_MsgPvPRandMap_2eproto();
  friend void protobuf_AssignDesc_MsgPvPRandMap_2eproto();
  friend void protobuf_ShutdownFile_MsgPvPRandMap_2eproto();

  void InitAsDefaultInstance();
  static RandRoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgPvPRandRoomLst_MS2C : public ::google::protobuf::Message {
 public:
  MsgPvPRandRoomLst_MS2C();
  virtual ~MsgPvPRandRoomLst_MS2C();

  MsgPvPRandRoomLst_MS2C(const MsgPvPRandRoomLst_MS2C& from);

  inline MsgPvPRandRoomLst_MS2C& operator=(const MsgPvPRandRoomLst_MS2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPvPRandRoomLst_MS2C& default_instance();

  void Swap(MsgPvPRandRoomLst_MS2C* other);

  // implements Message ----------------------------------------------

  MsgPvPRandRoomLst_MS2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPvPRandRoomLst_MS2C& from);
  void MergeFrom(const MsgPvPRandRoomLst_MS2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ROOM_LST_MS2C];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int64 iggid = 2;
  inline bool has_iggid() const;
  inline void clear_iggid();
  static const int kIggidFieldNumber = 2;
  inline ::google::protobuf::int64 iggid() const;
  inline void set_iggid(::google::protobuf::int64 value);

  // repeated .MsgPB.RandRoomInfo room_info = 3;
  inline int room_info_size() const;
  inline void clear_room_info();
  static const int kRoomInfoFieldNumber = 3;
  inline const ::MsgPB::RandRoomInfo& room_info(int index) const;
  inline ::MsgPB::RandRoomInfo* mutable_room_info(int index);
  inline ::MsgPB::RandRoomInfo* add_room_info();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgPB::RandRoomInfo >&
      room_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgPB::RandRoomInfo >*
      mutable_room_info();

  // optional string mapfilename = 4;
  inline bool has_mapfilename() const;
  inline void clear_mapfilename();
  static const int kMapfilenameFieldNumber = 4;
  inline const ::std::string& mapfilename() const;
  inline void set_mapfilename(const ::std::string& value);
  inline void set_mapfilename(const char* value);
  inline void set_mapfilename(const char* value, size_t size);
  inline ::std::string* mutable_mapfilename();
  inline ::std::string* release_mapfilename();
  inline void set_allocated_mapfilename(::std::string* mapfilename);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgPvPRandRoomLst_MS2C)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_iggid();
  inline void clear_has_iggid();
  inline void set_has_mapfilename();
  inline void clear_has_mapfilename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 iggid_;
  ::google::protobuf::RepeatedPtrField< ::MsgPB::RandRoomInfo > room_info_;
  ::std::string* mapfilename_;
  int msgtype_;
  friend void  protobuf_AddDesc_MsgPvPRandMap_2eproto();
  friend void protobuf_AssignDesc_MsgPvPRandMap_2eproto();
  friend void protobuf_ShutdownFile_MsgPvPRandMap_2eproto();

  void InitAsDefaultInstance();
  static MsgPvPRandRoomLst_MS2C* default_instance_;
};
// ===================================================================


// ===================================================================

// RandRoomInfo

// optional int32 pos_x = 1;
inline bool RandRoomInfo::has_pos_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandRoomInfo::set_has_pos_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandRoomInfo::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandRoomInfo::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 RandRoomInfo::pos_x() const {
  // @@protoc_insertion_point(field_get:MsgPB.RandRoomInfo.pos_x)
  return pos_x_;
}
inline void RandRoomInfo::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.RandRoomInfo.pos_x)
}

// optional int32 pos_y = 2;
inline bool RandRoomInfo::has_pos_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandRoomInfo::set_has_pos_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandRoomInfo::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandRoomInfo::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 RandRoomInfo::pos_y() const {
  // @@protoc_insertion_point(field_get:MsgPB.RandRoomInfo.pos_y)
  return pos_y_;
}
inline void RandRoomInfo::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.RandRoomInfo.pos_y)
}

// optional string file_name = 3;
inline bool RandRoomInfo::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandRoomInfo::set_has_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RandRoomInfo::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RandRoomInfo::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& RandRoomInfo::file_name() const {
  // @@protoc_insertion_point(field_get:MsgPB.RandRoomInfo.file_name)
  return *file_name_;
}
inline void RandRoomInfo::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.RandRoomInfo.file_name)
}
inline void RandRoomInfo::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.RandRoomInfo.file_name)
}
inline void RandRoomInfo::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.RandRoomInfo.file_name)
}
inline ::std::string* RandRoomInfo::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.RandRoomInfo.file_name)
  return file_name_;
}
inline ::std::string* RandRoomInfo::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RandRoomInfo::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.RandRoomInfo.file_name)
}

// -------------------------------------------------------------------

// MsgPvPRandRoomLst_MS2C

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ROOM_LST_MS2C];
inline bool MsgPvPRandRoomLst_MS2C::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgPvPRandRoomLst_MS2C::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgPvPRandRoomLst_MS2C::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgPvPRandRoomLst_MS2C::clear_msgtype() {
  msgtype_ = 2502;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgPvPRandRoomLst_MS2C::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgPvPRandRoomLst_MS2C.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgPvPRandRoomLst_MS2C::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgPvPRandRoomLst_MS2C.msgType)
}

// optional int64 iggid = 2;
inline bool MsgPvPRandRoomLst_MS2C::has_iggid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgPvPRandRoomLst_MS2C::set_has_iggid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgPvPRandRoomLst_MS2C::clear_has_iggid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgPvPRandRoomLst_MS2C::clear_iggid() {
  iggid_ = GOOGLE_LONGLONG(0);
  clear_has_iggid();
}
inline ::google::protobuf::int64 MsgPvPRandRoomLst_MS2C::iggid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgPvPRandRoomLst_MS2C.iggid)
  return iggid_;
}
inline void MsgPvPRandRoomLst_MS2C::set_iggid(::google::protobuf::int64 value) {
  set_has_iggid();
  iggid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgPvPRandRoomLst_MS2C.iggid)
}

// repeated .MsgPB.RandRoomInfo room_info = 3;
inline int MsgPvPRandRoomLst_MS2C::room_info_size() const {
  return room_info_.size();
}
inline void MsgPvPRandRoomLst_MS2C::clear_room_info() {
  room_info_.Clear();
}
inline const ::MsgPB::RandRoomInfo& MsgPvPRandRoomLst_MS2C::room_info(int index) const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgPvPRandRoomLst_MS2C.room_info)
  return room_info_.Get(index);
}
inline ::MsgPB::RandRoomInfo* MsgPvPRandRoomLst_MS2C::mutable_room_info(int index) {
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgPvPRandRoomLst_MS2C.room_info)
  return room_info_.Mutable(index);
}
inline ::MsgPB::RandRoomInfo* MsgPvPRandRoomLst_MS2C::add_room_info() {
  // @@protoc_insertion_point(field_add:MsgPB.MsgPvPRandRoomLst_MS2C.room_info)
  return room_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgPB::RandRoomInfo >&
MsgPvPRandRoomLst_MS2C::room_info() const {
  // @@protoc_insertion_point(field_list:MsgPB.MsgPvPRandRoomLst_MS2C.room_info)
  return room_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgPB::RandRoomInfo >*
MsgPvPRandRoomLst_MS2C::mutable_room_info() {
  // @@protoc_insertion_point(field_mutable_list:MsgPB.MsgPvPRandRoomLst_MS2C.room_info)
  return &room_info_;
}

// optional string mapfilename = 4;
inline bool MsgPvPRandRoomLst_MS2C::has_mapfilename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgPvPRandRoomLst_MS2C::set_has_mapfilename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgPvPRandRoomLst_MS2C::clear_has_mapfilename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgPvPRandRoomLst_MS2C::clear_mapfilename() {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_->clear();
  }
  clear_has_mapfilename();
}
inline const ::std::string& MsgPvPRandRoomLst_MS2C::mapfilename() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgPvPRandRoomLst_MS2C.mapfilename)
  return *mapfilename_;
}
inline void MsgPvPRandRoomLst_MS2C::set_mapfilename(const ::std::string& value) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgPvPRandRoomLst_MS2C.mapfilename)
}
inline void MsgPvPRandRoomLst_MS2C::set_mapfilename(const char* value) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgPvPRandRoomLst_MS2C.mapfilename)
}
inline void MsgPvPRandRoomLst_MS2C::set_mapfilename(const char* value, size_t size) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgPvPRandRoomLst_MS2C.mapfilename)
}
inline ::std::string* MsgPvPRandRoomLst_MS2C::mutable_mapfilename() {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgPvPRandRoomLst_MS2C.mapfilename)
  return mapfilename_;
}
inline ::std::string* MsgPvPRandRoomLst_MS2C::release_mapfilename() {
  clear_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mapfilename_;
    mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgPvPRandRoomLst_MS2C::set_allocated_mapfilename(::std::string* mapfilename) {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapfilename_;
  }
  if (mapfilename) {
    set_has_mapfilename();
    mapfilename_ = mapfilename;
  } else {
    clear_has_mapfilename();
    mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgPvPRandRoomLst_MS2C.mapfilename)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MsgPvPRandMap_2eproto__INCLUDED
