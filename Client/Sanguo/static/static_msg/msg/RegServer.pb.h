// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegServer.proto

#ifndef PROTOBUF_RegServer_2eproto__INCLUDED
#define PROTOBUF_RegServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "MsgType.pb.h"
// @@protoc_insertion_point(includes)

namespace MsgPB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RegServer_2eproto();
void protobuf_AssignDesc_RegServer_2eproto();
void protobuf_ShutdownFile_RegServer_2eproto();

class MsgServerRegister;
class MsgServerRegisterResult;

// ===================================================================

class MsgServerRegister : public ::google::protobuf::Message {
 public:
  MsgServerRegister();
  virtual ~MsgServerRegister();

  MsgServerRegister(const MsgServerRegister& from);

  inline MsgServerRegister& operator=(const MsgServerRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgServerRegister& default_instance();

  void Swap(MsgServerRegister* other);

  // implements Message ----------------------------------------------

  MsgServerRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgServerRegister& from);
  void MergeFrom(const MsgServerRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_REGISTER];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional int32 ServerID = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 2;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional int32 ServerType = 3;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServerTypeFieldNumber = 3;
  inline ::google::protobuf::int32 servertype() const;
  inline void set_servertype(::google::protobuf::int32 value);

  // optional string RegisterAuthCode = 4;
  inline bool has_registerauthcode() const;
  inline void clear_registerauthcode();
  static const int kRegisterAuthCodeFieldNumber = 4;
  inline const ::std::string& registerauthcode() const;
  inline void set_registerauthcode(const ::std::string& value);
  inline void set_registerauthcode(const char* value);
  inline void set_registerauthcode(const char* value, size_t size);
  inline ::std::string* mutable_registerauthcode();
  inline ::std::string* release_registerauthcode();
  inline void set_allocated_registerauthcode(::std::string* registerauthcode);

  // optional string ListenIP = 5;
  inline bool has_listenip() const;
  inline void clear_listenip();
  static const int kListenIPFieldNumber = 5;
  inline const ::std::string& listenip() const;
  inline void set_listenip(const ::std::string& value);
  inline void set_listenip(const char* value);
  inline void set_listenip(const char* value, size_t size);
  inline ::std::string* mutable_listenip();
  inline ::std::string* release_listenip();
  inline void set_allocated_listenip(::std::string* listenip);

  // optional int32 ListenPort = 6;
  inline bool has_listenport() const;
  inline void clear_listenport();
  static const int kListenPortFieldNumber = 6;
  inline ::google::protobuf::int32 listenport() const;
  inline void set_listenport(::google::protobuf::int32 value);

  // optional string DomainName = 7;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainNameFieldNumber = 7;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  inline void set_allocated_domainname(::std::string* domainname);

  // optional int32 TotalMapCount = 8 [default = 0];
  inline bool has_totalmapcount() const;
  inline void clear_totalmapcount();
  static const int kTotalMapCountFieldNumber = 8;
  inline ::google::protobuf::int32 totalmapcount() const;
  inline void set_totalmapcount(::google::protobuf::int32 value);

  // optional int32 PublicMapCount = 9 [default = 0];
  inline bool has_publicmapcount() const;
  inline void clear_publicmapcount();
  static const int kPublicMapCountFieldNumber = 9;
  inline ::google::protobuf::int32 publicmapcount() const;
  inline void set_publicmapcount(::google::protobuf::int32 value);

  // optional int32 DungeonMapCount = 10 [default = 0];
  inline bool has_dungeonmapcount() const;
  inline void clear_dungeonmapcount();
  static const int kDungeonMapCountFieldNumber = 10;
  inline ::google::protobuf::int32 dungeonmapcount() const;
  inline void set_dungeonmapcount(::google::protobuf::int32 value);

  // optional uint32 area_id = 11;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 11;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional uint32 start_time = 13;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 13;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgServerRegister)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_servertype();
  inline void clear_has_servertype();
  inline void set_has_registerauthcode();
  inline void clear_has_registerauthcode();
  inline void set_has_listenip();
  inline void clear_has_listenip();
  inline void set_has_listenport();
  inline void clear_has_listenport();
  inline void set_has_domainname();
  inline void clear_has_domainname();
  inline void set_has_totalmapcount();
  inline void clear_has_totalmapcount();
  inline void set_has_publicmapcount();
  inline void clear_has_publicmapcount();
  inline void set_has_dungeonmapcount();
  inline void clear_has_dungeonmapcount();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_start_time();
  inline void clear_has_start_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgtype_;
  ::google::protobuf::int32 serverid_;
  ::std::string* registerauthcode_;
  ::google::protobuf::int32 servertype_;
  ::google::protobuf::int32 listenport_;
  ::std::string* listenip_;
  ::std::string* domainname_;
  ::google::protobuf::int32 totalmapcount_;
  ::google::protobuf::int32 publicmapcount_;
  ::google::protobuf::int32 dungeonmapcount_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::uint32 start_time_;
  friend void  protobuf_AddDesc_RegServer_2eproto();
  friend void protobuf_AssignDesc_RegServer_2eproto();
  friend void protobuf_ShutdownFile_RegServer_2eproto();

  void InitAsDefaultInstance();
  static MsgServerRegister* default_instance_;
};
// -------------------------------------------------------------------

class MsgServerRegisterResult : public ::google::protobuf::Message {
 public:
  MsgServerRegisterResult();
  virtual ~MsgServerRegisterResult();

  MsgServerRegisterResult(const MsgServerRegisterResult& from);

  inline MsgServerRegisterResult& operator=(const MsgServerRegisterResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgServerRegisterResult& default_instance();

  void Swap(MsgServerRegisterResult* other);

  // implements Message ----------------------------------------------

  MsgServerRegisterResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgServerRegisterResult& from);
  void MergeFrom(const MsgServerRegisterResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_REGISTER_RESULT];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::MsgPB::EMsgType msgtype() const;
  inline void set_msgtype(::MsgPB::EMsgType value);

  // optional bool bOK = 2;
  inline bool has_bok() const;
  inline void clear_bok();
  static const int kBOKFieldNumber = 2;
  inline bool bok() const;
  inline void set_bok(bool value);

  // optional int32 serverType = 3;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServerTypeFieldNumber = 3;
  inline ::google::protobuf::int32 servertype() const;
  inline void set_servertype(::google::protobuf::int32 value);

  // optional int32 server_id = 4;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // optional uint32 start_time = 5;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgPB.MsgServerRegisterResult)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_bok();
  inline void clear_has_bok();
  inline void set_has_servertype();
  inline void clear_has_servertype();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_start_time();
  inline void clear_has_start_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgtype_;
  bool bok_;
  ::google::protobuf::int32 servertype_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::uint32 start_time_;
  friend void  protobuf_AddDesc_RegServer_2eproto();
  friend void protobuf_AssignDesc_RegServer_2eproto();
  friend void protobuf_ShutdownFile_RegServer_2eproto();

  void InitAsDefaultInstance();
  static MsgServerRegisterResult* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgServerRegister

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_REGISTER];
inline bool MsgServerRegister::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgServerRegister::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgServerRegister::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgServerRegister::clear_msgtype() {
  msgtype_ = 1009;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgServerRegister::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegister.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgServerRegister::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegister.msgType)
}

// optional int32 ServerID = 2;
inline bool MsgServerRegister::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgServerRegister::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgServerRegister::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgServerRegister::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 MsgServerRegister::serverid() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegister.ServerID)
  return serverid_;
}
inline void MsgServerRegister::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegister.ServerID)
}

// optional int32 ServerType = 3;
inline bool MsgServerRegister::has_servertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgServerRegister::set_has_servertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgServerRegister::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgServerRegister::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
inline ::google::protobuf::int32 MsgServerRegister::servertype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegister.ServerType)
  return servertype_;
}
inline void MsgServerRegister::set_servertype(::google::protobuf::int32 value) {
  set_has_servertype();
  servertype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegister.ServerType)
}

// optional string RegisterAuthCode = 4;
inline bool MsgServerRegister::has_registerauthcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgServerRegister::set_has_registerauthcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgServerRegister::clear_has_registerauthcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgServerRegister::clear_registerauthcode() {
  if (registerauthcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    registerauthcode_->clear();
  }
  clear_has_registerauthcode();
}
inline const ::std::string& MsgServerRegister::registerauthcode() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegister.RegisterAuthCode)
  return *registerauthcode_;
}
inline void MsgServerRegister::set_registerauthcode(const ::std::string& value) {
  set_has_registerauthcode();
  if (registerauthcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    registerauthcode_ = new ::std::string;
  }
  registerauthcode_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegister.RegisterAuthCode)
}
inline void MsgServerRegister::set_registerauthcode(const char* value) {
  set_has_registerauthcode();
  if (registerauthcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    registerauthcode_ = new ::std::string;
  }
  registerauthcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgServerRegister.RegisterAuthCode)
}
inline void MsgServerRegister::set_registerauthcode(const char* value, size_t size) {
  set_has_registerauthcode();
  if (registerauthcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    registerauthcode_ = new ::std::string;
  }
  registerauthcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgServerRegister.RegisterAuthCode)
}
inline ::std::string* MsgServerRegister::mutable_registerauthcode() {
  set_has_registerauthcode();
  if (registerauthcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    registerauthcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgServerRegister.RegisterAuthCode)
  return registerauthcode_;
}
inline ::std::string* MsgServerRegister::release_registerauthcode() {
  clear_has_registerauthcode();
  if (registerauthcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = registerauthcode_;
    registerauthcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgServerRegister::set_allocated_registerauthcode(::std::string* registerauthcode) {
  if (registerauthcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete registerauthcode_;
  }
  if (registerauthcode) {
    set_has_registerauthcode();
    registerauthcode_ = registerauthcode;
  } else {
    clear_has_registerauthcode();
    registerauthcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgServerRegister.RegisterAuthCode)
}

// optional string ListenIP = 5;
inline bool MsgServerRegister::has_listenip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgServerRegister::set_has_listenip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgServerRegister::clear_has_listenip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgServerRegister::clear_listenip() {
  if (listenip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listenip_->clear();
  }
  clear_has_listenip();
}
inline const ::std::string& MsgServerRegister::listenip() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegister.ListenIP)
  return *listenip_;
}
inline void MsgServerRegister::set_listenip(const ::std::string& value) {
  set_has_listenip();
  if (listenip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listenip_ = new ::std::string;
  }
  listenip_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegister.ListenIP)
}
inline void MsgServerRegister::set_listenip(const char* value) {
  set_has_listenip();
  if (listenip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listenip_ = new ::std::string;
  }
  listenip_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgServerRegister.ListenIP)
}
inline void MsgServerRegister::set_listenip(const char* value, size_t size) {
  set_has_listenip();
  if (listenip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listenip_ = new ::std::string;
  }
  listenip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgServerRegister.ListenIP)
}
inline ::std::string* MsgServerRegister::mutable_listenip() {
  set_has_listenip();
  if (listenip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listenip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgServerRegister.ListenIP)
  return listenip_;
}
inline ::std::string* MsgServerRegister::release_listenip() {
  clear_has_listenip();
  if (listenip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = listenip_;
    listenip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgServerRegister::set_allocated_listenip(::std::string* listenip) {
  if (listenip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete listenip_;
  }
  if (listenip) {
    set_has_listenip();
    listenip_ = listenip;
  } else {
    clear_has_listenip();
    listenip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgServerRegister.ListenIP)
}

// optional int32 ListenPort = 6;
inline bool MsgServerRegister::has_listenport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgServerRegister::set_has_listenport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgServerRegister::clear_has_listenport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgServerRegister::clear_listenport() {
  listenport_ = 0;
  clear_has_listenport();
}
inline ::google::protobuf::int32 MsgServerRegister::listenport() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegister.ListenPort)
  return listenport_;
}
inline void MsgServerRegister::set_listenport(::google::protobuf::int32 value) {
  set_has_listenport();
  listenport_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegister.ListenPort)
}

// optional string DomainName = 7;
inline bool MsgServerRegister::has_domainname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgServerRegister::set_has_domainname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgServerRegister::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgServerRegister::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& MsgServerRegister::domainname() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegister.DomainName)
  return *domainname_;
}
inline void MsgServerRegister::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegister.DomainName)
}
inline void MsgServerRegister::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPB.MsgServerRegister.DomainName)
}
inline void MsgServerRegister::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPB.MsgServerRegister.DomainName)
}
inline ::std::string* MsgServerRegister::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domainname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPB.MsgServerRegister.DomainName)
  return domainname_;
}
inline ::std::string* MsgServerRegister::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgServerRegister::set_allocated_domainname(::std::string* domainname) {
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (domainname) {
    set_has_domainname();
    domainname_ = domainname;
  } else {
    clear_has_domainname();
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPB.MsgServerRegister.DomainName)
}

// optional int32 TotalMapCount = 8 [default = 0];
inline bool MsgServerRegister::has_totalmapcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgServerRegister::set_has_totalmapcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgServerRegister::clear_has_totalmapcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgServerRegister::clear_totalmapcount() {
  totalmapcount_ = 0;
  clear_has_totalmapcount();
}
inline ::google::protobuf::int32 MsgServerRegister::totalmapcount() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegister.TotalMapCount)
  return totalmapcount_;
}
inline void MsgServerRegister::set_totalmapcount(::google::protobuf::int32 value) {
  set_has_totalmapcount();
  totalmapcount_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegister.TotalMapCount)
}

// optional int32 PublicMapCount = 9 [default = 0];
inline bool MsgServerRegister::has_publicmapcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgServerRegister::set_has_publicmapcount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgServerRegister::clear_has_publicmapcount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgServerRegister::clear_publicmapcount() {
  publicmapcount_ = 0;
  clear_has_publicmapcount();
}
inline ::google::protobuf::int32 MsgServerRegister::publicmapcount() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegister.PublicMapCount)
  return publicmapcount_;
}
inline void MsgServerRegister::set_publicmapcount(::google::protobuf::int32 value) {
  set_has_publicmapcount();
  publicmapcount_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegister.PublicMapCount)
}

// optional int32 DungeonMapCount = 10 [default = 0];
inline bool MsgServerRegister::has_dungeonmapcount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgServerRegister::set_has_dungeonmapcount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgServerRegister::clear_has_dungeonmapcount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgServerRegister::clear_dungeonmapcount() {
  dungeonmapcount_ = 0;
  clear_has_dungeonmapcount();
}
inline ::google::protobuf::int32 MsgServerRegister::dungeonmapcount() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegister.DungeonMapCount)
  return dungeonmapcount_;
}
inline void MsgServerRegister::set_dungeonmapcount(::google::protobuf::int32 value) {
  set_has_dungeonmapcount();
  dungeonmapcount_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegister.DungeonMapCount)
}

// optional uint32 area_id = 11;
inline bool MsgServerRegister::has_area_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MsgServerRegister::set_has_area_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MsgServerRegister::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MsgServerRegister::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 MsgServerRegister::area_id() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegister.area_id)
  return area_id_;
}
inline void MsgServerRegister::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegister.area_id)
}

// optional uint32 start_time = 13;
inline bool MsgServerRegister::has_start_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MsgServerRegister::set_has_start_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MsgServerRegister::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MsgServerRegister::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 MsgServerRegister::start_time() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegister.start_time)
  return start_time_;
}
inline void MsgServerRegister::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegister.start_time)
}

// -------------------------------------------------------------------

// MsgServerRegisterResult

// optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_REGISTER_RESULT];
inline bool MsgServerRegisterResult::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgServerRegisterResult::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgServerRegisterResult::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgServerRegisterResult::clear_msgtype() {
  msgtype_ = 1010;
  clear_has_msgtype();
}
inline ::MsgPB::EMsgType MsgServerRegisterResult::msgtype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegisterResult.msgType)
  return static_cast< ::MsgPB::EMsgType >(msgtype_);
}
inline void MsgServerRegisterResult::set_msgtype(::MsgPB::EMsgType value) {
  assert(::MsgPB::EMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegisterResult.msgType)
}

// optional bool bOK = 2;
inline bool MsgServerRegisterResult::has_bok() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgServerRegisterResult::set_has_bok() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgServerRegisterResult::clear_has_bok() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgServerRegisterResult::clear_bok() {
  bok_ = false;
  clear_has_bok();
}
inline bool MsgServerRegisterResult::bok() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegisterResult.bOK)
  return bok_;
}
inline void MsgServerRegisterResult::set_bok(bool value) {
  set_has_bok();
  bok_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegisterResult.bOK)
}

// optional int32 serverType = 3;
inline bool MsgServerRegisterResult::has_servertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgServerRegisterResult::set_has_servertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgServerRegisterResult::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgServerRegisterResult::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
inline ::google::protobuf::int32 MsgServerRegisterResult::servertype() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegisterResult.serverType)
  return servertype_;
}
inline void MsgServerRegisterResult::set_servertype(::google::protobuf::int32 value) {
  set_has_servertype();
  servertype_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegisterResult.serverType)
}

// optional int32 server_id = 4;
inline bool MsgServerRegisterResult::has_server_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgServerRegisterResult::set_has_server_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgServerRegisterResult::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgServerRegisterResult::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 MsgServerRegisterResult::server_id() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegisterResult.server_id)
  return server_id_;
}
inline void MsgServerRegisterResult::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegisterResult.server_id)
}

// optional uint32 start_time = 5;
inline bool MsgServerRegisterResult::has_start_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgServerRegisterResult::set_has_start_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgServerRegisterResult::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgServerRegisterResult::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 MsgServerRegisterResult::start_time() const {
  // @@protoc_insertion_point(field_get:MsgPB.MsgServerRegisterResult.start_time)
  return start_time_;
}
inline void MsgServerRegisterResult::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:MsgPB.MsgServerRegisterResult.start_time)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RegServer_2eproto__INCLUDED
