// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgPublicMap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgPublicMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgPublicMapChangeMap_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPublicMapChangeMap_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPublicMapChangeMapRs_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPublicMapChangeMapRs_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPublicMapCreate_S2MS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPublicMapCreate_S2MS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPublicMapCreateRs_MS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPublicMapCreateRs_MS2S_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CHANGE_MAP_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CHANGE_MAP_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ENUM_CREATEPUBLIC_RESULT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgPublicMap_2eproto() {
  protobuf_AddDesc_MsgPublicMap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgPublicMap.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPublicMapChangeMap_C2S_descriptor_ = file->message_type(0);
  static const int MsgPublicMapChangeMap_C2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapChangeMap_C2S, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapChangeMap_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapChangeMap_C2S, type_),
  };
  MsgPublicMapChangeMap_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPublicMapChangeMap_C2S_descriptor_,
      MsgPublicMapChangeMap_C2S::default_instance_,
      MsgPublicMapChangeMap_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapChangeMap_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapChangeMap_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPublicMapChangeMap_C2S));
  MsgPublicMapChangeMapRs_S2C_descriptor_ = file->message_type(1);
  static const int MsgPublicMapChangeMapRs_S2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapChangeMapRs_S2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapChangeMapRs_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapChangeMapRs_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapChangeMapRs_S2C, result_),
  };
  MsgPublicMapChangeMapRs_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPublicMapChangeMapRs_S2C_descriptor_,
      MsgPublicMapChangeMapRs_S2C::default_instance_,
      MsgPublicMapChangeMapRs_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapChangeMapRs_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapChangeMapRs_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPublicMapChangeMapRs_S2C));
  MsgPublicMapCreate_S2MS_descriptor_ = file->message_type(2);
  static const int MsgPublicMapCreate_S2MS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapCreate_S2MS, msgtype_),
  };
  MsgPublicMapCreate_S2MS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPublicMapCreate_S2MS_descriptor_,
      MsgPublicMapCreate_S2MS::default_instance_,
      MsgPublicMapCreate_S2MS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapCreate_S2MS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapCreate_S2MS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPublicMapCreate_S2MS));
  MsgPublicMapCreateRs_MS2S_descriptor_ = file->message_type(3);
  static const int MsgPublicMapCreateRs_MS2S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapCreateRs_MS2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapCreateRs_MS2S, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapCreateRs_MS2S, map_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapCreateRs_MS2S, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapCreateRs_MS2S, creator_iggid_),
  };
  MsgPublicMapCreateRs_MS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPublicMapCreateRs_MS2S_descriptor_,
      MsgPublicMapCreateRs_MS2S::default_instance_,
      MsgPublicMapCreateRs_MS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapCreateRs_MS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPublicMapCreateRs_MS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPublicMapCreateRs_MS2S));
  CHANGE_MAP_TYPE_descriptor_ = file->enum_type(0);
  CHANGE_MAP_RESULT_descriptor_ = file->enum_type(1);
  ENUM_CREATEPUBLIC_RESULT_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgPublicMap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPublicMapChangeMap_C2S_descriptor_, &MsgPublicMapChangeMap_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPublicMapChangeMapRs_S2C_descriptor_, &MsgPublicMapChangeMapRs_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPublicMapCreate_S2MS_descriptor_, &MsgPublicMapCreate_S2MS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPublicMapCreateRs_MS2S_descriptor_, &MsgPublicMapCreateRs_MS2S::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgPublicMap_2eproto() {
  delete MsgPublicMapChangeMap_C2S::default_instance_;
  delete MsgPublicMapChangeMap_C2S_reflection_;
  delete MsgPublicMapChangeMapRs_S2C::default_instance_;
  delete MsgPublicMapChangeMapRs_S2C_reflection_;
  delete MsgPublicMapCreate_S2MS::default_instance_;
  delete MsgPublicMapCreate_S2MS_reflection_;
  delete MsgPublicMapCreateRs_MS2S::default_instance_;
  delete MsgPublicMapCreateRs_MS2S_reflection_;
}

void protobuf_AddDesc_MsgPublicMap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022MsgPublicMap.proto\022\005MsgPB\032\rMsgType.pro"
    "to\"\226\001\n\031MsgPublicMapChangeMap_C2S\022\020\n\010Seri"
    "alID\030\001 \001(\005\022A\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsg"
    "Type:\037_MSG_PUBLIC_MAP_CHANGE_MAP_C2GS\022$\n"
    "\004type\030\003 \001(\0162\026.MsgPB.CHANGE_MAP_TYPE\"\256\001\n\033"
    "MsgPublicMapChangeMapRs_S2C\022\020\n\010SerialID\030"
    "\001 \001(\005\022D\n\007msgType\030\002 \001(\0162\017.MsgPB.EMsgType:"
    "\"_MSG_PUBLIC_MAP_CHANGE_MAP_RS_GS2C\022\r\n\005i"
    "ggid\030\003 \001(\003\022(\n\006result\030\004 \001(\0162\030.MsgPB.CHANG"
    "E_MAP_RESULT\"Y\n\027MsgPublicMapCreate_S2MS\022"
    ">\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\034_MSG_"
    "PUBLIC_MAP_CREATED_S2MS\"\310\001\n\031MsgPublicMap"
    "CreateRs_MS2S\022A\n\007msgType\030\001 \001(\0162\017.MsgPB.E"
    "MsgType:\037_MSG_PUBLIC_MAP_CREATED_RS_MS2S"
    "\022/\n\006result\030\002 \001(\0162\037.MsgPB.ENUM_CREATEPUBL"
    "IC_RESULT\022\020\n\010map_uuid\030\003 \001(\003\022\016\n\006map_id\030\004 "
    "\001(\005\022\025\n\rcreator_iggid\030\005 \001(\003*y\n\017CHANGE_MAP"
    "_TYPE\022\030\n\024CHANGE_MAP_TYPE_NULL\020\000\022%\n!CHANG"
    "E_MAP_TYPE_PRIVATE_TO_PUBLIC\020\001\022%\n!CHANGE"
    "_MAP_TYPE_PUBLIC_TO_PRIVATE\020\002*\374\002\n\021CHANGE"
    "_MAP_RESULT\022\032\n\026CHANGE_MAP_RESULT_NULL\020\000\022"
    "\035\n\031CHANGE_MAP_RESULT_SUCCESS\020\001\022 \n\034CHANGE"
    "_MAP_RESULT_TYPE_ERROR\020\002\022(\n$CHANGE_MAP_R"
    "ESULT_NOT_IN_PRIVATE_MAP\020\003\022\'\n#CHANGE_MAP"
    "_RESULT_NOT_IN_PUBLIC_MAP\020\004\022&\n\"CHANGE_MA"
    "P_RESULT_CREATE_MAP_ERROR\020\005\022\037\n\033CHANGE_MA"
    "P_RESULT_CREATEING\020\006\022!\n\035CHANGE_MAP_RESUL"
    "T_MAP_DISABLE\020\007\022&\n\"CHANGE_MAP_RESULT_NO_"
    "MAPSERVER_ERR\020\010\022#\n\037CHANGE_MAP_RESULT_MAP"
    "SERVER_ERR\020\t*\253\001\n\030ENUM_CREATEPUBLIC_RESUL"
    "T\022\025\n\021CREATEPUBLIC_NULL\020\000\022\030\n\024CREATEPUBLIC"
    "_SUCCESS\020\001\022\035\n\031CREATEPUBLIC_MAPMGR_ERROR\020"
    "\002\022\034\n\030CREATEPUBLIC_MAPID_ERROR\020\003\022!\n\035CREAT"
    "EPUBLIC_CREATE_MAP_ERROR\020\004", 1346);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgPublicMap.proto", &protobuf_RegisterTypes);
  MsgPublicMapChangeMap_C2S::default_instance_ = new MsgPublicMapChangeMap_C2S();
  MsgPublicMapChangeMapRs_S2C::default_instance_ = new MsgPublicMapChangeMapRs_S2C();
  MsgPublicMapCreate_S2MS::default_instance_ = new MsgPublicMapCreate_S2MS();
  MsgPublicMapCreateRs_MS2S::default_instance_ = new MsgPublicMapCreateRs_MS2S();
  MsgPublicMapChangeMap_C2S::default_instance_->InitAsDefaultInstance();
  MsgPublicMapChangeMapRs_S2C::default_instance_->InitAsDefaultInstance();
  MsgPublicMapCreate_S2MS::default_instance_->InitAsDefaultInstance();
  MsgPublicMapCreateRs_MS2S::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgPublicMap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgPublicMap_2eproto {
  StaticDescriptorInitializer_MsgPublicMap_2eproto() {
    protobuf_AddDesc_MsgPublicMap_2eproto();
  }
} static_descriptor_initializer_MsgPublicMap_2eproto_;
const ::google::protobuf::EnumDescriptor* CHANGE_MAP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHANGE_MAP_TYPE_descriptor_;
}
bool CHANGE_MAP_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHANGE_MAP_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHANGE_MAP_RESULT_descriptor_;
}
bool CHANGE_MAP_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ENUM_CREATEPUBLIC_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ENUM_CREATEPUBLIC_RESULT_descriptor_;
}
bool ENUM_CREATEPUBLIC_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPublicMapChangeMap_C2S::kSerialIDFieldNumber;
const int MsgPublicMapChangeMap_C2S::kMsgTypeFieldNumber;
const int MsgPublicMapChangeMap_C2S::kTypeFieldNumber;
#endif  // !_MSC_VER

MsgPublicMapChangeMap_C2S::MsgPublicMapChangeMap_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPublicMapChangeMap_C2S)
}

void MsgPublicMapChangeMap_C2S::InitAsDefaultInstance() {
}

MsgPublicMapChangeMap_C2S::MsgPublicMapChangeMap_C2S(const MsgPublicMapChangeMap_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPublicMapChangeMap_C2S)
}

void MsgPublicMapChangeMap_C2S::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2200;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPublicMapChangeMap_C2S::~MsgPublicMapChangeMap_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPublicMapChangeMap_C2S)
  SharedDtor();
}

void MsgPublicMapChangeMap_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPublicMapChangeMap_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPublicMapChangeMap_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPublicMapChangeMap_C2S_descriptor_;
}

const MsgPublicMapChangeMap_C2S& MsgPublicMapChangeMap_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPublicMap_2eproto();
  return *default_instance_;
}

MsgPublicMapChangeMap_C2S* MsgPublicMapChangeMap_C2S::default_instance_ = NULL;

MsgPublicMapChangeMap_C2S* MsgPublicMapChangeMap_C2S::New() const {
  return new MsgPublicMapChangeMap_C2S;
}

void MsgPublicMapChangeMap_C2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    serialid_ = 0;
    msgtype_ = 2200;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPublicMapChangeMap_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPublicMapChangeMap_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_PUBLIC_MAP_CHANGE_MAP_C2GS];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .MsgPB.CHANGE_MAP_TYPE type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::CHANGE_MAP_TYPE_IsValid(value)) {
            set_type(static_cast< ::MsgPB::CHANGE_MAP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPublicMapChangeMap_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPublicMapChangeMap_C2S)
  return false;
#undef DO_
}

void MsgPublicMapChangeMap_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPublicMapChangeMap_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_PUBLIC_MAP_CHANGE_MAP_C2GS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional .MsgPB.CHANGE_MAP_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPublicMapChangeMap_C2S)
}

::google::protobuf::uint8* MsgPublicMapChangeMap_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPublicMapChangeMap_C2S)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_PUBLIC_MAP_CHANGE_MAP_C2GS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional .MsgPB.CHANGE_MAP_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPublicMapChangeMap_C2S)
  return target;
}

int MsgPublicMapChangeMap_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_PUBLIC_MAP_CHANGE_MAP_C2GS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.CHANGE_MAP_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPublicMapChangeMap_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPublicMapChangeMap_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPublicMapChangeMap_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPublicMapChangeMap_C2S::MergeFrom(const MsgPublicMapChangeMap_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPublicMapChangeMap_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPublicMapChangeMap_C2S::CopyFrom(const MsgPublicMapChangeMap_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPublicMapChangeMap_C2S::IsInitialized() const {

  return true;
}

void MsgPublicMapChangeMap_C2S::Swap(MsgPublicMapChangeMap_C2S* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPublicMapChangeMap_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPublicMapChangeMap_C2S_descriptor_;
  metadata.reflection = MsgPublicMapChangeMap_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPublicMapChangeMapRs_S2C::kSerialIDFieldNumber;
const int MsgPublicMapChangeMapRs_S2C::kMsgTypeFieldNumber;
const int MsgPublicMapChangeMapRs_S2C::kIggidFieldNumber;
const int MsgPublicMapChangeMapRs_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

MsgPublicMapChangeMapRs_S2C::MsgPublicMapChangeMapRs_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPublicMapChangeMapRs_S2C)
}

void MsgPublicMapChangeMapRs_S2C::InitAsDefaultInstance() {
}

MsgPublicMapChangeMapRs_S2C::MsgPublicMapChangeMapRs_S2C(const MsgPublicMapChangeMapRs_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPublicMapChangeMapRs_S2C)
}

void MsgPublicMapChangeMapRs_S2C::SharedCtor() {
  _cached_size_ = 0;
  serialid_ = 0;
  msgtype_ = 2201;
  iggid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPublicMapChangeMapRs_S2C::~MsgPublicMapChangeMapRs_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPublicMapChangeMapRs_S2C)
  SharedDtor();
}

void MsgPublicMapChangeMapRs_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPublicMapChangeMapRs_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPublicMapChangeMapRs_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPublicMapChangeMapRs_S2C_descriptor_;
}

const MsgPublicMapChangeMapRs_S2C& MsgPublicMapChangeMapRs_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPublicMap_2eproto();
  return *default_instance_;
}

MsgPublicMapChangeMapRs_S2C* MsgPublicMapChangeMapRs_S2C::default_instance_ = NULL;

MsgPublicMapChangeMapRs_S2C* MsgPublicMapChangeMapRs_S2C::New() const {
  return new MsgPublicMapChangeMapRs_S2C;
}

void MsgPublicMapChangeMapRs_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPublicMapChangeMapRs_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, result_);
    serialid_ = 0;
    msgtype_ = 2201;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPublicMapChangeMapRs_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPublicMapChangeMapRs_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerialID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_PUBLIC_MAP_CHANGE_MAP_RS_GS2C];
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .MsgPB.CHANGE_MAP_RESULT result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::CHANGE_MAP_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::CHANGE_MAP_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPublicMapChangeMapRs_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPublicMapChangeMapRs_S2C)
  return false;
#undef DO_
}

void MsgPublicMapChangeMapRs_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPublicMapChangeMapRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serialid(), output);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_PUBLIC_MAP_CHANGE_MAP_RS_GS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional .MsgPB.CHANGE_MAP_RESULT result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPublicMapChangeMapRs_S2C)
}

::google::protobuf::uint8* MsgPublicMapChangeMapRs_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPublicMapChangeMapRs_S2C)
  // optional int32 SerialID = 1;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serialid(), target);
  }

  // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_PUBLIC_MAP_CHANGE_MAP_RS_GS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional .MsgPB.CHANGE_MAP_RESULT result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPublicMapChangeMapRs_S2C)
  return target;
}

int MsgPublicMapChangeMapRs_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerialID = 1;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional .MsgPB.EMsgType msgType = 2 [default = _MSG_PUBLIC_MAP_CHANGE_MAP_RS_GS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.CHANGE_MAP_RESULT result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPublicMapChangeMapRs_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPublicMapChangeMapRs_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPublicMapChangeMapRs_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPublicMapChangeMapRs_S2C::MergeFrom(const MsgPublicMapChangeMapRs_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPublicMapChangeMapRs_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPublicMapChangeMapRs_S2C::CopyFrom(const MsgPublicMapChangeMapRs_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPublicMapChangeMapRs_S2C::IsInitialized() const {

  return true;
}

void MsgPublicMapChangeMapRs_S2C::Swap(MsgPublicMapChangeMapRs_S2C* other) {
  if (other != this) {
    std::swap(serialid_, other->serialid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPublicMapChangeMapRs_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPublicMapChangeMapRs_S2C_descriptor_;
  metadata.reflection = MsgPublicMapChangeMapRs_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPublicMapCreate_S2MS::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgPublicMapCreate_S2MS::MsgPublicMapCreate_S2MS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPublicMapCreate_S2MS)
}

void MsgPublicMapCreate_S2MS::InitAsDefaultInstance() {
}

MsgPublicMapCreate_S2MS::MsgPublicMapCreate_S2MS(const MsgPublicMapCreate_S2MS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPublicMapCreate_S2MS)
}

void MsgPublicMapCreate_S2MS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2202;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPublicMapCreate_S2MS::~MsgPublicMapCreate_S2MS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPublicMapCreate_S2MS)
  SharedDtor();
}

void MsgPublicMapCreate_S2MS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPublicMapCreate_S2MS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPublicMapCreate_S2MS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPublicMapCreate_S2MS_descriptor_;
}

const MsgPublicMapCreate_S2MS& MsgPublicMapCreate_S2MS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPublicMap_2eproto();
  return *default_instance_;
}

MsgPublicMapCreate_S2MS* MsgPublicMapCreate_S2MS::default_instance_ = NULL;

MsgPublicMapCreate_S2MS* MsgPublicMapCreate_S2MS::New() const {
  return new MsgPublicMapCreate_S2MS;
}

void MsgPublicMapCreate_S2MS::Clear() {
  msgtype_ = 2202;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPublicMapCreate_S2MS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPublicMapCreate_S2MS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PUBLIC_MAP_CREATED_S2MS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPublicMapCreate_S2MS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPublicMapCreate_S2MS)
  return false;
#undef DO_
}

void MsgPublicMapCreate_S2MS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPublicMapCreate_S2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PUBLIC_MAP_CREATED_S2MS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPublicMapCreate_S2MS)
}

::google::protobuf::uint8* MsgPublicMapCreate_S2MS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPublicMapCreate_S2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PUBLIC_MAP_CREATED_S2MS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPublicMapCreate_S2MS)
  return target;
}

int MsgPublicMapCreate_S2MS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PUBLIC_MAP_CREATED_S2MS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPublicMapCreate_S2MS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPublicMapCreate_S2MS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPublicMapCreate_S2MS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPublicMapCreate_S2MS::MergeFrom(const MsgPublicMapCreate_S2MS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPublicMapCreate_S2MS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPublicMapCreate_S2MS::CopyFrom(const MsgPublicMapCreate_S2MS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPublicMapCreate_S2MS::IsInitialized() const {

  return true;
}

void MsgPublicMapCreate_S2MS::Swap(MsgPublicMapCreate_S2MS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPublicMapCreate_S2MS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPublicMapCreate_S2MS_descriptor_;
  metadata.reflection = MsgPublicMapCreate_S2MS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPublicMapCreateRs_MS2S::kMsgTypeFieldNumber;
const int MsgPublicMapCreateRs_MS2S::kResultFieldNumber;
const int MsgPublicMapCreateRs_MS2S::kMapUuidFieldNumber;
const int MsgPublicMapCreateRs_MS2S::kMapIdFieldNumber;
const int MsgPublicMapCreateRs_MS2S::kCreatorIggidFieldNumber;
#endif  // !_MSC_VER

MsgPublicMapCreateRs_MS2S::MsgPublicMapCreateRs_MS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPublicMapCreateRs_MS2S)
}

void MsgPublicMapCreateRs_MS2S::InitAsDefaultInstance() {
}

MsgPublicMapCreateRs_MS2S::MsgPublicMapCreateRs_MS2S(const MsgPublicMapCreateRs_MS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPublicMapCreateRs_MS2S)
}

void MsgPublicMapCreateRs_MS2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2203;
  result_ = 0;
  map_uuid_ = GOOGLE_LONGLONG(0);
  map_id_ = 0;
  creator_iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPublicMapCreateRs_MS2S::~MsgPublicMapCreateRs_MS2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPublicMapCreateRs_MS2S)
  SharedDtor();
}

void MsgPublicMapCreateRs_MS2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPublicMapCreateRs_MS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPublicMapCreateRs_MS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPublicMapCreateRs_MS2S_descriptor_;
}

const MsgPublicMapCreateRs_MS2S& MsgPublicMapCreateRs_MS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPublicMap_2eproto();
  return *default_instance_;
}

MsgPublicMapCreateRs_MS2S* MsgPublicMapCreateRs_MS2S::default_instance_ = NULL;

MsgPublicMapCreateRs_MS2S* MsgPublicMapCreateRs_MS2S::New() const {
  return new MsgPublicMapCreateRs_MS2S;
}

void MsgPublicMapCreateRs_MS2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPublicMapCreateRs_MS2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(result_, map_id_);
    msgtype_ = 2203;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPublicMapCreateRs_MS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPublicMapCreateRs_MS2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PUBLIC_MAP_CREATED_RS_MS2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MsgPB.ENUM_CREATEPUBLIC_RESULT result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::ENUM_CREATEPUBLIC_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::ENUM_CREATEPUBLIC_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_map_uuid;
        break;
      }

      // optional int64 map_uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_map_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &map_uuid_)));
          set_has_map_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 4;
      case 4: {
        if (tag == 32) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_creator_iggid;
        break;
      }

      // optional int64 creator_iggid = 5;
      case 5: {
        if (tag == 40) {
         parse_creator_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creator_iggid_)));
          set_has_creator_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPublicMapCreateRs_MS2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPublicMapCreateRs_MS2S)
  return false;
#undef DO_
}

void MsgPublicMapCreateRs_MS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPublicMapCreateRs_MS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PUBLIC_MAP_CREATED_RS_MS2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.ENUM_CREATEPUBLIC_RESULT result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 map_uuid = 3;
  if (has_map_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->map_uuid(), output);
  }

  // optional int32 map_id = 4;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_id(), output);
  }

  // optional int64 creator_iggid = 5;
  if (has_creator_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->creator_iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPublicMapCreateRs_MS2S)
}

::google::protobuf::uint8* MsgPublicMapCreateRs_MS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPublicMapCreateRs_MS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PUBLIC_MAP_CREATED_RS_MS2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.ENUM_CREATEPUBLIC_RESULT result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 map_uuid = 3;
  if (has_map_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->map_uuid(), target);
  }

  // optional int32 map_id = 4;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_id(), target);
  }

  // optional int64 creator_iggid = 5;
  if (has_creator_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->creator_iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPublicMapCreateRs_MS2S)
  return target;
}

int MsgPublicMapCreateRs_MS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PUBLIC_MAP_CREATED_RS_MS2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.ENUM_CREATEPUBLIC_RESULT result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 map_uuid = 3;
    if (has_map_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->map_uuid());
    }

    // optional int32 map_id = 4;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // optional int64 creator_iggid = 5;
    if (has_creator_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creator_iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPublicMapCreateRs_MS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPublicMapCreateRs_MS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPublicMapCreateRs_MS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPublicMapCreateRs_MS2S::MergeFrom(const MsgPublicMapCreateRs_MS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_map_uuid()) {
      set_map_uuid(from.map_uuid());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_creator_iggid()) {
      set_creator_iggid(from.creator_iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPublicMapCreateRs_MS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPublicMapCreateRs_MS2S::CopyFrom(const MsgPublicMapCreateRs_MS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPublicMapCreateRs_MS2S::IsInitialized() const {

  return true;
}

void MsgPublicMapCreateRs_MS2S::Swap(MsgPublicMapCreateRs_MS2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(result_, other->result_);
    std::swap(map_uuid_, other->map_uuid_);
    std::swap(map_id_, other->map_id_);
    std::swap(creator_iggid_, other->creator_iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPublicMapCreateRs_MS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPublicMapCreateRs_MS2S_descriptor_;
  metadata.reflection = MsgPublicMapCreateRs_MS2S_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
