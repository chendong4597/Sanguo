// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgLottery.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgLottery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgLotteryC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLotteryC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLotteryS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLotteryS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgLotteryS2C_RESULT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgLottery_2eproto() {
  protobuf_AddDesc_MsgLottery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgLottery.proto");
  GOOGLE_CHECK(file != NULL);
  MsgLotteryC2S_descriptor_ = file->message_type(0);
  static const int MsgLotteryC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLotteryC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLotteryC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLotteryC2S, nlotterytpy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLotteryC2S, nitemid_),
  };
  MsgLotteryC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLotteryC2S_descriptor_,
      MsgLotteryC2S::default_instance_,
      MsgLotteryC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLotteryC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLotteryC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLotteryC2S));
  MsgLotteryS2C_descriptor_ = file->message_type(1);
  static const int MsgLotteryS2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLotteryS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLotteryS2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLotteryS2C, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLotteryS2C, itemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLotteryS2C, uuid_),
  };
  MsgLotteryS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLotteryS2C_descriptor_,
      MsgLotteryS2C::default_instance_,
      MsgLotteryS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLotteryS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLotteryS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLotteryS2C));
  MsgLotteryS2C_RESULT_descriptor_ = MsgLotteryS2C_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgLottery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLotteryC2S_descriptor_, &MsgLotteryC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLotteryS2C_descriptor_, &MsgLotteryS2C::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgLottery_2eproto() {
  delete MsgLotteryC2S::default_instance_;
  delete MsgLotteryC2S_reflection_;
  delete MsgLotteryS2C::default_instance_;
  delete MsgLotteryS2C_reflection_;
}

void protobuf_AddDesc_MsgLottery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020MsgLottery.proto\022\005MsgPB\032\rMsgType.proto"
    "\"x\n\rMsgLotteryC2S\0222\n\007msgType\030\001 \001(\0162\017.Msg"
    "PB.EMsgType:\020_MSG_LOTTERY_C2G\022\r\n\005iggid\030\002"
    " \001(\003\022\023\n\013nLotteryTpy\030\003 \001(\005\022\017\n\007nItemId\030\004 \001"
    "(\005\"\316\001\n\rMsgLotteryS2C\0222\n\007msgType\030\001 \001(\0162\017."
    "MsgPB.EMsgType:\020_MSG_LOTTERY_G2C\022+\n\006resu"
    "lt\030\002 \001(\0162\033.MsgPB.MsgLotteryS2C.RESULT\022\016\n"
    "\006itemID\030\003 \001(\005\022\021\n\titemCount\030\004 \001(\005\022\014\n\004uuid"
    "\030\005 \001(\003\"+\n\006RESULT\022\024\n\007FAILURE\020\377\377\377\377\377\377\377\377\377\001\022\013"
    "\n\007SUCCESS\020\000", 371);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgLottery.proto", &protobuf_RegisterTypes);
  MsgLotteryC2S::default_instance_ = new MsgLotteryC2S();
  MsgLotteryS2C::default_instance_ = new MsgLotteryS2C();
  MsgLotteryC2S::default_instance_->InitAsDefaultInstance();
  MsgLotteryS2C::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgLottery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgLottery_2eproto {
  StaticDescriptorInitializer_MsgLottery_2eproto() {
    protobuf_AddDesc_MsgLottery_2eproto();
  }
} static_descriptor_initializer_MsgLottery_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgLotteryC2S::kMsgTypeFieldNumber;
const int MsgLotteryC2S::kIggidFieldNumber;
const int MsgLotteryC2S::kNLotteryTpyFieldNumber;
const int MsgLotteryC2S::kNItemIdFieldNumber;
#endif  // !_MSC_VER

MsgLotteryC2S::MsgLotteryC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgLotteryC2S)
}

void MsgLotteryC2S::InitAsDefaultInstance() {
}

MsgLotteryC2S::MsgLotteryC2S(const MsgLotteryC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgLotteryC2S)
}

void MsgLotteryC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1450;
  iggid_ = GOOGLE_LONGLONG(0);
  nlotterytpy_ = 0;
  nitemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLotteryC2S::~MsgLotteryC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgLotteryC2S)
  SharedDtor();
}

void MsgLotteryC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLotteryC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLotteryC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLotteryC2S_descriptor_;
}

const MsgLotteryC2S& MsgLotteryC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLottery_2eproto();
  return *default_instance_;
}

MsgLotteryC2S* MsgLotteryC2S::default_instance_ = NULL;

MsgLotteryC2S* MsgLotteryC2S::New() const {
  return new MsgLotteryC2S;
}

void MsgLotteryC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgLotteryC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(nlotterytpy_, nitemid_);
    msgtype_ = 1450;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLotteryC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgLotteryC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOTTERY_C2G];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nLotteryTpy;
        break;
      }

      // optional int32 nLotteryTpy = 3;
      case 3: {
        if (tag == 24) {
         parse_nLotteryTpy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlotterytpy_)));
          set_has_nlotterytpy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nItemId;
        break;
      }

      // optional int32 nItemId = 4;
      case 4: {
        if (tag == 32) {
         parse_nItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nitemid_)));
          set_has_nitemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgLotteryC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgLotteryC2S)
  return false;
#undef DO_
}

void MsgLotteryC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgLotteryC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOTTERY_C2G];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 nLotteryTpy = 3;
  if (has_nlotterytpy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nlotterytpy(), output);
  }

  // optional int32 nItemId = 4;
  if (has_nitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nitemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgLotteryC2S)
}

::google::protobuf::uint8* MsgLotteryC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgLotteryC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOTTERY_C2G];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 nLotteryTpy = 3;
  if (has_nlotterytpy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nlotterytpy(), target);
  }

  // optional int32 nItemId = 4;
  if (has_nitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nitemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgLotteryC2S)
  return target;
}

int MsgLotteryC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOTTERY_C2G];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 nLotteryTpy = 3;
    if (has_nlotterytpy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlotterytpy());
    }

    // optional int32 nItemId = 4;
    if (has_nitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nitemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLotteryC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLotteryC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLotteryC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLotteryC2S::MergeFrom(const MsgLotteryC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_nlotterytpy()) {
      set_nlotterytpy(from.nlotterytpy());
    }
    if (from.has_nitemid()) {
      set_nitemid(from.nitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLotteryC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLotteryC2S::CopyFrom(const MsgLotteryC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLotteryC2S::IsInitialized() const {

  return true;
}

void MsgLotteryC2S::Swap(MsgLotteryC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(nlotterytpy_, other->nlotterytpy_);
    std::swap(nitemid_, other->nitemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLotteryC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLotteryC2S_descriptor_;
  metadata.reflection = MsgLotteryC2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgLotteryS2C_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLotteryS2C_RESULT_descriptor_;
}
bool MsgLotteryS2C_RESULT_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgLotteryS2C_RESULT MsgLotteryS2C::FAILURE;
const MsgLotteryS2C_RESULT MsgLotteryS2C::SUCCESS;
const MsgLotteryS2C_RESULT MsgLotteryS2C::RESULT_MIN;
const MsgLotteryS2C_RESULT MsgLotteryS2C::RESULT_MAX;
const int MsgLotteryS2C::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgLotteryS2C::kMsgTypeFieldNumber;
const int MsgLotteryS2C::kResultFieldNumber;
const int MsgLotteryS2C::kItemIDFieldNumber;
const int MsgLotteryS2C::kItemCountFieldNumber;
const int MsgLotteryS2C::kUuidFieldNumber;
#endif  // !_MSC_VER

MsgLotteryS2C::MsgLotteryS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgLotteryS2C)
}

void MsgLotteryS2C::InitAsDefaultInstance() {
}

MsgLotteryS2C::MsgLotteryS2C(const MsgLotteryS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgLotteryS2C)
}

void MsgLotteryS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1451;
  result_ = -1;
  itemid_ = 0;
  itemcount_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLotteryS2C::~MsgLotteryS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgLotteryS2C)
  SharedDtor();
}

void MsgLotteryS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLotteryS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLotteryS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLotteryS2C_descriptor_;
}

const MsgLotteryS2C& MsgLotteryS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLottery_2eproto();
  return *default_instance_;
}

MsgLotteryS2C* MsgLotteryS2C::default_instance_ = NULL;

MsgLotteryS2C* MsgLotteryS2C::New() const {
  return new MsgLotteryS2C;
}

void MsgLotteryS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgLotteryS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(itemid_, uuid_);
    msgtype_ = 1451;
    result_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLotteryS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgLotteryS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOTTERY_G2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MsgPB.MsgLotteryS2C.RESULT result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgLotteryS2C_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::MsgLotteryS2C_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemID;
        break;
      }

      // optional int32 itemID = 3;
      case 3: {
        if (tag == 24) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemCount;
        break;
      }

      // optional int32 itemCount = 4;
      case 4: {
        if (tag == 32) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 5;
      case 5: {
        if (tag == 40) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgLotteryS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgLotteryS2C)
  return false;
#undef DO_
}

void MsgLotteryS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgLotteryS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOTTERY_G2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.MsgLotteryS2C.RESULT result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 itemID = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional int32 itemCount = 4;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemcount(), output);
  }

  // optional int64 uuid = 5;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgLotteryS2C)
}

::google::protobuf::uint8* MsgLotteryS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgLotteryS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOTTERY_G2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.MsgLotteryS2C.RESULT result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 itemID = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // optional int32 itemCount = 4;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemcount(), target);
  }

  // optional int64 uuid = 5;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgLotteryS2C)
  return target;
}

int MsgLotteryS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOTTERY_G2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.MsgLotteryS2C.RESULT result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 itemID = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemCount = 4;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcount());
    }

    // optional int64 uuid = 5;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLotteryS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLotteryS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLotteryS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLotteryS2C::MergeFrom(const MsgLotteryS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLotteryS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLotteryS2C::CopyFrom(const MsgLotteryS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLotteryS2C::IsInitialized() const {

  return true;
}

void MsgLotteryS2C::Swap(MsgLotteryS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(result_, other->result_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLotteryS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLotteryS2C_descriptor_;
  metadata.reflection = MsgLotteryS2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
