// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgAI.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgAI.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgAIState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAIState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgAIState_AITYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgAiStateS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAiStateS2C_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgAI_2eproto() {
  protobuf_AddDesc_MsgAI_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgAI.proto");
  GOOGLE_CHECK(file != NULL);
  MsgAIState_descriptor_ = file->message_type(0);
  static const int MsgAIState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAIState, aitype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAIState, targetid_),
  };
  MsgAIState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAIState_descriptor_,
      MsgAIState::default_instance_,
      MsgAIState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAIState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAIState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAIState));
  MsgAIState_AITYPE_descriptor_ = MsgAIState_descriptor_->enum_type(0);
  MsgAiStateS2C_descriptor_ = file->message_type(1);
  static const int MsgAiStateS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAiStateS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAiStateS2C, mapobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAiStateS2C, aistate_),
  };
  MsgAiStateS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAiStateS2C_descriptor_,
      MsgAiStateS2C::default_instance_,
      MsgAiStateS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAiStateS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAiStateS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAiStateS2C));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgAI_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAIState_descriptor_, &MsgAIState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAiStateS2C_descriptor_, &MsgAiStateS2C::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgAI_2eproto() {
  delete MsgAIState::default_instance_;
  delete MsgAIState_reflection_;
  delete MsgAiStateS2C::default_instance_;
  delete MsgAiStateS2C_reflection_;
}

void protobuf_AddDesc_MsgAI_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013MsgAI.proto\022\005MsgPB\032\rMsgType.proto\"\237\001\n\n"
    "MsgAIState\022(\n\006aiType\030\001 \001(\0162\030.MsgPB.MsgAI"
    "State.AITYPE\022\020\n\010targetID\030\002 \001(\005\"U\n\006AITYPE"
    "\022\010\n\004BORN\020\000\022\n\n\006NORMAL\020\001\022\n\n\006BATTLE\020\002\022\010\n\004DE"
    "AD\020\003\022\n\n\006CORPSE\020\004\022\010\n\004FALL\020\005\022\t\n\005TAUNT\020\006\"}\n"
    "\rMsgAiStateS2C\0223\n\007msgType\030\001 \001(\0162\017.MsgPB."
    "EMsgType:\021_MSG_AI_STATE_S2C\022\023\n\013mapObject"
    "Id\030\002 \001(\005\022\"\n\007aiState\030\003 \001(\0132\021.MsgPB.MsgAIS"
    "tate", 324);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgAI.proto", &protobuf_RegisterTypes);
  MsgAIState::default_instance_ = new MsgAIState();
  MsgAiStateS2C::default_instance_ = new MsgAiStateS2C();
  MsgAIState::default_instance_->InitAsDefaultInstance();
  MsgAiStateS2C::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgAI_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgAI_2eproto {
  StaticDescriptorInitializer_MsgAI_2eproto() {
    protobuf_AddDesc_MsgAI_2eproto();
  }
} static_descriptor_initializer_MsgAI_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgAIState_AITYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAIState_AITYPE_descriptor_;
}
bool MsgAIState_AITYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgAIState_AITYPE MsgAIState::BORN;
const MsgAIState_AITYPE MsgAIState::NORMAL;
const MsgAIState_AITYPE MsgAIState::BATTLE;
const MsgAIState_AITYPE MsgAIState::DEAD;
const MsgAIState_AITYPE MsgAIState::CORPSE;
const MsgAIState_AITYPE MsgAIState::FALL;
const MsgAIState_AITYPE MsgAIState::TAUNT;
const MsgAIState_AITYPE MsgAIState::AITYPE_MIN;
const MsgAIState_AITYPE MsgAIState::AITYPE_MAX;
const int MsgAIState::AITYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgAIState::kAiTypeFieldNumber;
const int MsgAIState::kTargetIDFieldNumber;
#endif  // !_MSC_VER

MsgAIState::MsgAIState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgAIState)
}

void MsgAIState::InitAsDefaultInstance() {
}

MsgAIState::MsgAIState(const MsgAIState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgAIState)
}

void MsgAIState::SharedCtor() {
  _cached_size_ = 0;
  aitype_ = 0;
  targetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAIState::~MsgAIState() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgAIState)
  SharedDtor();
}

void MsgAIState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAIState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAIState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAIState_descriptor_;
}

const MsgAIState& MsgAIState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgAI_2eproto();
  return *default_instance_;
}

MsgAIState* MsgAIState::default_instance_ = NULL;

MsgAIState* MsgAIState::New() const {
  return new MsgAIState;
}

void MsgAIState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgAIState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aitype_, targetid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAIState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgAIState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.MsgAIState.AITYPE aiType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgAIState_AITYPE_IsValid(value)) {
            set_aitype(static_cast< ::MsgPB::MsgAIState_AITYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 2;
      case 2: {
        if (tag == 16) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgAIState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgAIState)
  return false;
#undef DO_
}

void MsgAIState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgAIState)
  // optional .MsgPB.MsgAIState.AITYPE aiType = 1;
  if (has_aitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->aitype(), output);
  }

  // optional int32 targetID = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgAIState)
}

::google::protobuf::uint8* MsgAIState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgAIState)
  // optional .MsgPB.MsgAIState.AITYPE aiType = 1;
  if (has_aitype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->aitype(), target);
  }

  // optional int32 targetID = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgAIState)
  return target;
}

int MsgAIState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.MsgAIState.AITYPE aiType = 1;
    if (has_aitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aitype());
    }

    // optional int32 targetID = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAIState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAIState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAIState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAIState::MergeFrom(const MsgAIState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aitype()) {
      set_aitype(from.aitype());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAIState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAIState::CopyFrom(const MsgAIState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAIState::IsInitialized() const {

  return true;
}

void MsgAIState::Swap(MsgAIState* other) {
  if (other != this) {
    std::swap(aitype_, other->aitype_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAIState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAIState_descriptor_;
  metadata.reflection = MsgAIState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAiStateS2C::kMsgTypeFieldNumber;
const int MsgAiStateS2C::kMapObjectIdFieldNumber;
const int MsgAiStateS2C::kAiStateFieldNumber;
#endif  // !_MSC_VER

MsgAiStateS2C::MsgAiStateS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgAiStateS2C)
}

void MsgAiStateS2C::InitAsDefaultInstance() {
  aistate_ = const_cast< ::MsgPB::MsgAIState*>(&::MsgPB::MsgAIState::default_instance());
}

MsgAiStateS2C::MsgAiStateS2C(const MsgAiStateS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgAiStateS2C)
}

void MsgAiStateS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1751;
  mapobjectid_ = 0;
  aistate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAiStateS2C::~MsgAiStateS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgAiStateS2C)
  SharedDtor();
}

void MsgAiStateS2C::SharedDtor() {
  if (this != default_instance_) {
    delete aistate_;
  }
}

void MsgAiStateS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAiStateS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAiStateS2C_descriptor_;
}

const MsgAiStateS2C& MsgAiStateS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgAI_2eproto();
  return *default_instance_;
}

MsgAiStateS2C* MsgAiStateS2C::default_instance_ = NULL;

MsgAiStateS2C* MsgAiStateS2C::New() const {
  return new MsgAiStateS2C;
}

void MsgAiStateS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1751;
    mapobjectid_ = 0;
    if (has_aistate()) {
      if (aistate_ != NULL) aistate_->::MsgPB::MsgAIState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAiStateS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgAiStateS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_AI_STATE_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapObjectId;
        break;
      }

      // optional int32 mapObjectId = 2;
      case 2: {
        if (tag == 16) {
         parse_mapObjectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapobjectid_)));
          set_has_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_aiState;
        break;
      }

      // optional .MsgPB.MsgAIState aiState = 3;
      case 3: {
        if (tag == 26) {
         parse_aiState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aistate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgAiStateS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgAiStateS2C)
  return false;
#undef DO_
}

void MsgAiStateS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgAiStateS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_AI_STATE_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 mapObjectId = 2;
  if (has_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapobjectid(), output);
  }

  // optional .MsgPB.MsgAIState aiState = 3;
  if (has_aistate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->aistate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgAiStateS2C)
}

::google::protobuf::uint8* MsgAiStateS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgAiStateS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_AI_STATE_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 mapObjectId = 2;
  if (has_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapobjectid(), target);
  }

  // optional .MsgPB.MsgAIState aiState = 3;
  if (has_aistate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->aistate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgAiStateS2C)
  return target;
}

int MsgAiStateS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_AI_STATE_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 mapObjectId = 2;
    if (has_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapobjectid());
    }

    // optional .MsgPB.MsgAIState aiState = 3;
    if (has_aistate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aistate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAiStateS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAiStateS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAiStateS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAiStateS2C::MergeFrom(const MsgAiStateS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_mapobjectid()) {
      set_mapobjectid(from.mapobjectid());
    }
    if (from.has_aistate()) {
      mutable_aistate()->::MsgPB::MsgAIState::MergeFrom(from.aistate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAiStateS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAiStateS2C::CopyFrom(const MsgAiStateS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAiStateS2C::IsInitialized() const {

  return true;
}

void MsgAiStateS2C::Swap(MsgAiStateS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(mapobjectid_, other->mapobjectid_);
    std::swap(aistate_, other->aistate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAiStateS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAiStateS2C_descriptor_;
  metadata.reflection = MsgAiStateS2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
