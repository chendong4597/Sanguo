// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgPvPRandItem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgPvPRandItem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* ChestDropInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChestDropInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPvPRandItemChestAppearance_MS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPvPRandItemChestAppearance_MS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPvPRandChestOpen_C2MS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPvPRandChestOpen_C2MS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPvPRandChestDispear_MS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPvPRandChestDispear_MS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPvPRandItemGrassAppearance_MS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPvPRandItemGrassAppearance_MS2C_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgPvPRandItem_2eproto() {
  protobuf_AddDesc_MsgPvPRandItem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgPvPRandItem.proto");
  GOOGLE_CHECK(file != NULL);
  ChestDropInfo_descriptor_ = file->message_type(0);
  static const int ChestDropInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChestDropInfo, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChestDropInfo, data_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChestDropInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChestDropInfo, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChestDropInfo, pos_y_),
  };
  ChestDropInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChestDropInfo_descriptor_,
      ChestDropInfo::default_instance_,
      ChestDropInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChestDropInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChestDropInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChestDropInfo));
  MsgPvPRandItemChestAppearance_MS2C_descriptor_ = file->message_type(1);
  static const int MsgPvPRandItemChestAppearance_MS2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemChestAppearance_MS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemChestAppearance_MS2C, mapobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemChestAppearance_MS2C, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemChestAppearance_MS2C, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemChestAppearance_MS2C, itemid_),
  };
  MsgPvPRandItemChestAppearance_MS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPvPRandItemChestAppearance_MS2C_descriptor_,
      MsgPvPRandItemChestAppearance_MS2C::default_instance_,
      MsgPvPRandItemChestAppearance_MS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemChestAppearance_MS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemChestAppearance_MS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPvPRandItemChestAppearance_MS2C));
  MsgPvPRandChestOpen_C2MS_descriptor_ = file->message_type(2);
  static const int MsgPvPRandChestOpen_C2MS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandChestOpen_C2MS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandChestOpen_C2MS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandChestOpen_C2MS, mapobjectid_),
  };
  MsgPvPRandChestOpen_C2MS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPvPRandChestOpen_C2MS_descriptor_,
      MsgPvPRandChestOpen_C2MS::default_instance_,
      MsgPvPRandChestOpen_C2MS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandChestOpen_C2MS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandChestOpen_C2MS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPvPRandChestOpen_C2MS));
  MsgPvPRandChestDispear_MS2C_descriptor_ = file->message_type(3);
  static const int MsgPvPRandChestDispear_MS2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandChestDispear_MS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandChestDispear_MS2C, mapobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandChestDispear_MS2C, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandChestDispear_MS2C, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandChestDispear_MS2C, drop_info_),
  };
  MsgPvPRandChestDispear_MS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPvPRandChestDispear_MS2C_descriptor_,
      MsgPvPRandChestDispear_MS2C::default_instance_,
      MsgPvPRandChestDispear_MS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandChestDispear_MS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandChestDispear_MS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPvPRandChestDispear_MS2C));
  MsgPvPRandItemGrassAppearance_MS2C_descriptor_ = file->message_type(4);
  static const int MsgPvPRandItemGrassAppearance_MS2C_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemGrassAppearance_MS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemGrassAppearance_MS2C, mapobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemGrassAppearance_MS2C, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemGrassAppearance_MS2C, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemGrassAppearance_MS2C, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemGrassAppearance_MS2C, goupid_),
  };
  MsgPvPRandItemGrassAppearance_MS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPvPRandItemGrassAppearance_MS2C_descriptor_,
      MsgPvPRandItemGrassAppearance_MS2C::default_instance_,
      MsgPvPRandItemGrassAppearance_MS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemGrassAppearance_MS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPvPRandItemGrassAppearance_MS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPvPRandItemGrassAppearance_MS2C));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgPvPRandItem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChestDropInfo_descriptor_, &ChestDropInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPvPRandItemChestAppearance_MS2C_descriptor_, &MsgPvPRandItemChestAppearance_MS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPvPRandChestOpen_C2MS_descriptor_, &MsgPvPRandChestOpen_C2MS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPvPRandChestDispear_MS2C_descriptor_, &MsgPvPRandChestDispear_MS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPvPRandItemGrassAppearance_MS2C_descriptor_, &MsgPvPRandItemGrassAppearance_MS2C::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgPvPRandItem_2eproto() {
  delete ChestDropInfo::default_instance_;
  delete ChestDropInfo_reflection_;
  delete MsgPvPRandItemChestAppearance_MS2C::default_instance_;
  delete MsgPvPRandItemChestAppearance_MS2C_reflection_;
  delete MsgPvPRandChestOpen_C2MS::default_instance_;
  delete MsgPvPRandChestOpen_C2MS_reflection_;
  delete MsgPvPRandChestDispear_MS2C::default_instance_;
  delete MsgPvPRandChestDispear_MS2C_reflection_;
  delete MsgPvPRandItemGrassAppearance_MS2C::default_instance_;
  delete MsgPvPRandItemGrassAppearance_MS2C_reflection_;
}

void protobuf_AddDesc_MsgPvPRandItem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024MsgPvPRandItem.proto\022\005MsgPB\032\rMsgType.p"
    "roto\"]\n\rChestDropInfo\022\016\n\006obj_id\030\001 \001(\003\022\017\n"
    "\007data_id\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\r\n\005pos_x\030\004"
    " \001(\005\022\r\n\005pos_y\030\005 \001(\005\"\261\001\n\"MsgPvPRandItemCh"
    "estAppearance_MS2C\022J\n\007msgType\030\001 \001(\0162\017.Ms"
    "gPB.EMsgType:(_MSG_PVP_RAND_ITEM_CHEST_A"
    "PPEARANCE_MS2C\022\023\n\013mapobjectid\030\002 \001(\005\022\014\n\004p"
    "osx\030\003 \001(\005\022\014\n\004posy\030\004 \001(\005\022\016\n\006itemid\030\005 \001(\005\""
    "\177\n\030MsgPvPRandChestOpen_C2MS\022\?\n\007msgType\030\001"
    " \001(\0162\017.MsgPB.EMsgType:\035_MSG_PVP_RAND_CHE"
    "ST_OPEN_C2MS\022\r\n\005iggid\030\002 \001(\003\022\023\n\013mapobject"
    "id\030\003 \001(\005\"\273\001\n\033MsgPvPRandChestDispear_MS2C"
    "\022B\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType: _MSG"
    "_PVP_RAND_CHEST_DISPEAR_MS2C\022\023\n\013mapobjec"
    "tid\030\002 \001(\005\022\014\n\004posx\030\003 \001(\005\022\014\n\004posy\030\004 \001(\005\022\'\n"
    "\tdrop_info\030\005 \003(\0132\024.MsgPB.ChestDropInfo\"\301"
    "\001\n\"MsgPvPRandItemGrassAppearance_MS2C\022J\n"
    "\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:(_MSG_PV"
    "P_RAND_ITEM_GRASS_APPEARANCE_MS2C\022\023\n\013map"
    "objectid\030\002 \001(\005\022\014\n\004posx\030\003 \001(\005\022\014\n\004posy\030\004 \001"
    "(\005\022\016\n\006itemid\030\005 \001(\005\022\016\n\006goupid\030\006 \001(\005", 834);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgPvPRandItem.proto", &protobuf_RegisterTypes);
  ChestDropInfo::default_instance_ = new ChestDropInfo();
  MsgPvPRandItemChestAppearance_MS2C::default_instance_ = new MsgPvPRandItemChestAppearance_MS2C();
  MsgPvPRandChestOpen_C2MS::default_instance_ = new MsgPvPRandChestOpen_C2MS();
  MsgPvPRandChestDispear_MS2C::default_instance_ = new MsgPvPRandChestDispear_MS2C();
  MsgPvPRandItemGrassAppearance_MS2C::default_instance_ = new MsgPvPRandItemGrassAppearance_MS2C();
  ChestDropInfo::default_instance_->InitAsDefaultInstance();
  MsgPvPRandItemChestAppearance_MS2C::default_instance_->InitAsDefaultInstance();
  MsgPvPRandChestOpen_C2MS::default_instance_->InitAsDefaultInstance();
  MsgPvPRandChestDispear_MS2C::default_instance_->InitAsDefaultInstance();
  MsgPvPRandItemGrassAppearance_MS2C::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgPvPRandItem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgPvPRandItem_2eproto {
  StaticDescriptorInitializer_MsgPvPRandItem_2eproto() {
    protobuf_AddDesc_MsgPvPRandItem_2eproto();
  }
} static_descriptor_initializer_MsgPvPRandItem_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChestDropInfo::kObjIdFieldNumber;
const int ChestDropInfo::kDataIdFieldNumber;
const int ChestDropInfo::kCountFieldNumber;
const int ChestDropInfo::kPosXFieldNumber;
const int ChestDropInfo::kPosYFieldNumber;
#endif  // !_MSC_VER

ChestDropInfo::ChestDropInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.ChestDropInfo)
}

void ChestDropInfo::InitAsDefaultInstance() {
}

ChestDropInfo::ChestDropInfo(const ChestDropInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.ChestDropInfo)
}

void ChestDropInfo::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = GOOGLE_LONGLONG(0);
  data_id_ = 0;
  count_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChestDropInfo::~ChestDropInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.ChestDropInfo)
  SharedDtor();
}

void ChestDropInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChestDropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChestDropInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChestDropInfo_descriptor_;
}

const ChestDropInfo& ChestDropInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPvPRandItem_2eproto();
  return *default_instance_;
}

ChestDropInfo* ChestDropInfo::default_instance_ = NULL;

ChestDropInfo* ChestDropInfo::New() const {
  return new ChestDropInfo;
}

void ChestDropInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChestDropInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(obj_id_, pos_y_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChestDropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.ChestDropInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 obj_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_id;
        break;
      }

      // optional int32 data_id = 2;
      case 2: {
        if (tag == 16) {
         parse_data_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_id_)));
          set_has_data_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 4;
      case 4: {
        if (tag == 32) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 5;
      case 5: {
        if (tag == 40) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.ChestDropInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.ChestDropInfo)
  return false;
#undef DO_
}

void ChestDropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.ChestDropInfo)
  // optional int64 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->obj_id(), output);
  }

  // optional int32 data_id = 2;
  if (has_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data_id(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int32 pos_x = 4;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_x(), output);
  }

  // optional int32 pos_y = 5;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.ChestDropInfo)
}

::google::protobuf::uint8* ChestDropInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.ChestDropInfo)
  // optional int64 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->obj_id(), target);
  }

  // optional int32 data_id = 2;
  if (has_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data_id(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional int32 pos_x = 4;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_x(), target);
  }

  // optional int32 pos_y = 5;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.ChestDropInfo)
  return target;
}

int ChestDropInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->obj_id());
    }

    // optional int32 data_id = 2;
    if (has_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_id());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 pos_x = 4;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 5;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChestDropInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChestDropInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChestDropInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChestDropInfo::MergeFrom(const ChestDropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_data_id()) {
      set_data_id(from.data_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChestDropInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChestDropInfo::CopyFrom(const ChestDropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChestDropInfo::IsInitialized() const {

  return true;
}

void ChestDropInfo::Swap(ChestDropInfo* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(data_id_, other->data_id_);
    std::swap(count_, other->count_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChestDropInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChestDropInfo_descriptor_;
  metadata.reflection = ChestDropInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPvPRandItemChestAppearance_MS2C::kMsgTypeFieldNumber;
const int MsgPvPRandItemChestAppearance_MS2C::kMapobjectidFieldNumber;
const int MsgPvPRandItemChestAppearance_MS2C::kPosxFieldNumber;
const int MsgPvPRandItemChestAppearance_MS2C::kPosyFieldNumber;
const int MsgPvPRandItemChestAppearance_MS2C::kItemidFieldNumber;
#endif  // !_MSC_VER

MsgPvPRandItemChestAppearance_MS2C::MsgPvPRandItemChestAppearance_MS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPvPRandItemChestAppearance_MS2C)
}

void MsgPvPRandItemChestAppearance_MS2C::InitAsDefaultInstance() {
}

MsgPvPRandItemChestAppearance_MS2C::MsgPvPRandItemChestAppearance_MS2C(const MsgPvPRandItemChestAppearance_MS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPvPRandItemChestAppearance_MS2C)
}

void MsgPvPRandItemChestAppearance_MS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2500;
  mapobjectid_ = 0;
  posx_ = 0;
  posy_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPvPRandItemChestAppearance_MS2C::~MsgPvPRandItemChestAppearance_MS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPvPRandItemChestAppearance_MS2C)
  SharedDtor();
}

void MsgPvPRandItemChestAppearance_MS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPvPRandItemChestAppearance_MS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPvPRandItemChestAppearance_MS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPvPRandItemChestAppearance_MS2C_descriptor_;
}

const MsgPvPRandItemChestAppearance_MS2C& MsgPvPRandItemChestAppearance_MS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPvPRandItem_2eproto();
  return *default_instance_;
}

MsgPvPRandItemChestAppearance_MS2C* MsgPvPRandItemChestAppearance_MS2C::default_instance_ = NULL;

MsgPvPRandItemChestAppearance_MS2C* MsgPvPRandItemChestAppearance_MS2C::New() const {
  return new MsgPvPRandItemChestAppearance_MS2C;
}

void MsgPvPRandItemChestAppearance_MS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPvPRandItemChestAppearance_MS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(mapobjectid_, itemid_);
    msgtype_ = 2500;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPvPRandItemChestAppearance_MS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPvPRandItemChestAppearance_MS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ITEM_CHEST_APPEARANCE_MS2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapobjectid;
        break;
      }

      // optional int32 mapobjectid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapobjectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapobjectid_)));
          set_has_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_posx;
        break;
      }

      // optional int32 posx = 3;
      case 3: {
        if (tag == 24) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_posy;
        break;
      }

      // optional int32 posy = 4;
      case 4: {
        if (tag == 32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemid;
        break;
      }

      // optional int32 itemid = 5;
      case 5: {
        if (tag == 40) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPvPRandItemChestAppearance_MS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPvPRandItemChestAppearance_MS2C)
  return false;
#undef DO_
}

void MsgPvPRandItemChestAppearance_MS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPvPRandItemChestAppearance_MS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ITEM_CHEST_APPEARANCE_MS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 mapobjectid = 2;
  if (has_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapobjectid(), output);
  }

  // optional int32 posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // optional int32 posy = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posy(), output);
  }

  // optional int32 itemid = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPvPRandItemChestAppearance_MS2C)
}

::google::protobuf::uint8* MsgPvPRandItemChestAppearance_MS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPvPRandItemChestAppearance_MS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ITEM_CHEST_APPEARANCE_MS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 mapobjectid = 2;
  if (has_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapobjectid(), target);
  }

  // optional int32 posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // optional int32 posy = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posy(), target);
  }

  // optional int32 itemid = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPvPRandItemChestAppearance_MS2C)
  return target;
}

int MsgPvPRandItemChestAppearance_MS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ITEM_CHEST_APPEARANCE_MS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 mapobjectid = 2;
    if (has_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapobjectid());
    }

    // optional int32 posx = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posy = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int32 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPvPRandItemChestAppearance_MS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPvPRandItemChestAppearance_MS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPvPRandItemChestAppearance_MS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPvPRandItemChestAppearance_MS2C::MergeFrom(const MsgPvPRandItemChestAppearance_MS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_mapobjectid()) {
      set_mapobjectid(from.mapobjectid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPvPRandItemChestAppearance_MS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPvPRandItemChestAppearance_MS2C::CopyFrom(const MsgPvPRandItemChestAppearance_MS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPvPRandItemChestAppearance_MS2C::IsInitialized() const {

  return true;
}

void MsgPvPRandItemChestAppearance_MS2C::Swap(MsgPvPRandItemChestAppearance_MS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(mapobjectid_, other->mapobjectid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPvPRandItemChestAppearance_MS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPvPRandItemChestAppearance_MS2C_descriptor_;
  metadata.reflection = MsgPvPRandItemChestAppearance_MS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPvPRandChestOpen_C2MS::kMsgTypeFieldNumber;
const int MsgPvPRandChestOpen_C2MS::kIggidFieldNumber;
const int MsgPvPRandChestOpen_C2MS::kMapobjectidFieldNumber;
#endif  // !_MSC_VER

MsgPvPRandChestOpen_C2MS::MsgPvPRandChestOpen_C2MS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPvPRandChestOpen_C2MS)
}

void MsgPvPRandChestOpen_C2MS::InitAsDefaultInstance() {
}

MsgPvPRandChestOpen_C2MS::MsgPvPRandChestOpen_C2MS(const MsgPvPRandChestOpen_C2MS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPvPRandChestOpen_C2MS)
}

void MsgPvPRandChestOpen_C2MS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2503;
  iggid_ = GOOGLE_LONGLONG(0);
  mapobjectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPvPRandChestOpen_C2MS::~MsgPvPRandChestOpen_C2MS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPvPRandChestOpen_C2MS)
  SharedDtor();
}

void MsgPvPRandChestOpen_C2MS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPvPRandChestOpen_C2MS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPvPRandChestOpen_C2MS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPvPRandChestOpen_C2MS_descriptor_;
}

const MsgPvPRandChestOpen_C2MS& MsgPvPRandChestOpen_C2MS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPvPRandItem_2eproto();
  return *default_instance_;
}

MsgPvPRandChestOpen_C2MS* MsgPvPRandChestOpen_C2MS::default_instance_ = NULL;

MsgPvPRandChestOpen_C2MS* MsgPvPRandChestOpen_C2MS::New() const {
  return new MsgPvPRandChestOpen_C2MS;
}

void MsgPvPRandChestOpen_C2MS::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 2503;
    iggid_ = GOOGLE_LONGLONG(0);
    mapobjectid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPvPRandChestOpen_C2MS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPvPRandChestOpen_C2MS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_CHEST_OPEN_C2MS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapobjectid;
        break;
      }

      // optional int32 mapobjectid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapobjectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapobjectid_)));
          set_has_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPvPRandChestOpen_C2MS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPvPRandChestOpen_C2MS)
  return false;
#undef DO_
}

void MsgPvPRandChestOpen_C2MS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPvPRandChestOpen_C2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_CHEST_OPEN_C2MS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapobjectid = 3;
  if (has_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapobjectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPvPRandChestOpen_C2MS)
}

::google::protobuf::uint8* MsgPvPRandChestOpen_C2MS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPvPRandChestOpen_C2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_CHEST_OPEN_C2MS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapobjectid = 3;
  if (has_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapobjectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPvPRandChestOpen_C2MS)
  return target;
}

int MsgPvPRandChestOpen_C2MS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_CHEST_OPEN_C2MS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapobjectid = 3;
    if (has_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapobjectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPvPRandChestOpen_C2MS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPvPRandChestOpen_C2MS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPvPRandChestOpen_C2MS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPvPRandChestOpen_C2MS::MergeFrom(const MsgPvPRandChestOpen_C2MS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapobjectid()) {
      set_mapobjectid(from.mapobjectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPvPRandChestOpen_C2MS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPvPRandChestOpen_C2MS::CopyFrom(const MsgPvPRandChestOpen_C2MS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPvPRandChestOpen_C2MS::IsInitialized() const {

  return true;
}

void MsgPvPRandChestOpen_C2MS::Swap(MsgPvPRandChestOpen_C2MS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapobjectid_, other->mapobjectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPvPRandChestOpen_C2MS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPvPRandChestOpen_C2MS_descriptor_;
  metadata.reflection = MsgPvPRandChestOpen_C2MS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPvPRandChestDispear_MS2C::kMsgTypeFieldNumber;
const int MsgPvPRandChestDispear_MS2C::kMapobjectidFieldNumber;
const int MsgPvPRandChestDispear_MS2C::kPosxFieldNumber;
const int MsgPvPRandChestDispear_MS2C::kPosyFieldNumber;
const int MsgPvPRandChestDispear_MS2C::kDropInfoFieldNumber;
#endif  // !_MSC_VER

MsgPvPRandChestDispear_MS2C::MsgPvPRandChestDispear_MS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPvPRandChestDispear_MS2C)
}

void MsgPvPRandChestDispear_MS2C::InitAsDefaultInstance() {
}

MsgPvPRandChestDispear_MS2C::MsgPvPRandChestDispear_MS2C(const MsgPvPRandChestDispear_MS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPvPRandChestDispear_MS2C)
}

void MsgPvPRandChestDispear_MS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2504;
  mapobjectid_ = 0;
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPvPRandChestDispear_MS2C::~MsgPvPRandChestDispear_MS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPvPRandChestDispear_MS2C)
  SharedDtor();
}

void MsgPvPRandChestDispear_MS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPvPRandChestDispear_MS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPvPRandChestDispear_MS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPvPRandChestDispear_MS2C_descriptor_;
}

const MsgPvPRandChestDispear_MS2C& MsgPvPRandChestDispear_MS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPvPRandItem_2eproto();
  return *default_instance_;
}

MsgPvPRandChestDispear_MS2C* MsgPvPRandChestDispear_MS2C::default_instance_ = NULL;

MsgPvPRandChestDispear_MS2C* MsgPvPRandChestDispear_MS2C::New() const {
  return new MsgPvPRandChestDispear_MS2C;
}

void MsgPvPRandChestDispear_MS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPvPRandChestDispear_MS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mapobjectid_, posy_);
    msgtype_ = 2504;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  drop_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPvPRandChestDispear_MS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPvPRandChestDispear_MS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_CHEST_DISPEAR_MS2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapobjectid;
        break;
      }

      // optional int32 mapobjectid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapobjectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapobjectid_)));
          set_has_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_posx;
        break;
      }

      // optional int32 posx = 3;
      case 3: {
        if (tag == 24) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_posy;
        break;
      }

      // optional int32 posy = 4;
      case 4: {
        if (tag == 32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_drop_info;
        break;
      }

      // repeated .MsgPB.ChestDropInfo drop_info = 5;
      case 5: {
        if (tag == 42) {
         parse_drop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drop_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_drop_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPvPRandChestDispear_MS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPvPRandChestDispear_MS2C)
  return false;
#undef DO_
}

void MsgPvPRandChestDispear_MS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPvPRandChestDispear_MS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_CHEST_DISPEAR_MS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 mapobjectid = 2;
  if (has_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapobjectid(), output);
  }

  // optional int32 posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // optional int32 posy = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posy(), output);
  }

  // repeated .MsgPB.ChestDropInfo drop_info = 5;
  for (int i = 0; i < this->drop_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->drop_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPvPRandChestDispear_MS2C)
}

::google::protobuf::uint8* MsgPvPRandChestDispear_MS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPvPRandChestDispear_MS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_CHEST_DISPEAR_MS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 mapobjectid = 2;
  if (has_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapobjectid(), target);
  }

  // optional int32 posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // optional int32 posy = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posy(), target);
  }

  // repeated .MsgPB.ChestDropInfo drop_info = 5;
  for (int i = 0; i < this->drop_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->drop_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPvPRandChestDispear_MS2C)
  return target;
}

int MsgPvPRandChestDispear_MS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_CHEST_DISPEAR_MS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 mapobjectid = 2;
    if (has_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapobjectid());
    }

    // optional int32 posx = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posy = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

  }
  // repeated .MsgPB.ChestDropInfo drop_info = 5;
  total_size += 1 * this->drop_info_size();
  for (int i = 0; i < this->drop_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drop_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPvPRandChestDispear_MS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPvPRandChestDispear_MS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPvPRandChestDispear_MS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPvPRandChestDispear_MS2C::MergeFrom(const MsgPvPRandChestDispear_MS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  drop_info_.MergeFrom(from.drop_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_mapobjectid()) {
      set_mapobjectid(from.mapobjectid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPvPRandChestDispear_MS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPvPRandChestDispear_MS2C::CopyFrom(const MsgPvPRandChestDispear_MS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPvPRandChestDispear_MS2C::IsInitialized() const {

  return true;
}

void MsgPvPRandChestDispear_MS2C::Swap(MsgPvPRandChestDispear_MS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(mapobjectid_, other->mapobjectid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    drop_info_.Swap(&other->drop_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPvPRandChestDispear_MS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPvPRandChestDispear_MS2C_descriptor_;
  metadata.reflection = MsgPvPRandChestDispear_MS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPvPRandItemGrassAppearance_MS2C::kMsgTypeFieldNumber;
const int MsgPvPRandItemGrassAppearance_MS2C::kMapobjectidFieldNumber;
const int MsgPvPRandItemGrassAppearance_MS2C::kPosxFieldNumber;
const int MsgPvPRandItemGrassAppearance_MS2C::kPosyFieldNumber;
const int MsgPvPRandItemGrassAppearance_MS2C::kItemidFieldNumber;
const int MsgPvPRandItemGrassAppearance_MS2C::kGoupidFieldNumber;
#endif  // !_MSC_VER

MsgPvPRandItemGrassAppearance_MS2C::MsgPvPRandItemGrassAppearance_MS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPvPRandItemGrassAppearance_MS2C)
}

void MsgPvPRandItemGrassAppearance_MS2C::InitAsDefaultInstance() {
}

MsgPvPRandItemGrassAppearance_MS2C::MsgPvPRandItemGrassAppearance_MS2C(const MsgPvPRandItemGrassAppearance_MS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPvPRandItemGrassAppearance_MS2C)
}

void MsgPvPRandItemGrassAppearance_MS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 2501;
  mapobjectid_ = 0;
  posx_ = 0;
  posy_ = 0;
  itemid_ = 0;
  goupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPvPRandItemGrassAppearance_MS2C::~MsgPvPRandItemGrassAppearance_MS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPvPRandItemGrassAppearance_MS2C)
  SharedDtor();
}

void MsgPvPRandItemGrassAppearance_MS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPvPRandItemGrassAppearance_MS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPvPRandItemGrassAppearance_MS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPvPRandItemGrassAppearance_MS2C_descriptor_;
}

const MsgPvPRandItemGrassAppearance_MS2C& MsgPvPRandItemGrassAppearance_MS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPvPRandItem_2eproto();
  return *default_instance_;
}

MsgPvPRandItemGrassAppearance_MS2C* MsgPvPRandItemGrassAppearance_MS2C::default_instance_ = NULL;

MsgPvPRandItemGrassAppearance_MS2C* MsgPvPRandItemGrassAppearance_MS2C::New() const {
  return new MsgPvPRandItemGrassAppearance_MS2C;
}

void MsgPvPRandItemGrassAppearance_MS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPvPRandItemGrassAppearance_MS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(mapobjectid_, goupid_);
    msgtype_ = 2501;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPvPRandItemGrassAppearance_MS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPvPRandItemGrassAppearance_MS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ITEM_GRASS_APPEARANCE_MS2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapobjectid;
        break;
      }

      // optional int32 mapobjectid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapobjectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapobjectid_)));
          set_has_mapobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_posx;
        break;
      }

      // optional int32 posx = 3;
      case 3: {
        if (tag == 24) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_posy;
        break;
      }

      // optional int32 posy = 4;
      case 4: {
        if (tag == 32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemid;
        break;
      }

      // optional int32 itemid = 5;
      case 5: {
        if (tag == 40) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_goupid;
        break;
      }

      // optional int32 goupid = 6;
      case 6: {
        if (tag == 48) {
         parse_goupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goupid_)));
          set_has_goupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPvPRandItemGrassAppearance_MS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPvPRandItemGrassAppearance_MS2C)
  return false;
#undef DO_
}

void MsgPvPRandItemGrassAppearance_MS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPvPRandItemGrassAppearance_MS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ITEM_GRASS_APPEARANCE_MS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 mapobjectid = 2;
  if (has_mapobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapobjectid(), output);
  }

  // optional int32 posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // optional int32 posy = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posy(), output);
  }

  // optional int32 itemid = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itemid(), output);
  }

  // optional int32 goupid = 6;
  if (has_goupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->goupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPvPRandItemGrassAppearance_MS2C)
}

::google::protobuf::uint8* MsgPvPRandItemGrassAppearance_MS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPvPRandItemGrassAppearance_MS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ITEM_GRASS_APPEARANCE_MS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 mapobjectid = 2;
  if (has_mapobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapobjectid(), target);
  }

  // optional int32 posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // optional int32 posy = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posy(), target);
  }

  // optional int32 itemid = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itemid(), target);
  }

  // optional int32 goupid = 6;
  if (has_goupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->goupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPvPRandItemGrassAppearance_MS2C)
  return target;
}

int MsgPvPRandItemGrassAppearance_MS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PVP_RAND_ITEM_GRASS_APPEARANCE_MS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 mapobjectid = 2;
    if (has_mapobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapobjectid());
    }

    // optional int32 posx = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posy = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int32 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 goupid = 6;
    if (has_goupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPvPRandItemGrassAppearance_MS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPvPRandItemGrassAppearance_MS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPvPRandItemGrassAppearance_MS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPvPRandItemGrassAppearance_MS2C::MergeFrom(const MsgPvPRandItemGrassAppearance_MS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_mapobjectid()) {
      set_mapobjectid(from.mapobjectid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_goupid()) {
      set_goupid(from.goupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPvPRandItemGrassAppearance_MS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPvPRandItemGrassAppearance_MS2C::CopyFrom(const MsgPvPRandItemGrassAppearance_MS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPvPRandItemGrassAppearance_MS2C::IsInitialized() const {

  return true;
}

void MsgPvPRandItemGrassAppearance_MS2C::Swap(MsgPvPRandItemGrassAppearance_MS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(mapobjectid_, other->mapobjectid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(itemid_, other->itemid_);
    std::swap(goupid_, other->goupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPvPRandItemGrassAppearance_MS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPvPRandItemGrassAppearance_MS2C_descriptor_;
  metadata.reflection = MsgPvPRandItemGrassAppearance_MS2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
