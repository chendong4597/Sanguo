// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgNpcDak.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgNpcDak.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgNpcDakData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakData_DakEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakData_DakEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakData_DakEnvoy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakData_DakEnvoy_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakSyncS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakSyncS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakUpdateCountryS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakUpdateCountryS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakStartEventS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakStartEventS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakEndEventS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakEndEventS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakRobC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakRobC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakTrigInteractiveC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakTrigInteractiveC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakTrigInteractiveS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakTrigInteractiveS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakTrigInteractiveS2C_ParamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakTrigInteractiveS2C_ParamData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgNpcDakTrigInteractiveS2C_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakEnvoyC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakEnvoyC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakEnvoyS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakEnvoyS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgNpcDakEnvoyS2C_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakEnvoySetParamC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakEnvoySetParamC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakEnvoySetParamS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakEnvoySetParamS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgNpcDakEnvoySetParamS2C_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcDakEventShopStartC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcDakEventShopStartC2S_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NPC_DAK_TRIG_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgNpcDak_2eproto() {
  protobuf_AddDesc_MsgNpcDak_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgNpcDak.proto");
  GOOGLE_CHECK(file != NULL);
  MsgNpcDakData_descriptor_ = file->message_type(0);
  static const int MsgNpcDakData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData, diplomacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData, dirty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData, envoy_),
  };
  MsgNpcDakData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakData_descriptor_,
      MsgNpcDakData::default_instance_,
      MsgNpcDakData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakData));
  MsgNpcDakData_DakEvent_descriptor_ = MsgNpcDakData_descriptor_->nested_type(0);
  static const int MsgNpcDakData_DakEvent_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEvent, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEvent, dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEvent, trig_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEvent, lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEvent, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEvent, add_dip_),
  };
  MsgNpcDakData_DakEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakData_DakEvent_descriptor_,
      MsgNpcDakData_DakEvent::default_instance_,
      MsgNpcDakData_DakEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakData_DakEvent));
  MsgNpcDakData_DakEnvoy_descriptor_ = MsgNpcDakData_descriptor_->nested_type(1);
  static const int MsgNpcDakData_DakEnvoy_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEnvoy, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEnvoy, dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEnvoy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEnvoy, trig_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEnvoy, param_),
  };
  MsgNpcDakData_DakEnvoy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakData_DakEnvoy_descriptor_,
      MsgNpcDakData_DakEnvoy::default_instance_,
      MsgNpcDakData_DakEnvoy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEnvoy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakData_DakEnvoy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakData_DakEnvoy));
  MsgNpcDakSyncS2C_descriptor_ = file->message_type(1);
  static const int MsgNpcDakSyncS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakSyncS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakSyncS2C, data_),
  };
  MsgNpcDakSyncS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakSyncS2C_descriptor_,
      MsgNpcDakSyncS2C::default_instance_,
      MsgNpcDakSyncS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakSyncS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakSyncS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakSyncS2C));
  MsgNpcDakUpdateCountryS2C_descriptor_ = file->message_type(2);
  static const int MsgNpcDakUpdateCountryS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakUpdateCountryS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakUpdateCountryS2C, data_),
  };
  MsgNpcDakUpdateCountryS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakUpdateCountryS2C_descriptor_,
      MsgNpcDakUpdateCountryS2C::default_instance_,
      MsgNpcDakUpdateCountryS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakUpdateCountryS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakUpdateCountryS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakUpdateCountryS2C));
  MsgNpcDakStartEventS2C_descriptor_ = file->message_type(3);
  static const int MsgNpcDakStartEventS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakStartEventS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakStartEventS2C, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakStartEventS2C, dataid_),
  };
  MsgNpcDakStartEventS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakStartEventS2C_descriptor_,
      MsgNpcDakStartEventS2C::default_instance_,
      MsgNpcDakStartEventS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakStartEventS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakStartEventS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakStartEventS2C));
  MsgNpcDakEndEventS2C_descriptor_ = file->message_type(4);
  static const int MsgNpcDakEndEventS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEndEventS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEndEventS2C, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEndEventS2C, dataid_),
  };
  MsgNpcDakEndEventS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakEndEventS2C_descriptor_,
      MsgNpcDakEndEventS2C::default_instance_,
      MsgNpcDakEndEventS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEndEventS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEndEventS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakEndEventS2C));
  MsgNpcDakRobC2S_descriptor_ = file->message_type(5);
  static const int MsgNpcDakRobC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRobC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRobC2S, dataid_),
  };
  MsgNpcDakRobC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakRobC2S_descriptor_,
      MsgNpcDakRobC2S::default_instance_,
      MsgNpcDakRobC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRobC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakRobC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakRobC2S));
  MsgNpcDakTrigInteractiveC2S_descriptor_ = file->message_type(6);
  static const int MsgNpcDakTrigInteractiveC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveC2S, trig_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveC2S, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveC2S, interactive_),
  };
  MsgNpcDakTrigInteractiveC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakTrigInteractiveC2S_descriptor_,
      MsgNpcDakTrigInteractiveC2S::default_instance_,
      MsgNpcDakTrigInteractiveC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakTrigInteractiveC2S));
  MsgNpcDakTrigInteractiveS2C_descriptor_ = file->message_type(7);
  static const int MsgNpcDakTrigInteractiveS2C_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveS2C, trig_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveS2C, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveS2C, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveS2C, send_mail_),
  };
  MsgNpcDakTrigInteractiveS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakTrigInteractiveS2C_descriptor_,
      MsgNpcDakTrigInteractiveS2C::default_instance_,
      MsgNpcDakTrigInteractiveS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakTrigInteractiveS2C));
  MsgNpcDakTrigInteractiveS2C_ParamData_descriptor_ = MsgNpcDakTrigInteractiveS2C_descriptor_->nested_type(0);
  static const int MsgNpcDakTrigInteractiveS2C_ParamData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveS2C_ParamData, dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveS2C_ParamData, count_),
  };
  MsgNpcDakTrigInteractiveS2C_ParamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakTrigInteractiveS2C_ParamData_descriptor_,
      MsgNpcDakTrigInteractiveS2C_ParamData::default_instance_,
      MsgNpcDakTrigInteractiveS2C_ParamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveS2C_ParamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakTrigInteractiveS2C_ParamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakTrigInteractiveS2C_ParamData));
  MsgNpcDakTrigInteractiveS2C_RESULT_descriptor_ = MsgNpcDakTrigInteractiveS2C_descriptor_->enum_type(0);
  MsgNpcDakEnvoyC2S_descriptor_ = file->message_type(8);
  static const int MsgNpcDakEnvoyC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoyC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoyC2S, envoytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoyC2S, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoyC2S, index_),
  };
  MsgNpcDakEnvoyC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakEnvoyC2S_descriptor_,
      MsgNpcDakEnvoyC2S::default_instance_,
      MsgNpcDakEnvoyC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoyC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoyC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakEnvoyC2S));
  MsgNpcDakEnvoyS2C_descriptor_ = file->message_type(9);
  static const int MsgNpcDakEnvoyS2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoyS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoyS2C, envoytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoyS2C, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoyS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoyS2C, index_),
  };
  MsgNpcDakEnvoyS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakEnvoyS2C_descriptor_,
      MsgNpcDakEnvoyS2C::default_instance_,
      MsgNpcDakEnvoyS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoyS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoyS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakEnvoyS2C));
  MsgNpcDakEnvoyS2C_RESULT_descriptor_ = MsgNpcDakEnvoyS2C_descriptor_->enum_type(0);
  MsgNpcDakEnvoySetParamC2S_descriptor_ = file->message_type(10);
  static const int MsgNpcDakEnvoySetParamC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoySetParamC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoySetParamC2S, envoy_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoySetParamC2S, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoySetParamC2S, param_),
  };
  MsgNpcDakEnvoySetParamC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakEnvoySetParamC2S_descriptor_,
      MsgNpcDakEnvoySetParamC2S::default_instance_,
      MsgNpcDakEnvoySetParamC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoySetParamC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoySetParamC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakEnvoySetParamC2S));
  MsgNpcDakEnvoySetParamS2C_descriptor_ = file->message_type(11);
  static const int MsgNpcDakEnvoySetParamS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoySetParamS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoySetParamS2C, envoy_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoySetParamS2C, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoySetParamS2C, res_),
  };
  MsgNpcDakEnvoySetParamS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakEnvoySetParamS2C_descriptor_,
      MsgNpcDakEnvoySetParamS2C::default_instance_,
      MsgNpcDakEnvoySetParamS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoySetParamS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEnvoySetParamS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakEnvoySetParamS2C));
  MsgNpcDakEnvoySetParamS2C_RESULT_descriptor_ = MsgNpcDakEnvoySetParamS2C_descriptor_->enum_type(0);
  MsgNpcDakEventShopStartC2S_descriptor_ = file->message_type(12);
  static const int MsgNpcDakEventShopStartC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEventShopStartC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEventShopStartC2S, shopid_),
  };
  MsgNpcDakEventShopStartC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcDakEventShopStartC2S_descriptor_,
      MsgNpcDakEventShopStartC2S::default_instance_,
      MsgNpcDakEventShopStartC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEventShopStartC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcDakEventShopStartC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcDakEventShopStartC2S));
  NPC_DAK_TRIG_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgNpcDak_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakData_descriptor_, &MsgNpcDakData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakData_DakEvent_descriptor_, &MsgNpcDakData_DakEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakData_DakEnvoy_descriptor_, &MsgNpcDakData_DakEnvoy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakSyncS2C_descriptor_, &MsgNpcDakSyncS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakUpdateCountryS2C_descriptor_, &MsgNpcDakUpdateCountryS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakStartEventS2C_descriptor_, &MsgNpcDakStartEventS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakEndEventS2C_descriptor_, &MsgNpcDakEndEventS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakRobC2S_descriptor_, &MsgNpcDakRobC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakTrigInteractiveC2S_descriptor_, &MsgNpcDakTrigInteractiveC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakTrigInteractiveS2C_descriptor_, &MsgNpcDakTrigInteractiveS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakTrigInteractiveS2C_ParamData_descriptor_, &MsgNpcDakTrigInteractiveS2C_ParamData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakEnvoyC2S_descriptor_, &MsgNpcDakEnvoyC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakEnvoyS2C_descriptor_, &MsgNpcDakEnvoyS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakEnvoySetParamC2S_descriptor_, &MsgNpcDakEnvoySetParamC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakEnvoySetParamS2C_descriptor_, &MsgNpcDakEnvoySetParamS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcDakEventShopStartC2S_descriptor_, &MsgNpcDakEventShopStartC2S::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgNpcDak_2eproto() {
  delete MsgNpcDakData::default_instance_;
  delete MsgNpcDakData_reflection_;
  delete MsgNpcDakData_DakEvent::default_instance_;
  delete MsgNpcDakData_DakEvent_reflection_;
  delete MsgNpcDakData_DakEnvoy::default_instance_;
  delete MsgNpcDakData_DakEnvoy_reflection_;
  delete MsgNpcDakSyncS2C::default_instance_;
  delete MsgNpcDakSyncS2C_reflection_;
  delete MsgNpcDakUpdateCountryS2C::default_instance_;
  delete MsgNpcDakUpdateCountryS2C_reflection_;
  delete MsgNpcDakStartEventS2C::default_instance_;
  delete MsgNpcDakStartEventS2C_reflection_;
  delete MsgNpcDakEndEventS2C::default_instance_;
  delete MsgNpcDakEndEventS2C_reflection_;
  delete MsgNpcDakRobC2S::default_instance_;
  delete MsgNpcDakRobC2S_reflection_;
  delete MsgNpcDakTrigInteractiveC2S::default_instance_;
  delete MsgNpcDakTrigInteractiveC2S_reflection_;
  delete MsgNpcDakTrigInteractiveS2C::default_instance_;
  delete MsgNpcDakTrigInteractiveS2C_reflection_;
  delete MsgNpcDakTrigInteractiveS2C_ParamData::default_instance_;
  delete MsgNpcDakTrigInteractiveS2C_ParamData_reflection_;
  delete MsgNpcDakEnvoyC2S::default_instance_;
  delete MsgNpcDakEnvoyC2S_reflection_;
  delete MsgNpcDakEnvoyS2C::default_instance_;
  delete MsgNpcDakEnvoyS2C_reflection_;
  delete MsgNpcDakEnvoySetParamC2S::default_instance_;
  delete MsgNpcDakEnvoySetParamC2S_reflection_;
  delete MsgNpcDakEnvoySetParamS2C::default_instance_;
  delete MsgNpcDakEnvoySetParamS2C_reflection_;
  delete MsgNpcDakEventShopStartC2S::default_instance_;
  delete MsgNpcDakEventShopStartC2S_reflection_;
}

void protobuf_AddDesc_MsgNpcDak_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MsgNpcDak.proto\022\005MsgPB\032\rMsgType.proto\""
    "\335\002\n\rMsgNpcDakData\022\014\n\004uuid\030\001 \001(\003\022\021\n\tdiplo"
    "macy\030\002 \001(\005\022,\n\005event\030\003 \003(\0132\035.MsgPB.MsgNpc"
    "DakData.DakEvent\022\r\n\005dirty\030\004 \001(\003\022,\n\005envoy"
    "\030\005 \003(\0132\035.MsgPB.MsgNpcDakData.DakEnvoy\032g\n"
    "\010DakEvent\022\013\n\003idx\030\001 \001(\005\022\016\n\006dataid\030\002 \001(\005\022\021"
    "\n\ttrig_time\030\003 \001(\003\022\013\n\003lev\030\004 \001(\005\022\r\n\005param\030"
    "\005 \001(\005\022\017\n\007add_dip\030\006 \001(\005\032W\n\010DakEnvoy\022\013\n\003id"
    "x\030\001 \001(\005\022\016\n\006dataid\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\021\n"
    "\ttrig_time\030\004 \001(\003\022\r\n\005param\030\005 \001(\005\"o\n\020MsgNp"
    "cDakSyncS2C\0227\n\007msgType\030\001 \001(\0162\017.MsgPB.EMs"
    "gType:\025_MSG_NPC_DAK_SYNC_S2C\022\"\n\004data\030\002 \003"
    "(\0132\024.MsgPB.MsgNpcDakData\"\202\001\n\031MsgNpcDakUp"
    "dateCountryS2C\022A\n\007msgType\030\001 \001(\0162\017.MsgPB."
    "EMsgType:\037_MSG_NPC_DAK_UPDATE_COUNTRY_S2"
    "C\022\"\n\004data\030\002 \001(\0132\024.MsgPB.MsgNpcDakData\"|\n"
    "\026MsgNpcDakStartEventS2C\022>\n\007msgType\030\001 \001(\016"
    "2\017.MsgPB.EMsgType:\034_MSG_NPC_DAK_START_EV"
    "ENT_S2C\022\022\n\nevent_type\030\002 \001(\005\022\016\n\006dataid\030\003 "
    "\001(\005\"x\n\024MsgNpcDakEndEventS2C\022<\n\007msgType\030\001"
    " \001(\0162\017.MsgPB.EMsgType:\032_MSG_NPC_DAK_END_"
    "EVENT_S2C\022\022\n\nevent_type\030\002 \001(\005\022\016\n\006dataid\030"
    "\003 \001(\005\"Y\n\017MsgNpcDakRobC2S\0226\n\007msgType\030\001 \001("
    "\0162\017.MsgPB.EMsgType:\024_MSG_NPC_DAK_ROB_C2S"
    "\022\016\n\006dataid\030\002 \001(\005\"\262\001\n\033MsgNpcDakTrigIntera"
    "ctiveC2S\022C\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTy"
    "pe:!_MSG_NPC_DAK_TRIG_INTERACTIVE_C2S\022+\n"
    "\ttrig_type\030\002 \001(\0162\030.MsgPB.NPC_DAK_TRIG_TY"
    "PE\022\014\n\004uuid\030\003 \001(\003\022\023\n\013interactive\030\004 \001(\005\"\360\002"
    "\n\033MsgNpcDakTrigInteractiveS2C\022C\n\007msgType"
    "\030\001 \001(\0162\017.MsgPB.EMsgType:!_MSG_NPC_DAK_TR"
    "IG_INTERACTIVE_S2C\022+\n\ttrig_type\030\002 \001(\0162\030."
    "MsgPB.NPC_DAK_TRIG_TYPE\022\014\n\004uuid\030\003 \001(\003\0226\n"
    "\003res\030\004 \001(\0162).MsgPB.MsgNpcDakTrigInteract"
    "iveS2C.RESULT\022:\n\004data\030\005 \003(\0132,.MsgPB.MsgN"
    "pcDakTrigInteractiveS2C.ParamData\022\021\n\tsen"
    "d_mail\030\006 \001(\010\032*\n\tParamData\022\016\n\006dataID\030\001 \001("
    "\005\022\r\n\005count\030\002 \001(\005\"\036\n\006RESULT\022\013\n\007SUCCESS\020\000\022"
    "\007\n\003ERR\020\001\"}\n\021MsgNpcDakEnvoyC2S\0228\n\007msgType"
    "\030\001 \001(\0162\017.MsgPB.EMsgType:\026_MSG_NPC_DAK_EN"
    "VOY_C2S\022\021\n\tenvoytype\030\002 \001(\005\022\014\n\004uuid\030\003 \001(\003"
    "\022\r\n\005index\030\004 \001(\005\"\313\001\n\021MsgNpcDakEnvoyS2C\0228\n"
    "\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\026_MSG_NP"
    "C_DAK_ENVOY_S2C\022\021\n\tenvoytype\030\002 \001(\005\022\014\n\004uu"
    "id\030\003 \001(\003\022,\n\003res\030\004 \001(\0162\037.MsgPB.MsgNpcDakE"
    "nvoyS2C.RESULT\022\r\n\005index\030\005 \001(\005\"\036\n\006RESULT\022"
    "\013\n\007SUCCESS\020\000\022\007\n\003ERR\020\001\"\217\001\n\031MsgNpcDakEnvoy"
    "SetParamC2S\022B\n\007msgType\030\001 \001(\0162\017.MsgPB.EMs"
    "gType: _MSG_NPC_DAK_ENVOY_SET_PARAM_C2S\022"
    "\021\n\tenvoy_idx\030\002 \001(\005\022\014\n\004uuid\030\003 \001(\003\022\r\n\005para"
    "m\030\004 \001(\005\"\326\001\n\031MsgNpcDakEnvoySetParamS2C\022B\n"
    "\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType: _MSG_NP"
    "C_DAK_ENVOY_SET_PARAM_S2C\022\021\n\tenvoy_idx\030\002"
    " \001(\005\022\014\n\004uuid\030\003 \001(\003\0224\n\003res\030\004 \001(\0162\'.MsgPB."
    "MsgNpcDakEnvoySetParamS2C.RESULT\"\036\n\006RESU"
    "LT\022\013\n\007SUCCESS\020\000\022\007\n\003ERR\020\001\"q\n\032MsgNpcDakEve"
    "ntShopStartC2S\022C\n\007msgType\030\001 \001(\0162\017.MsgPB."
    "EMsgType:!_MSG_NPC_DAK_EVENT_SHOP_START_"
    "C2S\022\016\n\006shopid\030\002 \003(\005*5\n\021NPC_DAK_TRIG_TYPE"
    "\022\r\n\tTRIG_GIFT\020\000\022\021\n\rTRIG_EXCHANGE\020\001", 2394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgNpcDak.proto", &protobuf_RegisterTypes);
  MsgNpcDakData::default_instance_ = new MsgNpcDakData();
  MsgNpcDakData_DakEvent::default_instance_ = new MsgNpcDakData_DakEvent();
  MsgNpcDakData_DakEnvoy::default_instance_ = new MsgNpcDakData_DakEnvoy();
  MsgNpcDakSyncS2C::default_instance_ = new MsgNpcDakSyncS2C();
  MsgNpcDakUpdateCountryS2C::default_instance_ = new MsgNpcDakUpdateCountryS2C();
  MsgNpcDakStartEventS2C::default_instance_ = new MsgNpcDakStartEventS2C();
  MsgNpcDakEndEventS2C::default_instance_ = new MsgNpcDakEndEventS2C();
  MsgNpcDakRobC2S::default_instance_ = new MsgNpcDakRobC2S();
  MsgNpcDakTrigInteractiveC2S::default_instance_ = new MsgNpcDakTrigInteractiveC2S();
  MsgNpcDakTrigInteractiveS2C::default_instance_ = new MsgNpcDakTrigInteractiveS2C();
  MsgNpcDakTrigInteractiveS2C_ParamData::default_instance_ = new MsgNpcDakTrigInteractiveS2C_ParamData();
  MsgNpcDakEnvoyC2S::default_instance_ = new MsgNpcDakEnvoyC2S();
  MsgNpcDakEnvoyS2C::default_instance_ = new MsgNpcDakEnvoyS2C();
  MsgNpcDakEnvoySetParamC2S::default_instance_ = new MsgNpcDakEnvoySetParamC2S();
  MsgNpcDakEnvoySetParamS2C::default_instance_ = new MsgNpcDakEnvoySetParamS2C();
  MsgNpcDakEventShopStartC2S::default_instance_ = new MsgNpcDakEventShopStartC2S();
  MsgNpcDakData::default_instance_->InitAsDefaultInstance();
  MsgNpcDakData_DakEvent::default_instance_->InitAsDefaultInstance();
  MsgNpcDakData_DakEnvoy::default_instance_->InitAsDefaultInstance();
  MsgNpcDakSyncS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcDakUpdateCountryS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcDakStartEventS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcDakEndEventS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcDakRobC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcDakTrigInteractiveC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcDakTrigInteractiveS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcDakTrigInteractiveS2C_ParamData::default_instance_->InitAsDefaultInstance();
  MsgNpcDakEnvoyC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcDakEnvoyS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcDakEnvoySetParamC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcDakEnvoySetParamS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcDakEventShopStartC2S::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgNpcDak_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgNpcDak_2eproto {
  StaticDescriptorInitializer_MsgNpcDak_2eproto() {
    protobuf_AddDesc_MsgNpcDak_2eproto();
  }
} static_descriptor_initializer_MsgNpcDak_2eproto_;
const ::google::protobuf::EnumDescriptor* NPC_DAK_TRIG_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPC_DAK_TRIG_TYPE_descriptor_;
}
bool NPC_DAK_TRIG_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakData_DakEvent::kIdxFieldNumber;
const int MsgNpcDakData_DakEvent::kDataidFieldNumber;
const int MsgNpcDakData_DakEvent::kTrigTimeFieldNumber;
const int MsgNpcDakData_DakEvent::kLevFieldNumber;
const int MsgNpcDakData_DakEvent::kParamFieldNumber;
const int MsgNpcDakData_DakEvent::kAddDipFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakData_DakEvent::MsgNpcDakData_DakEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakData.DakEvent)
}

void MsgNpcDakData_DakEvent::InitAsDefaultInstance() {
}

MsgNpcDakData_DakEvent::MsgNpcDakData_DakEvent(const MsgNpcDakData_DakEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakData.DakEvent)
}

void MsgNpcDakData_DakEvent::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  dataid_ = 0;
  trig_time_ = GOOGLE_LONGLONG(0);
  lev_ = 0;
  param_ = 0;
  add_dip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakData_DakEvent::~MsgNpcDakData_DakEvent() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakData.DakEvent)
  SharedDtor();
}

void MsgNpcDakData_DakEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakData_DakEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakData_DakEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakData_DakEvent_descriptor_;
}

const MsgNpcDakData_DakEvent& MsgNpcDakData_DakEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakData_DakEvent* MsgNpcDakData_DakEvent::default_instance_ = NULL;

MsgNpcDakData_DakEvent* MsgNpcDakData_DakEvent::New() const {
  return new MsgNpcDakData_DakEvent;
}

void MsgNpcDakData_DakEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakData_DakEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(idx_, add_dip_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakData_DakEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakData.DakEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 idx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dataid;
        break;
      }

      // optional int32 dataid = 2;
      case 2: {
        if (tag == 16) {
         parse_dataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trig_time;
        break;
      }

      // optional int64 trig_time = 3;
      case 3: {
        if (tag == 24) {
         parse_trig_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trig_time_)));
          set_has_trig_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lev;
        break;
      }

      // optional int32 lev = 4;
      case 4: {
        if (tag == 32) {
         parse_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lev_)));
          set_has_lev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_param;
        break;
      }

      // optional int32 param = 5;
      case 5: {
        if (tag == 40) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_add_dip;
        break;
      }

      // optional int32 add_dip = 6;
      case 6: {
        if (tag == 48) {
         parse_add_dip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_dip_)));
          set_has_add_dip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakData.DakEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakData.DakEvent)
  return false;
#undef DO_
}

void MsgNpcDakData_DakEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakData.DakEvent)
  // optional int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // optional int32 dataid = 2;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dataid(), output);
  }

  // optional int64 trig_time = 3;
  if (has_trig_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->trig_time(), output);
  }

  // optional int32 lev = 4;
  if (has_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lev(), output);
  }

  // optional int32 param = 5;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->param(), output);
  }

  // optional int32 add_dip = 6;
  if (has_add_dip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->add_dip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakData.DakEvent)
}

::google::protobuf::uint8* MsgNpcDakData_DakEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakData.DakEvent)
  // optional int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // optional int32 dataid = 2;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dataid(), target);
  }

  // optional int64 trig_time = 3;
  if (has_trig_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->trig_time(), target);
  }

  // optional int32 lev = 4;
  if (has_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lev(), target);
  }

  // optional int32 param = 5;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->param(), target);
  }

  // optional int32 add_dip = 6;
  if (has_add_dip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->add_dip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakData.DakEvent)
  return target;
}

int MsgNpcDakData_DakEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional int32 dataid = 2;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataid());
    }

    // optional int64 trig_time = 3;
    if (has_trig_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->trig_time());
    }

    // optional int32 lev = 4;
    if (has_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lev());
    }

    // optional int32 param = 5;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

    // optional int32 add_dip = 6;
    if (has_add_dip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_dip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakData_DakEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakData_DakEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakData_DakEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakData_DakEvent::MergeFrom(const MsgNpcDakData_DakEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
    if (from.has_trig_time()) {
      set_trig_time(from.trig_time());
    }
    if (from.has_lev()) {
      set_lev(from.lev());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_add_dip()) {
      set_add_dip(from.add_dip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakData_DakEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakData_DakEvent::CopyFrom(const MsgNpcDakData_DakEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakData_DakEvent::IsInitialized() const {

  return true;
}

void MsgNpcDakData_DakEvent::Swap(MsgNpcDakData_DakEvent* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(dataid_, other->dataid_);
    std::swap(trig_time_, other->trig_time_);
    std::swap(lev_, other->lev_);
    std::swap(param_, other->param_);
    std::swap(add_dip_, other->add_dip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakData_DakEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakData_DakEvent_descriptor_;
  metadata.reflection = MsgNpcDakData_DakEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgNpcDakData_DakEnvoy::kIdxFieldNumber;
const int MsgNpcDakData_DakEnvoy::kDataidFieldNumber;
const int MsgNpcDakData_DakEnvoy::kTypeFieldNumber;
const int MsgNpcDakData_DakEnvoy::kTrigTimeFieldNumber;
const int MsgNpcDakData_DakEnvoy::kParamFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakData_DakEnvoy::MsgNpcDakData_DakEnvoy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakData.DakEnvoy)
}

void MsgNpcDakData_DakEnvoy::InitAsDefaultInstance() {
}

MsgNpcDakData_DakEnvoy::MsgNpcDakData_DakEnvoy(const MsgNpcDakData_DakEnvoy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakData.DakEnvoy)
}

void MsgNpcDakData_DakEnvoy::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  dataid_ = 0;
  type_ = 0;
  trig_time_ = GOOGLE_LONGLONG(0);
  param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakData_DakEnvoy::~MsgNpcDakData_DakEnvoy() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakData.DakEnvoy)
  SharedDtor();
}

void MsgNpcDakData_DakEnvoy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakData_DakEnvoy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakData_DakEnvoy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakData_DakEnvoy_descriptor_;
}

const MsgNpcDakData_DakEnvoy& MsgNpcDakData_DakEnvoy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakData_DakEnvoy* MsgNpcDakData_DakEnvoy::default_instance_ = NULL;

MsgNpcDakData_DakEnvoy* MsgNpcDakData_DakEnvoy::New() const {
  return new MsgNpcDakData_DakEnvoy;
}

void MsgNpcDakData_DakEnvoy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakData_DakEnvoy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(idx_, param_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakData_DakEnvoy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakData.DakEnvoy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 idx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dataid;
        break;
      }

      // optional int32 dataid = 2;
      case 2: {
        if (tag == 16) {
         parse_dataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_trig_time;
        break;
      }

      // optional int64 trig_time = 4;
      case 4: {
        if (tag == 32) {
         parse_trig_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trig_time_)));
          set_has_trig_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_param;
        break;
      }

      // optional int32 param = 5;
      case 5: {
        if (tag == 40) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakData.DakEnvoy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakData.DakEnvoy)
  return false;
#undef DO_
}

void MsgNpcDakData_DakEnvoy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakData.DakEnvoy)
  // optional int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // optional int32 dataid = 2;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dataid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int64 trig_time = 4;
  if (has_trig_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->trig_time(), output);
  }

  // optional int32 param = 5;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakData.DakEnvoy)
}

::google::protobuf::uint8* MsgNpcDakData_DakEnvoy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakData.DakEnvoy)
  // optional int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // optional int32 dataid = 2;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dataid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int64 trig_time = 4;
  if (has_trig_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->trig_time(), target);
  }

  // optional int32 param = 5;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakData.DakEnvoy)
  return target;
}

int MsgNpcDakData_DakEnvoy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional int32 dataid = 2;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 trig_time = 4;
    if (has_trig_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->trig_time());
    }

    // optional int32 param = 5;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakData_DakEnvoy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakData_DakEnvoy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakData_DakEnvoy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakData_DakEnvoy::MergeFrom(const MsgNpcDakData_DakEnvoy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_trig_time()) {
      set_trig_time(from.trig_time());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakData_DakEnvoy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakData_DakEnvoy::CopyFrom(const MsgNpcDakData_DakEnvoy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakData_DakEnvoy::IsInitialized() const {

  return true;
}

void MsgNpcDakData_DakEnvoy::Swap(MsgNpcDakData_DakEnvoy* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(dataid_, other->dataid_);
    std::swap(type_, other->type_);
    std::swap(trig_time_, other->trig_time_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakData_DakEnvoy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakData_DakEnvoy_descriptor_;
  metadata.reflection = MsgNpcDakData_DakEnvoy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgNpcDakData::kUuidFieldNumber;
const int MsgNpcDakData::kDiplomacyFieldNumber;
const int MsgNpcDakData::kEventFieldNumber;
const int MsgNpcDakData::kDirtyFieldNumber;
const int MsgNpcDakData::kEnvoyFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakData::MsgNpcDakData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakData)
}

void MsgNpcDakData::InitAsDefaultInstance() {
}

MsgNpcDakData::MsgNpcDakData(const MsgNpcDakData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakData)
}

void MsgNpcDakData::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  diplomacy_ = 0;
  dirty_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakData::~MsgNpcDakData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakData)
  SharedDtor();
}

void MsgNpcDakData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakData_descriptor_;
}

const MsgNpcDakData& MsgNpcDakData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakData* MsgNpcDakData::default_instance_ = NULL;

MsgNpcDakData* MsgNpcDakData::New() const {
  return new MsgNpcDakData;
}

void MsgNpcDakData::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    uuid_ = GOOGLE_LONGLONG(0);
    diplomacy_ = 0;
    dirty_ = GOOGLE_LONGLONG(0);
  }
  event_.Clear();
  envoy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_diplomacy;
        break;
      }

      // optional int32 diplomacy = 2;
      case 2: {
        if (tag == 16) {
         parse_diplomacy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diplomacy_)));
          set_has_diplomacy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_event;
        break;
      }

      // repeated .MsgPB.MsgNpcDakData.DakEvent event = 3;
      case 3: {
        if (tag == 26) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_event;
        if (input->ExpectTag(32)) goto parse_dirty;
        break;
      }

      // optional int64 dirty = 4;
      case 4: {
        if (tag == 32) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_envoy;
        break;
      }

      // repeated .MsgPB.MsgNpcDakData.DakEnvoy envoy = 5;
      case 5: {
        if (tag == 42) {
         parse_envoy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_envoy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_envoy;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakData)
  return false;
#undef DO_
}

void MsgNpcDakData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakData)
  // optional int64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uuid(), output);
  }

  // optional int32 diplomacy = 2;
  if (has_diplomacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->diplomacy(), output);
  }

  // repeated .MsgPB.MsgNpcDakData.DakEvent event = 3;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->event(i), output);
  }

  // optional int64 dirty = 4;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dirty(), output);
  }

  // repeated .MsgPB.MsgNpcDakData.DakEnvoy envoy = 5;
  for (int i = 0; i < this->envoy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->envoy(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakData)
}

::google::protobuf::uint8* MsgNpcDakData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakData)
  // optional int64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 diplomacy = 2;
  if (has_diplomacy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->diplomacy(), target);
  }

  // repeated .MsgPB.MsgNpcDakData.DakEvent event = 3;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->event(i), target);
  }

  // optional int64 dirty = 4;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->dirty(), target);
  }

  // repeated .MsgPB.MsgNpcDakData.DakEnvoy envoy = 5;
  for (int i = 0; i < this->envoy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->envoy(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakData)
  return target;
}

int MsgNpcDakData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional int32 diplomacy = 2;
    if (has_diplomacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diplomacy());
    }

    // optional int64 dirty = 4;
    if (has_dirty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirty());
    }

  }
  // repeated .MsgPB.MsgNpcDakData.DakEvent event = 3;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }

  // repeated .MsgPB.MsgNpcDakData.DakEnvoy envoy = 5;
  total_size += 1 * this->envoy_size();
  for (int i = 0; i < this->envoy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->envoy(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakData::MergeFrom(const MsgNpcDakData& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  envoy_.MergeFrom(from.envoy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_diplomacy()) {
      set_diplomacy(from.diplomacy());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakData::CopyFrom(const MsgNpcDakData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakData::IsInitialized() const {

  return true;
}

void MsgNpcDakData::Swap(MsgNpcDakData* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(diplomacy_, other->diplomacy_);
    event_.Swap(&other->event_);
    std::swap(dirty_, other->dirty_);
    envoy_.Swap(&other->envoy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakData_descriptor_;
  metadata.reflection = MsgNpcDakData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakSyncS2C::kMsgTypeFieldNumber;
const int MsgNpcDakSyncS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakSyncS2C::MsgNpcDakSyncS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakSyncS2C)
}

void MsgNpcDakSyncS2C::InitAsDefaultInstance() {
}

MsgNpcDakSyncS2C::MsgNpcDakSyncS2C(const MsgNpcDakSyncS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakSyncS2C)
}

void MsgNpcDakSyncS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4300;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakSyncS2C::~MsgNpcDakSyncS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakSyncS2C)
  SharedDtor();
}

void MsgNpcDakSyncS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakSyncS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakSyncS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakSyncS2C_descriptor_;
}

const MsgNpcDakSyncS2C& MsgNpcDakSyncS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakSyncS2C* MsgNpcDakSyncS2C::default_instance_ = NULL;

MsgNpcDakSyncS2C* MsgNpcDakSyncS2C::New() const {
  return new MsgNpcDakSyncS2C;
}

void MsgNpcDakSyncS2C::Clear() {
  msgtype_ = 4300;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakSyncS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakSyncS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_SYNC_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .MsgPB.MsgNpcDakData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakSyncS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakSyncS2C)
  return false;
#undef DO_
}

void MsgNpcDakSyncS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakSyncS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_SYNC_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // repeated .MsgPB.MsgNpcDakData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakSyncS2C)
}

::google::protobuf::uint8* MsgNpcDakSyncS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakSyncS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_SYNC_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // repeated .MsgPB.MsgNpcDakData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakSyncS2C)
  return target;
}

int MsgNpcDakSyncS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_SYNC_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  // repeated .MsgPB.MsgNpcDakData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakSyncS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakSyncS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakSyncS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakSyncS2C::MergeFrom(const MsgNpcDakSyncS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakSyncS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakSyncS2C::CopyFrom(const MsgNpcDakSyncS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakSyncS2C::IsInitialized() const {

  return true;
}

void MsgNpcDakSyncS2C::Swap(MsgNpcDakSyncS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakSyncS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakSyncS2C_descriptor_;
  metadata.reflection = MsgNpcDakSyncS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakUpdateCountryS2C::kMsgTypeFieldNumber;
const int MsgNpcDakUpdateCountryS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakUpdateCountryS2C::MsgNpcDakUpdateCountryS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakUpdateCountryS2C)
}

void MsgNpcDakUpdateCountryS2C::InitAsDefaultInstance() {
  data_ = const_cast< ::MsgPB::MsgNpcDakData*>(&::MsgPB::MsgNpcDakData::default_instance());
}

MsgNpcDakUpdateCountryS2C::MsgNpcDakUpdateCountryS2C(const MsgNpcDakUpdateCountryS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakUpdateCountryS2C)
}

void MsgNpcDakUpdateCountryS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4301;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakUpdateCountryS2C::~MsgNpcDakUpdateCountryS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakUpdateCountryS2C)
  SharedDtor();
}

void MsgNpcDakUpdateCountryS2C::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgNpcDakUpdateCountryS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakUpdateCountryS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakUpdateCountryS2C_descriptor_;
}

const MsgNpcDakUpdateCountryS2C& MsgNpcDakUpdateCountryS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakUpdateCountryS2C* MsgNpcDakUpdateCountryS2C::default_instance_ = NULL;

MsgNpcDakUpdateCountryS2C* MsgNpcDakUpdateCountryS2C::New() const {
  return new MsgNpcDakUpdateCountryS2C;
}

void MsgNpcDakUpdateCountryS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 4301;
    if (has_data()) {
      if (data_ != NULL) data_->::MsgPB::MsgNpcDakData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakUpdateCountryS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakUpdateCountryS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_UPDATE_COUNTRY_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .MsgPB.MsgNpcDakData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakUpdateCountryS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakUpdateCountryS2C)
  return false;
#undef DO_
}

void MsgNpcDakUpdateCountryS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakUpdateCountryS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_UPDATE_COUNTRY_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.MsgNpcDakData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakUpdateCountryS2C)
}

::google::protobuf::uint8* MsgNpcDakUpdateCountryS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakUpdateCountryS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_UPDATE_COUNTRY_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.MsgNpcDakData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakUpdateCountryS2C)
  return target;
}

int MsgNpcDakUpdateCountryS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_UPDATE_COUNTRY_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.MsgNpcDakData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakUpdateCountryS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakUpdateCountryS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakUpdateCountryS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakUpdateCountryS2C::MergeFrom(const MsgNpcDakUpdateCountryS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_data()) {
      mutable_data()->::MsgPB::MsgNpcDakData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakUpdateCountryS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakUpdateCountryS2C::CopyFrom(const MsgNpcDakUpdateCountryS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakUpdateCountryS2C::IsInitialized() const {

  return true;
}

void MsgNpcDakUpdateCountryS2C::Swap(MsgNpcDakUpdateCountryS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakUpdateCountryS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakUpdateCountryS2C_descriptor_;
  metadata.reflection = MsgNpcDakUpdateCountryS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakStartEventS2C::kMsgTypeFieldNumber;
const int MsgNpcDakStartEventS2C::kEventTypeFieldNumber;
const int MsgNpcDakStartEventS2C::kDataidFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakStartEventS2C::MsgNpcDakStartEventS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakStartEventS2C)
}

void MsgNpcDakStartEventS2C::InitAsDefaultInstance() {
}

MsgNpcDakStartEventS2C::MsgNpcDakStartEventS2C(const MsgNpcDakStartEventS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakStartEventS2C)
}

void MsgNpcDakStartEventS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4302;
  event_type_ = 0;
  dataid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakStartEventS2C::~MsgNpcDakStartEventS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakStartEventS2C)
  SharedDtor();
}

void MsgNpcDakStartEventS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakStartEventS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakStartEventS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakStartEventS2C_descriptor_;
}

const MsgNpcDakStartEventS2C& MsgNpcDakStartEventS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakStartEventS2C* MsgNpcDakStartEventS2C::default_instance_ = NULL;

MsgNpcDakStartEventS2C* MsgNpcDakStartEventS2C::New() const {
  return new MsgNpcDakStartEventS2C;
}

void MsgNpcDakStartEventS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakStartEventS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(event_type_, dataid_);
    msgtype_ = 4302;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakStartEventS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakStartEventS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_START_EVENT_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event_type;
        break;
      }

      // optional int32 event_type = 2;
      case 2: {
        if (tag == 16) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dataid;
        break;
      }

      // optional int32 dataid = 3;
      case 3: {
        if (tag == 24) {
         parse_dataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakStartEventS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakStartEventS2C)
  return false;
#undef DO_
}

void MsgNpcDakStartEventS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakStartEventS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_START_EVENT_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 event_type = 2;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_type(), output);
  }

  // optional int32 dataid = 3;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dataid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakStartEventS2C)
}

::google::protobuf::uint8* MsgNpcDakStartEventS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakStartEventS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_START_EVENT_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 event_type = 2;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_type(), target);
  }

  // optional int32 dataid = 3;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dataid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakStartEventS2C)
  return target;
}

int MsgNpcDakStartEventS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_START_EVENT_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // optional int32 dataid = 3;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakStartEventS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakStartEventS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakStartEventS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakStartEventS2C::MergeFrom(const MsgNpcDakStartEventS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakStartEventS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakStartEventS2C::CopyFrom(const MsgNpcDakStartEventS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakStartEventS2C::IsInitialized() const {

  return true;
}

void MsgNpcDakStartEventS2C::Swap(MsgNpcDakStartEventS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(event_type_, other->event_type_);
    std::swap(dataid_, other->dataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakStartEventS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakStartEventS2C_descriptor_;
  metadata.reflection = MsgNpcDakStartEventS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakEndEventS2C::kMsgTypeFieldNumber;
const int MsgNpcDakEndEventS2C::kEventTypeFieldNumber;
const int MsgNpcDakEndEventS2C::kDataidFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakEndEventS2C::MsgNpcDakEndEventS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakEndEventS2C)
}

void MsgNpcDakEndEventS2C::InitAsDefaultInstance() {
}

MsgNpcDakEndEventS2C::MsgNpcDakEndEventS2C(const MsgNpcDakEndEventS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakEndEventS2C)
}

void MsgNpcDakEndEventS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4303;
  event_type_ = 0;
  dataid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakEndEventS2C::~MsgNpcDakEndEventS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakEndEventS2C)
  SharedDtor();
}

void MsgNpcDakEndEventS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakEndEventS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakEndEventS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakEndEventS2C_descriptor_;
}

const MsgNpcDakEndEventS2C& MsgNpcDakEndEventS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakEndEventS2C* MsgNpcDakEndEventS2C::default_instance_ = NULL;

MsgNpcDakEndEventS2C* MsgNpcDakEndEventS2C::New() const {
  return new MsgNpcDakEndEventS2C;
}

void MsgNpcDakEndEventS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakEndEventS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(event_type_, dataid_);
    msgtype_ = 4303;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakEndEventS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakEndEventS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_END_EVENT_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event_type;
        break;
      }

      // optional int32 event_type = 2;
      case 2: {
        if (tag == 16) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dataid;
        break;
      }

      // optional int32 dataid = 3;
      case 3: {
        if (tag == 24) {
         parse_dataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakEndEventS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakEndEventS2C)
  return false;
#undef DO_
}

void MsgNpcDakEndEventS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakEndEventS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_END_EVENT_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 event_type = 2;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_type(), output);
  }

  // optional int32 dataid = 3;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dataid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakEndEventS2C)
}

::google::protobuf::uint8* MsgNpcDakEndEventS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakEndEventS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_END_EVENT_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 event_type = 2;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_type(), target);
  }

  // optional int32 dataid = 3;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dataid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakEndEventS2C)
  return target;
}

int MsgNpcDakEndEventS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_END_EVENT_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // optional int32 dataid = 3;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakEndEventS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakEndEventS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakEndEventS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakEndEventS2C::MergeFrom(const MsgNpcDakEndEventS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakEndEventS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakEndEventS2C::CopyFrom(const MsgNpcDakEndEventS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakEndEventS2C::IsInitialized() const {

  return true;
}

void MsgNpcDakEndEventS2C::Swap(MsgNpcDakEndEventS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(event_type_, other->event_type_);
    std::swap(dataid_, other->dataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakEndEventS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakEndEventS2C_descriptor_;
  metadata.reflection = MsgNpcDakEndEventS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakRobC2S::kMsgTypeFieldNumber;
const int MsgNpcDakRobC2S::kDataidFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakRobC2S::MsgNpcDakRobC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakRobC2S)
}

void MsgNpcDakRobC2S::InitAsDefaultInstance() {
}

MsgNpcDakRobC2S::MsgNpcDakRobC2S(const MsgNpcDakRobC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakRobC2S)
}

void MsgNpcDakRobC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4304;
  dataid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakRobC2S::~MsgNpcDakRobC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakRobC2S)
  SharedDtor();
}

void MsgNpcDakRobC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakRobC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakRobC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakRobC2S_descriptor_;
}

const MsgNpcDakRobC2S& MsgNpcDakRobC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakRobC2S* MsgNpcDakRobC2S::default_instance_ = NULL;

MsgNpcDakRobC2S* MsgNpcDakRobC2S::New() const {
  return new MsgNpcDakRobC2S;
}

void MsgNpcDakRobC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 4304;
    dataid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakRobC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakRobC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ROB_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dataid;
        break;
      }

      // optional int32 dataid = 2;
      case 2: {
        if (tag == 16) {
         parse_dataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakRobC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakRobC2S)
  return false;
#undef DO_
}

void MsgNpcDakRobC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakRobC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ROB_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 dataid = 2;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dataid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakRobC2S)
}

::google::protobuf::uint8* MsgNpcDakRobC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakRobC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ROB_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 dataid = 2;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dataid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakRobC2S)
  return target;
}

int MsgNpcDakRobC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ROB_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 dataid = 2;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakRobC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakRobC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakRobC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakRobC2S::MergeFrom(const MsgNpcDakRobC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakRobC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakRobC2S::CopyFrom(const MsgNpcDakRobC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakRobC2S::IsInitialized() const {

  return true;
}

void MsgNpcDakRobC2S::Swap(MsgNpcDakRobC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(dataid_, other->dataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakRobC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakRobC2S_descriptor_;
  metadata.reflection = MsgNpcDakRobC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakTrigInteractiveC2S::kMsgTypeFieldNumber;
const int MsgNpcDakTrigInteractiveC2S::kTrigTypeFieldNumber;
const int MsgNpcDakTrigInteractiveC2S::kUuidFieldNumber;
const int MsgNpcDakTrigInteractiveC2S::kInteractiveFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakTrigInteractiveC2S::MsgNpcDakTrigInteractiveC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakTrigInteractiveC2S)
}

void MsgNpcDakTrigInteractiveC2S::InitAsDefaultInstance() {
}

MsgNpcDakTrigInteractiveC2S::MsgNpcDakTrigInteractiveC2S(const MsgNpcDakTrigInteractiveC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakTrigInteractiveC2S)
}

void MsgNpcDakTrigInteractiveC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4305;
  trig_type_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  interactive_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakTrigInteractiveC2S::~MsgNpcDakTrigInteractiveC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakTrigInteractiveC2S)
  SharedDtor();
}

void MsgNpcDakTrigInteractiveC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakTrigInteractiveC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakTrigInteractiveC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakTrigInteractiveC2S_descriptor_;
}

const MsgNpcDakTrigInteractiveC2S& MsgNpcDakTrigInteractiveC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakTrigInteractiveC2S* MsgNpcDakTrigInteractiveC2S::default_instance_ = NULL;

MsgNpcDakTrigInteractiveC2S* MsgNpcDakTrigInteractiveC2S::New() const {
  return new MsgNpcDakTrigInteractiveC2S;
}

void MsgNpcDakTrigInteractiveC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakTrigInteractiveC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(trig_type_, interactive_);
    msgtype_ = 4305;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakTrigInteractiveC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakTrigInteractiveC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_TRIG_INTERACTIVE_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trig_type;
        break;
      }

      // optional .MsgPB.NPC_DAK_TRIG_TYPE trig_type = 2;
      case 2: {
        if (tag == 16) {
         parse_trig_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::NPC_DAK_TRIG_TYPE_IsValid(value)) {
            set_trig_type(static_cast< ::MsgPB::NPC_DAK_TRIG_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_interactive;
        break;
      }

      // optional int32 interactive = 4;
      case 4: {
        if (tag == 32) {
         parse_interactive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interactive_)));
          set_has_interactive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakTrigInteractiveC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakTrigInteractiveC2S)
  return false;
#undef DO_
}

void MsgNpcDakTrigInteractiveC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakTrigInteractiveC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_TRIG_INTERACTIVE_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.NPC_DAK_TRIG_TYPE trig_type = 2;
  if (has_trig_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->trig_type(), output);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uuid(), output);
  }

  // optional int32 interactive = 4;
  if (has_interactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->interactive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakTrigInteractiveC2S)
}

::google::protobuf::uint8* MsgNpcDakTrigInteractiveC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakTrigInteractiveC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_TRIG_INTERACTIVE_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.NPC_DAK_TRIG_TYPE trig_type = 2;
  if (has_trig_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->trig_type(), target);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uuid(), target);
  }

  // optional int32 interactive = 4;
  if (has_interactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->interactive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakTrigInteractiveC2S)
  return target;
}

int MsgNpcDakTrigInteractiveC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_TRIG_INTERACTIVE_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.NPC_DAK_TRIG_TYPE trig_type = 2;
    if (has_trig_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trig_type());
    }

    // optional int64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional int32 interactive = 4;
    if (has_interactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interactive());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakTrigInteractiveC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakTrigInteractiveC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakTrigInteractiveC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakTrigInteractiveC2S::MergeFrom(const MsgNpcDakTrigInteractiveC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_trig_type()) {
      set_trig_type(from.trig_type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_interactive()) {
      set_interactive(from.interactive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakTrigInteractiveC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakTrigInteractiveC2S::CopyFrom(const MsgNpcDakTrigInteractiveC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakTrigInteractiveC2S::IsInitialized() const {

  return true;
}

void MsgNpcDakTrigInteractiveC2S::Swap(MsgNpcDakTrigInteractiveC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(trig_type_, other->trig_type_);
    std::swap(uuid_, other->uuid_);
    std::swap(interactive_, other->interactive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakTrigInteractiveC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakTrigInteractiveC2S_descriptor_;
  metadata.reflection = MsgNpcDakTrigInteractiveC2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgNpcDakTrigInteractiveS2C_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakTrigInteractiveS2C_RESULT_descriptor_;
}
bool MsgNpcDakTrigInteractiveS2C_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgNpcDakTrigInteractiveS2C_RESULT MsgNpcDakTrigInteractiveS2C::SUCCESS;
const MsgNpcDakTrigInteractiveS2C_RESULT MsgNpcDakTrigInteractiveS2C::ERR;
const MsgNpcDakTrigInteractiveS2C_RESULT MsgNpcDakTrigInteractiveS2C::RESULT_MIN;
const MsgNpcDakTrigInteractiveS2C_RESULT MsgNpcDakTrigInteractiveS2C::RESULT_MAX;
const int MsgNpcDakTrigInteractiveS2C::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgNpcDakTrigInteractiveS2C_ParamData::kDataIDFieldNumber;
const int MsgNpcDakTrigInteractiveS2C_ParamData::kCountFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakTrigInteractiveS2C_ParamData::MsgNpcDakTrigInteractiveS2C_ParamData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData)
}

void MsgNpcDakTrigInteractiveS2C_ParamData::InitAsDefaultInstance() {
}

MsgNpcDakTrigInteractiveS2C_ParamData::MsgNpcDakTrigInteractiveS2C_ParamData(const MsgNpcDakTrigInteractiveS2C_ParamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData)
}

void MsgNpcDakTrigInteractiveS2C_ParamData::SharedCtor() {
  _cached_size_ = 0;
  dataid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakTrigInteractiveS2C_ParamData::~MsgNpcDakTrigInteractiveS2C_ParamData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData)
  SharedDtor();
}

void MsgNpcDakTrigInteractiveS2C_ParamData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakTrigInteractiveS2C_ParamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakTrigInteractiveS2C_ParamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakTrigInteractiveS2C_ParamData_descriptor_;
}

const MsgNpcDakTrigInteractiveS2C_ParamData& MsgNpcDakTrigInteractiveS2C_ParamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakTrigInteractiveS2C_ParamData* MsgNpcDakTrigInteractiveS2C_ParamData::default_instance_ = NULL;

MsgNpcDakTrigInteractiveS2C_ParamData* MsgNpcDakTrigInteractiveS2C_ParamData::New() const {
  return new MsgNpcDakTrigInteractiveS2C_ParamData;
}

void MsgNpcDakTrigInteractiveS2C_ParamData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakTrigInteractiveS2C_ParamData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dataid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakTrigInteractiveS2C_ParamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dataID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData)
  return false;
#undef DO_
}

void MsgNpcDakTrigInteractiveS2C_ParamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData)
  // optional int32 dataID = 1;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dataid(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData)
}

::google::protobuf::uint8* MsgNpcDakTrigInteractiveS2C_ParamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData)
  // optional int32 dataID = 1;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dataid(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData)
  return target;
}

int MsgNpcDakTrigInteractiveS2C_ParamData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dataID = 1;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataid());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakTrigInteractiveS2C_ParamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakTrigInteractiveS2C_ParamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakTrigInteractiveS2C_ParamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakTrigInteractiveS2C_ParamData::MergeFrom(const MsgNpcDakTrigInteractiveS2C_ParamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakTrigInteractiveS2C_ParamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakTrigInteractiveS2C_ParamData::CopyFrom(const MsgNpcDakTrigInteractiveS2C_ParamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakTrigInteractiveS2C_ParamData::IsInitialized() const {

  return true;
}

void MsgNpcDakTrigInteractiveS2C_ParamData::Swap(MsgNpcDakTrigInteractiveS2C_ParamData* other) {
  if (other != this) {
    std::swap(dataid_, other->dataid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakTrigInteractiveS2C_ParamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakTrigInteractiveS2C_ParamData_descriptor_;
  metadata.reflection = MsgNpcDakTrigInteractiveS2C_ParamData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgNpcDakTrigInteractiveS2C::kMsgTypeFieldNumber;
const int MsgNpcDakTrigInteractiveS2C::kTrigTypeFieldNumber;
const int MsgNpcDakTrigInteractiveS2C::kUuidFieldNumber;
const int MsgNpcDakTrigInteractiveS2C::kResFieldNumber;
const int MsgNpcDakTrigInteractiveS2C::kDataFieldNumber;
const int MsgNpcDakTrigInteractiveS2C::kSendMailFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakTrigInteractiveS2C::MsgNpcDakTrigInteractiveS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakTrigInteractiveS2C)
}

void MsgNpcDakTrigInteractiveS2C::InitAsDefaultInstance() {
}

MsgNpcDakTrigInteractiveS2C::MsgNpcDakTrigInteractiveS2C(const MsgNpcDakTrigInteractiveS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakTrigInteractiveS2C)
}

void MsgNpcDakTrigInteractiveS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4306;
  trig_type_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  send_mail_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakTrigInteractiveS2C::~MsgNpcDakTrigInteractiveS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakTrigInteractiveS2C)
  SharedDtor();
}

void MsgNpcDakTrigInteractiveS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakTrigInteractiveS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakTrigInteractiveS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakTrigInteractiveS2C_descriptor_;
}

const MsgNpcDakTrigInteractiveS2C& MsgNpcDakTrigInteractiveS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakTrigInteractiveS2C* MsgNpcDakTrigInteractiveS2C::default_instance_ = NULL;

MsgNpcDakTrigInteractiveS2C* MsgNpcDakTrigInteractiveS2C::New() const {
  return new MsgNpcDakTrigInteractiveS2C;
}

void MsgNpcDakTrigInteractiveS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakTrigInteractiveS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(trig_type_, uuid_);
    ZR_(res_, send_mail_);
    msgtype_ = 4306;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakTrigInteractiveS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakTrigInteractiveS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_TRIG_INTERACTIVE_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trig_type;
        break;
      }

      // optional .MsgPB.NPC_DAK_TRIG_TYPE trig_type = 2;
      case 2: {
        if (tag == 16) {
         parse_trig_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::NPC_DAK_TRIG_TYPE_IsValid(value)) {
            set_trig_type(static_cast< ::MsgPB::NPC_DAK_TRIG_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_res;
        break;
      }

      // optional .MsgPB.MsgNpcDakTrigInteractiveS2C.RESULT res = 4;
      case 4: {
        if (tag == 32) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgNpcDakTrigInteractiveS2C_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::MsgNpcDakTrigInteractiveS2C_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated .MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectTag(48)) goto parse_send_mail;
        break;
      }

      // optional bool send_mail = 6;
      case 6: {
        if (tag == 48) {
         parse_send_mail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_mail_)));
          set_has_send_mail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakTrigInteractiveS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakTrigInteractiveS2C)
  return false;
#undef DO_
}

void MsgNpcDakTrigInteractiveS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakTrigInteractiveS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_TRIG_INTERACTIVE_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.NPC_DAK_TRIG_TYPE trig_type = 2;
  if (has_trig_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->trig_type(), output);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uuid(), output);
  }

  // optional .MsgPB.MsgNpcDakTrigInteractiveS2C.RESULT res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->res(), output);
  }

  // repeated .MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }

  // optional bool send_mail = 6;
  if (has_send_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->send_mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakTrigInteractiveS2C)
}

::google::protobuf::uint8* MsgNpcDakTrigInteractiveS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakTrigInteractiveS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_TRIG_INTERACTIVE_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.NPC_DAK_TRIG_TYPE trig_type = 2;
  if (has_trig_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->trig_type(), target);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uuid(), target);
  }

  // optional .MsgPB.MsgNpcDakTrigInteractiveS2C.RESULT res = 4;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->res(), target);
  }

  // repeated .MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }

  // optional bool send_mail = 6;
  if (has_send_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->send_mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakTrigInteractiveS2C)
  return target;
}

int MsgNpcDakTrigInteractiveS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_TRIG_INTERACTIVE_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.NPC_DAK_TRIG_TYPE trig_type = 2;
    if (has_trig_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trig_type());
    }

    // optional int64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional .MsgPB.MsgNpcDakTrigInteractiveS2C.RESULT res = 4;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional bool send_mail = 6;
    if (has_send_mail()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MsgPB.MsgNpcDakTrigInteractiveS2C.ParamData data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakTrigInteractiveS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakTrigInteractiveS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakTrigInteractiveS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakTrigInteractiveS2C::MergeFrom(const MsgNpcDakTrigInteractiveS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_trig_type()) {
      set_trig_type(from.trig_type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_send_mail()) {
      set_send_mail(from.send_mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakTrigInteractiveS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakTrigInteractiveS2C::CopyFrom(const MsgNpcDakTrigInteractiveS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakTrigInteractiveS2C::IsInitialized() const {

  return true;
}

void MsgNpcDakTrigInteractiveS2C::Swap(MsgNpcDakTrigInteractiveS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(trig_type_, other->trig_type_);
    std::swap(uuid_, other->uuid_);
    std::swap(res_, other->res_);
    data_.Swap(&other->data_);
    std::swap(send_mail_, other->send_mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakTrigInteractiveS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakTrigInteractiveS2C_descriptor_;
  metadata.reflection = MsgNpcDakTrigInteractiveS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakEnvoyC2S::kMsgTypeFieldNumber;
const int MsgNpcDakEnvoyC2S::kEnvoytypeFieldNumber;
const int MsgNpcDakEnvoyC2S::kUuidFieldNumber;
const int MsgNpcDakEnvoyC2S::kIndexFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakEnvoyC2S::MsgNpcDakEnvoyC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakEnvoyC2S)
}

void MsgNpcDakEnvoyC2S::InitAsDefaultInstance() {
}

MsgNpcDakEnvoyC2S::MsgNpcDakEnvoyC2S(const MsgNpcDakEnvoyC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakEnvoyC2S)
}

void MsgNpcDakEnvoyC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4307;
  envoytype_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakEnvoyC2S::~MsgNpcDakEnvoyC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakEnvoyC2S)
  SharedDtor();
}

void MsgNpcDakEnvoyC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakEnvoyC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakEnvoyC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakEnvoyC2S_descriptor_;
}

const MsgNpcDakEnvoyC2S& MsgNpcDakEnvoyC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakEnvoyC2S* MsgNpcDakEnvoyC2S::default_instance_ = NULL;

MsgNpcDakEnvoyC2S* MsgNpcDakEnvoyC2S::New() const {
  return new MsgNpcDakEnvoyC2S;
}

void MsgNpcDakEnvoyC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakEnvoyC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(envoytype_, index_);
    msgtype_ = 4307;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakEnvoyC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakEnvoyC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_envoytype;
        break;
      }

      // optional int32 envoytype = 2;
      case 2: {
        if (tag == 16) {
         parse_envoytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &envoytype_)));
          set_has_envoytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional int32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakEnvoyC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakEnvoyC2S)
  return false;
#undef DO_
}

void MsgNpcDakEnvoyC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakEnvoyC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 envoytype = 2;
  if (has_envoytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->envoytype(), output);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uuid(), output);
  }

  // optional int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakEnvoyC2S)
}

::google::protobuf::uint8* MsgNpcDakEnvoyC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakEnvoyC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 envoytype = 2;
  if (has_envoytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->envoytype(), target);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uuid(), target);
  }

  // optional int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakEnvoyC2S)
  return target;
}

int MsgNpcDakEnvoyC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 envoytype = 2;
    if (has_envoytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->envoytype());
    }

    // optional int64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakEnvoyC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakEnvoyC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakEnvoyC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakEnvoyC2S::MergeFrom(const MsgNpcDakEnvoyC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_envoytype()) {
      set_envoytype(from.envoytype());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakEnvoyC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakEnvoyC2S::CopyFrom(const MsgNpcDakEnvoyC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakEnvoyC2S::IsInitialized() const {

  return true;
}

void MsgNpcDakEnvoyC2S::Swap(MsgNpcDakEnvoyC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(envoytype_, other->envoytype_);
    std::swap(uuid_, other->uuid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakEnvoyC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakEnvoyC2S_descriptor_;
  metadata.reflection = MsgNpcDakEnvoyC2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgNpcDakEnvoyS2C_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakEnvoyS2C_RESULT_descriptor_;
}
bool MsgNpcDakEnvoyS2C_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgNpcDakEnvoyS2C_RESULT MsgNpcDakEnvoyS2C::SUCCESS;
const MsgNpcDakEnvoyS2C_RESULT MsgNpcDakEnvoyS2C::ERR;
const MsgNpcDakEnvoyS2C_RESULT MsgNpcDakEnvoyS2C::RESULT_MIN;
const MsgNpcDakEnvoyS2C_RESULT MsgNpcDakEnvoyS2C::RESULT_MAX;
const int MsgNpcDakEnvoyS2C::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgNpcDakEnvoyS2C::kMsgTypeFieldNumber;
const int MsgNpcDakEnvoyS2C::kEnvoytypeFieldNumber;
const int MsgNpcDakEnvoyS2C::kUuidFieldNumber;
const int MsgNpcDakEnvoyS2C::kResFieldNumber;
const int MsgNpcDakEnvoyS2C::kIndexFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakEnvoyS2C::MsgNpcDakEnvoyS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakEnvoyS2C)
}

void MsgNpcDakEnvoyS2C::InitAsDefaultInstance() {
}

MsgNpcDakEnvoyS2C::MsgNpcDakEnvoyS2C(const MsgNpcDakEnvoyS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakEnvoyS2C)
}

void MsgNpcDakEnvoyS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4308;
  envoytype_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakEnvoyS2C::~MsgNpcDakEnvoyS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakEnvoyS2C)
  SharedDtor();
}

void MsgNpcDakEnvoyS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakEnvoyS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakEnvoyS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakEnvoyS2C_descriptor_;
}

const MsgNpcDakEnvoyS2C& MsgNpcDakEnvoyS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakEnvoyS2C* MsgNpcDakEnvoyS2C::default_instance_ = NULL;

MsgNpcDakEnvoyS2C* MsgNpcDakEnvoyS2C::New() const {
  return new MsgNpcDakEnvoyS2C;
}

void MsgNpcDakEnvoyS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakEnvoyS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(envoytype_, index_);
    msgtype_ = 4308;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakEnvoyS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakEnvoyS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_envoytype;
        break;
      }

      // optional int32 envoytype = 2;
      case 2: {
        if (tag == 16) {
         parse_envoytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &envoytype_)));
          set_has_envoytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_res;
        break;
      }

      // optional .MsgPB.MsgNpcDakEnvoyS2C.RESULT res = 4;
      case 4: {
        if (tag == 32) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgNpcDakEnvoyS2C_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::MsgNpcDakEnvoyS2C_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // optional int32 index = 5;
      case 5: {
        if (tag == 40) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakEnvoyS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakEnvoyS2C)
  return false;
#undef DO_
}

void MsgNpcDakEnvoyS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakEnvoyS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 envoytype = 2;
  if (has_envoytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->envoytype(), output);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uuid(), output);
  }

  // optional .MsgPB.MsgNpcDakEnvoyS2C.RESULT res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->res(), output);
  }

  // optional int32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakEnvoyS2C)
}

::google::protobuf::uint8* MsgNpcDakEnvoyS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakEnvoyS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 envoytype = 2;
  if (has_envoytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->envoytype(), target);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uuid(), target);
  }

  // optional .MsgPB.MsgNpcDakEnvoyS2C.RESULT res = 4;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->res(), target);
  }

  // optional int32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakEnvoyS2C)
  return target;
}

int MsgNpcDakEnvoyS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 envoytype = 2;
    if (has_envoytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->envoytype());
    }

    // optional int64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional .MsgPB.MsgNpcDakEnvoyS2C.RESULT res = 4;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional int32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakEnvoyS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakEnvoyS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakEnvoyS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakEnvoyS2C::MergeFrom(const MsgNpcDakEnvoyS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_envoytype()) {
      set_envoytype(from.envoytype());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakEnvoyS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakEnvoyS2C::CopyFrom(const MsgNpcDakEnvoyS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakEnvoyS2C::IsInitialized() const {

  return true;
}

void MsgNpcDakEnvoyS2C::Swap(MsgNpcDakEnvoyS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(envoytype_, other->envoytype_);
    std::swap(uuid_, other->uuid_);
    std::swap(res_, other->res_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakEnvoyS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakEnvoyS2C_descriptor_;
  metadata.reflection = MsgNpcDakEnvoyS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakEnvoySetParamC2S::kMsgTypeFieldNumber;
const int MsgNpcDakEnvoySetParamC2S::kEnvoyIdxFieldNumber;
const int MsgNpcDakEnvoySetParamC2S::kUuidFieldNumber;
const int MsgNpcDakEnvoySetParamC2S::kParamFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakEnvoySetParamC2S::MsgNpcDakEnvoySetParamC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakEnvoySetParamC2S)
}

void MsgNpcDakEnvoySetParamC2S::InitAsDefaultInstance() {
}

MsgNpcDakEnvoySetParamC2S::MsgNpcDakEnvoySetParamC2S(const MsgNpcDakEnvoySetParamC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakEnvoySetParamC2S)
}

void MsgNpcDakEnvoySetParamC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4309;
  envoy_idx_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakEnvoySetParamC2S::~MsgNpcDakEnvoySetParamC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakEnvoySetParamC2S)
  SharedDtor();
}

void MsgNpcDakEnvoySetParamC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakEnvoySetParamC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakEnvoySetParamC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakEnvoySetParamC2S_descriptor_;
}

const MsgNpcDakEnvoySetParamC2S& MsgNpcDakEnvoySetParamC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakEnvoySetParamC2S* MsgNpcDakEnvoySetParamC2S::default_instance_ = NULL;

MsgNpcDakEnvoySetParamC2S* MsgNpcDakEnvoySetParamC2S::New() const {
  return new MsgNpcDakEnvoySetParamC2S;
}

void MsgNpcDakEnvoySetParamC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakEnvoySetParamC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(envoy_idx_, param_);
    msgtype_ = 4309;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakEnvoySetParamC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakEnvoySetParamC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_SET_PARAM_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_envoy_idx;
        break;
      }

      // optional int32 envoy_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_envoy_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &envoy_idx_)));
          set_has_envoy_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param;
        break;
      }

      // optional int32 param = 4;
      case 4: {
        if (tag == 32) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakEnvoySetParamC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakEnvoySetParamC2S)
  return false;
#undef DO_
}

void MsgNpcDakEnvoySetParamC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakEnvoySetParamC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_SET_PARAM_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 envoy_idx = 2;
  if (has_envoy_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->envoy_idx(), output);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uuid(), output);
  }

  // optional int32 param = 4;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakEnvoySetParamC2S)
}

::google::protobuf::uint8* MsgNpcDakEnvoySetParamC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakEnvoySetParamC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_SET_PARAM_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 envoy_idx = 2;
  if (has_envoy_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->envoy_idx(), target);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uuid(), target);
  }

  // optional int32 param = 4;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakEnvoySetParamC2S)
  return target;
}

int MsgNpcDakEnvoySetParamC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_SET_PARAM_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 envoy_idx = 2;
    if (has_envoy_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->envoy_idx());
    }

    // optional int64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional int32 param = 4;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakEnvoySetParamC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakEnvoySetParamC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakEnvoySetParamC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakEnvoySetParamC2S::MergeFrom(const MsgNpcDakEnvoySetParamC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_envoy_idx()) {
      set_envoy_idx(from.envoy_idx());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakEnvoySetParamC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakEnvoySetParamC2S::CopyFrom(const MsgNpcDakEnvoySetParamC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakEnvoySetParamC2S::IsInitialized() const {

  return true;
}

void MsgNpcDakEnvoySetParamC2S::Swap(MsgNpcDakEnvoySetParamC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(envoy_idx_, other->envoy_idx_);
    std::swap(uuid_, other->uuid_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakEnvoySetParamC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakEnvoySetParamC2S_descriptor_;
  metadata.reflection = MsgNpcDakEnvoySetParamC2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgNpcDakEnvoySetParamS2C_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakEnvoySetParamS2C_RESULT_descriptor_;
}
bool MsgNpcDakEnvoySetParamS2C_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgNpcDakEnvoySetParamS2C_RESULT MsgNpcDakEnvoySetParamS2C::SUCCESS;
const MsgNpcDakEnvoySetParamS2C_RESULT MsgNpcDakEnvoySetParamS2C::ERR;
const MsgNpcDakEnvoySetParamS2C_RESULT MsgNpcDakEnvoySetParamS2C::RESULT_MIN;
const MsgNpcDakEnvoySetParamS2C_RESULT MsgNpcDakEnvoySetParamS2C::RESULT_MAX;
const int MsgNpcDakEnvoySetParamS2C::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgNpcDakEnvoySetParamS2C::kMsgTypeFieldNumber;
const int MsgNpcDakEnvoySetParamS2C::kEnvoyIdxFieldNumber;
const int MsgNpcDakEnvoySetParamS2C::kUuidFieldNumber;
const int MsgNpcDakEnvoySetParamS2C::kResFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakEnvoySetParamS2C::MsgNpcDakEnvoySetParamS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakEnvoySetParamS2C)
}

void MsgNpcDakEnvoySetParamS2C::InitAsDefaultInstance() {
}

MsgNpcDakEnvoySetParamS2C::MsgNpcDakEnvoySetParamS2C(const MsgNpcDakEnvoySetParamS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakEnvoySetParamS2C)
}

void MsgNpcDakEnvoySetParamS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4310;
  envoy_idx_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakEnvoySetParamS2C::~MsgNpcDakEnvoySetParamS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakEnvoySetParamS2C)
  SharedDtor();
}

void MsgNpcDakEnvoySetParamS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakEnvoySetParamS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakEnvoySetParamS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakEnvoySetParamS2C_descriptor_;
}

const MsgNpcDakEnvoySetParamS2C& MsgNpcDakEnvoySetParamS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakEnvoySetParamS2C* MsgNpcDakEnvoySetParamS2C::default_instance_ = NULL;

MsgNpcDakEnvoySetParamS2C* MsgNpcDakEnvoySetParamS2C::New() const {
  return new MsgNpcDakEnvoySetParamS2C;
}

void MsgNpcDakEnvoySetParamS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcDakEnvoySetParamS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(envoy_idx_, res_);
    msgtype_ = 4310;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakEnvoySetParamS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakEnvoySetParamS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_SET_PARAM_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_envoy_idx;
        break;
      }

      // optional int32 envoy_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_envoy_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &envoy_idx_)));
          set_has_envoy_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_res;
        break;
      }

      // optional .MsgPB.MsgNpcDakEnvoySetParamS2C.RESULT res = 4;
      case 4: {
        if (tag == 32) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgNpcDakEnvoySetParamS2C_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::MsgNpcDakEnvoySetParamS2C_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakEnvoySetParamS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakEnvoySetParamS2C)
  return false;
#undef DO_
}

void MsgNpcDakEnvoySetParamS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakEnvoySetParamS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_SET_PARAM_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 envoy_idx = 2;
  if (has_envoy_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->envoy_idx(), output);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uuid(), output);
  }

  // optional .MsgPB.MsgNpcDakEnvoySetParamS2C.RESULT res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakEnvoySetParamS2C)
}

::google::protobuf::uint8* MsgNpcDakEnvoySetParamS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakEnvoySetParamS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_SET_PARAM_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 envoy_idx = 2;
  if (has_envoy_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->envoy_idx(), target);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uuid(), target);
  }

  // optional .MsgPB.MsgNpcDakEnvoySetParamS2C.RESULT res = 4;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakEnvoySetParamS2C)
  return target;
}

int MsgNpcDakEnvoySetParamS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_ENVOY_SET_PARAM_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 envoy_idx = 2;
    if (has_envoy_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->envoy_idx());
    }

    // optional int64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional .MsgPB.MsgNpcDakEnvoySetParamS2C.RESULT res = 4;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakEnvoySetParamS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakEnvoySetParamS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakEnvoySetParamS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakEnvoySetParamS2C::MergeFrom(const MsgNpcDakEnvoySetParamS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_envoy_idx()) {
      set_envoy_idx(from.envoy_idx());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakEnvoySetParamS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakEnvoySetParamS2C::CopyFrom(const MsgNpcDakEnvoySetParamS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakEnvoySetParamS2C::IsInitialized() const {

  return true;
}

void MsgNpcDakEnvoySetParamS2C::Swap(MsgNpcDakEnvoySetParamS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(envoy_idx_, other->envoy_idx_);
    std::swap(uuid_, other->uuid_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakEnvoySetParamS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakEnvoySetParamS2C_descriptor_;
  metadata.reflection = MsgNpcDakEnvoySetParamS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcDakEventShopStartC2S::kMsgTypeFieldNumber;
const int MsgNpcDakEventShopStartC2S::kShopidFieldNumber;
#endif  // !_MSC_VER

MsgNpcDakEventShopStartC2S::MsgNpcDakEventShopStartC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcDakEventShopStartC2S)
}

void MsgNpcDakEventShopStartC2S::InitAsDefaultInstance() {
}

MsgNpcDakEventShopStartC2S::MsgNpcDakEventShopStartC2S(const MsgNpcDakEventShopStartC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcDakEventShopStartC2S)
}

void MsgNpcDakEventShopStartC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4311;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcDakEventShopStartC2S::~MsgNpcDakEventShopStartC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcDakEventShopStartC2S)
  SharedDtor();
}

void MsgNpcDakEventShopStartC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcDakEventShopStartC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcDakEventShopStartC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcDakEventShopStartC2S_descriptor_;
}

const MsgNpcDakEventShopStartC2S& MsgNpcDakEventShopStartC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcDak_2eproto();
  return *default_instance_;
}

MsgNpcDakEventShopStartC2S* MsgNpcDakEventShopStartC2S::default_instance_ = NULL;

MsgNpcDakEventShopStartC2S* MsgNpcDakEventShopStartC2S::New() const {
  return new MsgNpcDakEventShopStartC2S;
}

void MsgNpcDakEventShopStartC2S::Clear() {
  msgtype_ = 4311;
  shopid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcDakEventShopStartC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcDakEventShopStartC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_EVENT_SHOP_START_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shopid;
        break;
      }

      // repeated int32 shopid = 2;
      case 2: {
        if (tag == 16) {
         parse_shopid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_shopid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shopid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shopid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcDakEventShopStartC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcDakEventShopStartC2S)
  return false;
#undef DO_
}

void MsgNpcDakEventShopStartC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcDakEventShopStartC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_EVENT_SHOP_START_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // repeated int32 shopid = 2;
  for (int i = 0; i < this->shopid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->shopid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcDakEventShopStartC2S)
}

::google::protobuf::uint8* MsgNpcDakEventShopStartC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcDakEventShopStartC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_EVENT_SHOP_START_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // repeated int32 shopid = 2;
  for (int i = 0; i < this->shopid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->shopid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcDakEventShopStartC2S)
  return target;
}

int MsgNpcDakEventShopStartC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_DAK_EVENT_SHOP_START_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  // repeated int32 shopid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->shopid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shopid(i));
    }
    total_size += 1 * this->shopid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcDakEventShopStartC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcDakEventShopStartC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcDakEventShopStartC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcDakEventShopStartC2S::MergeFrom(const MsgNpcDakEventShopStartC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  shopid_.MergeFrom(from.shopid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcDakEventShopStartC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcDakEventShopStartC2S::CopyFrom(const MsgNpcDakEventShopStartC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcDakEventShopStartC2S::IsInitialized() const {

  return true;
}

void MsgNpcDakEventShopStartC2S::Swap(MsgNpcDakEventShopStartC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    shopid_.Swap(&other->shopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcDakEventShopStartC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcDakEventShopStartC2S_descriptor_;
  metadata.reflection = MsgNpcDakEventShopStartC2S_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
