// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgMapMgrServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgMapMgrServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgToGlientWrap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgToGlientWrap_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTransferToMapSrv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTransferToMapSrv_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTransferClientMsgToMapSrv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTransferClientMsgToMapSrv_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTransferToGameSrv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTransferToGameSrv_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTransferToMatchSrv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTransferToMatchSrv_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTransferToMailSrv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTransferToMailSrv_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTransferToAuctionSrv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTransferToAuctionSrv_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTransferToLeaderboardSrv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTransferToLeaderboardSrv_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTransferToMapSrvByMapSrvId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTransferToMapSrvByMapSrvId_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRegisterEventLockTimerToGameSrv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRegisterEventLockTimerToGameSrv_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgServerStartUpFinishS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgServerStartUpFinishS2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNotifyRemoveMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNotifyRemoveMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapServerNotAvalible_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapServerNotAvalible_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCommonNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCommonNotification_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgCommonNotification_MODE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgToMoreClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgToMoreClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMapMgrAllMapServerInfo_MGR2GS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMapMgrAllMapServerInfo_MGR2GS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRemoveCachePlayerS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRemoveCachePlayerS2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCreateMapSucMS2MGS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCreateMapSucMS2MGS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerMapBatchDBDataUnlockMGS2MS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerMapBatchDBDataUnlockMGS2MS_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgMapMgrServer_2eproto() {
  protobuf_AddDesc_MsgMapMgrServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgMapMgrServer.proto");
  GOOGLE_CHECK(file != NULL);
  MsgToGlientWrap_descriptor_ = file->message_type(0);
  static const int MsgToGlientWrap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgToGlientWrap, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgToGlientWrap, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgToGlientWrap, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgToGlientWrap, submsg_),
  };
  MsgToGlientWrap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgToGlientWrap_descriptor_,
      MsgToGlientWrap::default_instance_,
      MsgToGlientWrap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgToGlientWrap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgToGlientWrap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgToGlientWrap));
  MsgTransferToMapSrv_descriptor_ = file->message_type(1);
  static const int MsgTransferToMapSrv_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMapSrv, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMapSrv, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMapSrv, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMapSrv, transmsg_),
  };
  MsgTransferToMapSrv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTransferToMapSrv_descriptor_,
      MsgTransferToMapSrv::default_instance_,
      MsgTransferToMapSrv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMapSrv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMapSrv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTransferToMapSrv));
  MsgTransferClientMsgToMapSrv_descriptor_ = file->message_type(2);
  static const int MsgTransferClientMsgToMapSrv_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferClientMsgToMapSrv, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferClientMsgToMapSrv, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferClientMsgToMapSrv, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferClientMsgToMapSrv, transmsg_),
  };
  MsgTransferClientMsgToMapSrv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTransferClientMsgToMapSrv_descriptor_,
      MsgTransferClientMsgToMapSrv::default_instance_,
      MsgTransferClientMsgToMapSrv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferClientMsgToMapSrv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferClientMsgToMapSrv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTransferClientMsgToMapSrv));
  MsgTransferToGameSrv_descriptor_ = file->message_type(3);
  static const int MsgTransferToGameSrv_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToGameSrv, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToGameSrv, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToGameSrv, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToGameSrv, transmsg_),
  };
  MsgTransferToGameSrv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTransferToGameSrv_descriptor_,
      MsgTransferToGameSrv::default_instance_,
      MsgTransferToGameSrv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToGameSrv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToGameSrv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTransferToGameSrv));
  MsgTransferToMatchSrv_descriptor_ = file->message_type(4);
  static const int MsgTransferToMatchSrv_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMatchSrv, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMatchSrv, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMatchSrv, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMatchSrv, transmsg_),
  };
  MsgTransferToMatchSrv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTransferToMatchSrv_descriptor_,
      MsgTransferToMatchSrv::default_instance_,
      MsgTransferToMatchSrv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMatchSrv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMatchSrv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTransferToMatchSrv));
  MsgTransferToMailSrv_descriptor_ = file->message_type(5);
  static const int MsgTransferToMailSrv_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMailSrv, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMailSrv, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMailSrv, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMailSrv, transmsg_),
  };
  MsgTransferToMailSrv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTransferToMailSrv_descriptor_,
      MsgTransferToMailSrv::default_instance_,
      MsgTransferToMailSrv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMailSrv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMailSrv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTransferToMailSrv));
  MsgTransferToAuctionSrv_descriptor_ = file->message_type(6);
  static const int MsgTransferToAuctionSrv_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToAuctionSrv, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToAuctionSrv, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToAuctionSrv, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToAuctionSrv, transmsg_),
  };
  MsgTransferToAuctionSrv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTransferToAuctionSrv_descriptor_,
      MsgTransferToAuctionSrv::default_instance_,
      MsgTransferToAuctionSrv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToAuctionSrv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToAuctionSrv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTransferToAuctionSrv));
  MsgTransferToLeaderboardSrv_descriptor_ = file->message_type(7);
  static const int MsgTransferToLeaderboardSrv_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToLeaderboardSrv, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToLeaderboardSrv, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToLeaderboardSrv, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToLeaderboardSrv, transmsg_),
  };
  MsgTransferToLeaderboardSrv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTransferToLeaderboardSrv_descriptor_,
      MsgTransferToLeaderboardSrv::default_instance_,
      MsgTransferToLeaderboardSrv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToLeaderboardSrv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToLeaderboardSrv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTransferToLeaderboardSrv));
  MsgTransferToMapSrvByMapSrvId_descriptor_ = file->message_type(8);
  static const int MsgTransferToMapSrvByMapSrvId_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMapSrvByMapSrvId, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMapSrvByMapSrvId, srvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMapSrvByMapSrvId, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMapSrvByMapSrvId, transmsg_),
  };
  MsgTransferToMapSrvByMapSrvId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTransferToMapSrvByMapSrvId_descriptor_,
      MsgTransferToMapSrvByMapSrvId::default_instance_,
      MsgTransferToMapSrvByMapSrvId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMapSrvByMapSrvId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferToMapSrvByMapSrvId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTransferToMapSrvByMapSrvId));
  MsgRegisterEventLockTimerToGameSrv_descriptor_ = file->message_type(9);
  static const int MsgRegisterEventLockTimerToGameSrv_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterEventLockTimerToGameSrv, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterEventLockTimerToGameSrv, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterEventLockTimerToGameSrv, eventlocktime_),
  };
  MsgRegisterEventLockTimerToGameSrv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRegisterEventLockTimerToGameSrv_descriptor_,
      MsgRegisterEventLockTimerToGameSrv::default_instance_,
      MsgRegisterEventLockTimerToGameSrv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterEventLockTimerToGameSrv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterEventLockTimerToGameSrv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRegisterEventLockTimerToGameSrv));
  MsgServerStartUpFinishS2S_descriptor_ = file->message_type(10);
  static const int MsgServerStartUpFinishS2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerStartUpFinishS2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerStartUpFinishS2S, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerStartUpFinishS2S, serverid_),
  };
  MsgServerStartUpFinishS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgServerStartUpFinishS2S_descriptor_,
      MsgServerStartUpFinishS2S::default_instance_,
      MsgServerStartUpFinishS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerStartUpFinishS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerStartUpFinishS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgServerStartUpFinishS2S));
  MsgNotifyRemoveMap_descriptor_ = file->message_type(11);
  static const int MsgNotifyRemoveMap_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyRemoveMap, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyRemoveMap, mapuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyRemoveMap, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyRemoveMap, owner_iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyRemoveMap, map_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyRemoveMap, mapserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyRemoveMap, boss_room_),
  };
  MsgNotifyRemoveMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNotifyRemoveMap_descriptor_,
      MsgNotifyRemoveMap::default_instance_,
      MsgNotifyRemoveMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyRemoveMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyRemoveMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNotifyRemoveMap));
  MsgMapServerNotAvalible_descriptor_ = file->message_type(12);
  static const int MsgMapServerNotAvalible_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerNotAvalible, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerNotAvalible, iggid_),
  };
  MsgMapServerNotAvalible_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapServerNotAvalible_descriptor_,
      MsgMapServerNotAvalible::default_instance_,
      MsgMapServerNotAvalible_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerNotAvalible, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapServerNotAvalible, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapServerNotAvalible));
  MsgCommonNotification_descriptor_ = file->message_type(13);
  static const int MsgCommonNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommonNotification, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommonNotification, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommonNotification, param1_),
  };
  MsgCommonNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCommonNotification_descriptor_,
      MsgCommonNotification::default_instance_,
      MsgCommonNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommonNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCommonNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCommonNotification));
  MsgCommonNotification_MODE_descriptor_ = MsgCommonNotification_descriptor_->enum_type(0);
  MsgToMoreClient_descriptor_ = file->message_type(14);
  static const int MsgToMoreClient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgToMoreClient, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgToMoreClient, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgToMoreClient, submsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgToMoreClient, iggidset_),
  };
  MsgToMoreClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgToMoreClient_descriptor_,
      MsgToMoreClient::default_instance_,
      MsgToMoreClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgToMoreClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgToMoreClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgToMoreClient));
  PBServerInfo_descriptor_ = file->message_type(15);
  static const int PBServerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServerInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServerInfo, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServerInfo, listern_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServerInfo, listern_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServerInfo, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServerInfo, domain_name_),
  };
  PBServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBServerInfo_descriptor_,
      PBServerInfo::default_instance_,
      PBServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBServerInfo));
  MsgMapMgrAllMapServerInfo_MGR2GS_descriptor_ = file->message_type(16);
  static const int MsgMapMgrAllMapServerInfo_MGR2GS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapMgrAllMapServerInfo_MGR2GS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapMgrAllMapServerInfo_MGR2GS, server_info_),
  };
  MsgMapMgrAllMapServerInfo_MGR2GS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMapMgrAllMapServerInfo_MGR2GS_descriptor_,
      MsgMapMgrAllMapServerInfo_MGR2GS::default_instance_,
      MsgMapMgrAllMapServerInfo_MGR2GS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapMgrAllMapServerInfo_MGR2GS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMapMgrAllMapServerInfo_MGR2GS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMapMgrAllMapServerInfo_MGR2GS));
  MsgRemoveCachePlayerS2S_descriptor_ = file->message_type(17);
  static const int MsgRemoveCachePlayerS2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemoveCachePlayerS2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemoveCachePlayerS2S, iggid_),
  };
  MsgRemoveCachePlayerS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRemoveCachePlayerS2S_descriptor_,
      MsgRemoveCachePlayerS2S::default_instance_,
      MsgRemoveCachePlayerS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemoveCachePlayerS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemoveCachePlayerS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRemoveCachePlayerS2S));
  MsgCreateMapSucMS2MGS_descriptor_ = file->message_type(18);
  static const int MsgCreateMapSucMS2MGS_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateMapSucMS2MGS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateMapSucMS2MGS, map_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateMapSucMS2MGS, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateMapSucMS2MGS, owner_iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateMapSucMS2MGS, map_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateMapSucMS2MGS, server_id_),
  };
  MsgCreateMapSucMS2MGS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCreateMapSucMS2MGS_descriptor_,
      MsgCreateMapSucMS2MGS::default_instance_,
      MsgCreateMapSucMS2MGS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateMapSucMS2MGS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateMapSucMS2MGS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCreateMapSucMS2MGS));
  MsgPlayerMapBatchDBDataUnlockMGS2MS_descriptor_ = file->message_type(19);
  static const int MsgPlayerMapBatchDBDataUnlockMGS2MS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerMapBatchDBDataUnlockMGS2MS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerMapBatchDBDataUnlockMGS2MS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerMapBatchDBDataUnlockMGS2MS, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerMapBatchDBDataUnlockMGS2MS, party_id_),
  };
  MsgPlayerMapBatchDBDataUnlockMGS2MS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerMapBatchDBDataUnlockMGS2MS_descriptor_,
      MsgPlayerMapBatchDBDataUnlockMGS2MS::default_instance_,
      MsgPlayerMapBatchDBDataUnlockMGS2MS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerMapBatchDBDataUnlockMGS2MS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerMapBatchDBDataUnlockMGS2MS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerMapBatchDBDataUnlockMGS2MS));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgMapMgrServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgToGlientWrap_descriptor_, &MsgToGlientWrap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTransferToMapSrv_descriptor_, &MsgTransferToMapSrv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTransferClientMsgToMapSrv_descriptor_, &MsgTransferClientMsgToMapSrv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTransferToGameSrv_descriptor_, &MsgTransferToGameSrv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTransferToMatchSrv_descriptor_, &MsgTransferToMatchSrv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTransferToMailSrv_descriptor_, &MsgTransferToMailSrv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTransferToAuctionSrv_descriptor_, &MsgTransferToAuctionSrv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTransferToLeaderboardSrv_descriptor_, &MsgTransferToLeaderboardSrv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTransferToMapSrvByMapSrvId_descriptor_, &MsgTransferToMapSrvByMapSrvId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRegisterEventLockTimerToGameSrv_descriptor_, &MsgRegisterEventLockTimerToGameSrv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgServerStartUpFinishS2S_descriptor_, &MsgServerStartUpFinishS2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNotifyRemoveMap_descriptor_, &MsgNotifyRemoveMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapServerNotAvalible_descriptor_, &MsgMapServerNotAvalible::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCommonNotification_descriptor_, &MsgCommonNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgToMoreClient_descriptor_, &MsgToMoreClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBServerInfo_descriptor_, &PBServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMapMgrAllMapServerInfo_MGR2GS_descriptor_, &MsgMapMgrAllMapServerInfo_MGR2GS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRemoveCachePlayerS2S_descriptor_, &MsgRemoveCachePlayerS2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCreateMapSucMS2MGS_descriptor_, &MsgCreateMapSucMS2MGS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerMapBatchDBDataUnlockMGS2MS_descriptor_, &MsgPlayerMapBatchDBDataUnlockMGS2MS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgMapMgrServer_2eproto() {
  delete MsgToGlientWrap::default_instance_;
  delete MsgToGlientWrap_reflection_;
  delete MsgTransferToMapSrv::default_instance_;
  delete MsgTransferToMapSrv_reflection_;
  delete MsgTransferClientMsgToMapSrv::default_instance_;
  delete MsgTransferClientMsgToMapSrv_reflection_;
  delete MsgTransferToGameSrv::default_instance_;
  delete MsgTransferToGameSrv_reflection_;
  delete MsgTransferToMatchSrv::default_instance_;
  delete MsgTransferToMatchSrv_reflection_;
  delete MsgTransferToMailSrv::default_instance_;
  delete MsgTransferToMailSrv_reflection_;
  delete MsgTransferToAuctionSrv::default_instance_;
  delete MsgTransferToAuctionSrv_reflection_;
  delete MsgTransferToLeaderboardSrv::default_instance_;
  delete MsgTransferToLeaderboardSrv_reflection_;
  delete MsgTransferToMapSrvByMapSrvId::default_instance_;
  delete MsgTransferToMapSrvByMapSrvId_reflection_;
  delete MsgRegisterEventLockTimerToGameSrv::default_instance_;
  delete MsgRegisterEventLockTimerToGameSrv_reflection_;
  delete MsgServerStartUpFinishS2S::default_instance_;
  delete MsgServerStartUpFinishS2S_reflection_;
  delete MsgNotifyRemoveMap::default_instance_;
  delete MsgNotifyRemoveMap_reflection_;
  delete MsgMapServerNotAvalible::default_instance_;
  delete MsgMapServerNotAvalible_reflection_;
  delete MsgCommonNotification::default_instance_;
  delete MsgCommonNotification_reflection_;
  delete MsgToMoreClient::default_instance_;
  delete MsgToMoreClient_reflection_;
  delete PBServerInfo::default_instance_;
  delete PBServerInfo_reflection_;
  delete MsgMapMgrAllMapServerInfo_MGR2GS::default_instance_;
  delete MsgMapMgrAllMapServerInfo_MGR2GS_reflection_;
  delete MsgRemoveCachePlayerS2S::default_instance_;
  delete MsgRemoveCachePlayerS2S_reflection_;
  delete MsgCreateMapSucMS2MGS::default_instance_;
  delete MsgCreateMapSucMS2MGS_reflection_;
  delete MsgPlayerMapBatchDBDataUnlockMGS2MS::default_instance_;
  delete MsgPlayerMapBatchDBDataUnlockMGS2MS_reflection_;
}

void protobuf_AddDesc_MsgMapMgrServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025MsgMapMgrServer.proto\022\005MsgPB\032\rMsgType."
    "proto\"\214\001\n\017MsgToGlientWrap\0228\n\007msgType\030\001 \001"
    "(\0162\017.MsgPB.EMsgType:\026_MSG_MAP_TO_CLENT_W"
    "RAP\022\r\n\005iggid\030\002 \001(\003\022 \n\007subType\030\003 \001(\0162\017.Ms"
    "gPB.EMsgType\022\016\n\006subMsg\030\004 \001(\014\"\223\001\n\023MsgTran"
    "sferToMapSrv\0229\n\007msgType\030\001 \001(\0162\017.MsgPB.EM"
    "sgType:\027_MSG_TRANSFER_TO_MAPSRV\022\r\n\005iggId"
    "\030\002 \001(\003\022 \n\007subType\030\003 \001(\0162\017.MsgPB.EMsgType"
    "\022\020\n\010transMsg\030\004 \001(\014\"\246\001\n\034MsgTransferClient"
    "MsgToMapSrv\022C\n\007msgType\030\001 \001(\0162\017.MsgPB.EMs"
    "gType:!_MSG_TRANSFER_CLIENTMSG_TO_MAPSRV"
    "\022\r\n\005iggId\030\002 \001(\003\022 \n\007subType\030\003 \001(\0162\017.MsgPB"
    ".EMsgType\022\020\n\010transMsg\030\004 \001(\014\"\225\001\n\024MsgTrans"
    "ferToGameSrv\022:\n\007msgType\030\001 \001(\0162\017.MsgPB.EM"
    "sgType:\030_MSG_TRANSFER_TO_GAMESRV\022\r\n\005iggI"
    "d\030\002 \001(\003\022 \n\007subType\030\003 \001(\0162\017.MsgPB.EMsgTyp"
    "e\022\020\n\010transMsg\030\004 \001(\014\"\227\001\n\025MsgTransferToMat"
    "chSrv\022;\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:"
    "\031_MSG_TRANSFER_TO_MATCHSRV\022\r\n\005iggId\030\002 \001("
    "\003\022 \n\007subType\030\003 \001(\0162\017.MsgPB.EMsgType\022\020\n\010t"
    "ransMsg\030\004 \001(\014\"\225\001\n\024MsgTransferToMailSrv\022:"
    "\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\030_MSG_T"
    "RANSFER_TO_MAILSRV\022\r\n\005iggId\030\002 \001(\003\022 \n\007sub"
    "Type\030\003 \001(\0162\017.MsgPB.EMsgType\022\020\n\010transMsg\030"
    "\004 \001(\014\"\233\001\n\027MsgTransferToAuctionSrv\022=\n\007msg"
    "Type\030\001 \001(\0162\017.MsgPB.EMsgType:\033_MSG_TRANSF"
    "ER_TO_AUCTIONSRV\022\r\n\005iggId\030\002 \001(\003\022 \n\007subTy"
    "pe\030\003 \001(\0162\017.MsgPB.EMsgType\022\020\n\010transMsg\030\004 "
    "\001(\014\"\243\001\n\033MsgTransferToLeaderboardSrv\022A\n\007m"
    "sgType\030\001 \001(\0162\017.MsgPB.EMsgType:\037_MSG_TRAN"
    "SFER_TO_LEADERBOARDSRV\022\r\n\005iggId\030\002 \001(\003\022 \n"
    "\007subType\030\003 \001(\0162\017.MsgPB.EMsgType\022\020\n\010trans"
    "Msg\030\004 \001(\014\"\251\001\n\035MsgTransferToMapSrvByMapSr"
    "vId\022E\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:#_"
    "MSG_TRANSFER_TO_MAPSRV_BY_MAPSRVID\022\r\n\005sr"
    "vid\030\002 \001(\005\022 \n\007subType\030\003 \001(\0162\017.MsgPB.EMsgT"
    "ype\022\020\n\010transMsg\030\004 \001(\014\"\252\001\n\"MsgRegisterEve"
    "ntLockTimerToGameSrv\022K\n\007msgType\030\001 \001(\0162\017."
    "MsgPB.EMsgType:)_MSG_REGISTER_EVENT_LOCK"
    "_TIMER_TO_GAMESRV\022 \n\007subType\030\002 \001(\0162\017.Msg"
    "PB.EMsgType\022\025\n\reventLockTime\030\003 \001(\003\"\204\001\n\031M"
    "sgServerStartUpFinishS2S\022A\n\007msgType\030\001 \001("
    "\0162\017.MsgPB.EMsgType:\037_MSG_SERVER_START_UP"
    "_FINISH_S2S\022\022\n\nserverType\030\002 \001(\005\022\020\n\010serve"
    "rId\030\003 \001(\005\"\305\001\n\022MsgNotifyRemoveMap\022\?\n\007msgT"
    "ype\030\001 \001(\0162\017.MsgPB.EMsgType:\035_MSG_NOTIFY_"
    "REMOVE_MAP_MS2MMS\022\017\n\007mapuuid\030\002 \001(\003\022\016\n\006ma"
    "p_id\030\003 \001(\005\022\023\n\013owner_iggid\030\004 \001(\003\022\020\n\010map_t"
    "ype\030\005 \001(\005\022\023\n\013mapserverid\030\006 \001(\005\022\021\n\tboss_r"
    "oom\030\007 \001(\005\"g\n\027MsgMapServerNotAvalible\022=\n\007"
    "msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\033_MSG_MAP"
    "SERVER_NOT_AVALIBLE\022\r\n\005iggId\030\002 \001(\003\"\364\001\n\025M"
    "sgCommonNotification\022;\n\007msgType\030\001 \001(\0162\017."
    "MsgPB.EMsgType:\031_MSG_COMMAON_NOTIFICATIO"
    "N\022/\n\004mode\030\002 \001(\0162!.MsgPB.MsgCommonNotific"
    "ation.MODE\022\016\n\006param1\030\003 \001(\005\"]\n\004MODE\022\033\n\027SE"
    "RVER_NOT_YET_START_UP\020\000\022\026\n\022SERVER_IS_SHU"
    "TDOWN\020\001\022\022\n\016TOO_FREQUENTLY\020\002\022\014\n\010NOT_OPEN\020"
    "\003\"\217\001\n\017MsgToMoreClient\0228\n\007msgType\030\001 \001(\0162\017"
    ".MsgPB.EMsgType:\026_MSG_MAP_TO_MORE_CLENT\022"
    " \n\007subType\030\002 \001(\0162\017.MsgPB.EMsgType\022\016\n\006sub"
    "Msg\030\003 \001(\014\022\020\n\010iggidSet\030\004 \003(\003\"\206\001\n\014PBServer"
    "Info\022\021\n\tserver_id\030\001 \001(\005\022\023\n\013server_type\030\002"
    " \001(\005\022\022\n\nlistern_ip\030\003 \001(\t\022\024\n\014listern_port"
    "\030\004 \001(\005\022\017\n\007area_id\030\005 \001(\005\022\023\n\013domain_name\030\006"
    " \001(\t\"\225\001\n MsgMapMgrAllMapServerInfo_MGR2G"
    "S\022G\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:%_MS"
    "G_MAPMGR_ALL_MAPSERVER_INFO_MGR2GS\022(\n\013se"
    "rver_info\030\002 \003(\0132\023.MsgPB.PBServerInfo\"h\n\027"
    "MsgRemoveCachePlayerS2S\022>\n\007msgType\030\001 \001(\016"
    "2\017.MsgPB.EMsgType:\034_MSG_REMOVE_CACHE_PLA"
    "YER_S2S\022\r\n\005iggid\030\002 \001(\003\"\265\001\n\025MsgCreateMapS"
    "ucMS2MGS\022<\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTy"
    "pe:\032_MSG_CREATE_MAP_SUC_MS2MGS\022\020\n\010map_uu"
    "id\030\002 \001(\003\022\016\n\006map_id\030\003 \001(\005\022\023\n\013owner_iggid\030"
    "\004 \001(\003\022\020\n\010map_type\030\005 \001(\005\022\025\n\tserver_id\030\006 \001"
    "(\005:\002-1\"\250\001\n#MsgPlayerMapBatchDBDataUnlock"
    "MGS2MS\022L\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType"
    ":*_MSG_PLAYER_MAP_BATCH_DB_DATA_UNLOCK_B"
    "Y_GM\022\r\n\005iggid\030\002 \001(\003\022\016\n\006map_id\030\003 \001(\005\022\024\n\010p"
    "arty_id\030\004 \001(\003:\002-1", 3217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgMapMgrServer.proto", &protobuf_RegisterTypes);
  MsgToGlientWrap::default_instance_ = new MsgToGlientWrap();
  MsgTransferToMapSrv::default_instance_ = new MsgTransferToMapSrv();
  MsgTransferClientMsgToMapSrv::default_instance_ = new MsgTransferClientMsgToMapSrv();
  MsgTransferToGameSrv::default_instance_ = new MsgTransferToGameSrv();
  MsgTransferToMatchSrv::default_instance_ = new MsgTransferToMatchSrv();
  MsgTransferToMailSrv::default_instance_ = new MsgTransferToMailSrv();
  MsgTransferToAuctionSrv::default_instance_ = new MsgTransferToAuctionSrv();
  MsgTransferToLeaderboardSrv::default_instance_ = new MsgTransferToLeaderboardSrv();
  MsgTransferToMapSrvByMapSrvId::default_instance_ = new MsgTransferToMapSrvByMapSrvId();
  MsgRegisterEventLockTimerToGameSrv::default_instance_ = new MsgRegisterEventLockTimerToGameSrv();
  MsgServerStartUpFinishS2S::default_instance_ = new MsgServerStartUpFinishS2S();
  MsgNotifyRemoveMap::default_instance_ = new MsgNotifyRemoveMap();
  MsgMapServerNotAvalible::default_instance_ = new MsgMapServerNotAvalible();
  MsgCommonNotification::default_instance_ = new MsgCommonNotification();
  MsgToMoreClient::default_instance_ = new MsgToMoreClient();
  PBServerInfo::default_instance_ = new PBServerInfo();
  MsgMapMgrAllMapServerInfo_MGR2GS::default_instance_ = new MsgMapMgrAllMapServerInfo_MGR2GS();
  MsgRemoveCachePlayerS2S::default_instance_ = new MsgRemoveCachePlayerS2S();
  MsgCreateMapSucMS2MGS::default_instance_ = new MsgCreateMapSucMS2MGS();
  MsgPlayerMapBatchDBDataUnlockMGS2MS::default_instance_ = new MsgPlayerMapBatchDBDataUnlockMGS2MS();
  MsgToGlientWrap::default_instance_->InitAsDefaultInstance();
  MsgTransferToMapSrv::default_instance_->InitAsDefaultInstance();
  MsgTransferClientMsgToMapSrv::default_instance_->InitAsDefaultInstance();
  MsgTransferToGameSrv::default_instance_->InitAsDefaultInstance();
  MsgTransferToMatchSrv::default_instance_->InitAsDefaultInstance();
  MsgTransferToMailSrv::default_instance_->InitAsDefaultInstance();
  MsgTransferToAuctionSrv::default_instance_->InitAsDefaultInstance();
  MsgTransferToLeaderboardSrv::default_instance_->InitAsDefaultInstance();
  MsgTransferToMapSrvByMapSrvId::default_instance_->InitAsDefaultInstance();
  MsgRegisterEventLockTimerToGameSrv::default_instance_->InitAsDefaultInstance();
  MsgServerStartUpFinishS2S::default_instance_->InitAsDefaultInstance();
  MsgNotifyRemoveMap::default_instance_->InitAsDefaultInstance();
  MsgMapServerNotAvalible::default_instance_->InitAsDefaultInstance();
  MsgCommonNotification::default_instance_->InitAsDefaultInstance();
  MsgToMoreClient::default_instance_->InitAsDefaultInstance();
  PBServerInfo::default_instance_->InitAsDefaultInstance();
  MsgMapMgrAllMapServerInfo_MGR2GS::default_instance_->InitAsDefaultInstance();
  MsgRemoveCachePlayerS2S::default_instance_->InitAsDefaultInstance();
  MsgCreateMapSucMS2MGS::default_instance_->InitAsDefaultInstance();
  MsgPlayerMapBatchDBDataUnlockMGS2MS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgMapMgrServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgMapMgrServer_2eproto {
  StaticDescriptorInitializer_MsgMapMgrServer_2eproto() {
    protobuf_AddDesc_MsgMapMgrServer_2eproto();
  }
} static_descriptor_initializer_MsgMapMgrServer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgToGlientWrap::kMsgTypeFieldNumber;
const int MsgToGlientWrap::kIggidFieldNumber;
const int MsgToGlientWrap::kSubTypeFieldNumber;
const int MsgToGlientWrap::kSubMsgFieldNumber;
#endif  // !_MSC_VER

MsgToGlientWrap::MsgToGlientWrap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgToGlientWrap)
}

void MsgToGlientWrap::InitAsDefaultInstance() {
}

MsgToGlientWrap::MsgToGlientWrap(const MsgToGlientWrap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgToGlientWrap)
}

void MsgToGlientWrap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1114;
  iggid_ = GOOGLE_LONGLONG(0);
  subtype_ = 0;
  submsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgToGlientWrap::~MsgToGlientWrap() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgToGlientWrap)
  SharedDtor();
}

void MsgToGlientWrap::SharedDtor() {
  if (submsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete submsg_;
  }
  if (this != default_instance_) {
  }
}

void MsgToGlientWrap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgToGlientWrap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgToGlientWrap_descriptor_;
}

const MsgToGlientWrap& MsgToGlientWrap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgToGlientWrap* MsgToGlientWrap::default_instance_ = NULL;

MsgToGlientWrap* MsgToGlientWrap::New() const {
  return new MsgToGlientWrap;
}

void MsgToGlientWrap::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 1114;
    iggid_ = GOOGLE_LONGLONG(0);
    subtype_ = 0;
    if (has_submsg()) {
      if (submsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        submsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgToGlientWrap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgToGlientWrap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_TO_CLENT_WRAP];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subType;
        break;
      }

      // optional .MsgPB.EMsgType subType = 3;
      case 3: {
        if (tag == 24) {
         parse_subType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_subtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_subMsg;
        break;
      }

      // optional bytes subMsg = 4;
      case 4: {
        if (tag == 34) {
         parse_subMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_submsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgToGlientWrap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgToGlientWrap)
  return false;
#undef DO_
}

void MsgToGlientWrap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgToGlientWrap)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_TO_CLENT_WRAP];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subtype(), output);
  }

  // optional bytes subMsg = 4;
  if (has_submsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->submsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgToGlientWrap)
}

::google::protobuf::uint8* MsgToGlientWrap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgToGlientWrap)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_TO_CLENT_WRAP];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subtype(), target);
  }

  // optional bytes subMsg = 4;
  if (has_submsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->submsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgToGlientWrap)
  return target;
}

int MsgToGlientWrap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_TO_CLENT_WRAP];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.EMsgType subType = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

    // optional bytes subMsg = 4;
    if (has_submsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->submsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgToGlientWrap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgToGlientWrap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgToGlientWrap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgToGlientWrap::MergeFrom(const MsgToGlientWrap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_submsg()) {
      set_submsg(from.submsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgToGlientWrap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgToGlientWrap::CopyFrom(const MsgToGlientWrap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgToGlientWrap::IsInitialized() const {

  return true;
}

void MsgToGlientWrap::Swap(MsgToGlientWrap* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(subtype_, other->subtype_);
    std::swap(submsg_, other->submsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgToGlientWrap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgToGlientWrap_descriptor_;
  metadata.reflection = MsgToGlientWrap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTransferToMapSrv::kMsgTypeFieldNumber;
const int MsgTransferToMapSrv::kIggIdFieldNumber;
const int MsgTransferToMapSrv::kSubTypeFieldNumber;
const int MsgTransferToMapSrv::kTransMsgFieldNumber;
#endif  // !_MSC_VER

MsgTransferToMapSrv::MsgTransferToMapSrv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTransferToMapSrv)
}

void MsgTransferToMapSrv::InitAsDefaultInstance() {
}

MsgTransferToMapSrv::MsgTransferToMapSrv(const MsgTransferToMapSrv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTransferToMapSrv)
}

void MsgTransferToMapSrv::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1052;
  iggid_ = GOOGLE_LONGLONG(0);
  subtype_ = 0;
  transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTransferToMapSrv::~MsgTransferToMapSrv() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTransferToMapSrv)
  SharedDtor();
}

void MsgTransferToMapSrv::SharedDtor() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (this != default_instance_) {
  }
}

void MsgTransferToMapSrv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTransferToMapSrv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTransferToMapSrv_descriptor_;
}

const MsgTransferToMapSrv& MsgTransferToMapSrv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgTransferToMapSrv* MsgTransferToMapSrv::default_instance_ = NULL;

MsgTransferToMapSrv* MsgTransferToMapSrv::New() const {
  return new MsgTransferToMapSrv;
}

void MsgTransferToMapSrv::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 1052;
    iggid_ = GOOGLE_LONGLONG(0);
    subtype_ = 0;
    if (has_transmsg()) {
      if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        transmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTransferToMapSrv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTransferToMapSrv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAPSRV];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggId;
        break;
      }

      // optional int64 iggId = 2;
      case 2: {
        if (tag == 16) {
         parse_iggId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subType;
        break;
      }

      // optional .MsgPB.EMsgType subType = 3;
      case 3: {
        if (tag == 24) {
         parse_subType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_subtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transMsg;
        break;
      }

      // optional bytes transMsg = 4;
      case 4: {
        if (tag == 34) {
         parse_transMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTransferToMapSrv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTransferToMapSrv)
  return false;
#undef DO_
}

void MsgTransferToMapSrv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTransferToMapSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAPSRV];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subtype(), output);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->transmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTransferToMapSrv)
}

::google::protobuf::uint8* MsgTransferToMapSrv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTransferToMapSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAPSRV];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subtype(), target);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->transmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTransferToMapSrv)
  return target;
}

int MsgTransferToMapSrv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAPSRV];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggId = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.EMsgType subType = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

    // optional bytes transMsg = 4;
    if (has_transmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTransferToMapSrv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTransferToMapSrv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTransferToMapSrv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTransferToMapSrv::MergeFrom(const MsgTransferToMapSrv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_transmsg()) {
      set_transmsg(from.transmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTransferToMapSrv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferToMapSrv::CopyFrom(const MsgTransferToMapSrv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferToMapSrv::IsInitialized() const {

  return true;
}

void MsgTransferToMapSrv::Swap(MsgTransferToMapSrv* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(subtype_, other->subtype_);
    std::swap(transmsg_, other->transmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTransferToMapSrv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTransferToMapSrv_descriptor_;
  metadata.reflection = MsgTransferToMapSrv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTransferClientMsgToMapSrv::kMsgTypeFieldNumber;
const int MsgTransferClientMsgToMapSrv::kIggIdFieldNumber;
const int MsgTransferClientMsgToMapSrv::kSubTypeFieldNumber;
const int MsgTransferClientMsgToMapSrv::kTransMsgFieldNumber;
#endif  // !_MSC_VER

MsgTransferClientMsgToMapSrv::MsgTransferClientMsgToMapSrv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTransferClientMsgToMapSrv)
}

void MsgTransferClientMsgToMapSrv::InitAsDefaultInstance() {
}

MsgTransferClientMsgToMapSrv::MsgTransferClientMsgToMapSrv(const MsgTransferClientMsgToMapSrv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTransferClientMsgToMapSrv)
}

void MsgTransferClientMsgToMapSrv::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1049;
  iggid_ = GOOGLE_LONGLONG(0);
  subtype_ = 0;
  transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTransferClientMsgToMapSrv::~MsgTransferClientMsgToMapSrv() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTransferClientMsgToMapSrv)
  SharedDtor();
}

void MsgTransferClientMsgToMapSrv::SharedDtor() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (this != default_instance_) {
  }
}

void MsgTransferClientMsgToMapSrv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTransferClientMsgToMapSrv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTransferClientMsgToMapSrv_descriptor_;
}

const MsgTransferClientMsgToMapSrv& MsgTransferClientMsgToMapSrv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgTransferClientMsgToMapSrv* MsgTransferClientMsgToMapSrv::default_instance_ = NULL;

MsgTransferClientMsgToMapSrv* MsgTransferClientMsgToMapSrv::New() const {
  return new MsgTransferClientMsgToMapSrv;
}

void MsgTransferClientMsgToMapSrv::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 1049;
    iggid_ = GOOGLE_LONGLONG(0);
    subtype_ = 0;
    if (has_transmsg()) {
      if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        transmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTransferClientMsgToMapSrv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTransferClientMsgToMapSrv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_CLIENTMSG_TO_MAPSRV];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggId;
        break;
      }

      // optional int64 iggId = 2;
      case 2: {
        if (tag == 16) {
         parse_iggId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subType;
        break;
      }

      // optional .MsgPB.EMsgType subType = 3;
      case 3: {
        if (tag == 24) {
         parse_subType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_subtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transMsg;
        break;
      }

      // optional bytes transMsg = 4;
      case 4: {
        if (tag == 34) {
         parse_transMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTransferClientMsgToMapSrv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTransferClientMsgToMapSrv)
  return false;
#undef DO_
}

void MsgTransferClientMsgToMapSrv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTransferClientMsgToMapSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_CLIENTMSG_TO_MAPSRV];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subtype(), output);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->transmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTransferClientMsgToMapSrv)
}

::google::protobuf::uint8* MsgTransferClientMsgToMapSrv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTransferClientMsgToMapSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_CLIENTMSG_TO_MAPSRV];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subtype(), target);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->transmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTransferClientMsgToMapSrv)
  return target;
}

int MsgTransferClientMsgToMapSrv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_CLIENTMSG_TO_MAPSRV];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggId = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.EMsgType subType = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

    // optional bytes transMsg = 4;
    if (has_transmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTransferClientMsgToMapSrv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTransferClientMsgToMapSrv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTransferClientMsgToMapSrv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTransferClientMsgToMapSrv::MergeFrom(const MsgTransferClientMsgToMapSrv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_transmsg()) {
      set_transmsg(from.transmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTransferClientMsgToMapSrv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferClientMsgToMapSrv::CopyFrom(const MsgTransferClientMsgToMapSrv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferClientMsgToMapSrv::IsInitialized() const {

  return true;
}

void MsgTransferClientMsgToMapSrv::Swap(MsgTransferClientMsgToMapSrv* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(subtype_, other->subtype_);
    std::swap(transmsg_, other->transmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTransferClientMsgToMapSrv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTransferClientMsgToMapSrv_descriptor_;
  metadata.reflection = MsgTransferClientMsgToMapSrv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTransferToGameSrv::kMsgTypeFieldNumber;
const int MsgTransferToGameSrv::kIggIdFieldNumber;
const int MsgTransferToGameSrv::kSubTypeFieldNumber;
const int MsgTransferToGameSrv::kTransMsgFieldNumber;
#endif  // !_MSC_VER

MsgTransferToGameSrv::MsgTransferToGameSrv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTransferToGameSrv)
}

void MsgTransferToGameSrv::InitAsDefaultInstance() {
}

MsgTransferToGameSrv::MsgTransferToGameSrv(const MsgTransferToGameSrv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTransferToGameSrv)
}

void MsgTransferToGameSrv::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1053;
  iggid_ = GOOGLE_LONGLONG(0);
  subtype_ = 0;
  transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTransferToGameSrv::~MsgTransferToGameSrv() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTransferToGameSrv)
  SharedDtor();
}

void MsgTransferToGameSrv::SharedDtor() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (this != default_instance_) {
  }
}

void MsgTransferToGameSrv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTransferToGameSrv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTransferToGameSrv_descriptor_;
}

const MsgTransferToGameSrv& MsgTransferToGameSrv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgTransferToGameSrv* MsgTransferToGameSrv::default_instance_ = NULL;

MsgTransferToGameSrv* MsgTransferToGameSrv::New() const {
  return new MsgTransferToGameSrv;
}

void MsgTransferToGameSrv::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 1053;
    iggid_ = GOOGLE_LONGLONG(0);
    subtype_ = 0;
    if (has_transmsg()) {
      if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        transmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTransferToGameSrv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTransferToGameSrv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_GAMESRV];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggId;
        break;
      }

      // optional int64 iggId = 2;
      case 2: {
        if (tag == 16) {
         parse_iggId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subType;
        break;
      }

      // optional .MsgPB.EMsgType subType = 3;
      case 3: {
        if (tag == 24) {
         parse_subType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_subtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transMsg;
        break;
      }

      // optional bytes transMsg = 4;
      case 4: {
        if (tag == 34) {
         parse_transMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTransferToGameSrv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTransferToGameSrv)
  return false;
#undef DO_
}

void MsgTransferToGameSrv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTransferToGameSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_GAMESRV];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subtype(), output);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->transmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTransferToGameSrv)
}

::google::protobuf::uint8* MsgTransferToGameSrv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTransferToGameSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_GAMESRV];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subtype(), target);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->transmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTransferToGameSrv)
  return target;
}

int MsgTransferToGameSrv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_GAMESRV];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggId = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.EMsgType subType = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

    // optional bytes transMsg = 4;
    if (has_transmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTransferToGameSrv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTransferToGameSrv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTransferToGameSrv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTransferToGameSrv::MergeFrom(const MsgTransferToGameSrv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_transmsg()) {
      set_transmsg(from.transmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTransferToGameSrv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferToGameSrv::CopyFrom(const MsgTransferToGameSrv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferToGameSrv::IsInitialized() const {

  return true;
}

void MsgTransferToGameSrv::Swap(MsgTransferToGameSrv* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(subtype_, other->subtype_);
    std::swap(transmsg_, other->transmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTransferToGameSrv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTransferToGameSrv_descriptor_;
  metadata.reflection = MsgTransferToGameSrv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTransferToMatchSrv::kMsgTypeFieldNumber;
const int MsgTransferToMatchSrv::kIggIdFieldNumber;
const int MsgTransferToMatchSrv::kSubTypeFieldNumber;
const int MsgTransferToMatchSrv::kTransMsgFieldNumber;
#endif  // !_MSC_VER

MsgTransferToMatchSrv::MsgTransferToMatchSrv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTransferToMatchSrv)
}

void MsgTransferToMatchSrv::InitAsDefaultInstance() {
}

MsgTransferToMatchSrv::MsgTransferToMatchSrv(const MsgTransferToMatchSrv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTransferToMatchSrv)
}

void MsgTransferToMatchSrv::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1055;
  iggid_ = GOOGLE_LONGLONG(0);
  subtype_ = 0;
  transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTransferToMatchSrv::~MsgTransferToMatchSrv() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTransferToMatchSrv)
  SharedDtor();
}

void MsgTransferToMatchSrv::SharedDtor() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (this != default_instance_) {
  }
}

void MsgTransferToMatchSrv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTransferToMatchSrv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTransferToMatchSrv_descriptor_;
}

const MsgTransferToMatchSrv& MsgTransferToMatchSrv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgTransferToMatchSrv* MsgTransferToMatchSrv::default_instance_ = NULL;

MsgTransferToMatchSrv* MsgTransferToMatchSrv::New() const {
  return new MsgTransferToMatchSrv;
}

void MsgTransferToMatchSrv::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 1055;
    iggid_ = GOOGLE_LONGLONG(0);
    subtype_ = 0;
    if (has_transmsg()) {
      if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        transmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTransferToMatchSrv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTransferToMatchSrv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MATCHSRV];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggId;
        break;
      }

      // optional int64 iggId = 2;
      case 2: {
        if (tag == 16) {
         parse_iggId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subType;
        break;
      }

      // optional .MsgPB.EMsgType subType = 3;
      case 3: {
        if (tag == 24) {
         parse_subType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_subtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transMsg;
        break;
      }

      // optional bytes transMsg = 4;
      case 4: {
        if (tag == 34) {
         parse_transMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTransferToMatchSrv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTransferToMatchSrv)
  return false;
#undef DO_
}

void MsgTransferToMatchSrv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTransferToMatchSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MATCHSRV];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subtype(), output);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->transmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTransferToMatchSrv)
}

::google::protobuf::uint8* MsgTransferToMatchSrv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTransferToMatchSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MATCHSRV];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subtype(), target);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->transmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTransferToMatchSrv)
  return target;
}

int MsgTransferToMatchSrv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MATCHSRV];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggId = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.EMsgType subType = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

    // optional bytes transMsg = 4;
    if (has_transmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTransferToMatchSrv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTransferToMatchSrv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTransferToMatchSrv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTransferToMatchSrv::MergeFrom(const MsgTransferToMatchSrv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_transmsg()) {
      set_transmsg(from.transmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTransferToMatchSrv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferToMatchSrv::CopyFrom(const MsgTransferToMatchSrv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferToMatchSrv::IsInitialized() const {

  return true;
}

void MsgTransferToMatchSrv::Swap(MsgTransferToMatchSrv* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(subtype_, other->subtype_);
    std::swap(transmsg_, other->transmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTransferToMatchSrv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTransferToMatchSrv_descriptor_;
  metadata.reflection = MsgTransferToMatchSrv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTransferToMailSrv::kMsgTypeFieldNumber;
const int MsgTransferToMailSrv::kIggIdFieldNumber;
const int MsgTransferToMailSrv::kSubTypeFieldNumber;
const int MsgTransferToMailSrv::kTransMsgFieldNumber;
#endif  // !_MSC_VER

MsgTransferToMailSrv::MsgTransferToMailSrv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTransferToMailSrv)
}

void MsgTransferToMailSrv::InitAsDefaultInstance() {
}

MsgTransferToMailSrv::MsgTransferToMailSrv(const MsgTransferToMailSrv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTransferToMailSrv)
}

void MsgTransferToMailSrv::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1057;
  iggid_ = GOOGLE_LONGLONG(0);
  subtype_ = 0;
  transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTransferToMailSrv::~MsgTransferToMailSrv() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTransferToMailSrv)
  SharedDtor();
}

void MsgTransferToMailSrv::SharedDtor() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (this != default_instance_) {
  }
}

void MsgTransferToMailSrv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTransferToMailSrv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTransferToMailSrv_descriptor_;
}

const MsgTransferToMailSrv& MsgTransferToMailSrv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgTransferToMailSrv* MsgTransferToMailSrv::default_instance_ = NULL;

MsgTransferToMailSrv* MsgTransferToMailSrv::New() const {
  return new MsgTransferToMailSrv;
}

void MsgTransferToMailSrv::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 1057;
    iggid_ = GOOGLE_LONGLONG(0);
    subtype_ = 0;
    if (has_transmsg()) {
      if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        transmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTransferToMailSrv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTransferToMailSrv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAILSRV];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggId;
        break;
      }

      // optional int64 iggId = 2;
      case 2: {
        if (tag == 16) {
         parse_iggId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subType;
        break;
      }

      // optional .MsgPB.EMsgType subType = 3;
      case 3: {
        if (tag == 24) {
         parse_subType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_subtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transMsg;
        break;
      }

      // optional bytes transMsg = 4;
      case 4: {
        if (tag == 34) {
         parse_transMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTransferToMailSrv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTransferToMailSrv)
  return false;
#undef DO_
}

void MsgTransferToMailSrv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTransferToMailSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAILSRV];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subtype(), output);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->transmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTransferToMailSrv)
}

::google::protobuf::uint8* MsgTransferToMailSrv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTransferToMailSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAILSRV];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subtype(), target);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->transmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTransferToMailSrv)
  return target;
}

int MsgTransferToMailSrv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAILSRV];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggId = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.EMsgType subType = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

    // optional bytes transMsg = 4;
    if (has_transmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTransferToMailSrv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTransferToMailSrv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTransferToMailSrv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTransferToMailSrv::MergeFrom(const MsgTransferToMailSrv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_transmsg()) {
      set_transmsg(from.transmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTransferToMailSrv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferToMailSrv::CopyFrom(const MsgTransferToMailSrv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferToMailSrv::IsInitialized() const {

  return true;
}

void MsgTransferToMailSrv::Swap(MsgTransferToMailSrv* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(subtype_, other->subtype_);
    std::swap(transmsg_, other->transmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTransferToMailSrv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTransferToMailSrv_descriptor_;
  metadata.reflection = MsgTransferToMailSrv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTransferToAuctionSrv::kMsgTypeFieldNumber;
const int MsgTransferToAuctionSrv::kIggIdFieldNumber;
const int MsgTransferToAuctionSrv::kSubTypeFieldNumber;
const int MsgTransferToAuctionSrv::kTransMsgFieldNumber;
#endif  // !_MSC_VER

MsgTransferToAuctionSrv::MsgTransferToAuctionSrv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTransferToAuctionSrv)
}

void MsgTransferToAuctionSrv::InitAsDefaultInstance() {
}

MsgTransferToAuctionSrv::MsgTransferToAuctionSrv(const MsgTransferToAuctionSrv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTransferToAuctionSrv)
}

void MsgTransferToAuctionSrv::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1058;
  iggid_ = GOOGLE_LONGLONG(0);
  subtype_ = 0;
  transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTransferToAuctionSrv::~MsgTransferToAuctionSrv() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTransferToAuctionSrv)
  SharedDtor();
}

void MsgTransferToAuctionSrv::SharedDtor() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (this != default_instance_) {
  }
}

void MsgTransferToAuctionSrv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTransferToAuctionSrv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTransferToAuctionSrv_descriptor_;
}

const MsgTransferToAuctionSrv& MsgTransferToAuctionSrv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgTransferToAuctionSrv* MsgTransferToAuctionSrv::default_instance_ = NULL;

MsgTransferToAuctionSrv* MsgTransferToAuctionSrv::New() const {
  return new MsgTransferToAuctionSrv;
}

void MsgTransferToAuctionSrv::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 1058;
    iggid_ = GOOGLE_LONGLONG(0);
    subtype_ = 0;
    if (has_transmsg()) {
      if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        transmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTransferToAuctionSrv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTransferToAuctionSrv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_AUCTIONSRV];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggId;
        break;
      }

      // optional int64 iggId = 2;
      case 2: {
        if (tag == 16) {
         parse_iggId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subType;
        break;
      }

      // optional .MsgPB.EMsgType subType = 3;
      case 3: {
        if (tag == 24) {
         parse_subType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_subtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transMsg;
        break;
      }

      // optional bytes transMsg = 4;
      case 4: {
        if (tag == 34) {
         parse_transMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTransferToAuctionSrv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTransferToAuctionSrv)
  return false;
#undef DO_
}

void MsgTransferToAuctionSrv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTransferToAuctionSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_AUCTIONSRV];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subtype(), output);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->transmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTransferToAuctionSrv)
}

::google::protobuf::uint8* MsgTransferToAuctionSrv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTransferToAuctionSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_AUCTIONSRV];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subtype(), target);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->transmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTransferToAuctionSrv)
  return target;
}

int MsgTransferToAuctionSrv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_AUCTIONSRV];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggId = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.EMsgType subType = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

    // optional bytes transMsg = 4;
    if (has_transmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTransferToAuctionSrv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTransferToAuctionSrv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTransferToAuctionSrv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTransferToAuctionSrv::MergeFrom(const MsgTransferToAuctionSrv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_transmsg()) {
      set_transmsg(from.transmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTransferToAuctionSrv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferToAuctionSrv::CopyFrom(const MsgTransferToAuctionSrv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferToAuctionSrv::IsInitialized() const {

  return true;
}

void MsgTransferToAuctionSrv::Swap(MsgTransferToAuctionSrv* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(subtype_, other->subtype_);
    std::swap(transmsg_, other->transmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTransferToAuctionSrv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTransferToAuctionSrv_descriptor_;
  metadata.reflection = MsgTransferToAuctionSrv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTransferToLeaderboardSrv::kMsgTypeFieldNumber;
const int MsgTransferToLeaderboardSrv::kIggIdFieldNumber;
const int MsgTransferToLeaderboardSrv::kSubTypeFieldNumber;
const int MsgTransferToLeaderboardSrv::kTransMsgFieldNumber;
#endif  // !_MSC_VER

MsgTransferToLeaderboardSrv::MsgTransferToLeaderboardSrv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTransferToLeaderboardSrv)
}

void MsgTransferToLeaderboardSrv::InitAsDefaultInstance() {
}

MsgTransferToLeaderboardSrv::MsgTransferToLeaderboardSrv(const MsgTransferToLeaderboardSrv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTransferToLeaderboardSrv)
}

void MsgTransferToLeaderboardSrv::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1048;
  iggid_ = GOOGLE_LONGLONG(0);
  subtype_ = 0;
  transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTransferToLeaderboardSrv::~MsgTransferToLeaderboardSrv() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTransferToLeaderboardSrv)
  SharedDtor();
}

void MsgTransferToLeaderboardSrv::SharedDtor() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (this != default_instance_) {
  }
}

void MsgTransferToLeaderboardSrv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTransferToLeaderboardSrv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTransferToLeaderboardSrv_descriptor_;
}

const MsgTransferToLeaderboardSrv& MsgTransferToLeaderboardSrv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgTransferToLeaderboardSrv* MsgTransferToLeaderboardSrv::default_instance_ = NULL;

MsgTransferToLeaderboardSrv* MsgTransferToLeaderboardSrv::New() const {
  return new MsgTransferToLeaderboardSrv;
}

void MsgTransferToLeaderboardSrv::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 1048;
    iggid_ = GOOGLE_LONGLONG(0);
    subtype_ = 0;
    if (has_transmsg()) {
      if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        transmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTransferToLeaderboardSrv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTransferToLeaderboardSrv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_LEADERBOARDSRV];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggId;
        break;
      }

      // optional int64 iggId = 2;
      case 2: {
        if (tag == 16) {
         parse_iggId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subType;
        break;
      }

      // optional .MsgPB.EMsgType subType = 3;
      case 3: {
        if (tag == 24) {
         parse_subType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_subtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transMsg;
        break;
      }

      // optional bytes transMsg = 4;
      case 4: {
        if (tag == 34) {
         parse_transMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTransferToLeaderboardSrv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTransferToLeaderboardSrv)
  return false;
#undef DO_
}

void MsgTransferToLeaderboardSrv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTransferToLeaderboardSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_LEADERBOARDSRV];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subtype(), output);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->transmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTransferToLeaderboardSrv)
}

::google::protobuf::uint8* MsgTransferToLeaderboardSrv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTransferToLeaderboardSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_LEADERBOARDSRV];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subtype(), target);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->transmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTransferToLeaderboardSrv)
  return target;
}

int MsgTransferToLeaderboardSrv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_LEADERBOARDSRV];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggId = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.EMsgType subType = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

    // optional bytes transMsg = 4;
    if (has_transmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTransferToLeaderboardSrv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTransferToLeaderboardSrv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTransferToLeaderboardSrv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTransferToLeaderboardSrv::MergeFrom(const MsgTransferToLeaderboardSrv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_transmsg()) {
      set_transmsg(from.transmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTransferToLeaderboardSrv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferToLeaderboardSrv::CopyFrom(const MsgTransferToLeaderboardSrv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferToLeaderboardSrv::IsInitialized() const {

  return true;
}

void MsgTransferToLeaderboardSrv::Swap(MsgTransferToLeaderboardSrv* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(subtype_, other->subtype_);
    std::swap(transmsg_, other->transmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTransferToLeaderboardSrv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTransferToLeaderboardSrv_descriptor_;
  metadata.reflection = MsgTransferToLeaderboardSrv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTransferToMapSrvByMapSrvId::kMsgTypeFieldNumber;
const int MsgTransferToMapSrvByMapSrvId::kSrvidFieldNumber;
const int MsgTransferToMapSrvByMapSrvId::kSubTypeFieldNumber;
const int MsgTransferToMapSrvByMapSrvId::kTransMsgFieldNumber;
#endif  // !_MSC_VER

MsgTransferToMapSrvByMapSrvId::MsgTransferToMapSrvByMapSrvId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgTransferToMapSrvByMapSrvId)
}

void MsgTransferToMapSrvByMapSrvId::InitAsDefaultInstance() {
}

MsgTransferToMapSrvByMapSrvId::MsgTransferToMapSrvByMapSrvId(const MsgTransferToMapSrvByMapSrvId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgTransferToMapSrvByMapSrvId)
}

void MsgTransferToMapSrvByMapSrvId::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1047;
  srvid_ = 0;
  subtype_ = 0;
  transmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTransferToMapSrvByMapSrvId::~MsgTransferToMapSrvByMapSrvId() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgTransferToMapSrvByMapSrvId)
  SharedDtor();
}

void MsgTransferToMapSrvByMapSrvId::SharedDtor() {
  if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transmsg_;
  }
  if (this != default_instance_) {
  }
}

void MsgTransferToMapSrvByMapSrvId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTransferToMapSrvByMapSrvId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTransferToMapSrvByMapSrvId_descriptor_;
}

const MsgTransferToMapSrvByMapSrvId& MsgTransferToMapSrvByMapSrvId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgTransferToMapSrvByMapSrvId* MsgTransferToMapSrvByMapSrvId::default_instance_ = NULL;

MsgTransferToMapSrvByMapSrvId* MsgTransferToMapSrvByMapSrvId::New() const {
  return new MsgTransferToMapSrvByMapSrvId;
}

void MsgTransferToMapSrvByMapSrvId::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 1047;
    srvid_ = 0;
    subtype_ = 0;
    if (has_transmsg()) {
      if (transmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        transmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTransferToMapSrvByMapSrvId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgTransferToMapSrvByMapSrvId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAPSRV_BY_MAPSRVID];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_srvid;
        break;
      }

      // optional int32 srvid = 2;
      case 2: {
        if (tag == 16) {
         parse_srvid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srvid_)));
          set_has_srvid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subType;
        break;
      }

      // optional .MsgPB.EMsgType subType = 3;
      case 3: {
        if (tag == 24) {
         parse_subType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_subtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transMsg;
        break;
      }

      // optional bytes transMsg = 4;
      case 4: {
        if (tag == 34) {
         parse_transMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgTransferToMapSrvByMapSrvId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgTransferToMapSrvByMapSrvId)
  return false;
#undef DO_
}

void MsgTransferToMapSrvByMapSrvId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgTransferToMapSrvByMapSrvId)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAPSRV_BY_MAPSRVID];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 srvid = 2;
  if (has_srvid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->srvid(), output);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subtype(), output);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->transmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgTransferToMapSrvByMapSrvId)
}

::google::protobuf::uint8* MsgTransferToMapSrvByMapSrvId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgTransferToMapSrvByMapSrvId)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAPSRV_BY_MAPSRVID];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 srvid = 2;
  if (has_srvid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->srvid(), target);
  }

  // optional .MsgPB.EMsgType subType = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subtype(), target);
  }

  // optional bytes transMsg = 4;
  if (has_transmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->transmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgTransferToMapSrvByMapSrvId)
  return target;
}

int MsgTransferToMapSrvByMapSrvId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_TRANSFER_TO_MAPSRV_BY_MAPSRVID];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 srvid = 2;
    if (has_srvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srvid());
    }

    // optional .MsgPB.EMsgType subType = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

    // optional bytes transMsg = 4;
    if (has_transmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTransferToMapSrvByMapSrvId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTransferToMapSrvByMapSrvId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTransferToMapSrvByMapSrvId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTransferToMapSrvByMapSrvId::MergeFrom(const MsgTransferToMapSrvByMapSrvId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_srvid()) {
      set_srvid(from.srvid());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_transmsg()) {
      set_transmsg(from.transmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTransferToMapSrvByMapSrvId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferToMapSrvByMapSrvId::CopyFrom(const MsgTransferToMapSrvByMapSrvId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferToMapSrvByMapSrvId::IsInitialized() const {

  return true;
}

void MsgTransferToMapSrvByMapSrvId::Swap(MsgTransferToMapSrvByMapSrvId* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(srvid_, other->srvid_);
    std::swap(subtype_, other->subtype_);
    std::swap(transmsg_, other->transmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTransferToMapSrvByMapSrvId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTransferToMapSrvByMapSrvId_descriptor_;
  metadata.reflection = MsgTransferToMapSrvByMapSrvId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRegisterEventLockTimerToGameSrv::kMsgTypeFieldNumber;
const int MsgRegisterEventLockTimerToGameSrv::kSubTypeFieldNumber;
const int MsgRegisterEventLockTimerToGameSrv::kEventLockTimeFieldNumber;
#endif  // !_MSC_VER

MsgRegisterEventLockTimerToGameSrv::MsgRegisterEventLockTimerToGameSrv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgRegisterEventLockTimerToGameSrv)
}

void MsgRegisterEventLockTimerToGameSrv::InitAsDefaultInstance() {
}

MsgRegisterEventLockTimerToGameSrv::MsgRegisterEventLockTimerToGameSrv(const MsgRegisterEventLockTimerToGameSrv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgRegisterEventLockTimerToGameSrv)
}

void MsgRegisterEventLockTimerToGameSrv::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1071;
  subtype_ = 0;
  eventlocktime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRegisterEventLockTimerToGameSrv::~MsgRegisterEventLockTimerToGameSrv() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgRegisterEventLockTimerToGameSrv)
  SharedDtor();
}

void MsgRegisterEventLockTimerToGameSrv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRegisterEventLockTimerToGameSrv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRegisterEventLockTimerToGameSrv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRegisterEventLockTimerToGameSrv_descriptor_;
}

const MsgRegisterEventLockTimerToGameSrv& MsgRegisterEventLockTimerToGameSrv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgRegisterEventLockTimerToGameSrv* MsgRegisterEventLockTimerToGameSrv::default_instance_ = NULL;

MsgRegisterEventLockTimerToGameSrv* MsgRegisterEventLockTimerToGameSrv::New() const {
  return new MsgRegisterEventLockTimerToGameSrv;
}

void MsgRegisterEventLockTimerToGameSrv::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRegisterEventLockTimerToGameSrv*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(subtype_, eventlocktime_);
    msgtype_ = 1071;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRegisterEventLockTimerToGameSrv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgRegisterEventLockTimerToGameSrv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_EVENT_LOCK_TIMER_TO_GAMESRV];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_subType;
        break;
      }

      // optional .MsgPB.EMsgType subType = 2;
      case 2: {
        if (tag == 16) {
         parse_subType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_subtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eventLockTime;
        break;
      }

      // optional int64 eventLockTime = 3;
      case 3: {
        if (tag == 24) {
         parse_eventLockTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &eventlocktime_)));
          set_has_eventlocktime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgRegisterEventLockTimerToGameSrv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgRegisterEventLockTimerToGameSrv)
  return false;
#undef DO_
}

void MsgRegisterEventLockTimerToGameSrv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgRegisterEventLockTimerToGameSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_EVENT_LOCK_TIMER_TO_GAMESRV];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.EMsgType subType = 2;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->subtype(), output);
  }

  // optional int64 eventLockTime = 3;
  if (has_eventlocktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->eventlocktime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgRegisterEventLockTimerToGameSrv)
}

::google::protobuf::uint8* MsgRegisterEventLockTimerToGameSrv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgRegisterEventLockTimerToGameSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_EVENT_LOCK_TIMER_TO_GAMESRV];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.EMsgType subType = 2;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->subtype(), target);
  }

  // optional int64 eventLockTime = 3;
  if (has_eventlocktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->eventlocktime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgRegisterEventLockTimerToGameSrv)
  return target;
}

int MsgRegisterEventLockTimerToGameSrv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_EVENT_LOCK_TIMER_TO_GAMESRV];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.EMsgType subType = 2;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

    // optional int64 eventLockTime = 3;
    if (has_eventlocktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->eventlocktime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRegisterEventLockTimerToGameSrv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRegisterEventLockTimerToGameSrv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRegisterEventLockTimerToGameSrv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRegisterEventLockTimerToGameSrv::MergeFrom(const MsgRegisterEventLockTimerToGameSrv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_eventlocktime()) {
      set_eventlocktime(from.eventlocktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRegisterEventLockTimerToGameSrv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRegisterEventLockTimerToGameSrv::CopyFrom(const MsgRegisterEventLockTimerToGameSrv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRegisterEventLockTimerToGameSrv::IsInitialized() const {

  return true;
}

void MsgRegisterEventLockTimerToGameSrv::Swap(MsgRegisterEventLockTimerToGameSrv* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(subtype_, other->subtype_);
    std::swap(eventlocktime_, other->eventlocktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRegisterEventLockTimerToGameSrv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRegisterEventLockTimerToGameSrv_descriptor_;
  metadata.reflection = MsgRegisterEventLockTimerToGameSrv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgServerStartUpFinishS2S::kMsgTypeFieldNumber;
const int MsgServerStartUpFinishS2S::kServerTypeFieldNumber;
const int MsgServerStartUpFinishS2S::kServerIdFieldNumber;
#endif  // !_MSC_VER

MsgServerStartUpFinishS2S::MsgServerStartUpFinishS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgServerStartUpFinishS2S)
}

void MsgServerStartUpFinishS2S::InitAsDefaultInstance() {
}

MsgServerStartUpFinishS2S::MsgServerStartUpFinishS2S(const MsgServerStartUpFinishS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgServerStartUpFinishS2S)
}

void MsgServerStartUpFinishS2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1046;
  servertype_ = 0;
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgServerStartUpFinishS2S::~MsgServerStartUpFinishS2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgServerStartUpFinishS2S)
  SharedDtor();
}

void MsgServerStartUpFinishS2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgServerStartUpFinishS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgServerStartUpFinishS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgServerStartUpFinishS2S_descriptor_;
}

const MsgServerStartUpFinishS2S& MsgServerStartUpFinishS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgServerStartUpFinishS2S* MsgServerStartUpFinishS2S::default_instance_ = NULL;

MsgServerStartUpFinishS2S* MsgServerStartUpFinishS2S::New() const {
  return new MsgServerStartUpFinishS2S;
}

void MsgServerStartUpFinishS2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgServerStartUpFinishS2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(servertype_, serverid_);
    msgtype_ = 1046;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgServerStartUpFinishS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgServerStartUpFinishS2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_START_UP_FINISH_S2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverType;
        break;
      }

      // optional int32 serverType = 2;
      case 2: {
        if (tag == 16) {
         parse_serverType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverId;
        break;
      }

      // optional int32 serverId = 3;
      case 3: {
        if (tag == 24) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgServerStartUpFinishS2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgServerStartUpFinishS2S)
  return false;
#undef DO_
}

void MsgServerStartUpFinishS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgServerStartUpFinishS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_START_UP_FINISH_S2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 serverType = 2;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->servertype(), output);
  }

  // optional int32 serverId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgServerStartUpFinishS2S)
}

::google::protobuf::uint8* MsgServerStartUpFinishS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgServerStartUpFinishS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_START_UP_FINISH_S2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 serverType = 2;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->servertype(), target);
  }

  // optional int32 serverId = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgServerStartUpFinishS2S)
  return target;
}

int MsgServerStartUpFinishS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_START_UP_FINISH_S2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 serverType = 2;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

    // optional int32 serverId = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgServerStartUpFinishS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgServerStartUpFinishS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgServerStartUpFinishS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgServerStartUpFinishS2S::MergeFrom(const MsgServerStartUpFinishS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgServerStartUpFinishS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgServerStartUpFinishS2S::CopyFrom(const MsgServerStartUpFinishS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgServerStartUpFinishS2S::IsInitialized() const {

  return true;
}

void MsgServerStartUpFinishS2S::Swap(MsgServerStartUpFinishS2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(servertype_, other->servertype_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgServerStartUpFinishS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgServerStartUpFinishS2S_descriptor_;
  metadata.reflection = MsgServerStartUpFinishS2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNotifyRemoveMap::kMsgTypeFieldNumber;
const int MsgNotifyRemoveMap::kMapuuidFieldNumber;
const int MsgNotifyRemoveMap::kMapIdFieldNumber;
const int MsgNotifyRemoveMap::kOwnerIggidFieldNumber;
const int MsgNotifyRemoveMap::kMapTypeFieldNumber;
const int MsgNotifyRemoveMap::kMapserveridFieldNumber;
const int MsgNotifyRemoveMap::kBossRoomFieldNumber;
#endif  // !_MSC_VER

MsgNotifyRemoveMap::MsgNotifyRemoveMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNotifyRemoveMap)
}

void MsgNotifyRemoveMap::InitAsDefaultInstance() {
}

MsgNotifyRemoveMap::MsgNotifyRemoveMap(const MsgNotifyRemoveMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNotifyRemoveMap)
}

void MsgNotifyRemoveMap::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1045;
  mapuuid_ = GOOGLE_LONGLONG(0);
  map_id_ = 0;
  owner_iggid_ = GOOGLE_LONGLONG(0);
  map_type_ = 0;
  mapserverid_ = 0;
  boss_room_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNotifyRemoveMap::~MsgNotifyRemoveMap() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNotifyRemoveMap)
  SharedDtor();
}

void MsgNotifyRemoveMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNotifyRemoveMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNotifyRemoveMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNotifyRemoveMap_descriptor_;
}

const MsgNotifyRemoveMap& MsgNotifyRemoveMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgNotifyRemoveMap* MsgNotifyRemoveMap::default_instance_ = NULL;

MsgNotifyRemoveMap* MsgNotifyRemoveMap::New() const {
  return new MsgNotifyRemoveMap;
}

void MsgNotifyRemoveMap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNotifyRemoveMap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(map_id_, boss_room_);
    msgtype_ = 1045;
    mapuuid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNotifyRemoveMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNotifyRemoveMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_REMOVE_MAP_MS2MMS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapuuid;
        break;
      }

      // optional int64 mapuuid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapuuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapuuid_)));
          set_has_mapuuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 3;
      case 3: {
        if (tag == 24) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_owner_iggid;
        break;
      }

      // optional int64 owner_iggid = 4;
      case 4: {
        if (tag == 32) {
         parse_owner_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_iggid_)));
          set_has_owner_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_map_type;
        break;
      }

      // optional int32 map_type = 5;
      case 5: {
        if (tag == 40) {
         parse_map_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_type_)));
          set_has_map_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mapserverid;
        break;
      }

      // optional int32 mapserverid = 6;
      case 6: {
        if (tag == 48) {
         parse_mapserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapserverid_)));
          set_has_mapserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_boss_room;
        break;
      }

      // optional int32 boss_room = 7;
      case 7: {
        if (tag == 56) {
         parse_boss_room:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_room_)));
          set_has_boss_room();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNotifyRemoveMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNotifyRemoveMap)
  return false;
#undef DO_
}

void MsgNotifyRemoveMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNotifyRemoveMap)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_REMOVE_MAP_MS2MMS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 mapuuid = 2;
  if (has_mapuuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mapuuid(), output);
  }

  // optional int32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }

  // optional int64 owner_iggid = 4;
  if (has_owner_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->owner_iggid(), output);
  }

  // optional int32 map_type = 5;
  if (has_map_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_type(), output);
  }

  // optional int32 mapserverid = 6;
  if (has_mapserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mapserverid(), output);
  }

  // optional int32 boss_room = 7;
  if (has_boss_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->boss_room(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNotifyRemoveMap)
}

::google::protobuf::uint8* MsgNotifyRemoveMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNotifyRemoveMap)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_REMOVE_MAP_MS2MMS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 mapuuid = 2;
  if (has_mapuuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mapuuid(), target);
  }

  // optional int32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }

  // optional int64 owner_iggid = 4;
  if (has_owner_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->owner_iggid(), target);
  }

  // optional int32 map_type = 5;
  if (has_map_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_type(), target);
  }

  // optional int32 mapserverid = 6;
  if (has_mapserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mapserverid(), target);
  }

  // optional int32 boss_room = 7;
  if (has_boss_room()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->boss_room(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNotifyRemoveMap)
  return target;
}

int MsgNotifyRemoveMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_REMOVE_MAP_MS2MMS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 mapuuid = 2;
    if (has_mapuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapuuid());
    }

    // optional int32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // optional int64 owner_iggid = 4;
    if (has_owner_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->owner_iggid());
    }

    // optional int32 map_type = 5;
    if (has_map_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_type());
    }

    // optional int32 mapserverid = 6;
    if (has_mapserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapserverid());
    }

    // optional int32 boss_room = 7;
    if (has_boss_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_room());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNotifyRemoveMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNotifyRemoveMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNotifyRemoveMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNotifyRemoveMap::MergeFrom(const MsgNotifyRemoveMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_mapuuid()) {
      set_mapuuid(from.mapuuid());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_owner_iggid()) {
      set_owner_iggid(from.owner_iggid());
    }
    if (from.has_map_type()) {
      set_map_type(from.map_type());
    }
    if (from.has_mapserverid()) {
      set_mapserverid(from.mapserverid());
    }
    if (from.has_boss_room()) {
      set_boss_room(from.boss_room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNotifyRemoveMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNotifyRemoveMap::CopyFrom(const MsgNotifyRemoveMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNotifyRemoveMap::IsInitialized() const {

  return true;
}

void MsgNotifyRemoveMap::Swap(MsgNotifyRemoveMap* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(mapuuid_, other->mapuuid_);
    std::swap(map_id_, other->map_id_);
    std::swap(owner_iggid_, other->owner_iggid_);
    std::swap(map_type_, other->map_type_);
    std::swap(mapserverid_, other->mapserverid_);
    std::swap(boss_room_, other->boss_room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNotifyRemoveMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNotifyRemoveMap_descriptor_;
  metadata.reflection = MsgNotifyRemoveMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapServerNotAvalible::kMsgTypeFieldNumber;
const int MsgMapServerNotAvalible::kIggIdFieldNumber;
#endif  // !_MSC_VER

MsgMapServerNotAvalible::MsgMapServerNotAvalible()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapServerNotAvalible)
}

void MsgMapServerNotAvalible::InitAsDefaultInstance() {
}

MsgMapServerNotAvalible::MsgMapServerNotAvalible(const MsgMapServerNotAvalible& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapServerNotAvalible)
}

void MsgMapServerNotAvalible::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1054;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapServerNotAvalible::~MsgMapServerNotAvalible() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapServerNotAvalible)
  SharedDtor();
}

void MsgMapServerNotAvalible::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMapServerNotAvalible::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapServerNotAvalible::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapServerNotAvalible_descriptor_;
}

const MsgMapServerNotAvalible& MsgMapServerNotAvalible::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgMapServerNotAvalible* MsgMapServerNotAvalible::default_instance_ = NULL;

MsgMapServerNotAvalible* MsgMapServerNotAvalible::New() const {
  return new MsgMapServerNotAvalible;
}

void MsgMapServerNotAvalible::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1054;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapServerNotAvalible::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapServerNotAvalible)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_NOT_AVALIBLE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggId;
        break;
      }

      // optional int64 iggId = 2;
      case 2: {
        if (tag == 16) {
         parse_iggId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapServerNotAvalible)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapServerNotAvalible)
  return false;
#undef DO_
}

void MsgMapServerNotAvalible::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapServerNotAvalible)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_NOT_AVALIBLE];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapServerNotAvalible)
}

::google::protobuf::uint8* MsgMapServerNotAvalible::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapServerNotAvalible)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_NOT_AVALIBLE];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapServerNotAvalible)
  return target;
}

int MsgMapServerNotAvalible::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPSERVER_NOT_AVALIBLE];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggId = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapServerNotAvalible::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapServerNotAvalible* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapServerNotAvalible*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapServerNotAvalible::MergeFrom(const MsgMapServerNotAvalible& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapServerNotAvalible::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapServerNotAvalible::CopyFrom(const MsgMapServerNotAvalible& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapServerNotAvalible::IsInitialized() const {

  return true;
}

void MsgMapServerNotAvalible::Swap(MsgMapServerNotAvalible* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapServerNotAvalible::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapServerNotAvalible_descriptor_;
  metadata.reflection = MsgMapServerNotAvalible_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgCommonNotification_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCommonNotification_MODE_descriptor_;
}
bool MsgCommonNotification_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgCommonNotification_MODE MsgCommonNotification::SERVER_NOT_YET_START_UP;
const MsgCommonNotification_MODE MsgCommonNotification::SERVER_IS_SHUTDOWN;
const MsgCommonNotification_MODE MsgCommonNotification::TOO_FREQUENTLY;
const MsgCommonNotification_MODE MsgCommonNotification::NOT_OPEN;
const MsgCommonNotification_MODE MsgCommonNotification::MODE_MIN;
const MsgCommonNotification_MODE MsgCommonNotification::MODE_MAX;
const int MsgCommonNotification::MODE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgCommonNotification::kMsgTypeFieldNumber;
const int MsgCommonNotification::kModeFieldNumber;
const int MsgCommonNotification::kParam1FieldNumber;
#endif  // !_MSC_VER

MsgCommonNotification::MsgCommonNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgCommonNotification)
}

void MsgCommonNotification::InitAsDefaultInstance() {
}

MsgCommonNotification::MsgCommonNotification(const MsgCommonNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgCommonNotification)
}

void MsgCommonNotification::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1072;
  mode_ = 0;
  param1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCommonNotification::~MsgCommonNotification() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgCommonNotification)
  SharedDtor();
}

void MsgCommonNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCommonNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCommonNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCommonNotification_descriptor_;
}

const MsgCommonNotification& MsgCommonNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgCommonNotification* MsgCommonNotification::default_instance_ = NULL;

MsgCommonNotification* MsgCommonNotification::New() const {
  return new MsgCommonNotification;
}

void MsgCommonNotification::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCommonNotification*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(mode_, param1_);
    msgtype_ = 1072;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCommonNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgCommonNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_COMMAON_NOTIFICATION];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .MsgPB.MsgCommonNotification.MODE mode = 2;
      case 2: {
        if (tag == 16) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgCommonNotification_MODE_IsValid(value)) {
            set_mode(static_cast< ::MsgPB::MsgCommonNotification_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_param1;
        break;
      }

      // optional int32 param1 = 3;
      case 3: {
        if (tag == 24) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgCommonNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgCommonNotification)
  return false;
#undef DO_
}

void MsgCommonNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgCommonNotification)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_COMMAON_NOTIFICATION];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.MsgCommonNotification.MODE mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional int32 param1 = 3;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgCommonNotification)
}

::google::protobuf::uint8* MsgCommonNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgCommonNotification)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_COMMAON_NOTIFICATION];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.MsgCommonNotification.MODE mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // optional int32 param1 = 3;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgCommonNotification)
  return target;
}

int MsgCommonNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_COMMAON_NOTIFICATION];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.MsgCommonNotification.MODE mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional int32 param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCommonNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCommonNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCommonNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCommonNotification::MergeFrom(const MsgCommonNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCommonNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCommonNotification::CopyFrom(const MsgCommonNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCommonNotification::IsInitialized() const {

  return true;
}

void MsgCommonNotification::Swap(MsgCommonNotification* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(mode_, other->mode_);
    std::swap(param1_, other->param1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCommonNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCommonNotification_descriptor_;
  metadata.reflection = MsgCommonNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgToMoreClient::kMsgTypeFieldNumber;
const int MsgToMoreClient::kSubTypeFieldNumber;
const int MsgToMoreClient::kSubMsgFieldNumber;
const int MsgToMoreClient::kIggidSetFieldNumber;
#endif  // !_MSC_VER

MsgToMoreClient::MsgToMoreClient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgToMoreClient)
}

void MsgToMoreClient::InitAsDefaultInstance() {
}

MsgToMoreClient::MsgToMoreClient(const MsgToMoreClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgToMoreClient)
}

void MsgToMoreClient::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1131;
  subtype_ = 0;
  submsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgToMoreClient::~MsgToMoreClient() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgToMoreClient)
  SharedDtor();
}

void MsgToMoreClient::SharedDtor() {
  if (submsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete submsg_;
  }
  if (this != default_instance_) {
  }
}

void MsgToMoreClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgToMoreClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgToMoreClient_descriptor_;
}

const MsgToMoreClient& MsgToMoreClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgToMoreClient* MsgToMoreClient::default_instance_ = NULL;

MsgToMoreClient* MsgToMoreClient::New() const {
  return new MsgToMoreClient;
}

void MsgToMoreClient::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1131;
    subtype_ = 0;
    if (has_submsg()) {
      if (submsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        submsg_->clear();
      }
    }
  }
  iggidset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgToMoreClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgToMoreClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_TO_MORE_CLENT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_subType;
        break;
      }

      // optional .MsgPB.EMsgType subType = 2;
      case 2: {
        if (tag == 16) {
         parse_subType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_subtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subMsg;
        break;
      }

      // optional bytes subMsg = 3;
      case 3: {
        if (tag == 26) {
         parse_subMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_submsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iggidSet;
        break;
      }

      // repeated int64 iggidSet = 4;
      case 4: {
        if (tag == 32) {
         parse_iggidSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_iggidset())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_iggidset())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iggidSet;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgToMoreClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgToMoreClient)
  return false;
#undef DO_
}

void MsgToMoreClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgToMoreClient)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_TO_MORE_CLENT];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.EMsgType subType = 2;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->subtype(), output);
  }

  // optional bytes subMsg = 3;
  if (has_submsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->submsg(), output);
  }

  // repeated int64 iggidSet = 4;
  for (int i = 0; i < this->iggidset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->iggidset(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgToMoreClient)
}

::google::protobuf::uint8* MsgToMoreClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgToMoreClient)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_TO_MORE_CLENT];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.EMsgType subType = 2;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->subtype(), target);
  }

  // optional bytes subMsg = 3;
  if (has_submsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->submsg(), target);
  }

  // repeated int64 iggidSet = 4;
  for (int i = 0; i < this->iggidset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->iggidset(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgToMoreClient)
  return target;
}

int MsgToMoreClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAP_TO_MORE_CLENT];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.EMsgType subType = 2;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

    // optional bytes subMsg = 3;
    if (has_submsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->submsg());
    }

  }
  // repeated int64 iggidSet = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->iggidset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->iggidset(i));
    }
    total_size += 1 * this->iggidset_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgToMoreClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgToMoreClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgToMoreClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgToMoreClient::MergeFrom(const MsgToMoreClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  iggidset_.MergeFrom(from.iggidset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_submsg()) {
      set_submsg(from.submsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgToMoreClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgToMoreClient::CopyFrom(const MsgToMoreClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgToMoreClient::IsInitialized() const {

  return true;
}

void MsgToMoreClient::Swap(MsgToMoreClient* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(subtype_, other->subtype_);
    std::swap(submsg_, other->submsg_);
    iggidset_.Swap(&other->iggidset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgToMoreClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgToMoreClient_descriptor_;
  metadata.reflection = MsgToMoreClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBServerInfo::kServerIdFieldNumber;
const int PBServerInfo::kServerTypeFieldNumber;
const int PBServerInfo::kListernIpFieldNumber;
const int PBServerInfo::kListernPortFieldNumber;
const int PBServerInfo::kAreaIdFieldNumber;
const int PBServerInfo::kDomainNameFieldNumber;
#endif  // !_MSC_VER

PBServerInfo::PBServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.PBServerInfo)
}

void PBServerInfo::InitAsDefaultInstance() {
}

PBServerInfo::PBServerInfo(const PBServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.PBServerInfo)
}

void PBServerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_id_ = 0;
  server_type_ = 0;
  listern_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listern_port_ = 0;
  area_id_ = 0;
  domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBServerInfo::~PBServerInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.PBServerInfo)
  SharedDtor();
}

void PBServerInfo::SharedDtor() {
  if (listern_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete listern_ip_;
  }
  if (domain_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_name_;
  }
  if (this != default_instance_) {
  }
}

void PBServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBServerInfo_descriptor_;
}

const PBServerInfo& PBServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

PBServerInfo* PBServerInfo::default_instance_ = NULL;

PBServerInfo* PBServerInfo::New() const {
  return new PBServerInfo;
}

void PBServerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBServerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(server_id_, server_type_);
    ZR_(listern_port_, area_id_);
    if (has_listern_ip()) {
      if (listern_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        listern_ip_->clear();
      }
    }
    if (has_domain_name()) {
      if (domain_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.PBServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_server_type;
        break;
      }

      // optional int32 server_type = 2;
      case 2: {
        if (tag == 16) {
         parse_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_listern_ip;
        break;
      }

      // optional string listern_ip = 3;
      case 3: {
        if (tag == 26) {
         parse_listern_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listern_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->listern_ip().data(), this->listern_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "listern_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_listern_port;
        break;
      }

      // optional int32 listern_port = 4;
      case 4: {
        if (tag == 32) {
         parse_listern_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listern_port_)));
          set_has_listern_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_area_id;
        break;
      }

      // optional int32 area_id = 5;
      case 5: {
        if (tag == 40) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_domain_name;
        break;
      }

      // optional string domain_name = 6;
      case 6: {
        if (tag == 50) {
         parse_domain_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain_name().data(), this->domain_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.PBServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.PBServerInfo)
  return false;
#undef DO_
}

void PBServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.PBServerInfo)
  // optional int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // optional int32 server_type = 2;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_type(), output);
  }

  // optional string listern_ip = 3;
  if (has_listern_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listern_ip().data(), this->listern_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "listern_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->listern_ip(), output);
  }

  // optional int32 listern_port = 4;
  if (has_listern_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->listern_port(), output);
  }

  // optional int32 area_id = 5;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->area_id(), output);
  }

  // optional string domain_name = 6;
  if (has_domain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->domain_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.PBServerInfo)
}

::google::protobuf::uint8* PBServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.PBServerInfo)
  // optional int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // optional int32 server_type = 2;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_type(), target);
  }

  // optional string listern_ip = 3;
  if (has_listern_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listern_ip().data(), this->listern_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "listern_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->listern_ip(), target);
  }

  // optional int32 listern_port = 4;
  if (has_listern_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->listern_port(), target);
  }

  // optional int32 area_id = 5;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->area_id(), target);
  }

  // optional string domain_name = 6;
  if (has_domain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->domain_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.PBServerInfo)
  return target;
}

int PBServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // optional int32 server_type = 2;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_type());
    }

    // optional string listern_ip = 3;
    if (has_listern_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->listern_ip());
    }

    // optional int32 listern_port = 4;
    if (has_listern_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listern_port());
    }

    // optional int32 area_id = 5;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

    // optional string domain_name = 6;
    if (has_domain_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBServerInfo::MergeFrom(const PBServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_listern_ip()) {
      set_listern_ip(from.listern_ip());
    }
    if (from.has_listern_port()) {
      set_listern_port(from.listern_port());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_domain_name()) {
      set_domain_name(from.domain_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBServerInfo::CopyFrom(const PBServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBServerInfo::IsInitialized() const {

  return true;
}

void PBServerInfo::Swap(PBServerInfo* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(server_type_, other->server_type_);
    std::swap(listern_ip_, other->listern_ip_);
    std::swap(listern_port_, other->listern_port_);
    std::swap(area_id_, other->area_id_);
    std::swap(domain_name_, other->domain_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBServerInfo_descriptor_;
  metadata.reflection = PBServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMapMgrAllMapServerInfo_MGR2GS::kMsgTypeFieldNumber;
const int MsgMapMgrAllMapServerInfo_MGR2GS::kServerInfoFieldNumber;
#endif  // !_MSC_VER

MsgMapMgrAllMapServerInfo_MGR2GS::MsgMapMgrAllMapServerInfo_MGR2GS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS)
}

void MsgMapMgrAllMapServerInfo_MGR2GS::InitAsDefaultInstance() {
}

MsgMapMgrAllMapServerInfo_MGR2GS::MsgMapMgrAllMapServerInfo_MGR2GS(const MsgMapMgrAllMapServerInfo_MGR2GS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS)
}

void MsgMapMgrAllMapServerInfo_MGR2GS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 9500;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMapMgrAllMapServerInfo_MGR2GS::~MsgMapMgrAllMapServerInfo_MGR2GS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS)
  SharedDtor();
}

void MsgMapMgrAllMapServerInfo_MGR2GS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMapMgrAllMapServerInfo_MGR2GS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMapMgrAllMapServerInfo_MGR2GS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMapMgrAllMapServerInfo_MGR2GS_descriptor_;
}

const MsgMapMgrAllMapServerInfo_MGR2GS& MsgMapMgrAllMapServerInfo_MGR2GS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgMapMgrAllMapServerInfo_MGR2GS* MsgMapMgrAllMapServerInfo_MGR2GS::default_instance_ = NULL;

MsgMapMgrAllMapServerInfo_MGR2GS* MsgMapMgrAllMapServerInfo_MGR2GS::New() const {
  return new MsgMapMgrAllMapServerInfo_MGR2GS;
}

void MsgMapMgrAllMapServerInfo_MGR2GS::Clear() {
  msgtype_ = 9500;
  server_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMapMgrAllMapServerInfo_MGR2GS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPMGR_ALL_MAPSERVER_INFO_MGR2GS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_info;
        break;
      }

      // repeated .MsgPB.PBServerInfo server_info = 2;
      case 2: {
        if (tag == 18) {
         parse_server_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS)
  return false;
#undef DO_
}

void MsgMapMgrAllMapServerInfo_MGR2GS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPMGR_ALL_MAPSERVER_INFO_MGR2GS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // repeated .MsgPB.PBServerInfo server_info = 2;
  for (int i = 0; i < this->server_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS)
}

::google::protobuf::uint8* MsgMapMgrAllMapServerInfo_MGR2GS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPMGR_ALL_MAPSERVER_INFO_MGR2GS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // repeated .MsgPB.PBServerInfo server_info = 2;
  for (int i = 0; i < this->server_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMapMgrAllMapServerInfo_MGR2GS)
  return target;
}

int MsgMapMgrAllMapServerInfo_MGR2GS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MAPMGR_ALL_MAPSERVER_INFO_MGR2GS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  // repeated .MsgPB.PBServerInfo server_info = 2;
  total_size += 1 * this->server_info_size();
  for (int i = 0; i < this->server_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMapMgrAllMapServerInfo_MGR2GS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMapMgrAllMapServerInfo_MGR2GS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMapMgrAllMapServerInfo_MGR2GS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMapMgrAllMapServerInfo_MGR2GS::MergeFrom(const MsgMapMgrAllMapServerInfo_MGR2GS& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_info_.MergeFrom(from.server_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMapMgrAllMapServerInfo_MGR2GS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMapMgrAllMapServerInfo_MGR2GS::CopyFrom(const MsgMapMgrAllMapServerInfo_MGR2GS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMapMgrAllMapServerInfo_MGR2GS::IsInitialized() const {

  return true;
}

void MsgMapMgrAllMapServerInfo_MGR2GS::Swap(MsgMapMgrAllMapServerInfo_MGR2GS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    server_info_.Swap(&other->server_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMapMgrAllMapServerInfo_MGR2GS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMapMgrAllMapServerInfo_MGR2GS_descriptor_;
  metadata.reflection = MsgMapMgrAllMapServerInfo_MGR2GS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRemoveCachePlayerS2S::kMsgTypeFieldNumber;
const int MsgRemoveCachePlayerS2S::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgRemoveCachePlayerS2S::MsgRemoveCachePlayerS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgRemoveCachePlayerS2S)
}

void MsgRemoveCachePlayerS2S::InitAsDefaultInstance() {
}

MsgRemoveCachePlayerS2S::MsgRemoveCachePlayerS2S(const MsgRemoveCachePlayerS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgRemoveCachePlayerS2S)
}

void MsgRemoveCachePlayerS2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 11000;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRemoveCachePlayerS2S::~MsgRemoveCachePlayerS2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgRemoveCachePlayerS2S)
  SharedDtor();
}

void MsgRemoveCachePlayerS2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRemoveCachePlayerS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRemoveCachePlayerS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRemoveCachePlayerS2S_descriptor_;
}

const MsgRemoveCachePlayerS2S& MsgRemoveCachePlayerS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgRemoveCachePlayerS2S* MsgRemoveCachePlayerS2S::default_instance_ = NULL;

MsgRemoveCachePlayerS2S* MsgRemoveCachePlayerS2S::New() const {
  return new MsgRemoveCachePlayerS2S;
}

void MsgRemoveCachePlayerS2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 11000;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRemoveCachePlayerS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgRemoveCachePlayerS2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_CACHE_PLAYER_S2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgRemoveCachePlayerS2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgRemoveCachePlayerS2S)
  return false;
#undef DO_
}

void MsgRemoveCachePlayerS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgRemoveCachePlayerS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_CACHE_PLAYER_S2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgRemoveCachePlayerS2S)
}

::google::protobuf::uint8* MsgRemoveCachePlayerS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgRemoveCachePlayerS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_CACHE_PLAYER_S2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgRemoveCachePlayerS2S)
  return target;
}

int MsgRemoveCachePlayerS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REMOVE_CACHE_PLAYER_S2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRemoveCachePlayerS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRemoveCachePlayerS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRemoveCachePlayerS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRemoveCachePlayerS2S::MergeFrom(const MsgRemoveCachePlayerS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRemoveCachePlayerS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRemoveCachePlayerS2S::CopyFrom(const MsgRemoveCachePlayerS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRemoveCachePlayerS2S::IsInitialized() const {

  return true;
}

void MsgRemoveCachePlayerS2S::Swap(MsgRemoveCachePlayerS2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRemoveCachePlayerS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRemoveCachePlayerS2S_descriptor_;
  metadata.reflection = MsgRemoveCachePlayerS2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCreateMapSucMS2MGS::kMsgTypeFieldNumber;
const int MsgCreateMapSucMS2MGS::kMapUuidFieldNumber;
const int MsgCreateMapSucMS2MGS::kMapIdFieldNumber;
const int MsgCreateMapSucMS2MGS::kOwnerIggidFieldNumber;
const int MsgCreateMapSucMS2MGS::kMapTypeFieldNumber;
const int MsgCreateMapSucMS2MGS::kServerIdFieldNumber;
#endif  // !_MSC_VER

MsgCreateMapSucMS2MGS::MsgCreateMapSucMS2MGS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgCreateMapSucMS2MGS)
}

void MsgCreateMapSucMS2MGS::InitAsDefaultInstance() {
}

MsgCreateMapSucMS2MGS::MsgCreateMapSucMS2MGS(const MsgCreateMapSucMS2MGS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgCreateMapSucMS2MGS)
}

void MsgCreateMapSucMS2MGS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 11001;
  map_uuid_ = GOOGLE_LONGLONG(0);
  map_id_ = 0;
  owner_iggid_ = GOOGLE_LONGLONG(0);
  map_type_ = 0;
  server_id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCreateMapSucMS2MGS::~MsgCreateMapSucMS2MGS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgCreateMapSucMS2MGS)
  SharedDtor();
}

void MsgCreateMapSucMS2MGS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCreateMapSucMS2MGS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCreateMapSucMS2MGS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCreateMapSucMS2MGS_descriptor_;
}

const MsgCreateMapSucMS2MGS& MsgCreateMapSucMS2MGS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgCreateMapSucMS2MGS* MsgCreateMapSucMS2MGS::default_instance_ = NULL;

MsgCreateMapSucMS2MGS* MsgCreateMapSucMS2MGS::New() const {
  return new MsgCreateMapSucMS2MGS;
}

void MsgCreateMapSucMS2MGS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCreateMapSucMS2MGS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(map_id_, map_type_);
    msgtype_ = 11001;
    map_uuid_ = GOOGLE_LONGLONG(0);
    server_id_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCreateMapSucMS2MGS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgCreateMapSucMS2MGS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CREATE_MAP_SUC_MS2MGS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_map_uuid;
        break;
      }

      // optional int64 map_uuid = 2;
      case 2: {
        if (tag == 16) {
         parse_map_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &map_uuid_)));
          set_has_map_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 3;
      case 3: {
        if (tag == 24) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_owner_iggid;
        break;
      }

      // optional int64 owner_iggid = 4;
      case 4: {
        if (tag == 32) {
         parse_owner_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_iggid_)));
          set_has_owner_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_map_type;
        break;
      }

      // optional int32 map_type = 5;
      case 5: {
        if (tag == 40) {
         parse_map_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_type_)));
          set_has_map_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_server_id;
        break;
      }

      // optional int32 server_id = 6 [default = -1];
      case 6: {
        if (tag == 48) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgCreateMapSucMS2MGS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgCreateMapSucMS2MGS)
  return false;
#undef DO_
}

void MsgCreateMapSucMS2MGS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgCreateMapSucMS2MGS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CREATE_MAP_SUC_MS2MGS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 map_uuid = 2;
  if (has_map_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->map_uuid(), output);
  }

  // optional int32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }

  // optional int64 owner_iggid = 4;
  if (has_owner_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->owner_iggid(), output);
  }

  // optional int32 map_type = 5;
  if (has_map_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_type(), output);
  }

  // optional int32 server_id = 6 [default = -1];
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgCreateMapSucMS2MGS)
}

::google::protobuf::uint8* MsgCreateMapSucMS2MGS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgCreateMapSucMS2MGS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CREATE_MAP_SUC_MS2MGS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 map_uuid = 2;
  if (has_map_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->map_uuid(), target);
  }

  // optional int32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }

  // optional int64 owner_iggid = 4;
  if (has_owner_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->owner_iggid(), target);
  }

  // optional int32 map_type = 5;
  if (has_map_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_type(), target);
  }

  // optional int32 server_id = 6 [default = -1];
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgCreateMapSucMS2MGS)
  return target;
}

int MsgCreateMapSucMS2MGS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CREATE_MAP_SUC_MS2MGS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 map_uuid = 2;
    if (has_map_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->map_uuid());
    }

    // optional int32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // optional int64 owner_iggid = 4;
    if (has_owner_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->owner_iggid());
    }

    // optional int32 map_type = 5;
    if (has_map_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_type());
    }

    // optional int32 server_id = 6 [default = -1];
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCreateMapSucMS2MGS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCreateMapSucMS2MGS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCreateMapSucMS2MGS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCreateMapSucMS2MGS::MergeFrom(const MsgCreateMapSucMS2MGS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_map_uuid()) {
      set_map_uuid(from.map_uuid());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_owner_iggid()) {
      set_owner_iggid(from.owner_iggid());
    }
    if (from.has_map_type()) {
      set_map_type(from.map_type());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCreateMapSucMS2MGS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreateMapSucMS2MGS::CopyFrom(const MsgCreateMapSucMS2MGS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateMapSucMS2MGS::IsInitialized() const {

  return true;
}

void MsgCreateMapSucMS2MGS::Swap(MsgCreateMapSucMS2MGS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(map_uuid_, other->map_uuid_);
    std::swap(map_id_, other->map_id_);
    std::swap(owner_iggid_, other->owner_iggid_);
    std::swap(map_type_, other->map_type_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCreateMapSucMS2MGS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCreateMapSucMS2MGS_descriptor_;
  metadata.reflection = MsgCreateMapSucMS2MGS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerMapBatchDBDataUnlockMGS2MS::kMsgTypeFieldNumber;
const int MsgPlayerMapBatchDBDataUnlockMGS2MS::kIggidFieldNumber;
const int MsgPlayerMapBatchDBDataUnlockMGS2MS::kMapIdFieldNumber;
const int MsgPlayerMapBatchDBDataUnlockMGS2MS::kPartyIdFieldNumber;
#endif  // !_MSC_VER

MsgPlayerMapBatchDBDataUnlockMGS2MS::MsgPlayerMapBatchDBDataUnlockMGS2MS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS)
}

void MsgPlayerMapBatchDBDataUnlockMGS2MS::InitAsDefaultInstance() {
}

MsgPlayerMapBatchDBDataUnlockMGS2MS::MsgPlayerMapBatchDBDataUnlockMGS2MS(const MsgPlayerMapBatchDBDataUnlockMGS2MS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS)
}

void MsgPlayerMapBatchDBDataUnlockMGS2MS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 34001;
  iggid_ = GOOGLE_LONGLONG(0);
  map_id_ = 0;
  party_id_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerMapBatchDBDataUnlockMGS2MS::~MsgPlayerMapBatchDBDataUnlockMGS2MS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS)
  SharedDtor();
}

void MsgPlayerMapBatchDBDataUnlockMGS2MS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerMapBatchDBDataUnlockMGS2MS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerMapBatchDBDataUnlockMGS2MS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerMapBatchDBDataUnlockMGS2MS_descriptor_;
}

const MsgPlayerMapBatchDBDataUnlockMGS2MS& MsgPlayerMapBatchDBDataUnlockMGS2MS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMapMgrServer_2eproto();
  return *default_instance_;
}

MsgPlayerMapBatchDBDataUnlockMGS2MS* MsgPlayerMapBatchDBDataUnlockMGS2MS::default_instance_ = NULL;

MsgPlayerMapBatchDBDataUnlockMGS2MS* MsgPlayerMapBatchDBDataUnlockMGS2MS::New() const {
  return new MsgPlayerMapBatchDBDataUnlockMGS2MS;
}

void MsgPlayerMapBatchDBDataUnlockMGS2MS::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 34001;
    iggid_ = GOOGLE_LONGLONG(0);
    map_id_ = 0;
    party_id_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerMapBatchDBDataUnlockMGS2MS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MAP_BATCH_DB_DATA_UNLOCK_BY_GM];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 3;
      case 3: {
        if (tag == 24) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_party_id;
        break;
      }

      // optional int64 party_id = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS)
  return false;
#undef DO_
}

void MsgPlayerMapBatchDBDataUnlockMGS2MS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MAP_BATCH_DB_DATA_UNLOCK_BY_GM];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }

  // optional int64 party_id = 4 [default = -1];
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->party_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS)
}

::google::protobuf::uint8* MsgPlayerMapBatchDBDataUnlockMGS2MS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MAP_BATCH_DB_DATA_UNLOCK_BY_GM];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }

  // optional int64 party_id = 4 [default = -1];
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->party_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerMapBatchDBDataUnlockMGS2MS)
  return target;
}

int MsgPlayerMapBatchDBDataUnlockMGS2MS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MAP_BATCH_DB_DATA_UNLOCK_BY_GM];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // optional int64 party_id = 4 [default = -1];
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->party_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerMapBatchDBDataUnlockMGS2MS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerMapBatchDBDataUnlockMGS2MS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerMapBatchDBDataUnlockMGS2MS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerMapBatchDBDataUnlockMGS2MS::MergeFrom(const MsgPlayerMapBatchDBDataUnlockMGS2MS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerMapBatchDBDataUnlockMGS2MS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerMapBatchDBDataUnlockMGS2MS::CopyFrom(const MsgPlayerMapBatchDBDataUnlockMGS2MS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerMapBatchDBDataUnlockMGS2MS::IsInitialized() const {

  return true;
}

void MsgPlayerMapBatchDBDataUnlockMGS2MS::Swap(MsgPlayerMapBatchDBDataUnlockMGS2MS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(map_id_, other->map_id_);
    std::swap(party_id_, other->party_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerMapBatchDBDataUnlockMGS2MS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerMapBatchDBDataUnlockMGS2MS_descriptor_;
  metadata.reflection = MsgPlayerMapBatchDBDataUnlockMGS2MS_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
