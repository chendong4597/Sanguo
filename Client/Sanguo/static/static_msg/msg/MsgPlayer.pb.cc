// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgPlayer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgPlayer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgPlayerSysBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerSysBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerSysBaseData_DayMaxNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerSysBaseData_DayMaxNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerSysBaseData_DayMaxNum_ItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerSysBaseData_DayMaxNum_ItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerSysBaseData_MobReborn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerSysBaseData_MobReborn_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryPlayerInfo_Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryPlayerInfo_Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerInfoGS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerInfoGS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgPlayerInfoGS2C_NOTIFY_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerSetAvatorC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerSetAvatorC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerSetAvatorResultS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerSetAvatorResultS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerUpdateAvatorGS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerUpdateAvatorGS2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginDayGS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginDayGS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDeadG2CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDeadG2CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRebirthC2GS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRebirthC2GS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRebirthGS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRebirthGS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerNormalAttackC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerNormalAttackC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerNormalAttackResS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerNormalAttackResS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerReviveC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerReviveC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerDataSyncDoneG2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerDataSyncDoneG2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerSysInfoGS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerSysInfoGS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerReadyC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerReadyC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerInfoQueryC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerInfoQueryC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerInfoQueryResultS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerInfoQueryResultS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgPlayerInfoQueryResultS2C_QUERY_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerLevelUpNotifyS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerLevelUpNotifyS2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgServerQueryPlayerInfoS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgServerQueryPlayerInfoS2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgServerQueryPlayerInfoRetS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgServerQueryPlayerInfoRetS2S_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgServerQueryPlayerInfoRetS2S_QUERY_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerRenameC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerRenameC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerRenameS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerRenameS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerDataContainerSyncDoneG2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerDataContainerSyncDoneG2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPlayerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPlayerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryPlayerM2MRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryPlayerM2MRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryPlayerM2MResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryPlayerM2MResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryPlayerM2GRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryPlayerM2GRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryPlayerM2GResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryPlayerM2GResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerRenameFlagS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerRenameFlagS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerDailyResetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerDailyResetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerSlideBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerSlideBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerSlideEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerSlideEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerAuthenticationC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerAuthenticationC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerKickOutS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerKickOutS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgPlayerKickOutS2C_Reason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryPlayerAccuOnlineTimeC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryPlayerAccuOnlineTimeC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryPlayerAccuOnlineTimeS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryPlayerAccuOnlineTimeS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerPrivateTaskFlagGetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerPrivateTaskFlagGetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerPrivateTaskFlagGetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerPrivateTaskFlagGetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerPrivateTaskFlagTrigC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerPrivateTaskFlagTrigC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerPrivateTaskFlagTrigS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerPrivateTaskFlagTrigS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgPlayerPrivateTaskFlagTrigS2C_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgGetPrivateMapBotC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGetPrivateMapBotC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGetPrivateMapBotS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGetPrivateMapBotS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGetPrivateMapBotS2C_BotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGetPrivateMapBotS2C_BotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGotoPrivateBotHomeC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGotoPrivateBotHomeC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerModifyAvatorC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerModifyAvatorC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerModifyAvatorS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerModifyAvatorS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerADNVideoAwardC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerADNVideoAwardC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerADNVideoAwardS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerADNVideoAwardS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerSynBaseC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerSynBaseC2S_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_REASON_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_PLAYER_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SET_AVATOR_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REVIVE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_SERVER_QPINFO_FLG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* E_QueryPlayerInclude_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* E_QueryPlayerErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgPlayer_2eproto() {
  protobuf_AddDesc_MsgPlayer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgPlayer.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPlayerSysBaseData_descriptor_ = file->message_type(0);
  static const int MsgPlayerSysBaseData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, survival_supermoon_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, create_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, weapon_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, tool_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, weapon_endless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, tool_endless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, daily_reset_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, create_role_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, dirty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, total_cash_payed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, day_max_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, mobs_),
  };
  MsgPlayerSysBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerSysBaseData_descriptor_,
      MsgPlayerSysBaseData::default_instance_,
      MsgPlayerSysBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerSysBaseData));
  MsgPlayerSysBaseData_DayMaxNum_descriptor_ = MsgPlayerSysBaseData_descriptor_->nested_type(0);
  static const int MsgPlayerSysBaseData_DayMaxNum_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_DayMaxNum, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_DayMaxNum, achieve_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_DayMaxNum, achieve_total_warned_),
  };
  MsgPlayerSysBaseData_DayMaxNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerSysBaseData_DayMaxNum_descriptor_,
      MsgPlayerSysBaseData_DayMaxNum::default_instance_,
      MsgPlayerSysBaseData_DayMaxNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_DayMaxNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_DayMaxNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerSysBaseData_DayMaxNum));
  MsgPlayerSysBaseData_DayMaxNum_ItemData_descriptor_ = MsgPlayerSysBaseData_DayMaxNum_descriptor_->nested_type(0);
  static const int MsgPlayerSysBaseData_DayMaxNum_ItemData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_DayMaxNum_ItemData, dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_DayMaxNum_ItemData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_DayMaxNum_ItemData, warned_),
  };
  MsgPlayerSysBaseData_DayMaxNum_ItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerSysBaseData_DayMaxNum_ItemData_descriptor_,
      MsgPlayerSysBaseData_DayMaxNum_ItemData::default_instance_,
      MsgPlayerSysBaseData_DayMaxNum_ItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_DayMaxNum_ItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_DayMaxNum_ItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerSysBaseData_DayMaxNum_ItemData));
  MsgPlayerSysBaseData_MobReborn_descriptor_ = MsgPlayerSysBaseData_descriptor_->nested_type(1);
  static const int MsgPlayerSysBaseData_MobReborn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_MobReborn, dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_MobReborn, time_),
  };
  MsgPlayerSysBaseData_MobReborn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerSysBaseData_MobReborn_descriptor_,
      MsgPlayerSysBaseData_MobReborn::default_instance_,
      MsgPlayerSysBaseData_MobReborn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_MobReborn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysBaseData_MobReborn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerSysBaseData_MobReborn));
  MsgQueryPlayerInfo_Base_descriptor_ = file->message_type(1);
  static const int MsgQueryPlayerInfo_Base_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, skincolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, logouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, food_),
  };
  MsgQueryPlayerInfo_Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryPlayerInfo_Base_descriptor_,
      MsgQueryPlayerInfo_Base::default_instance_,
      MsgQueryPlayerInfo_Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerInfo_Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryPlayerInfo_Base));
  MsgPlayerInfoGS2C_descriptor_ = file->message_type(2);
  static const int MsgPlayerInfoGS2C_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, breath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, skincolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, facecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, underwear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, underwearcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, ownmapnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, avatordone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, pvpsegment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, pvpscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, pvpkillscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, pvprankscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, pvptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, pvpcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, endlesslev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, endlessexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, notifytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, force_up_exp_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, tickets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, curdungeonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, lottytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, otherplayerinfo_),
  };
  MsgPlayerInfoGS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerInfoGS2C_descriptor_,
      MsgPlayerInfoGS2C::default_instance_,
      MsgPlayerInfoGS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoGS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerInfoGS2C));
  MsgPlayerInfoGS2C_NOTIFY_descriptor_ = MsgPlayerInfoGS2C_descriptor_->enum_type(0);
  MsgPlayerSetAvatorC2S_descriptor_ = file->message_type(3);
  static const int MsgPlayerSetAvatorC2S_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorC2S, firstlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorC2S, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorC2S, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorC2S, skincolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorC2S, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorC2S, haircolor_),
  };
  MsgPlayerSetAvatorC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerSetAvatorC2S_descriptor_,
      MsgPlayerSetAvatorC2S::default_instance_,
      MsgPlayerSetAvatorC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerSetAvatorC2S));
  MsgPlayerSetAvatorResultS2C_descriptor_ = file->message_type(4);
  static const int MsgPlayerSetAvatorResultS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorResultS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorResultS2C, result_),
  };
  MsgPlayerSetAvatorResultS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerSetAvatorResultS2C_descriptor_,
      MsgPlayerSetAvatorResultS2C::default_instance_,
      MsgPlayerSetAvatorResultS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorResultS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSetAvatorResultS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerSetAvatorResultS2C));
  MsgPlayerUpdateAvatorGS2S_descriptor_ = file->message_type(5);
  static const int MsgPlayerUpdateAvatorGS2S_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerUpdateAvatorGS2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerUpdateAvatorGS2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerUpdateAvatorGS2S, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerUpdateAvatorGS2S, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerUpdateAvatorGS2S, skincolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerUpdateAvatorGS2S, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerUpdateAvatorGS2S, haircolor_),
  };
  MsgPlayerUpdateAvatorGS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerUpdateAvatorGS2S_descriptor_,
      MsgPlayerUpdateAvatorGS2S::default_instance_,
      MsgPlayerUpdateAvatorGS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerUpdateAvatorGS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerUpdateAvatorGS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerUpdateAvatorGS2S));
  MsgLoginDayGS2C_descriptor_ = file->message_type(6);
  static const int MsgLoginDayGS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginDayGS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginDayGS2C, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginDayGS2C, firstlogin_),
  };
  MsgLoginDayGS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginDayGS2C_descriptor_,
      MsgLoginDayGS2C::default_instance_,
      MsgLoginDayGS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginDayGS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginDayGS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginDayGS2C));
  MsgDeadG2CS_descriptor_ = file->message_type(7);
  static const int MsgDeadG2CS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeadG2CS, msgtype_),
  };
  MsgDeadG2CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDeadG2CS_descriptor_,
      MsgDeadG2CS::default_instance_,
      MsgDeadG2CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeadG2CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeadG2CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDeadG2CS));
  MsgRebirthC2GS_descriptor_ = file->message_type(8);
  static const int MsgRebirthC2GS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRebirthC2GS, msgtype_),
  };
  MsgRebirthC2GS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRebirthC2GS_descriptor_,
      MsgRebirthC2GS::default_instance_,
      MsgRebirthC2GS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRebirthC2GS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRebirthC2GS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRebirthC2GS));
  MsgRebirthGS2C_descriptor_ = file->message_type(9);
  static const int MsgRebirthGS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRebirthGS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRebirthGS2C, result_),
  };
  MsgRebirthGS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRebirthGS2C_descriptor_,
      MsgRebirthGS2C::default_instance_,
      MsgRebirthGS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRebirthGS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRebirthGS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRebirthGS2C));
  MsgPlayerNormalAttackC2S_descriptor_ = file->message_type(10);
  static const int MsgPlayerNormalAttackC2S_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackC2S, target_obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackC2S, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackC2S, idhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackC2S, isfinalblow_),
  };
  MsgPlayerNormalAttackC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerNormalAttackC2S_descriptor_,
      MsgPlayerNormalAttackC2S::default_instance_,
      MsgPlayerNormalAttackC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerNormalAttackC2S));
  MsgPlayerNormalAttackResS2C_descriptor_ = file->message_type(11);
  static const int MsgPlayerNormalAttackResS2C_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackResS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackResS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackResS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackResS2C, targetinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackResS2C, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackResS2C, idhp_),
  };
  MsgPlayerNormalAttackResS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerNormalAttackResS2C_descriptor_,
      MsgPlayerNormalAttackResS2C::default_instance_,
      MsgPlayerNormalAttackResS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackResS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNormalAttackResS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerNormalAttackResS2C));
  MsgPlayerReviveC2S_descriptor_ = file->message_type(12);
  static const int MsgPlayerReviveC2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerReviveC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerReviveC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerReviveC2S, etype_),
  };
  MsgPlayerReviveC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerReviveC2S_descriptor_,
      MsgPlayerReviveC2S::default_instance_,
      MsgPlayerReviveC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerReviveC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerReviveC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerReviveC2S));
  MsgPlayerDataSyncDoneG2C_descriptor_ = file->message_type(13);
  static const int MsgPlayerDataSyncDoneG2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDataSyncDoneG2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDataSyncDoneG2C, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDataSyncDoneG2C, boss_battle_online_),
  };
  MsgPlayerDataSyncDoneG2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerDataSyncDoneG2C_descriptor_,
      MsgPlayerDataSyncDoneG2C::default_instance_,
      MsgPlayerDataSyncDoneG2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDataSyncDoneG2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDataSyncDoneG2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerDataSyncDoneG2C));
  MsgPlayerSysInfoGS2C_descriptor_ = file->message_type(14);
  static const int MsgPlayerSysInfoGS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysInfoGS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysInfoGS2C, playersys_),
  };
  MsgPlayerSysInfoGS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerSysInfoGS2C_descriptor_,
      MsgPlayerSysInfoGS2C::default_instance_,
      MsgPlayerSysInfoGS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysInfoGS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSysInfoGS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerSysInfoGS2C));
  MsgPlayerReadyC2S_descriptor_ = file->message_type(15);
  static const int MsgPlayerReadyC2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerReadyC2S, msgtype_),
  };
  MsgPlayerReadyC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerReadyC2S_descriptor_,
      MsgPlayerReadyC2S::default_instance_,
      MsgPlayerReadyC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerReadyC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerReadyC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerReadyC2S));
  MsgPlayerInfoQueryC2S_descriptor_ = file->message_type(16);
  static const int MsgPlayerInfoQueryC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryC2S, queryiggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryC2S, clientval_),
  };
  MsgPlayerInfoQueryC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerInfoQueryC2S_descriptor_,
      MsgPlayerInfoQueryC2S::default_instance_,
      MsgPlayerInfoQueryC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerInfoQueryC2S));
  MsgPlayerInfoQueryResultS2C_descriptor_ = file->message_type(17);
  static const int MsgPlayerInfoQueryResultS2C_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryResultS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryResultS2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryResultS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryResultS2C, queryiggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryResultS2C, clientval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryResultS2C, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryResultS2C, equip_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryResultS2C, buff_infos_),
  };
  MsgPlayerInfoQueryResultS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerInfoQueryResultS2C_descriptor_,
      MsgPlayerInfoQueryResultS2C::default_instance_,
      MsgPlayerInfoQueryResultS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryResultS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfoQueryResultS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerInfoQueryResultS2C));
  MsgPlayerInfoQueryResultS2C_QUERY_RESULT_descriptor_ = MsgPlayerInfoQueryResultS2C_descriptor_->enum_type(0);
  MsgPlayerLevelUpNotifyS2S_descriptor_ = file->message_type(18);
  static const int MsgPlayerLevelUpNotifyS2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLevelUpNotifyS2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLevelUpNotifyS2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLevelUpNotifyS2S, lv_),
  };
  MsgPlayerLevelUpNotifyS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerLevelUpNotifyS2S_descriptor_,
      MsgPlayerLevelUpNotifyS2S::default_instance_,
      MsgPlayerLevelUpNotifyS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLevelUpNotifyS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLevelUpNotifyS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerLevelUpNotifyS2S));
  MsgServerQueryPlayerInfoS2S_descriptor_ = file->message_type(19);
  static const int MsgServerQueryPlayerInfoS2S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoS2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoS2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoS2S, queryiggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoS2S, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoS2S, iflag_),
  };
  MsgServerQueryPlayerInfoS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgServerQueryPlayerInfoS2S_descriptor_,
      MsgServerQueryPlayerInfoS2S::default_instance_,
      MsgServerQueryPlayerInfoS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgServerQueryPlayerInfoS2S));
  MsgServerQueryPlayerInfoRetS2S_descriptor_ = file->message_type(20);
  static const int MsgServerQueryPlayerInfoRetS2S_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoRetS2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoRetS2S, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoRetS2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoRetS2S, queryiggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoRetS2S, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoRetS2S, iflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoRetS2S, base_),
  };
  MsgServerQueryPlayerInfoRetS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgServerQueryPlayerInfoRetS2S_descriptor_,
      MsgServerQueryPlayerInfoRetS2S::default_instance_,
      MsgServerQueryPlayerInfoRetS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoRetS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerQueryPlayerInfoRetS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgServerQueryPlayerInfoRetS2S));
  MsgServerQueryPlayerInfoRetS2S_QUERY_RESULT_descriptor_ = MsgServerQueryPlayerInfoRetS2S_descriptor_->enum_type(0);
  MsgPlayerRenameC2S_descriptor_ = file->message_type(21);
  static const int MsgPlayerRenameC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameC2S, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameC2S, firstfree_),
  };
  MsgPlayerRenameC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerRenameC2S_descriptor_,
      MsgPlayerRenameC2S::default_instance_,
      MsgPlayerRenameC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerRenameC2S));
  MsgPlayerRenameS2C_descriptor_ = file->message_type(22);
  static const int MsgPlayerRenameS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameS2C, firstfree_),
  };
  MsgPlayerRenameS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerRenameS2C_descriptor_,
      MsgPlayerRenameS2C::default_instance_,
      MsgPlayerRenameS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerRenameS2C));
  MsgPlayerDataContainerSyncDoneG2C_descriptor_ = file->message_type(23);
  static const int MsgPlayerDataContainerSyncDoneG2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDataContainerSyncDoneG2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDataContainerSyncDoneG2C, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDataContainerSyncDoneG2C, next_zero_time_),
  };
  MsgPlayerDataContainerSyncDoneG2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerDataContainerSyncDoneG2C_descriptor_,
      MsgPlayerDataContainerSyncDoneG2C::default_instance_,
      MsgPlayerDataContainerSyncDoneG2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDataContainerSyncDoneG2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDataContainerSyncDoneG2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerDataContainerSyncDoneG2C));
  QueryPlayerRequest_descriptor_ = file->message_type(24);
  static const int QueryPlayerRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerRequest, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerRequest, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerRequest, query_iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerRequest, includes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerRequest, build_tower_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerRequest, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerRequest, mapserverid_),
  };
  QueryPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPlayerRequest_descriptor_,
      QueryPlayerRequest::default_instance_,
      QueryPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPlayerRequest));
  QueryPlayerResult_descriptor_ = file->message_type(25);
  static const int QueryPlayerResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerResult, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerResult, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerResult, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerResult, map_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerResult, protector_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerResult, blocknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerResult, mapblockx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerResult, mapblocky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerResult, blocksizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerResult, blocksizey_),
  };
  QueryPlayerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPlayerResult_descriptor_,
      QueryPlayerResult::default_instance_,
      QueryPlayerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlayerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPlayerResult));
  MsgQueryPlayerM2MRequest_descriptor_ = file->message_type(26);
  static const int MsgQueryPlayerM2MRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MRequest, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MRequest, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MRequest, request_),
  };
  MsgQueryPlayerM2MRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryPlayerM2MRequest_descriptor_,
      MsgQueryPlayerM2MRequest::default_instance_,
      MsgQueryPlayerM2MRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryPlayerM2MRequest));
  MsgQueryPlayerM2MResponse_descriptor_ = file->message_type(27);
  static const int MsgQueryPlayerM2MResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MResponse, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MResponse, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MResponse, istail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MResponse, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MResponse, query_iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MResponse, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MResponse, finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MResponse, mapserverid_),
  };
  MsgQueryPlayerM2MResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryPlayerM2MResponse_descriptor_,
      MsgQueryPlayerM2MResponse::default_instance_,
      MsgQueryPlayerM2MResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2MResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryPlayerM2MResponse));
  MsgQueryPlayerM2GRequest_descriptor_ = file->message_type(28);
  static const int MsgQueryPlayerM2GRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GRequest, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GRequest, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GRequest, request_),
  };
  MsgQueryPlayerM2GRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryPlayerM2GRequest_descriptor_,
      MsgQueryPlayerM2GRequest::default_instance_,
      MsgQueryPlayerM2GRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryPlayerM2GRequest));
  MsgQueryPlayerM2GResponse_descriptor_ = file->message_type(29);
  static const int MsgQueryPlayerM2GResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GResponse, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GResponse, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GResponse, istail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GResponse, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GResponse, query_iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GResponse, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GResponse, finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GResponse, mapserverid_),
  };
  MsgQueryPlayerM2GResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryPlayerM2GResponse_descriptor_,
      MsgQueryPlayerM2GResponse::default_instance_,
      MsgQueryPlayerM2GResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerM2GResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryPlayerM2GResponse));
  MsgPlayerRenameFlagS2C_descriptor_ = file->message_type(30);
  static const int MsgPlayerRenameFlagS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameFlagS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameFlagS2C, first_free_rename_),
  };
  MsgPlayerRenameFlagS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerRenameFlagS2C_descriptor_,
      MsgPlayerRenameFlagS2C::default_instance_,
      MsgPlayerRenameFlagS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameFlagS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerRenameFlagS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerRenameFlagS2C));
  MsgPlayerDailyResetS2C_descriptor_ = file->message_type(31);
  static const int MsgPlayerDailyResetS2C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDailyResetS2C, msgtype_),
  };
  MsgPlayerDailyResetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerDailyResetS2C_descriptor_,
      MsgPlayerDailyResetS2C::default_instance_,
      MsgPlayerDailyResetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDailyResetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDailyResetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerDailyResetS2C));
  MsgPlayerSlideBegin_descriptor_ = file->message_type(32);
  static const int MsgPlayerSlideBegin_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSlideBegin, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSlideBegin, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSlideBegin, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSlideBegin, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSlideBegin, time_),
  };
  MsgPlayerSlideBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerSlideBegin_descriptor_,
      MsgPlayerSlideBegin::default_instance_,
      MsgPlayerSlideBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSlideBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSlideBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerSlideBegin));
  MsgPlayerSlideEnd_descriptor_ = file->message_type(33);
  static const int MsgPlayerSlideEnd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSlideEnd, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSlideEnd, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSlideEnd, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSlideEnd, pos_y_),
  };
  MsgPlayerSlideEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerSlideEnd_descriptor_,
      MsgPlayerSlideEnd::default_instance_,
      MsgPlayerSlideEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSlideEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSlideEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerSlideEnd));
  MsgPlayerAuthenticationC2S_descriptor_ = file->message_type(34);
  static const int MsgPlayerAuthenticationC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAuthenticationC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAuthenticationC2S, is_adult_),
  };
  MsgPlayerAuthenticationC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerAuthenticationC2S_descriptor_,
      MsgPlayerAuthenticationC2S::default_instance_,
      MsgPlayerAuthenticationC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAuthenticationC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAuthenticationC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerAuthenticationC2S));
  MsgPlayerKickOutS2C_descriptor_ = file->message_type(35);
  static const int MsgPlayerKickOutS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKickOutS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKickOutS2C, res_),
  };
  MsgPlayerKickOutS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerKickOutS2C_descriptor_,
      MsgPlayerKickOutS2C::default_instance_,
      MsgPlayerKickOutS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKickOutS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerKickOutS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerKickOutS2C));
  MsgPlayerKickOutS2C_Reason_descriptor_ = MsgPlayerKickOutS2C_descriptor_->enum_type(0);
  MsgQueryPlayerAccuOnlineTimeC2S_descriptor_ = file->message_type(36);
  static const int MsgQueryPlayerAccuOnlineTimeC2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerAccuOnlineTimeC2S, msgtype_),
  };
  MsgQueryPlayerAccuOnlineTimeC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryPlayerAccuOnlineTimeC2S_descriptor_,
      MsgQueryPlayerAccuOnlineTimeC2S::default_instance_,
      MsgQueryPlayerAccuOnlineTimeC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerAccuOnlineTimeC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerAccuOnlineTimeC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryPlayerAccuOnlineTimeC2S));
  MsgQueryPlayerAccuOnlineTimeS2C_descriptor_ = file->message_type(37);
  static const int MsgQueryPlayerAccuOnlineTimeS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerAccuOnlineTimeS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerAccuOnlineTimeS2C, accu_time_),
  };
  MsgQueryPlayerAccuOnlineTimeS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryPlayerAccuOnlineTimeS2C_descriptor_,
      MsgQueryPlayerAccuOnlineTimeS2C::default_instance_,
      MsgQueryPlayerAccuOnlineTimeS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerAccuOnlineTimeS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerAccuOnlineTimeS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryPlayerAccuOnlineTimeS2C));
  MsgPlayerPrivateTaskFlagGetC2S_descriptor_ = file->message_type(38);
  static const int MsgPlayerPrivateTaskFlagGetC2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagGetC2S, msgtype_),
  };
  MsgPlayerPrivateTaskFlagGetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerPrivateTaskFlagGetC2S_descriptor_,
      MsgPlayerPrivateTaskFlagGetC2S::default_instance_,
      MsgPlayerPrivateTaskFlagGetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagGetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagGetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerPrivateTaskFlagGetC2S));
  MsgPlayerPrivateTaskFlagGetS2C_descriptor_ = file->message_type(39);
  static const int MsgPlayerPrivateTaskFlagGetS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagGetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagGetS2C, data_),
  };
  MsgPlayerPrivateTaskFlagGetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerPrivateTaskFlagGetS2C_descriptor_,
      MsgPlayerPrivateTaskFlagGetS2C::default_instance_,
      MsgPlayerPrivateTaskFlagGetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagGetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagGetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerPrivateTaskFlagGetS2C));
  MsgPlayerPrivateTaskFlagTrigC2S_descriptor_ = file->message_type(40);
  static const int MsgPlayerPrivateTaskFlagTrigC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagTrigC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagTrigC2S, flag_),
  };
  MsgPlayerPrivateTaskFlagTrigC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerPrivateTaskFlagTrigC2S_descriptor_,
      MsgPlayerPrivateTaskFlagTrigC2S::default_instance_,
      MsgPlayerPrivateTaskFlagTrigC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagTrigC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagTrigC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerPrivateTaskFlagTrigC2S));
  MsgPlayerPrivateTaskFlagTrigS2C_descriptor_ = file->message_type(41);
  static const int MsgPlayerPrivateTaskFlagTrigS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagTrigS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagTrigS2C, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagTrigS2C, res_),
  };
  MsgPlayerPrivateTaskFlagTrigS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerPrivateTaskFlagTrigS2C_descriptor_,
      MsgPlayerPrivateTaskFlagTrigS2C::default_instance_,
      MsgPlayerPrivateTaskFlagTrigS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagTrigS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerPrivateTaskFlagTrigS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerPrivateTaskFlagTrigS2C));
  MsgPlayerPrivateTaskFlagTrigS2C_RESULT_descriptor_ = MsgPlayerPrivateTaskFlagTrigS2C_descriptor_->enum_type(0);
  MsgGetPrivateMapBotC2S_descriptor_ = file->message_type(42);
  static const int MsgGetPrivateMapBotC2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotC2S, msgtype_),
  };
  MsgGetPrivateMapBotC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGetPrivateMapBotC2S_descriptor_,
      MsgGetPrivateMapBotC2S::default_instance_,
      MsgGetPrivateMapBotC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGetPrivateMapBotC2S));
  MsgGetPrivateMapBotS2C_descriptor_ = file->message_type(43);
  static const int MsgGetPrivateMapBotS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C, bot_),
  };
  MsgGetPrivateMapBotS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGetPrivateMapBotS2C_descriptor_,
      MsgGetPrivateMapBotS2C::default_instance_,
      MsgGetPrivateMapBotS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGetPrivateMapBotS2C));
  MsgGetPrivateMapBotS2C_BotData_descriptor_ = MsgGetPrivateMapBotS2C_descriptor_->nested_type(0);
  static const int MsgGetPrivateMapBotS2C_BotData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C_BotData, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C_BotData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C_BotData, lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C_BotData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C_BotData, skincolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C_BotData, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C_BotData, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C_BotData, equips_),
  };
  MsgGetPrivateMapBotS2C_BotData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGetPrivateMapBotS2C_BotData_descriptor_,
      MsgGetPrivateMapBotS2C_BotData::default_instance_,
      MsgGetPrivateMapBotS2C_BotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C_BotData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetPrivateMapBotS2C_BotData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGetPrivateMapBotS2C_BotData));
  MsgGotoPrivateBotHomeC2S_descriptor_ = file->message_type(44);
  static const int MsgGotoPrivateBotHomeC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGotoPrivateBotHomeC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGotoPrivateBotHomeC2S, target_iggid_),
  };
  MsgGotoPrivateBotHomeC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGotoPrivateBotHomeC2S_descriptor_,
      MsgGotoPrivateBotHomeC2S::default_instance_,
      MsgGotoPrivateBotHomeC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGotoPrivateBotHomeC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGotoPrivateBotHomeC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGotoPrivateBotHomeC2S));
  MsgPlayerModifyAvatorC2S_descriptor_ = file->message_type(45);
  static const int MsgPlayerModifyAvatorC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerModifyAvatorC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerModifyAvatorC2S, skincolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerModifyAvatorC2S, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerModifyAvatorC2S, haircolor_),
  };
  MsgPlayerModifyAvatorC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerModifyAvatorC2S_descriptor_,
      MsgPlayerModifyAvatorC2S::default_instance_,
      MsgPlayerModifyAvatorC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerModifyAvatorC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerModifyAvatorC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerModifyAvatorC2S));
  MsgPlayerModifyAvatorS2C_descriptor_ = file->message_type(46);
  static const int MsgPlayerModifyAvatorS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerModifyAvatorS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerModifyAvatorS2C, res_),
  };
  MsgPlayerModifyAvatorS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerModifyAvatorS2C_descriptor_,
      MsgPlayerModifyAvatorS2C::default_instance_,
      MsgPlayerModifyAvatorS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerModifyAvatorS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerModifyAvatorS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerModifyAvatorS2C));
  MsgPlayerADNVideoAwardC2S_descriptor_ = file->message_type(47);
  static const int MsgPlayerADNVideoAwardC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerADNVideoAwardC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerADNVideoAwardC2S, iggid_),
  };
  MsgPlayerADNVideoAwardC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerADNVideoAwardC2S_descriptor_,
      MsgPlayerADNVideoAwardC2S::default_instance_,
      MsgPlayerADNVideoAwardC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerADNVideoAwardC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerADNVideoAwardC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerADNVideoAwardC2S));
  MsgPlayerADNVideoAwardS2C_descriptor_ = file->message_type(48);
  static const int MsgPlayerADNVideoAwardS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerADNVideoAwardS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerADNVideoAwardS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerADNVideoAwardS2C, nexttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerADNVideoAwardS2C, coin_),
  };
  MsgPlayerADNVideoAwardS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerADNVideoAwardS2C_descriptor_,
      MsgPlayerADNVideoAwardS2C::default_instance_,
      MsgPlayerADNVideoAwardS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerADNVideoAwardS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerADNVideoAwardS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerADNVideoAwardS2C));
  MsgPlayerSynBaseC2S_descriptor_ = file->message_type(49);
  static const int MsgPlayerSynBaseC2S_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSynBaseC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSynBaseC2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSynBaseC2S, basetpy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSynBaseC2S, binc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSynBaseC2S, nvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSynBaseC2S, reason_),
  };
  MsgPlayerSynBaseC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerSynBaseC2S_descriptor_,
      MsgPlayerSynBaseC2S::default_instance_,
      MsgPlayerSynBaseC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSynBaseC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSynBaseC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerSynBaseC2S));
  MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_descriptor_ = MsgPlayerSynBaseC2S_descriptor_->enum_type(0);
  MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_REASON_descriptor_ = MsgPlayerSynBaseC2S_descriptor_->enum_type(1);
  MSG_PLAYER_RESULT_descriptor_ = file->enum_type(0);
  SET_AVATOR_RESULT_descriptor_ = file->enum_type(1);
  REVIVE_TYPE_descriptor_ = file->enum_type(2);
  MSG_SERVER_QPINFO_FLG_descriptor_ = file->enum_type(3);
  E_QueryPlayerInclude_descriptor_ = file->enum_type(4);
  E_QueryPlayerErrorCode_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgPlayer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerSysBaseData_descriptor_, &MsgPlayerSysBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerSysBaseData_DayMaxNum_descriptor_, &MsgPlayerSysBaseData_DayMaxNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerSysBaseData_DayMaxNum_ItemData_descriptor_, &MsgPlayerSysBaseData_DayMaxNum_ItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerSysBaseData_MobReborn_descriptor_, &MsgPlayerSysBaseData_MobReborn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryPlayerInfo_Base_descriptor_, &MsgQueryPlayerInfo_Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerInfoGS2C_descriptor_, &MsgPlayerInfoGS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerSetAvatorC2S_descriptor_, &MsgPlayerSetAvatorC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerSetAvatorResultS2C_descriptor_, &MsgPlayerSetAvatorResultS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerUpdateAvatorGS2S_descriptor_, &MsgPlayerUpdateAvatorGS2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginDayGS2C_descriptor_, &MsgLoginDayGS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDeadG2CS_descriptor_, &MsgDeadG2CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRebirthC2GS_descriptor_, &MsgRebirthC2GS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRebirthGS2C_descriptor_, &MsgRebirthGS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerNormalAttackC2S_descriptor_, &MsgPlayerNormalAttackC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerNormalAttackResS2C_descriptor_, &MsgPlayerNormalAttackResS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerReviveC2S_descriptor_, &MsgPlayerReviveC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerDataSyncDoneG2C_descriptor_, &MsgPlayerDataSyncDoneG2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerSysInfoGS2C_descriptor_, &MsgPlayerSysInfoGS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerReadyC2S_descriptor_, &MsgPlayerReadyC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerInfoQueryC2S_descriptor_, &MsgPlayerInfoQueryC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerInfoQueryResultS2C_descriptor_, &MsgPlayerInfoQueryResultS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerLevelUpNotifyS2S_descriptor_, &MsgPlayerLevelUpNotifyS2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgServerQueryPlayerInfoS2S_descriptor_, &MsgServerQueryPlayerInfoS2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgServerQueryPlayerInfoRetS2S_descriptor_, &MsgServerQueryPlayerInfoRetS2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerRenameC2S_descriptor_, &MsgPlayerRenameC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerRenameS2C_descriptor_, &MsgPlayerRenameS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerDataContainerSyncDoneG2C_descriptor_, &MsgPlayerDataContainerSyncDoneG2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPlayerRequest_descriptor_, &QueryPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPlayerResult_descriptor_, &QueryPlayerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryPlayerM2MRequest_descriptor_, &MsgQueryPlayerM2MRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryPlayerM2MResponse_descriptor_, &MsgQueryPlayerM2MResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryPlayerM2GRequest_descriptor_, &MsgQueryPlayerM2GRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryPlayerM2GResponse_descriptor_, &MsgQueryPlayerM2GResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerRenameFlagS2C_descriptor_, &MsgPlayerRenameFlagS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerDailyResetS2C_descriptor_, &MsgPlayerDailyResetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerSlideBegin_descriptor_, &MsgPlayerSlideBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerSlideEnd_descriptor_, &MsgPlayerSlideEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerAuthenticationC2S_descriptor_, &MsgPlayerAuthenticationC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerKickOutS2C_descriptor_, &MsgPlayerKickOutS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryPlayerAccuOnlineTimeC2S_descriptor_, &MsgQueryPlayerAccuOnlineTimeC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryPlayerAccuOnlineTimeS2C_descriptor_, &MsgQueryPlayerAccuOnlineTimeS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerPrivateTaskFlagGetC2S_descriptor_, &MsgPlayerPrivateTaskFlagGetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerPrivateTaskFlagGetS2C_descriptor_, &MsgPlayerPrivateTaskFlagGetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerPrivateTaskFlagTrigC2S_descriptor_, &MsgPlayerPrivateTaskFlagTrigC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerPrivateTaskFlagTrigS2C_descriptor_, &MsgPlayerPrivateTaskFlagTrigS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGetPrivateMapBotC2S_descriptor_, &MsgGetPrivateMapBotC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGetPrivateMapBotS2C_descriptor_, &MsgGetPrivateMapBotS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGetPrivateMapBotS2C_BotData_descriptor_, &MsgGetPrivateMapBotS2C_BotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGotoPrivateBotHomeC2S_descriptor_, &MsgGotoPrivateBotHomeC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerModifyAvatorC2S_descriptor_, &MsgPlayerModifyAvatorC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerModifyAvatorS2C_descriptor_, &MsgPlayerModifyAvatorS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerADNVideoAwardC2S_descriptor_, &MsgPlayerADNVideoAwardC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerADNVideoAwardS2C_descriptor_, &MsgPlayerADNVideoAwardS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerSynBaseC2S_descriptor_, &MsgPlayerSynBaseC2S::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgPlayer_2eproto() {
  delete MsgPlayerSysBaseData::default_instance_;
  delete MsgPlayerSysBaseData_reflection_;
  delete MsgPlayerSysBaseData_DayMaxNum::default_instance_;
  delete MsgPlayerSysBaseData_DayMaxNum_reflection_;
  delete MsgPlayerSysBaseData_DayMaxNum_ItemData::default_instance_;
  delete MsgPlayerSysBaseData_DayMaxNum_ItemData_reflection_;
  delete MsgPlayerSysBaseData_MobReborn::default_instance_;
  delete MsgPlayerSysBaseData_MobReborn_reflection_;
  delete MsgQueryPlayerInfo_Base::default_instance_;
  delete MsgQueryPlayerInfo_Base_reflection_;
  delete MsgPlayerInfoGS2C::default_instance_;
  delete MsgPlayerInfoGS2C_reflection_;
  delete MsgPlayerSetAvatorC2S::default_instance_;
  delete MsgPlayerSetAvatorC2S_reflection_;
  delete MsgPlayerSetAvatorResultS2C::default_instance_;
  delete MsgPlayerSetAvatorResultS2C_reflection_;
  delete MsgPlayerUpdateAvatorGS2S::default_instance_;
  delete MsgPlayerUpdateAvatorGS2S_reflection_;
  delete MsgLoginDayGS2C::default_instance_;
  delete MsgLoginDayGS2C_reflection_;
  delete MsgDeadG2CS::default_instance_;
  delete MsgDeadG2CS_reflection_;
  delete MsgRebirthC2GS::default_instance_;
  delete MsgRebirthC2GS_reflection_;
  delete MsgRebirthGS2C::default_instance_;
  delete MsgRebirthGS2C_reflection_;
  delete MsgPlayerNormalAttackC2S::default_instance_;
  delete MsgPlayerNormalAttackC2S_reflection_;
  delete MsgPlayerNormalAttackResS2C::default_instance_;
  delete MsgPlayerNormalAttackResS2C_reflection_;
  delete MsgPlayerReviveC2S::default_instance_;
  delete MsgPlayerReviveC2S_reflection_;
  delete MsgPlayerDataSyncDoneG2C::default_instance_;
  delete MsgPlayerDataSyncDoneG2C_reflection_;
  delete MsgPlayerSysInfoGS2C::default_instance_;
  delete MsgPlayerSysInfoGS2C_reflection_;
  delete MsgPlayerReadyC2S::default_instance_;
  delete MsgPlayerReadyC2S_reflection_;
  delete MsgPlayerInfoQueryC2S::default_instance_;
  delete MsgPlayerInfoQueryC2S_reflection_;
  delete MsgPlayerInfoQueryResultS2C::default_instance_;
  delete MsgPlayerInfoQueryResultS2C_reflection_;
  delete MsgPlayerLevelUpNotifyS2S::default_instance_;
  delete MsgPlayerLevelUpNotifyS2S_reflection_;
  delete MsgServerQueryPlayerInfoS2S::default_instance_;
  delete MsgServerQueryPlayerInfoS2S_reflection_;
  delete MsgServerQueryPlayerInfoRetS2S::default_instance_;
  delete MsgServerQueryPlayerInfoRetS2S_reflection_;
  delete MsgPlayerRenameC2S::default_instance_;
  delete MsgPlayerRenameC2S_reflection_;
  delete MsgPlayerRenameS2C::default_instance_;
  delete MsgPlayerRenameS2C_reflection_;
  delete MsgPlayerDataContainerSyncDoneG2C::default_instance_;
  delete MsgPlayerDataContainerSyncDoneG2C_reflection_;
  delete QueryPlayerRequest::default_instance_;
  delete QueryPlayerRequest_reflection_;
  delete QueryPlayerResult::default_instance_;
  delete QueryPlayerResult_reflection_;
  delete MsgQueryPlayerM2MRequest::default_instance_;
  delete MsgQueryPlayerM2MRequest_reflection_;
  delete MsgQueryPlayerM2MResponse::default_instance_;
  delete MsgQueryPlayerM2MResponse_reflection_;
  delete MsgQueryPlayerM2GRequest::default_instance_;
  delete MsgQueryPlayerM2GRequest_reflection_;
  delete MsgQueryPlayerM2GResponse::default_instance_;
  delete MsgQueryPlayerM2GResponse_reflection_;
  delete MsgPlayerRenameFlagS2C::default_instance_;
  delete MsgPlayerRenameFlagS2C_reflection_;
  delete MsgPlayerDailyResetS2C::default_instance_;
  delete MsgPlayerDailyResetS2C_reflection_;
  delete MsgPlayerSlideBegin::default_instance_;
  delete MsgPlayerSlideBegin_reflection_;
  delete MsgPlayerSlideEnd::default_instance_;
  delete MsgPlayerSlideEnd_reflection_;
  delete MsgPlayerAuthenticationC2S::default_instance_;
  delete MsgPlayerAuthenticationC2S_reflection_;
  delete MsgPlayerKickOutS2C::default_instance_;
  delete MsgPlayerKickOutS2C_reflection_;
  delete MsgQueryPlayerAccuOnlineTimeC2S::default_instance_;
  delete MsgQueryPlayerAccuOnlineTimeC2S_reflection_;
  delete MsgQueryPlayerAccuOnlineTimeS2C::default_instance_;
  delete MsgQueryPlayerAccuOnlineTimeS2C_reflection_;
  delete MsgPlayerPrivateTaskFlagGetC2S::default_instance_;
  delete MsgPlayerPrivateTaskFlagGetC2S_reflection_;
  delete MsgPlayerPrivateTaskFlagGetS2C::default_instance_;
  delete MsgPlayerPrivateTaskFlagGetS2C_reflection_;
  delete MsgPlayerPrivateTaskFlagTrigC2S::default_instance_;
  delete MsgPlayerPrivateTaskFlagTrigC2S_reflection_;
  delete MsgPlayerPrivateTaskFlagTrigS2C::default_instance_;
  delete MsgPlayerPrivateTaskFlagTrigS2C_reflection_;
  delete MsgGetPrivateMapBotC2S::default_instance_;
  delete MsgGetPrivateMapBotC2S_reflection_;
  delete MsgGetPrivateMapBotS2C::default_instance_;
  delete MsgGetPrivateMapBotS2C_reflection_;
  delete MsgGetPrivateMapBotS2C_BotData::default_instance_;
  delete MsgGetPrivateMapBotS2C_BotData_reflection_;
  delete MsgGotoPrivateBotHomeC2S::default_instance_;
  delete MsgGotoPrivateBotHomeC2S_reflection_;
  delete MsgPlayerModifyAvatorC2S::default_instance_;
  delete MsgPlayerModifyAvatorC2S_reflection_;
  delete MsgPlayerModifyAvatorS2C::default_instance_;
  delete MsgPlayerModifyAvatorS2C_reflection_;
  delete MsgPlayerADNVideoAwardC2S::default_instance_;
  delete MsgPlayerADNVideoAwardC2S_reflection_;
  delete MsgPlayerADNVideoAwardS2C::default_instance_;
  delete MsgPlayerADNVideoAwardS2C_reflection_;
  delete MsgPlayerSynBaseC2S::default_instance_;
  delete MsgPlayerSynBaseC2S_reflection_;
}

void protobuf_AddDesc_MsgPlayer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgGameDef_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgItem_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgBuff_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgBuildTower_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgProtector_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MsgPlayer.proto\022\005MsgPB\032\rMsgType.proto\032"
    "\020MsgGameDef.proto\032\rMsgItem.proto\032\rMsgBuf"
    "f.proto\032\023MsgBuildTower.proto\032\022MsgProtect"
    "or.proto\"\371\004\n\024MsgPlayerSysBaseData\022\037\n\027sur"
    "vival_supermoon_time\030\001 \001(\005\022\022\n\ncreate_day"
    "\030\002 \001(\005\022\023\n\013weapon_uuid\030\003 \001(\003\022\021\n\ttool_uuid"
    "\030\004 \001(\003\022\026\n\016weapon_endless\030\005 \001(\003\022\024\n\014tool_e"
    "ndless\030\006 \001(\003\022\030\n\020daily_reset_date\030\007 \001(\005\022\030"
    "\n\020create_role_time\030\010 \001(\003\022\r\n\005dirty\030\t \001(\003\022"
    "\030\n\020total_cash_payed\030\n \001(\005\022\021\n\tvip_level\030\013"
    " \001(\005\022:\n\013day_max_num\030\014 \001(\0132%.MsgPB.MsgPla"
    "yerSysBaseData.DayMaxNum\0223\n\004mobs\030\r \003(\0132%"
    ".MsgPB.MsgPlayerSysBaseData.MobReborn\032\311\001"
    "\n\tDayMaxNum\022@\n\010item_num\030\001 \003(\0132..MsgPB.Ms"
    "gPlayerSysBaseData.DayMaxNum.ItemData\022\025\n"
    "\rachieve_total\030\002 \001(\005\022#\n\024achieve_total_wa"
    "rned\030\003 \001(\010:\005false\032>\n\010ItemData\022\016\n\006dataid\030"
    "\001 \002(\005\022\013\n\003num\030\002 \002(\005\022\025\n\006warned\030\003 \001(\010:\005fals"
    "e\032)\n\tMobReborn\022\016\n\006dataid\030\001 \002(\005\022\014\n\004time\030\002"
    " \002(\003\"\324\001\n\027MsgQueryPlayerInfo_Base\022\r\n\005iggi"
    "d\030\001 \001(\003\022\r\n\005level\030\002 \001(\005\022\020\n\010nickname\030\003 \001(\t"
    "\022\016\n\006gender\030\004 \001(\005\022\021\n\tskincolor\030\005 \001(\005\022\014\n\004h"
    "air\030\006 \001(\005\022\021\n\thaircolor\030\007 \001(\005\022\022\n\nLogoutTi"
    "me\030\010 \001(\003\022\013\n\003exp\030\t \001(\003\022\n\n\002hp\030\n \001(\005\022\n\n\002mp\030"
    "\013 \001(\005\022\014\n\004food\030\014 \001(\005\"\274\006\n\021MsgPlayerInfoGS2"
    "C\0227\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\025_MS"
    "G_PLAYER_INFO_GS2C\022\r\n\005iggid\030\002 \001(\003\022\n\n\002lv\030"
    "\006 \001(\005\022\013\n\003exp\030\007 \001(\003\022\014\n\004food\030\010 \001(\005\022\016\n\006brea"
    "th\030\t \001(\005\022\020\n\010nickname\030\n \001(\t\022\014\n\004race\030\013 \001(\005"
    "\022\016\n\006gender\030\014 \001(\005\022\021\n\tskincolor\030\r \001(\005\022\014\n\004h"
    "air\030\016 \001(\005\022\021\n\thaircolor\030\017 \001(\005\022\014\n\004face\030\020 \001"
    "(\005\022\021\n\tfacecolor\030\021 \001(\005\022\021\n\tunderwear\030\022 \001(\005"
    "\022\026\n\016underwearcolor\030\023 \001(\005\022\021\n\townmapnum\030\024 "
    "\001(\005\022\n\n\002hp\030\025 \001(\005\022\n\n\002mp\030\026 \001(\005\022\022\n\navatordon"
    "e\030\027 \001(\005\022\022\n\npvpsegment\030\030 \001(\005\022\020\n\010pvpscore\030"
    "\031 \001(\005\022\024\n\014pvpkillscore\030\032 \001(\005\022\024\n\014pvpranksc"
    "ore\030\033 \001(\005\022\017\n\007pvptime\030\034 \001(\005\022\017\n\007pvpcoin\030\035 "
    "\001(\005\022\r\n\005group\030\036 \001(\r\022\022\n\nendlessLev\030\037 \001(\005\022\022"
    "\n\nendlessExp\030  \001(\003\0223\n\nnotifyType\030! \001(\0162\037"
    ".MsgPB.MsgPlayerInfoGS2C.NOTIFY\022\r\n\005maxHp"
    "\030\" \001(\005\022\027\n\017force_up_exp_lv\030# \001(\010\022\014\n\004coin\030"
    "$ \001(\003\022\014\n\004cash\030% \001(\003\022\017\n\007tickets\030& \001(\003\022\024\n\014"
    "curDungeonId\030\' \001(\005\022\021\n\tlottytime\030( \001(\003\022\036\n"
    "\017otherPlayerInfo\030c \001(\010:\005false\";\n\006NOTIFY\022"
    "\023\n\006NOSYNC\020\377\377\377\377\377\377\377\377\377\001\022\013\n\007DEFAULT\020\000\022\017\n\013NAT"
    "UREREGEN\020\001\"\316\001\n\025MsgPlayerSetAvatorC2S\022<\n\007"
    "msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\032_MSG_PLA"
    "YER_SET_AVATOR_C2S\022\r\n\005iggid\030\002 \001(\003\022\022\n\nfir"
    "stlogin\030\003 \001(\010\022\020\n\010nickname\030\004 \001(\t\022\016\n\006gende"
    "r\030\005 \001(\005\022\021\n\tskincolor\030\006 \001(\005\022\014\n\004hair\030\007 \001(\005"
    "\022\021\n\thaircolor\030\010 \001(\005\"\214\001\n\033MsgPlayerSetAvat"
    "orResultS2C\022C\n\007msgType\030\001 \001(\0162\017.MsgPB.EMs"
    "gType:!_MSG_PLAYER_SET_AVATOR_RESULT_S2C"
    "\022(\n\006result\030\002 \001(\0162\030.MsgPB.SET_AVATOR_RESU"
    "LT\"\302\001\n\031MsgPlayerUpdateAvatorGS2S\022@\n\007msgT"
    "ype\030\001 \001(\0162\017.MsgPB.EMsgType:\036_MSG_PLAYER_"
    "UPDATE_AVATOR_GS2S\022\r\n\005iggid\030\002 \001(\003\022\020\n\010nic"
    "kname\030\003 \001(\t\022\016\n\006gender\030\004 \001(\005\022\021\n\tskincolor"
    "\030\005 \001(\005\022\014\n\004hair\030\006 \001(\005\022\021\n\thaircolor\030\007 \001(\005\""
    "i\n\017MsgLoginDayGS2C\0225\n\007msgType\030\001 \001(\0162\017.Ms"
    "gPB.EMsgType:\023_MSG_LOGIN_DAY_GS2C\022\013\n\003day"
    "\030\002 \001(\003\022\022\n\nfirstLogin\030\003 \001(\010\"\?\n\013MsgDeadG2C"
    "S\0220\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\016_MS"
    "G_DEAD_GS2C\"E\n\016MsgRebirthC2GS\0223\n\007msgType"
    "\030\001 \001(\0162\017.MsgPB.EMsgType:\021_MSG_REBIRTH_C2"
    "GS\"U\n\016MsgRebirthGS2C\0223\n\007msgType\030\001 \001(\0162\017."
    "MsgPB.EMsgType:\021_MSG_REBIRTH_GS2C\022\016\n\006res"
    "ult\030\002 \001(\005\"\263\001\n\030MsgPlayerNormalAttackC2S\022\?"
    "\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\035_MSG_P"
    "LAYER_NORMAL_ATTACK_C2S\022\r\n\005iggid\030\002 \001(\003\022\022"
    "\n\ntarget_obj\030\003 \003(\005\022\020\n\010serialid\030\004 \001(\005\022\014\n\004"
    "idHP\030\005 \001(\003\022\023\n\013isFinalBlow\030\006 \001(\010\"\340\001\n\033MsgP"
    "layerNormalAttackResS2C\022C\n\007msgType\030\001 \001(\016"
    "2\017.MsgPB.EMsgType:!_MSG_PLAYER_NORMAL_AT"
    "TACK_RES_S2C\022\r\n\005iggid\030\002 \001(\003\022%\n\003res\030\003 \001(\016"
    "2\030.MsgPB.MSG_PLAYER_RESULT\022&\n\ntargetInfo"
    "\030\004 \003(\0132\022.MsgPB.UnderAttack\022\020\n\010serialid\030\005"
    " \001(\005\022\014\n\004idHP\030\006 \001(\003\"\200\001\n\022MsgPlayerReviveC2"
    "S\0228\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\026_MS"
    "G_PLAYER_REVIVE_C2S\022\r\n\005iggid\030\002 \001(\003\022!\n\005eT"
    "ype\030\003 \001(\0162\022.MsgPB.REVIVE_TYPE\"\214\001\n\030MsgPla"
    "yerDataSyncDoneG2C\022@\n\007msgType\030\001 \001(\0162\017.Ms"
    "gPB.EMsgType:\036_MSG_PLAYER_DATA_SYNC_DONE"
    "_G2C\022\022\n\nlogin_time\030\002 \001(\003\022\032\n\022boss_battle_"
    "online\030\003 \001(\010\"\203\001\n\024MsgPlayerSysInfoGS2C\022;\n"
    "\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\031_MSG_PL"
    "AYER_SYS_INFO_GS2C\022.\n\tplayersys\030\002 \001(\0132\033."
    "MsgPB.MsgPlayerSysBaseData\"L\n\021MsgPlayerR"
    "eadyC2S\0227\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTyp"
    "e:\025_MSG_PLAYER_READY_C2G\"\213\001\n\025MsgPlayerIn"
    "foQueryC2S\022<\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsg"
    "Type:\032_MSG_PLAYER_INFO_QUERY_C2G\022\r\n\005iggi"
    "d\030\002 \001(\003\022\022\n\nQueryIggid\030\003 \001(\003\022\021\n\tClientVal"
    "\030\004 \001(\005\"\235\003\n\033MsgPlayerInfoQueryResultS2C\022C"
    "\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:!_MSG_P"
    "LAYER_INFO_QUERY_RESULT_S2C\022\?\n\006result\030\002 "
    "\001(\0162/.MsgPB.MsgPlayerInfoQueryResultS2C."
    "QUERY_RESULT\022\r\n\005iggid\030\003 \001(\003\022\022\n\nQueryIggi"
    "d\030\004 \001(\003\022\021\n\tClientVal\030\005 \001(\005\0220\n\010baseInfo\030\007"
    " \001(\0132\036.MsgPB.MsgQueryPlayerInfo_Base\022+\n\013"
    "equip_infos\030\010 \003(\0132\026.MsgPB.ServerEquipInf"
    "o\022)\n\nbuff_infos\030\t \003(\0132\025.MsgPB.ServerBuff"
    "Info\"8\n\014QUERY_RESULT\022\007\n\003ERR\020\000\022\010\n\004SUCC\020\001\022"
    "\013\n\007OFFLINE\020\002\022\010\n\004FREQ\020\003\"y\n\031MsgPlayerLevel"
    "UpNotifyS2S\022A\n\007msgType\030\001 \001(\0162\017.MsgPB.EMs"
    "gType:\037_MSG_PLAYER_LEVEL_UP_NOTIFY_S2S\022\r"
    "\n\005iggid\030\002 \001(\003\022\n\n\002lv\030\003 \001(\005\"\302\001\n\033MsgServerQ"
    "ueryPlayerInfoS2S\022B\n\007msgType\030\001 \001(\0162\017.Msg"
    "PB.EMsgType: _MSG_SERVER_QUERYPLAYER_INF"
    "O_S2S\022\r\n\005iggid\030\002 \001(\003\022\022\n\nQueryIggid\030\003 \001(\003"
    "\022\017\n\007strName\030\004 \001(\t\022+\n\005iFlag\030\005 \001(\0162\034.MsgPB"
    ".MSG_SERVER_QPINFO_FLG\"\353\002\n\036MsgServerQuer"
    "yPlayerInfoRetS2S\022F\n\007msgType\030\001 \001(\0162\017.Msg"
    "PB.EMsgType:$_MSG_SERVER_QUERYPLAYER_INF"
    "O_RET_S2S\022B\n\006result\030\002 \001(\01622.MsgPB.MsgSer"
    "verQueryPlayerInfoRetS2S.QUERY_RESULT\022\r\n"
    "\005iggid\030\003 \001(\003\022\022\n\nQueryIggid\030\004 \001(\003\022\017\n\007strN"
    "ame\030\005 \001(\t\022+\n\005iFlag\030\006 \001(\0162\034.MsgPB.MSG_SER"
    "VER_QPINFO_FLG\022,\n\004base\030\007 \001(\0132\036.MsgPB.Msg"
    "QueryPlayerInfo_Base\".\n\014QUERY_RESULT\022\007\n\003"
    "ERR\020\000\022\010\n\004SUCC\020\001\022\013\n\007OFFLINE\020\002\"~\n\022MsgPlaye"
    "rRenameC2S\0228\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsg"
    "Type:\026_MSG_PLAYER_RENAME_C2S\022\r\n\005iggid\030\002 "
    "\001(\003\022\014\n\004name\030\003 \001(\t\022\021\n\tfirstFree\030\004 \001(\010\"\227\001\n"
    "\022MsgPlayerRenameS2C\0228\n\007msgType\030\001 \001(\0162\017.M"
    "sgPB.EMsgType:\026_MSG_PLAYER_RENAME_S2C\022\r\n"
    "\005iggid\030\002 \001(\003\022%\n\003res\030\003 \001(\0162\030.MsgPB.MSG_PL"
    "AYER_RESULT\022\021\n\tfirstFree\030\004 \001(\010\"\233\001\n!MsgPl"
    "ayerDataContainerSyncDoneG2C\022J\n\007msgType\030"
    "\001 \001(\0162\017.MsgPB.EMsgType:(_MSG_PLAYER_DATA"
    "_SYNC_CONTAINER_DONE_S2C\022\022\n\nlogin_time\030\002"
    " \001(\003\022\026\n\016next_zero_time\030\003 \001(\003\"\320\001\n\022QueryPl"
    "ayerRequest\022\016\n\006serial\030\001 \002(\003\022\r\n\005iggid\030\002 \002"
    "(\003\022\023\n\013query_iggid\030\003 \002(\003\022-\n\010includes\030\004 \003("
    "\0162\033.MsgPB.E_QueryPlayerInclude\0222\n\020build_"
    "tower_data\030\005 \003(\0132\030.MsgPB.MsgBuildTowerDa"
    "ta\022\016\n\006map_id\030\006 \001(\005\022\023\n\013mapServerId\030\007 \001(\005\""
    "\241\002\n\021QueryPlayerResult\022,\n\004base\030\001 \001(\0132\036.Ms"
    "gPB.MsgQueryPlayerInfo_Base\022&\n\006equips\030\002 "
    "\003(\0132\026.MsgPB.ServerEquipInfo\022\016\n\006map_id\030\003 "
    "\001(\005\022\025\n\rmap_file_name\030\004 \001(\t\022/\n\016protector_"
    "data\030\005 \003(\0132\027.MsgPB.MsgProtectorData\022\020\n\010b"
    "locknum\030\006 \001(\005\022\021\n\tmapblockx\030\007 \001(\005\022\021\n\tmapb"
    "locky\030\010 \001(\005\022\022\n\nblocksizex\030\t \001(\005\022\022\n\nblock"
    "sizey\030\n \001(\005\"\226\001\n\030MsgQueryPlayerM2MRequest"
    "\022\?\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\035_MSG"
    "_QUERY_PLAYER_M2M_REQUEST\022\r\n\005iggid\030\002 \002(\003"
    "\022*\n\007request\030\003 \002(\0132\031.MsgPB.QueryPlayerReq"
    "uest\"\337\002\n\031MsgQueryPlayerM2MResponse\022@\n\007ms"
    "gType\030\001 \001(\0162\017.MsgPB.EMsgType:\036_MSG_QUERY"
    "_PLAYER_M2M_RESPONSE\022\r\n\005iggid\030\002 \002(\003\022\025\n\006i"
    "sTail\030\003 \001(\010:\005false\022\016\n\006serial\030\004 \002(\003\022\023\n\013qu"
    "ery_iggid\030\005 \002(\003\022G\n\003err\030\006 \001(\0162\035.MsgPB.E_Q"
    "ueryPlayerErrorCode:\033E_QueryPlayerErrorC"
    "ode_Fail\022(\n\006result\030\007 \001(\0132\030.MsgPB.QueryPl"
    "ayerResult\022-\n\010finished\030\010 \003(\0162\033.MsgPB.E_Q"
    "ueryPlayerInclude\022\023\n\013mapServerId\030\t \001(\005\"\226"
    "\001\n\030MsgQueryPlayerM2GRequest\022\?\n\007msgType\030\001"
    " \001(\0162\017.MsgPB.EMsgType:\035_MSG_QUERY_PLAYER"
    "_M2G_REQUEST\022\r\n\005iggid\030\002 \002(\003\022*\n\007request\030\003"
    " \002(\0132\031.MsgPB.QueryPlayerRequest\"\337\002\n\031MsgQ"
    "ueryPlayerM2GResponse\022@\n\007msgType\030\001 \001(\0162\017"
    ".MsgPB.EMsgType:\036_MSG_QUERY_PLAYER_M2G_R"
    "ESPONSE\022\r\n\005iggid\030\002 \002(\003\022\025\n\006isTail\030\003 \001(\010:\005"
    "false\022\016\n\006serial\030\004 \002(\003\022\023\n\013query_iggid\030\005 \002"
    "(\003\022G\n\003err\030\006 \001(\0162\035.MsgPB.E_QueryPlayerErr"
    "orCode:\033E_QueryPlayerErrorCode_Fail\022(\n\006r"
    "esult\030\007 \001(\0132\030.MsgPB.QueryPlayerResult\022-\n"
    "\010finished\030\010 \003(\0162\033.MsgPB.E_QueryPlayerInc"
    "lude\022\023\n\013mapServerId\030\t \001(\005\"r\n\026MsgPlayerRe"
    "nameFlagS2C\022=\n\007msgType\030\001 \001(\0162\017.MsgPB.EMs"
    "gType:\033_MSG_PLAYER_RENAME_FLAG_S2C\022\031\n\021Fi"
    "rst_Free_Rename\030\002 \001(\005\"W\n\026MsgPlayerDailyR"
    "esetS2C\022=\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTyp"
    "e:\033_MSG_PLAYER_DAILY_RESET_S2C\"\215\001\n\023MsgPl"
    "ayerSlideBegin\0229\n\007msgType\030\001 \001(\0162\017.MsgPB."
    "EMsgType:\027_MSG_PLAYER_SLIDE_BEGIN\022\016\n\006obj"
    "_id\030\002 \001(\005\022\013\n\003dir\030\003 \001(\005\022\020\n\010distance\030\004 \001(\005"
    "\022\014\n\004time\030\005 \001(\005\"z\n\021MsgPlayerSlideEnd\0227\n\007m"
    "sgType\030\001 \001(\0162\017.MsgPB.EMsgType:\025_MSG_PLAY"
    "ER_SLIDE_END\022\016\n\006obj_id\030\002 \001(\005\022\r\n\005pos_x\030\003 "
    "\001(\005\022\r\n\005pos_y\030\004 \001(\005\"w\n\032MsgPlayerAuthentic"
    "ationC2S\022@\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTy"
    "pe:\036_MSG_PLAYER_AUTHENTICATION_C2S\022\027\n\010is"
    "_adult\030\002 \001(\010:\005false\"\257\001\n\023MsgPlayerKickOut"
    "S2C\022:\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\030_"
    "MSG_PLAYER_KICK_OUT_S2C\022>\n\003res\030\002 \001(\0162!.M"
    "sgPB.MsgPlayerKickOutS2C.Reason:\016ANTI_AD"
    "DICTION\"\034\n\006Reason\022\022\n\016ANTI_ADDICTION\020\001\"k\n"
    "\037MsgQueryPlayerAccuOnlineTimeC2S\022H\n\007msgT"
    "ype\030\001 \001(\0162\017.MsgPB.EMsgType:&_MSG_QUERY_P"
    "LAYER_ACCU_ONLINE_TIME_C2S\"~\n\037MsgQueryPl"
    "ayerAccuOnlineTimeS2C\022H\n\007msgType\030\001 \001(\0162\017"
    ".MsgPB.EMsgType:&_MSG_QUERY_PLAYER_ACCU_"
    "ONLINE_TIME_S2C\022\021\n\taccu_time\030\002 \001(\005\"i\n\036Ms"
    "gPlayerPrivateTaskFlagGetC2S\022G\n\007msgType\030"
    "\001 \001(\0162\017.MsgPB.EMsgType:%_MSG_PLAYER_PRIV"
    "ATE_TASK_FLAG_GET_C2S\"w\n\036MsgPlayerPrivat"
    "eTaskFlagGetS2C\022G\n\007msgType\030\001 \001(\0162\017.MsgPB"
    ".EMsgType:%_MSG_PLAYER_PRIVATE_TASK_FLAG"
    "_GET_S2C\022\014\n\004data\030\002 \001(\003\"y\n\037MsgPlayerPriva"
    "teTaskFlagTrigC2S\022H\n\007msgType\030\001 \001(\0162\017.Msg"
    "PB.EMsgType:&_MSG_PLAYER_PRIVATE_TASK_FL"
    "AG_TRIG_C2S\022\014\n\004flag\030\002 \001(\005\"\344\001\n\037MsgPlayerP"
    "rivateTaskFlagTrigS2C\022H\n\007msgType\030\001 \001(\0162\017"
    ".MsgPB.EMsgType:&_MSG_PLAYER_PRIVATE_TAS"
    "K_FLAG_TRIG_S2C\022\014\n\004data\030\002 \001(\003\022@\n\003res\030\003 \001"
    "(\0162-.MsgPB.MsgPlayerPrivateTaskFlagTrigS"
    "2C.RESULT:\004FAIL\"\'\n\006RESULT\022\007\n\003SUC\020\001\022\010\n\004FA"
    "IL\020\002\022\n\n\006REPEAT\020\003\"X\n\026MsgGetPrivateMapBotC"
    "2S\022>\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\034_M"
    "SG_GET_PRIVATE_MAP_BOT_C2S\"\232\002\n\026MsgGetPri"
    "vateMapBotS2C\022>\n\007msgType\030\001 \001(\0162\017.MsgPB.E"
    "MsgType:\034_MSG_GET_PRIVATE_MAP_BOT_S2C\0222\n"
    "\003bot\030\002 \003(\0132%.MsgPB.MsgGetPrivateMapBotS2"
    "C.BotData\032\213\001\n\007BotData\022\r\n\005iggid\030\001 \001(\003\022\020\n\010"
    "nickname\030\002 \001(\t\022\013\n\003lev\030\003 \001(\005\022\016\n\006gender\030\004 "
    "\001(\005\022\021\n\tskinColor\030\005 \001(\005\022\014\n\004hair\030\006 \001(\005\022\021\n\t"
    "hairColor\030\007 \001(\005\022\016\n\006equips\030\010 \003(\005\"s\n\030MsgGo"
    "toPrivateBotHomeC2S\022A\n\007msgType\030\001 \001(\0162\017.M"
    "sgPB.EMsgType:\037_MSG_GO_TO_PRIVATE_BOT_HO"
    "ME_C2S\022\024\n\014target_iggid\030\002 \002(\003\"\217\001\n\030MsgPlay"
    "erModifyAvatorC2S\022\?\n\007msgType\030\001 \001(\0162\017.Msg"
    "PB.EMsgType:\035_MSG_PLAYER_MODIFY_AVATOR_C"
    "2S\022\021\n\tskinColor\030\002 \001(\005\022\014\n\004hair\030\003 \001(\005\022\021\n\th"
    "airColor\030\004 \001(\005\"\205\001\n\030MsgPlayerModifyAvator"
    "S2C\022\?\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\035_"
    "MSG_PLAYER_MODIFY_AVATOR_S2C\022(\n\003res\030\002 \001("
    "\0162\022.MsgPB.E_ErrorCode:\007EC_Fail\"m\n\031MsgPla"
    "yerADNVideoAwardC2S\022A\n\007msgType\030\001 \001(\0162\017.M"
    "sgPB.EMsgType:\037_MSG_PLAYER_ADN_VIDEO_AWA"
    "RD_C2S\022\r\n\005iggid\030\002 \001(\003\"\215\001\n\031MsgPlayerADNVi"
    "deoAwardS2C\022A\n\007msgType\030\001 \001(\0162\017.MsgPB.EMs"
    "gType:\037_MSG_PLAYER_ADN_VIDEO_AWARD_S2C\022\r"
    "\n\005iggid\030\002 \001(\003\022\020\n\010nextTime\030\003 \001(\003\022\014\n\004coin\030"
    "\004 \001(\005\"\263\004\n\023MsgPlayerSynBaseC2S\022\?\n\007msgType"
    "\030\001 \001(\0162\017.MsgPB.EMsgType:\035_MSG_PALYER_SYN"
    "_HP_MP_TIC_C2S\022\r\n\005iggid\030\002 \001(\003\022<\n\007baseTpy"
    "\030\003 \001(\0162+.MsgPB.MsgPlayerSynBaseC2S.MSG_S"
    "YN_BASE_TPY\022\014\n\004bInc\030\004 \001(\010\022\016\n\006nValue\030\005 \001("
    "\005\022B\n\006reason\030\006 \001(\01622.MsgPB.MsgPlayerSynBa"
    "seC2S.MSG_SYN_BASE_TPY_REASON\"~\n\020MSG_SYN"
    "_BASE_TPY\022\027\n\023MSG_SYN_BASE_TPY_HP\020\000\022\027\n\023MS"
    "G_SYN_BASE_TPY_MP\020\001\022\034\n\030MSG_SYN_BASE_TPY_"
    "STRENTH\020\002\022\032\n\026MSG_SYN_BASE_TPY_ANGER\020\003\"\253\001"
    "\n\027MSG_SYN_BASE_TPY_REASON\022\"\n\036MSG_SYN_BAS"
    "E_TPY_REASON_UPDATE\020\000\022!\n\035MSG_SYN_BASE_TP"
    "Y_REASON_SKILL\020\001\022\"\n\036MSG_SYN_BASE_TPY_REA"
    "SON_ATTACK\020\002\022%\n!MSG_SYN_BASE_TPY_REASON_"
    "BE_ATTACK\020\003*\257\003\n\021MSG_PLAYER_RESULT\022\030\n\024MSG"
    "_PLAYER_RESULT_OK\020\000\022\031\n\025MSG_PLAYER_RESULT"
    "_ERR\020\001\022 \n\034MSG_PLAYER_RESULT_NOT_IN_MAP\020\002"
    "\022\"\n\036MSG_PLAYER_RESULT_WRONG_TARGET\020\003\022\037\n\033"
    "MSG_PLAYER_RESULT_NO_WEAPON\020\004\022\037\n\033MSG_PLA"
    "YER_RESULT_OUT_RANGE\020\005\022\032\n\026MSG_PLAYER_RES"
    "ULT_DEAD\020\006\022\"\n\036MSG_PLAYER_RESULT_PLAYER_N"
    "OMAP\020\007\022\034\n\030MSG_PLAYER_RESULT_ATKERR\020\010\022\036\n\032"
    "MSG_PLAYER_RESULT_OBSTACLE\020\t\022\036\n\032MSG_PLAY"
    "ER_RESULT_REPEATED\020\n\022\035\n\031MSG_PLAYER_RESUL"
    "T_ILLEGAL\020\013\022 \n\034MSG_PLAYER_RESULT_NOT_ENO"
    "UGH\020\014*\256\001\n\021SET_AVATOR_RESULT\022\026\n\022SET_AVATO"
    "R_SUCCESS\020\000\022\033\n\027SET_AVATOR_PLAYER_FAILE\020\001"
    "\022!\n\035SET_AVATOR_PLAYER_STATE_ERROR\020\002\022 \n\034S"
    "ET_AVATOR_NICKNAME_REPEATED\020\003\022\037\n\033SET_AVA"
    "TOR_NICKNAME_ILLEGAL\020\004*P\n\013REVIVE_TYPE\022\023\n"
    "\017REVIVE_TYPE_LOW\020\000\022\026\n\022REVIVE_TYPE_MIDDLE"
    "\020\001\022\024\n\020REVIVE_TYPE_HIGH\020\002*b\n\025MSG_SERVER_Q"
    "PINFO_FLG\022 \n\034MSG_SERVER_QPINFO_FLG_FRIEN"
    "D\020\001\022\'\n#MSG_SERVER_QPINFO_FLG_FRIEND_SEAR"
    "CH\020\002*\311\002\n\024E_QueryPlayerInclude\022\035\n\031E_Query"
    "PlayerInclude_Base\020\000\022\036\n\032E_QueryPlayerInc"
    "lude_Equip\020\001\022\034\n\030E_QueryPlayerInclude_Pet"
    "\020\002\022\034\n\030E_QueryPlayerInclude_Map\020\003\022#\n\037E_Qu"
    "eryPlayerInclude_BuildTower\020\004\022 \n\034E_Query"
    "PlayerInclude_Airship\020\005\022%\n!E_QueryPlayer"
    "Include_TowerpvpPair\020\006\022 \n\034E_QueryPlayerI"
    "nclude_SoulBox\020\007\022&\n\"E_QueryPlayerInclude"
    "_ProtectorData\020\010*\316\002\n\026E_QueryPlayerErrorC"
    "ode\022\"\n\036E_QueryPlayerErrorCode_Success\020\000\022"
    "\037\n\033E_QueryPlayerErrorCode_Fail\020\001\022\"\n\036E_Qu"
    "eryPlayerErrorCode_Timeout\020\002\022$\n E_QueryP"
    "layerErrorCode_QuerySelf\020\003\022&\n\"E_QueryPla"
    "yerErrorCode_MapNotExist\020\004\022(\n$E_QueryPla"
    "yerErrorCode_NotPrivateMap\020\005\022)\n%E_QueryP"
    "layerErrorCode_PlayerNotExist\020\006\022(\n$E_Que"
    "ryPlayerErrorCode_PlayerOffline\020\007", 11433);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgPlayer.proto", &protobuf_RegisterTypes);
  MsgPlayerSysBaseData::default_instance_ = new MsgPlayerSysBaseData();
  MsgPlayerSysBaseData_DayMaxNum::default_instance_ = new MsgPlayerSysBaseData_DayMaxNum();
  MsgPlayerSysBaseData_DayMaxNum_ItemData::default_instance_ = new MsgPlayerSysBaseData_DayMaxNum_ItemData();
  MsgPlayerSysBaseData_MobReborn::default_instance_ = new MsgPlayerSysBaseData_MobReborn();
  MsgQueryPlayerInfo_Base::default_instance_ = new MsgQueryPlayerInfo_Base();
  MsgPlayerInfoGS2C::default_instance_ = new MsgPlayerInfoGS2C();
  MsgPlayerSetAvatorC2S::default_instance_ = new MsgPlayerSetAvatorC2S();
  MsgPlayerSetAvatorResultS2C::default_instance_ = new MsgPlayerSetAvatorResultS2C();
  MsgPlayerUpdateAvatorGS2S::default_instance_ = new MsgPlayerUpdateAvatorGS2S();
  MsgLoginDayGS2C::default_instance_ = new MsgLoginDayGS2C();
  MsgDeadG2CS::default_instance_ = new MsgDeadG2CS();
  MsgRebirthC2GS::default_instance_ = new MsgRebirthC2GS();
  MsgRebirthGS2C::default_instance_ = new MsgRebirthGS2C();
  MsgPlayerNormalAttackC2S::default_instance_ = new MsgPlayerNormalAttackC2S();
  MsgPlayerNormalAttackResS2C::default_instance_ = new MsgPlayerNormalAttackResS2C();
  MsgPlayerReviveC2S::default_instance_ = new MsgPlayerReviveC2S();
  MsgPlayerDataSyncDoneG2C::default_instance_ = new MsgPlayerDataSyncDoneG2C();
  MsgPlayerSysInfoGS2C::default_instance_ = new MsgPlayerSysInfoGS2C();
  MsgPlayerReadyC2S::default_instance_ = new MsgPlayerReadyC2S();
  MsgPlayerInfoQueryC2S::default_instance_ = new MsgPlayerInfoQueryC2S();
  MsgPlayerInfoQueryResultS2C::default_instance_ = new MsgPlayerInfoQueryResultS2C();
  MsgPlayerLevelUpNotifyS2S::default_instance_ = new MsgPlayerLevelUpNotifyS2S();
  MsgServerQueryPlayerInfoS2S::default_instance_ = new MsgServerQueryPlayerInfoS2S();
  MsgServerQueryPlayerInfoRetS2S::default_instance_ = new MsgServerQueryPlayerInfoRetS2S();
  MsgPlayerRenameC2S::default_instance_ = new MsgPlayerRenameC2S();
  MsgPlayerRenameS2C::default_instance_ = new MsgPlayerRenameS2C();
  MsgPlayerDataContainerSyncDoneG2C::default_instance_ = new MsgPlayerDataContainerSyncDoneG2C();
  QueryPlayerRequest::default_instance_ = new QueryPlayerRequest();
  QueryPlayerResult::default_instance_ = new QueryPlayerResult();
  MsgQueryPlayerM2MRequest::default_instance_ = new MsgQueryPlayerM2MRequest();
  MsgQueryPlayerM2MResponse::default_instance_ = new MsgQueryPlayerM2MResponse();
  MsgQueryPlayerM2GRequest::default_instance_ = new MsgQueryPlayerM2GRequest();
  MsgQueryPlayerM2GResponse::default_instance_ = new MsgQueryPlayerM2GResponse();
  MsgPlayerRenameFlagS2C::default_instance_ = new MsgPlayerRenameFlagS2C();
  MsgPlayerDailyResetS2C::default_instance_ = new MsgPlayerDailyResetS2C();
  MsgPlayerSlideBegin::default_instance_ = new MsgPlayerSlideBegin();
  MsgPlayerSlideEnd::default_instance_ = new MsgPlayerSlideEnd();
  MsgPlayerAuthenticationC2S::default_instance_ = new MsgPlayerAuthenticationC2S();
  MsgPlayerKickOutS2C::default_instance_ = new MsgPlayerKickOutS2C();
  MsgQueryPlayerAccuOnlineTimeC2S::default_instance_ = new MsgQueryPlayerAccuOnlineTimeC2S();
  MsgQueryPlayerAccuOnlineTimeS2C::default_instance_ = new MsgQueryPlayerAccuOnlineTimeS2C();
  MsgPlayerPrivateTaskFlagGetC2S::default_instance_ = new MsgPlayerPrivateTaskFlagGetC2S();
  MsgPlayerPrivateTaskFlagGetS2C::default_instance_ = new MsgPlayerPrivateTaskFlagGetS2C();
  MsgPlayerPrivateTaskFlagTrigC2S::default_instance_ = new MsgPlayerPrivateTaskFlagTrigC2S();
  MsgPlayerPrivateTaskFlagTrigS2C::default_instance_ = new MsgPlayerPrivateTaskFlagTrigS2C();
  MsgGetPrivateMapBotC2S::default_instance_ = new MsgGetPrivateMapBotC2S();
  MsgGetPrivateMapBotS2C::default_instance_ = new MsgGetPrivateMapBotS2C();
  MsgGetPrivateMapBotS2C_BotData::default_instance_ = new MsgGetPrivateMapBotS2C_BotData();
  MsgGotoPrivateBotHomeC2S::default_instance_ = new MsgGotoPrivateBotHomeC2S();
  MsgPlayerModifyAvatorC2S::default_instance_ = new MsgPlayerModifyAvatorC2S();
  MsgPlayerModifyAvatorS2C::default_instance_ = new MsgPlayerModifyAvatorS2C();
  MsgPlayerADNVideoAwardC2S::default_instance_ = new MsgPlayerADNVideoAwardC2S();
  MsgPlayerADNVideoAwardS2C::default_instance_ = new MsgPlayerADNVideoAwardS2C();
  MsgPlayerSynBaseC2S::default_instance_ = new MsgPlayerSynBaseC2S();
  MsgPlayerSysBaseData::default_instance_->InitAsDefaultInstance();
  MsgPlayerSysBaseData_DayMaxNum::default_instance_->InitAsDefaultInstance();
  MsgPlayerSysBaseData_DayMaxNum_ItemData::default_instance_->InitAsDefaultInstance();
  MsgPlayerSysBaseData_MobReborn::default_instance_->InitAsDefaultInstance();
  MsgQueryPlayerInfo_Base::default_instance_->InitAsDefaultInstance();
  MsgPlayerInfoGS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerSetAvatorC2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerSetAvatorResultS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerUpdateAvatorGS2S::default_instance_->InitAsDefaultInstance();
  MsgLoginDayGS2C::default_instance_->InitAsDefaultInstance();
  MsgDeadG2CS::default_instance_->InitAsDefaultInstance();
  MsgRebirthC2GS::default_instance_->InitAsDefaultInstance();
  MsgRebirthGS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerNormalAttackC2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerNormalAttackResS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerReviveC2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerDataSyncDoneG2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerSysInfoGS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerReadyC2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerInfoQueryC2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerInfoQueryResultS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerLevelUpNotifyS2S::default_instance_->InitAsDefaultInstance();
  MsgServerQueryPlayerInfoS2S::default_instance_->InitAsDefaultInstance();
  MsgServerQueryPlayerInfoRetS2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerRenameC2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerRenameS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerDataContainerSyncDoneG2C::default_instance_->InitAsDefaultInstance();
  QueryPlayerRequest::default_instance_->InitAsDefaultInstance();
  QueryPlayerResult::default_instance_->InitAsDefaultInstance();
  MsgQueryPlayerM2MRequest::default_instance_->InitAsDefaultInstance();
  MsgQueryPlayerM2MResponse::default_instance_->InitAsDefaultInstance();
  MsgQueryPlayerM2GRequest::default_instance_->InitAsDefaultInstance();
  MsgQueryPlayerM2GResponse::default_instance_->InitAsDefaultInstance();
  MsgPlayerRenameFlagS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerDailyResetS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerSlideBegin::default_instance_->InitAsDefaultInstance();
  MsgPlayerSlideEnd::default_instance_->InitAsDefaultInstance();
  MsgPlayerAuthenticationC2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerKickOutS2C::default_instance_->InitAsDefaultInstance();
  MsgQueryPlayerAccuOnlineTimeC2S::default_instance_->InitAsDefaultInstance();
  MsgQueryPlayerAccuOnlineTimeS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerPrivateTaskFlagGetC2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerPrivateTaskFlagGetS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerPrivateTaskFlagTrigC2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerPrivateTaskFlagTrigS2C::default_instance_->InitAsDefaultInstance();
  MsgGetPrivateMapBotC2S::default_instance_->InitAsDefaultInstance();
  MsgGetPrivateMapBotS2C::default_instance_->InitAsDefaultInstance();
  MsgGetPrivateMapBotS2C_BotData::default_instance_->InitAsDefaultInstance();
  MsgGotoPrivateBotHomeC2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerModifyAvatorC2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerModifyAvatorS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerADNVideoAwardC2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerADNVideoAwardS2C::default_instance_->InitAsDefaultInstance();
  MsgPlayerSynBaseC2S::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgPlayer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgPlayer_2eproto {
  StaticDescriptorInitializer_MsgPlayer_2eproto() {
    protobuf_AddDesc_MsgPlayer_2eproto();
  }
} static_descriptor_initializer_MsgPlayer_2eproto_;
const ::google::protobuf::EnumDescriptor* MSG_PLAYER_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_PLAYER_RESULT_descriptor_;
}
bool MSG_PLAYER_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SET_AVATOR_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SET_AVATOR_RESULT_descriptor_;
}
bool SET_AVATOR_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REVIVE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REVIVE_TYPE_descriptor_;
}
bool REVIVE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MSG_SERVER_QPINFO_FLG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_SERVER_QPINFO_FLG_descriptor_;
}
bool MSG_SERVER_QPINFO_FLG_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* E_QueryPlayerInclude_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_QueryPlayerInclude_descriptor_;
}
bool E_QueryPlayerInclude_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* E_QueryPlayerErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_QueryPlayerErrorCode_descriptor_;
}
bool E_QueryPlayerErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerSysBaseData_DayMaxNum_ItemData::kDataidFieldNumber;
const int MsgPlayerSysBaseData_DayMaxNum_ItemData::kNumFieldNumber;
const int MsgPlayerSysBaseData_DayMaxNum_ItemData::kWarnedFieldNumber;
#endif  // !_MSC_VER

MsgPlayerSysBaseData_DayMaxNum_ItemData::MsgPlayerSysBaseData_DayMaxNum_ItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData)
}

void MsgPlayerSysBaseData_DayMaxNum_ItemData::InitAsDefaultInstance() {
}

MsgPlayerSysBaseData_DayMaxNum_ItemData::MsgPlayerSysBaseData_DayMaxNum_ItemData(const MsgPlayerSysBaseData_DayMaxNum_ItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData)
}

void MsgPlayerSysBaseData_DayMaxNum_ItemData::SharedCtor() {
  _cached_size_ = 0;
  dataid_ = 0;
  num_ = 0;
  warned_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerSysBaseData_DayMaxNum_ItemData::~MsgPlayerSysBaseData_DayMaxNum_ItemData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData)
  SharedDtor();
}

void MsgPlayerSysBaseData_DayMaxNum_ItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerSysBaseData_DayMaxNum_ItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerSysBaseData_DayMaxNum_ItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerSysBaseData_DayMaxNum_ItemData_descriptor_;
}

const MsgPlayerSysBaseData_DayMaxNum_ItemData& MsgPlayerSysBaseData_DayMaxNum_ItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerSysBaseData_DayMaxNum_ItemData* MsgPlayerSysBaseData_DayMaxNum_ItemData::default_instance_ = NULL;

MsgPlayerSysBaseData_DayMaxNum_ItemData* MsgPlayerSysBaseData_DayMaxNum_ItemData::New() const {
  return new MsgPlayerSysBaseData_DayMaxNum_ItemData;
}

void MsgPlayerSysBaseData_DayMaxNum_ItemData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerSysBaseData_DayMaxNum_ItemData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dataid_, warned_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerSysBaseData_DayMaxNum_ItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dataid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_warned;
        break;
      }

      // optional bool warned = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_warned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warned_)));
          set_has_warned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData)
  return false;
#undef DO_
}

void MsgPlayerSysBaseData_DayMaxNum_ItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData)
  // required int32 dataid = 1;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dataid(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional bool warned = 3 [default = false];
  if (has_warned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->warned(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData)
}

::google::protobuf::uint8* MsgPlayerSysBaseData_DayMaxNum_ItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData)
  // required int32 dataid = 1;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dataid(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional bool warned = 3 [default = false];
  if (has_warned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->warned(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData)
  return target;
}

int MsgPlayerSysBaseData_DayMaxNum_ItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dataid = 1;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataid());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional bool warned = 3 [default = false];
    if (has_warned()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerSysBaseData_DayMaxNum_ItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerSysBaseData_DayMaxNum_ItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerSysBaseData_DayMaxNum_ItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerSysBaseData_DayMaxNum_ItemData::MergeFrom(const MsgPlayerSysBaseData_DayMaxNum_ItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_warned()) {
      set_warned(from.warned());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerSysBaseData_DayMaxNum_ItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerSysBaseData_DayMaxNum_ItemData::CopyFrom(const MsgPlayerSysBaseData_DayMaxNum_ItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerSysBaseData_DayMaxNum_ItemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgPlayerSysBaseData_DayMaxNum_ItemData::Swap(MsgPlayerSysBaseData_DayMaxNum_ItemData* other) {
  if (other != this) {
    std::swap(dataid_, other->dataid_);
    std::swap(num_, other->num_);
    std::swap(warned_, other->warned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerSysBaseData_DayMaxNum_ItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerSysBaseData_DayMaxNum_ItemData_descriptor_;
  metadata.reflection = MsgPlayerSysBaseData_DayMaxNum_ItemData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgPlayerSysBaseData_DayMaxNum::kItemNumFieldNumber;
const int MsgPlayerSysBaseData_DayMaxNum::kAchieveTotalFieldNumber;
const int MsgPlayerSysBaseData_DayMaxNum::kAchieveTotalWarnedFieldNumber;
#endif  // !_MSC_VER

MsgPlayerSysBaseData_DayMaxNum::MsgPlayerSysBaseData_DayMaxNum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerSysBaseData.DayMaxNum)
}

void MsgPlayerSysBaseData_DayMaxNum::InitAsDefaultInstance() {
}

MsgPlayerSysBaseData_DayMaxNum::MsgPlayerSysBaseData_DayMaxNum(const MsgPlayerSysBaseData_DayMaxNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerSysBaseData.DayMaxNum)
}

void MsgPlayerSysBaseData_DayMaxNum::SharedCtor() {
  _cached_size_ = 0;
  achieve_total_ = 0;
  achieve_total_warned_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerSysBaseData_DayMaxNum::~MsgPlayerSysBaseData_DayMaxNum() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerSysBaseData.DayMaxNum)
  SharedDtor();
}

void MsgPlayerSysBaseData_DayMaxNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerSysBaseData_DayMaxNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerSysBaseData_DayMaxNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerSysBaseData_DayMaxNum_descriptor_;
}

const MsgPlayerSysBaseData_DayMaxNum& MsgPlayerSysBaseData_DayMaxNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerSysBaseData_DayMaxNum* MsgPlayerSysBaseData_DayMaxNum::default_instance_ = NULL;

MsgPlayerSysBaseData_DayMaxNum* MsgPlayerSysBaseData_DayMaxNum::New() const {
  return new MsgPlayerSysBaseData_DayMaxNum;
}

void MsgPlayerSysBaseData_DayMaxNum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerSysBaseData_DayMaxNum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(achieve_total_, achieve_total_warned_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerSysBaseData_DayMaxNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerSysBaseData.DayMaxNum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData item_num = 1;
      case 1: {
        if (tag == 10) {
         parse_item_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_num()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item_num;
        if (input->ExpectTag(16)) goto parse_achieve_total;
        break;
      }

      // optional int32 achieve_total = 2;
      case 2: {
        if (tag == 16) {
         parse_achieve_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieve_total_)));
          set_has_achieve_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_achieve_total_warned;
        break;
      }

      // optional bool achieve_total_warned = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_achieve_total_warned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &achieve_total_warned_)));
          set_has_achieve_total_warned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerSysBaseData.DayMaxNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerSysBaseData.DayMaxNum)
  return false;
#undef DO_
}

void MsgPlayerSysBaseData_DayMaxNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerSysBaseData.DayMaxNum)
  // repeated .MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData item_num = 1;
  for (int i = 0; i < this->item_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_num(i), output);
  }

  // optional int32 achieve_total = 2;
  if (has_achieve_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->achieve_total(), output);
  }

  // optional bool achieve_total_warned = 3 [default = false];
  if (has_achieve_total_warned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->achieve_total_warned(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerSysBaseData.DayMaxNum)
}

::google::protobuf::uint8* MsgPlayerSysBaseData_DayMaxNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerSysBaseData.DayMaxNum)
  // repeated .MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData item_num = 1;
  for (int i = 0; i < this->item_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_num(i), target);
  }

  // optional int32 achieve_total = 2;
  if (has_achieve_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->achieve_total(), target);
  }

  // optional bool achieve_total_warned = 3 [default = false];
  if (has_achieve_total_warned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->achieve_total_warned(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerSysBaseData.DayMaxNum)
  return target;
}

int MsgPlayerSysBaseData_DayMaxNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 achieve_total = 2;
    if (has_achieve_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achieve_total());
    }

    // optional bool achieve_total_warned = 3 [default = false];
    if (has_achieve_total_warned()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MsgPB.MsgPlayerSysBaseData.DayMaxNum.ItemData item_num = 1;
  total_size += 1 * this->item_num_size();
  for (int i = 0; i < this->item_num_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_num(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerSysBaseData_DayMaxNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerSysBaseData_DayMaxNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerSysBaseData_DayMaxNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerSysBaseData_DayMaxNum::MergeFrom(const MsgPlayerSysBaseData_DayMaxNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_num_.MergeFrom(from.item_num_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_achieve_total()) {
      set_achieve_total(from.achieve_total());
    }
    if (from.has_achieve_total_warned()) {
      set_achieve_total_warned(from.achieve_total_warned());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerSysBaseData_DayMaxNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerSysBaseData_DayMaxNum::CopyFrom(const MsgPlayerSysBaseData_DayMaxNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerSysBaseData_DayMaxNum::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item_num())) return false;
  return true;
}

void MsgPlayerSysBaseData_DayMaxNum::Swap(MsgPlayerSysBaseData_DayMaxNum* other) {
  if (other != this) {
    item_num_.Swap(&other->item_num_);
    std::swap(achieve_total_, other->achieve_total_);
    std::swap(achieve_total_warned_, other->achieve_total_warned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerSysBaseData_DayMaxNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerSysBaseData_DayMaxNum_descriptor_;
  metadata.reflection = MsgPlayerSysBaseData_DayMaxNum_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgPlayerSysBaseData_MobReborn::kDataidFieldNumber;
const int MsgPlayerSysBaseData_MobReborn::kTimeFieldNumber;
#endif  // !_MSC_VER

MsgPlayerSysBaseData_MobReborn::MsgPlayerSysBaseData_MobReborn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerSysBaseData.MobReborn)
}

void MsgPlayerSysBaseData_MobReborn::InitAsDefaultInstance() {
}

MsgPlayerSysBaseData_MobReborn::MsgPlayerSysBaseData_MobReborn(const MsgPlayerSysBaseData_MobReborn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerSysBaseData.MobReborn)
}

void MsgPlayerSysBaseData_MobReborn::SharedCtor() {
  _cached_size_ = 0;
  dataid_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerSysBaseData_MobReborn::~MsgPlayerSysBaseData_MobReborn() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerSysBaseData.MobReborn)
  SharedDtor();
}

void MsgPlayerSysBaseData_MobReborn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerSysBaseData_MobReborn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerSysBaseData_MobReborn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerSysBaseData_MobReborn_descriptor_;
}

const MsgPlayerSysBaseData_MobReborn& MsgPlayerSysBaseData_MobReborn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerSysBaseData_MobReborn* MsgPlayerSysBaseData_MobReborn::default_instance_ = NULL;

MsgPlayerSysBaseData_MobReborn* MsgPlayerSysBaseData_MobReborn::New() const {
  return new MsgPlayerSysBaseData_MobReborn;
}

void MsgPlayerSysBaseData_MobReborn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerSysBaseData_MobReborn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_, dataid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerSysBaseData_MobReborn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerSysBaseData.MobReborn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dataid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerSysBaseData.MobReborn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerSysBaseData.MobReborn)
  return false;
#undef DO_
}

void MsgPlayerSysBaseData_MobReborn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerSysBaseData.MobReborn)
  // required int32 dataid = 1;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dataid(), output);
  }

  // required int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerSysBaseData.MobReborn)
}

::google::protobuf::uint8* MsgPlayerSysBaseData_MobReborn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerSysBaseData.MobReborn)
  // required int32 dataid = 1;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dataid(), target);
  }

  // required int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerSysBaseData.MobReborn)
  return target;
}

int MsgPlayerSysBaseData_MobReborn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dataid = 1;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataid());
    }

    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerSysBaseData_MobReborn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerSysBaseData_MobReborn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerSysBaseData_MobReborn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerSysBaseData_MobReborn::MergeFrom(const MsgPlayerSysBaseData_MobReborn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerSysBaseData_MobReborn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerSysBaseData_MobReborn::CopyFrom(const MsgPlayerSysBaseData_MobReborn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerSysBaseData_MobReborn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgPlayerSysBaseData_MobReborn::Swap(MsgPlayerSysBaseData_MobReborn* other) {
  if (other != this) {
    std::swap(dataid_, other->dataid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerSysBaseData_MobReborn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerSysBaseData_MobReborn_descriptor_;
  metadata.reflection = MsgPlayerSysBaseData_MobReborn_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgPlayerSysBaseData::kSurvivalSupermoonTimeFieldNumber;
const int MsgPlayerSysBaseData::kCreateDayFieldNumber;
const int MsgPlayerSysBaseData::kWeaponUuidFieldNumber;
const int MsgPlayerSysBaseData::kToolUuidFieldNumber;
const int MsgPlayerSysBaseData::kWeaponEndlessFieldNumber;
const int MsgPlayerSysBaseData::kToolEndlessFieldNumber;
const int MsgPlayerSysBaseData::kDailyResetDateFieldNumber;
const int MsgPlayerSysBaseData::kCreateRoleTimeFieldNumber;
const int MsgPlayerSysBaseData::kDirtyFieldNumber;
const int MsgPlayerSysBaseData::kTotalCashPayedFieldNumber;
const int MsgPlayerSysBaseData::kVipLevelFieldNumber;
const int MsgPlayerSysBaseData::kDayMaxNumFieldNumber;
const int MsgPlayerSysBaseData::kMobsFieldNumber;
#endif  // !_MSC_VER

MsgPlayerSysBaseData::MsgPlayerSysBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerSysBaseData)
}

void MsgPlayerSysBaseData::InitAsDefaultInstance() {
  day_max_num_ = const_cast< ::MsgPB::MsgPlayerSysBaseData_DayMaxNum*>(&::MsgPB::MsgPlayerSysBaseData_DayMaxNum::default_instance());
}

MsgPlayerSysBaseData::MsgPlayerSysBaseData(const MsgPlayerSysBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerSysBaseData)
}

void MsgPlayerSysBaseData::SharedCtor() {
  _cached_size_ = 0;
  survival_supermoon_time_ = 0;
  create_day_ = 0;
  weapon_uuid_ = GOOGLE_LONGLONG(0);
  tool_uuid_ = GOOGLE_LONGLONG(0);
  weapon_endless_ = GOOGLE_LONGLONG(0);
  tool_endless_ = GOOGLE_LONGLONG(0);
  daily_reset_date_ = 0;
  create_role_time_ = GOOGLE_LONGLONG(0);
  dirty_ = GOOGLE_LONGLONG(0);
  total_cash_payed_ = 0;
  vip_level_ = 0;
  day_max_num_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerSysBaseData::~MsgPlayerSysBaseData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerSysBaseData)
  SharedDtor();
}

void MsgPlayerSysBaseData::SharedDtor() {
  if (this != default_instance_) {
    delete day_max_num_;
  }
}

void MsgPlayerSysBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerSysBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerSysBaseData_descriptor_;
}

const MsgPlayerSysBaseData& MsgPlayerSysBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerSysBaseData* MsgPlayerSysBaseData::default_instance_ = NULL;

MsgPlayerSysBaseData* MsgPlayerSysBaseData::New() const {
  return new MsgPlayerSysBaseData;
}

void MsgPlayerSysBaseData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerSysBaseData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(survival_supermoon_time_, daily_reset_date_);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(total_cash_payed_, dirty_);
    vip_level_ = 0;
    if (has_day_max_num()) {
      if (day_max_num_ != NULL) day_max_num_->::MsgPB::MsgPlayerSysBaseData_DayMaxNum::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mobs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerSysBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerSysBaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 survival_supermoon_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &survival_supermoon_time_)));
          set_has_survival_supermoon_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_create_day;
        break;
      }

      // optional int32 create_day = 2;
      case 2: {
        if (tag == 16) {
         parse_create_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_day_)));
          set_has_create_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_weapon_uuid;
        break;
      }

      // optional int64 weapon_uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_weapon_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weapon_uuid_)));
          set_has_weapon_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tool_uuid;
        break;
      }

      // optional int64 tool_uuid = 4;
      case 4: {
        if (tag == 32) {
         parse_tool_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tool_uuid_)));
          set_has_tool_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_weapon_endless;
        break;
      }

      // optional int64 weapon_endless = 5;
      case 5: {
        if (tag == 40) {
         parse_weapon_endless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weapon_endless_)));
          set_has_weapon_endless();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tool_endless;
        break;
      }

      // optional int64 tool_endless = 6;
      case 6: {
        if (tag == 48) {
         parse_tool_endless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tool_endless_)));
          set_has_tool_endless();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_daily_reset_date;
        break;
      }

      // optional int32 daily_reset_date = 7;
      case 7: {
        if (tag == 56) {
         parse_daily_reset_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_reset_date_)));
          set_has_daily_reset_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_create_role_time;
        break;
      }

      // optional int64 create_role_time = 8;
      case 8: {
        if (tag == 64) {
         parse_create_role_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_role_time_)));
          set_has_create_role_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dirty;
        break;
      }

      // optional int64 dirty = 9;
      case 9: {
        if (tag == 72) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_total_cash_payed;
        break;
      }

      // optional int32 total_cash_payed = 10;
      case 10: {
        if (tag == 80) {
         parse_total_cash_payed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_cash_payed_)));
          set_has_total_cash_payed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 11;
      case 11: {
        if (tag == 88) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_day_max_num;
        break;
      }

      // optional .MsgPB.MsgPlayerSysBaseData.DayMaxNum day_max_num = 12;
      case 12: {
        if (tag == 98) {
         parse_day_max_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_day_max_num()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_mobs;
        break;
      }

      // repeated .MsgPB.MsgPlayerSysBaseData.MobReborn mobs = 13;
      case 13: {
        if (tag == 106) {
         parse_mobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_mobs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerSysBaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerSysBaseData)
  return false;
#undef DO_
}

void MsgPlayerSysBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerSysBaseData)
  // optional int32 survival_supermoon_time = 1;
  if (has_survival_supermoon_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->survival_supermoon_time(), output);
  }

  // optional int32 create_day = 2;
  if (has_create_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->create_day(), output);
  }

  // optional int64 weapon_uuid = 3;
  if (has_weapon_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->weapon_uuid(), output);
  }

  // optional int64 tool_uuid = 4;
  if (has_tool_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->tool_uuid(), output);
  }

  // optional int64 weapon_endless = 5;
  if (has_weapon_endless()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->weapon_endless(), output);
  }

  // optional int64 tool_endless = 6;
  if (has_tool_endless()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->tool_endless(), output);
  }

  // optional int32 daily_reset_date = 7;
  if (has_daily_reset_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->daily_reset_date(), output);
  }

  // optional int64 create_role_time = 8;
  if (has_create_role_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->create_role_time(), output);
  }

  // optional int64 dirty = 9;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->dirty(), output);
  }

  // optional int32 total_cash_payed = 10;
  if (has_total_cash_payed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->total_cash_payed(), output);
  }

  // optional int32 vip_level = 11;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->vip_level(), output);
  }

  // optional .MsgPB.MsgPlayerSysBaseData.DayMaxNum day_max_num = 12;
  if (has_day_max_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->day_max_num(), output);
  }

  // repeated .MsgPB.MsgPlayerSysBaseData.MobReborn mobs = 13;
  for (int i = 0; i < this->mobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->mobs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerSysBaseData)
}

::google::protobuf::uint8* MsgPlayerSysBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerSysBaseData)
  // optional int32 survival_supermoon_time = 1;
  if (has_survival_supermoon_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->survival_supermoon_time(), target);
  }

  // optional int32 create_day = 2;
  if (has_create_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->create_day(), target);
  }

  // optional int64 weapon_uuid = 3;
  if (has_weapon_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->weapon_uuid(), target);
  }

  // optional int64 tool_uuid = 4;
  if (has_tool_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->tool_uuid(), target);
  }

  // optional int64 weapon_endless = 5;
  if (has_weapon_endless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->weapon_endless(), target);
  }

  // optional int64 tool_endless = 6;
  if (has_tool_endless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->tool_endless(), target);
  }

  // optional int32 daily_reset_date = 7;
  if (has_daily_reset_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->daily_reset_date(), target);
  }

  // optional int64 create_role_time = 8;
  if (has_create_role_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->create_role_time(), target);
  }

  // optional int64 dirty = 9;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->dirty(), target);
  }

  // optional int32 total_cash_payed = 10;
  if (has_total_cash_payed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->total_cash_payed(), target);
  }

  // optional int32 vip_level = 11;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->vip_level(), target);
  }

  // optional .MsgPB.MsgPlayerSysBaseData.DayMaxNum day_max_num = 12;
  if (has_day_max_num()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->day_max_num(), target);
  }

  // repeated .MsgPB.MsgPlayerSysBaseData.MobReborn mobs = 13;
  for (int i = 0; i < this->mobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->mobs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerSysBaseData)
  return target;
}

int MsgPlayerSysBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 survival_supermoon_time = 1;
    if (has_survival_supermoon_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->survival_supermoon_time());
    }

    // optional int32 create_day = 2;
    if (has_create_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_day());
    }

    // optional int64 weapon_uuid = 3;
    if (has_weapon_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->weapon_uuid());
    }

    // optional int64 tool_uuid = 4;
    if (has_tool_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tool_uuid());
    }

    // optional int64 weapon_endless = 5;
    if (has_weapon_endless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->weapon_endless());
    }

    // optional int64 tool_endless = 6;
    if (has_tool_endless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tool_endless());
    }

    // optional int32 daily_reset_date = 7;
    if (has_daily_reset_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_reset_date());
    }

    // optional int64 create_role_time = 8;
    if (has_create_role_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_role_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 dirty = 9;
    if (has_dirty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirty());
    }

    // optional int32 total_cash_payed = 10;
    if (has_total_cash_payed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_cash_payed());
    }

    // optional int32 vip_level = 11;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional .MsgPB.MsgPlayerSysBaseData.DayMaxNum day_max_num = 12;
    if (has_day_max_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->day_max_num());
    }

  }
  // repeated .MsgPB.MsgPlayerSysBaseData.MobReborn mobs = 13;
  total_size += 1 * this->mobs_size();
  for (int i = 0; i < this->mobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mobs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerSysBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerSysBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerSysBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerSysBaseData::MergeFrom(const MsgPlayerSysBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mobs_.MergeFrom(from.mobs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_survival_supermoon_time()) {
      set_survival_supermoon_time(from.survival_supermoon_time());
    }
    if (from.has_create_day()) {
      set_create_day(from.create_day());
    }
    if (from.has_weapon_uuid()) {
      set_weapon_uuid(from.weapon_uuid());
    }
    if (from.has_tool_uuid()) {
      set_tool_uuid(from.tool_uuid());
    }
    if (from.has_weapon_endless()) {
      set_weapon_endless(from.weapon_endless());
    }
    if (from.has_tool_endless()) {
      set_tool_endless(from.tool_endless());
    }
    if (from.has_daily_reset_date()) {
      set_daily_reset_date(from.daily_reset_date());
    }
    if (from.has_create_role_time()) {
      set_create_role_time(from.create_role_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
    if (from.has_total_cash_payed()) {
      set_total_cash_payed(from.total_cash_payed());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_day_max_num()) {
      mutable_day_max_num()->::MsgPB::MsgPlayerSysBaseData_DayMaxNum::MergeFrom(from.day_max_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerSysBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerSysBaseData::CopyFrom(const MsgPlayerSysBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerSysBaseData::IsInitialized() const {

  if (has_day_max_num()) {
    if (!this->day_max_num().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->mobs())) return false;
  return true;
}

void MsgPlayerSysBaseData::Swap(MsgPlayerSysBaseData* other) {
  if (other != this) {
    std::swap(survival_supermoon_time_, other->survival_supermoon_time_);
    std::swap(create_day_, other->create_day_);
    std::swap(weapon_uuid_, other->weapon_uuid_);
    std::swap(tool_uuid_, other->tool_uuid_);
    std::swap(weapon_endless_, other->weapon_endless_);
    std::swap(tool_endless_, other->tool_endless_);
    std::swap(daily_reset_date_, other->daily_reset_date_);
    std::swap(create_role_time_, other->create_role_time_);
    std::swap(dirty_, other->dirty_);
    std::swap(total_cash_payed_, other->total_cash_payed_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(day_max_num_, other->day_max_num_);
    mobs_.Swap(&other->mobs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerSysBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerSysBaseData_descriptor_;
  metadata.reflection = MsgPlayerSysBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryPlayerInfo_Base::kIggidFieldNumber;
const int MsgQueryPlayerInfo_Base::kLevelFieldNumber;
const int MsgQueryPlayerInfo_Base::kNicknameFieldNumber;
const int MsgQueryPlayerInfo_Base::kGenderFieldNumber;
const int MsgQueryPlayerInfo_Base::kSkincolorFieldNumber;
const int MsgQueryPlayerInfo_Base::kHairFieldNumber;
const int MsgQueryPlayerInfo_Base::kHaircolorFieldNumber;
const int MsgQueryPlayerInfo_Base::kLogoutTimeFieldNumber;
const int MsgQueryPlayerInfo_Base::kExpFieldNumber;
const int MsgQueryPlayerInfo_Base::kHpFieldNumber;
const int MsgQueryPlayerInfo_Base::kMpFieldNumber;
const int MsgQueryPlayerInfo_Base::kFoodFieldNumber;
#endif  // !_MSC_VER

MsgQueryPlayerInfo_Base::MsgQueryPlayerInfo_Base()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgQueryPlayerInfo_Base)
}

void MsgQueryPlayerInfo_Base::InitAsDefaultInstance() {
}

MsgQueryPlayerInfo_Base::MsgQueryPlayerInfo_Base(const MsgQueryPlayerInfo_Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgQueryPlayerInfo_Base)
}

void MsgQueryPlayerInfo_Base::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  skincolor_ = 0;
  hair_ = 0;
  haircolor_ = 0;
  logouttime_ = GOOGLE_LONGLONG(0);
  exp_ = GOOGLE_LONGLONG(0);
  hp_ = 0;
  mp_ = 0;
  food_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryPlayerInfo_Base::~MsgQueryPlayerInfo_Base() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgQueryPlayerInfo_Base)
  SharedDtor();
}

void MsgQueryPlayerInfo_Base::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void MsgQueryPlayerInfo_Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryPlayerInfo_Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryPlayerInfo_Base_descriptor_;
}

const MsgQueryPlayerInfo_Base& MsgQueryPlayerInfo_Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgQueryPlayerInfo_Base* MsgQueryPlayerInfo_Base::default_instance_ = NULL;

MsgQueryPlayerInfo_Base* MsgQueryPlayerInfo_Base::New() const {
  return new MsgQueryPlayerInfo_Base;
}

void MsgQueryPlayerInfo_Base::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQueryPlayerInfo_Base*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(level_, haircolor_);
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ZR_(hp_, food_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryPlayerInfo_Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgQueryPlayerInfo_Base)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iggid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional int32 gender = 4;
      case 4: {
        if (tag == 32) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skincolor;
        break;
      }

      // optional int32 skincolor = 5;
      case 5: {
        if (tag == 40) {
         parse_skincolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skincolor_)));
          set_has_skincolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hair;
        break;
      }

      // optional int32 hair = 6;
      case 6: {
        if (tag == 48) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_haircolor;
        break;
      }

      // optional int32 haircolor = 7;
      case 7: {
        if (tag == 56) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_LogoutTime;
        break;
      }

      // optional int64 LogoutTime = 8;
      case 8: {
        if (tag == 64) {
         parse_LogoutTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logouttime_)));
          set_has_logouttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // optional int64 exp = 9;
      case 9: {
        if (tag == 72) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_hp;
        break;
      }

      // optional int32 hp = 10;
      case 10: {
        if (tag == 80) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mp;
        break;
      }

      // optional int32 mp = 11;
      case 11: {
        if (tag == 88) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_food;
        break;
      }

      // optional int32 food = 12;
      case 12: {
        if (tag == 96) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgQueryPlayerInfo_Base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgQueryPlayerInfo_Base)
  return false;
#undef DO_
}

void MsgQueryPlayerInfo_Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgQueryPlayerInfo_Base)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iggid(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional int32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gender(), output);
  }

  // optional int32 skincolor = 5;
  if (has_skincolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skincolor(), output);
  }

  // optional int32 hair = 6;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hair(), output);
  }

  // optional int32 haircolor = 7;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->haircolor(), output);
  }

  // optional int64 LogoutTime = 8;
  if (has_logouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->logouttime(), output);
  }

  // optional int64 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->exp(), output);
  }

  // optional int32 hp = 10;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hp(), output);
  }

  // optional int32 mp = 11;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mp(), output);
  }

  // optional int32 food = 12;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->food(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgQueryPlayerInfo_Base)
}

::google::protobuf::uint8* MsgQueryPlayerInfo_Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgQueryPlayerInfo_Base)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iggid(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gender(), target);
  }

  // optional int32 skincolor = 5;
  if (has_skincolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skincolor(), target);
  }

  // optional int32 hair = 6;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hair(), target);
  }

  // optional int32 haircolor = 7;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->haircolor(), target);
  }

  // optional int64 LogoutTime = 8;
  if (has_logouttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->logouttime(), target);
  }

  // optional int64 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->exp(), target);
  }

  // optional int32 hp = 10;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hp(), target);
  }

  // optional int32 mp = 11;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mp(), target);
  }

  // optional int32 food = 12;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->food(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgQueryPlayerInfo_Base)
  return target;
}

int MsgQueryPlayerInfo_Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iggid = 1;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 skincolor = 5;
    if (has_skincolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skincolor());
    }

    // optional int32 hair = 6;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // optional int32 haircolor = 7;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haircolor());
    }

    // optional int64 LogoutTime = 8;
    if (has_logouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logouttime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 hp = 10;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 11;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional int32 food = 12;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->food());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryPlayerInfo_Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryPlayerInfo_Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryPlayerInfo_Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryPlayerInfo_Base::MergeFrom(const MsgQueryPlayerInfo_Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_skincolor()) {
      set_skincolor(from.skincolor());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_logouttime()) {
      set_logouttime(from.logouttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryPlayerInfo_Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryPlayerInfo_Base::CopyFrom(const MsgQueryPlayerInfo_Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryPlayerInfo_Base::IsInitialized() const {

  return true;
}

void MsgQueryPlayerInfo_Base::Swap(MsgQueryPlayerInfo_Base* other) {
  if (other != this) {
    std::swap(iggid_, other->iggid_);
    std::swap(level_, other->level_);
    std::swap(nickname_, other->nickname_);
    std::swap(gender_, other->gender_);
    std::swap(skincolor_, other->skincolor_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(logouttime_, other->logouttime_);
    std::swap(exp_, other->exp_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(food_, other->food_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryPlayerInfo_Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryPlayerInfo_Base_descriptor_;
  metadata.reflection = MsgQueryPlayerInfo_Base_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgPlayerInfoGS2C_NOTIFY_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerInfoGS2C_NOTIFY_descriptor_;
}
bool MsgPlayerInfoGS2C_NOTIFY_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgPlayerInfoGS2C_NOTIFY MsgPlayerInfoGS2C::NOSYNC;
const MsgPlayerInfoGS2C_NOTIFY MsgPlayerInfoGS2C::DEFAULT;
const MsgPlayerInfoGS2C_NOTIFY MsgPlayerInfoGS2C::NATUREREGEN;
const MsgPlayerInfoGS2C_NOTIFY MsgPlayerInfoGS2C::NOTIFY_MIN;
const MsgPlayerInfoGS2C_NOTIFY MsgPlayerInfoGS2C::NOTIFY_MAX;
const int MsgPlayerInfoGS2C::NOTIFY_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgPlayerInfoGS2C::kMsgTypeFieldNumber;
const int MsgPlayerInfoGS2C::kIggidFieldNumber;
const int MsgPlayerInfoGS2C::kLvFieldNumber;
const int MsgPlayerInfoGS2C::kExpFieldNumber;
const int MsgPlayerInfoGS2C::kFoodFieldNumber;
const int MsgPlayerInfoGS2C::kBreathFieldNumber;
const int MsgPlayerInfoGS2C::kNicknameFieldNumber;
const int MsgPlayerInfoGS2C::kRaceFieldNumber;
const int MsgPlayerInfoGS2C::kGenderFieldNumber;
const int MsgPlayerInfoGS2C::kSkincolorFieldNumber;
const int MsgPlayerInfoGS2C::kHairFieldNumber;
const int MsgPlayerInfoGS2C::kHaircolorFieldNumber;
const int MsgPlayerInfoGS2C::kFaceFieldNumber;
const int MsgPlayerInfoGS2C::kFacecolorFieldNumber;
const int MsgPlayerInfoGS2C::kUnderwearFieldNumber;
const int MsgPlayerInfoGS2C::kUnderwearcolorFieldNumber;
const int MsgPlayerInfoGS2C::kOwnmapnumFieldNumber;
const int MsgPlayerInfoGS2C::kHpFieldNumber;
const int MsgPlayerInfoGS2C::kMpFieldNumber;
const int MsgPlayerInfoGS2C::kAvatordoneFieldNumber;
const int MsgPlayerInfoGS2C::kPvpsegmentFieldNumber;
const int MsgPlayerInfoGS2C::kPvpscoreFieldNumber;
const int MsgPlayerInfoGS2C::kPvpkillscoreFieldNumber;
const int MsgPlayerInfoGS2C::kPvprankscoreFieldNumber;
const int MsgPlayerInfoGS2C::kPvptimeFieldNumber;
const int MsgPlayerInfoGS2C::kPvpcoinFieldNumber;
const int MsgPlayerInfoGS2C::kGroupFieldNumber;
const int MsgPlayerInfoGS2C::kEndlessLevFieldNumber;
const int MsgPlayerInfoGS2C::kEndlessExpFieldNumber;
const int MsgPlayerInfoGS2C::kNotifyTypeFieldNumber;
const int MsgPlayerInfoGS2C::kMaxHpFieldNumber;
const int MsgPlayerInfoGS2C::kForceUpExpLvFieldNumber;
const int MsgPlayerInfoGS2C::kCoinFieldNumber;
const int MsgPlayerInfoGS2C::kCashFieldNumber;
const int MsgPlayerInfoGS2C::kTicketsFieldNumber;
const int MsgPlayerInfoGS2C::kCurDungeonIdFieldNumber;
const int MsgPlayerInfoGS2C::kLottytimeFieldNumber;
const int MsgPlayerInfoGS2C::kOtherPlayerInfoFieldNumber;
#endif  // !_MSC_VER

MsgPlayerInfoGS2C::MsgPlayerInfoGS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerInfoGS2C)
}

void MsgPlayerInfoGS2C::InitAsDefaultInstance() {
}

MsgPlayerInfoGS2C::MsgPlayerInfoGS2C(const MsgPlayerInfoGS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerInfoGS2C)
}

void MsgPlayerInfoGS2C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1023;
  iggid_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  food_ = 0;
  breath_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  race_ = 0;
  gender_ = 0;
  skincolor_ = 0;
  hair_ = 0;
  haircolor_ = 0;
  face_ = 0;
  facecolor_ = 0;
  underwear_ = 0;
  underwearcolor_ = 0;
  ownmapnum_ = 0;
  hp_ = 0;
  mp_ = 0;
  avatordone_ = 0;
  pvpsegment_ = 0;
  pvpscore_ = 0;
  pvpkillscore_ = 0;
  pvprankscore_ = 0;
  pvptime_ = 0;
  pvpcoin_ = 0;
  group_ = 0u;
  endlesslev_ = 0;
  endlessexp_ = GOOGLE_LONGLONG(0);
  notifytype_ = -1;
  maxhp_ = 0;
  force_up_exp_lv_ = false;
  coin_ = GOOGLE_LONGLONG(0);
  cash_ = GOOGLE_LONGLONG(0);
  tickets_ = GOOGLE_LONGLONG(0);
  curdungeonid_ = 0;
  lottytime_ = GOOGLE_LONGLONG(0);
  otherplayerinfo_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerInfoGS2C::~MsgPlayerInfoGS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerInfoGS2C)
  SharedDtor();
}

void MsgPlayerInfoGS2C::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlayerInfoGS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerInfoGS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerInfoGS2C_descriptor_;
}

const MsgPlayerInfoGS2C& MsgPlayerInfoGS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerInfoGS2C* MsgPlayerInfoGS2C::default_instance_ = NULL;

MsgPlayerInfoGS2C* MsgPlayerInfoGS2C::New() const {
  return new MsgPlayerInfoGS2C;
}

void MsgPlayerInfoGS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerInfoGS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(lv_, breath_);
    msgtype_ = 1023;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    race_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(gender_, underwearcolor_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(ownmapnum_, pvprankscore_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(pvptime_, endlesslev_);
    ZR_(maxhp_, force_up_exp_lv_);
    notifytype_ = -1;
  }
  if (_has_bits_[32 / 32] & 63) {
    ZR_(otherplayerinfo_, curdungeonid_);
    coin_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerInfoGS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerInfoGS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_INFO_GS2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lv;
        break;
      }

      // optional int32 lv = 6;
      case 6: {
        if (tag == 48) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // optional int64 exp = 7;
      case 7: {
        if (tag == 56) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_food;
        break;
      }

      // optional int32 food = 8;
      case 8: {
        if (tag == 64) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_breath;
        break;
      }

      // optional int32 breath = 9;
      case 9: {
        if (tag == 72) {
         parse_breath:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breath_)));
          set_has_breath();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_nickname;
        break;
      }

      // optional string nickname = 10;
      case 10: {
        if (tag == 82) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_race;
        break;
      }

      // optional int32 race = 11;
      case 11: {
        if (tag == 88) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gender;
        break;
      }

      // optional int32 gender = 12;
      case 12: {
        if (tag == 96) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_skincolor;
        break;
      }

      // optional int32 skincolor = 13;
      case 13: {
        if (tag == 104) {
         parse_skincolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skincolor_)));
          set_has_skincolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_hair;
        break;
      }

      // optional int32 hair = 14;
      case 14: {
        if (tag == 112) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_haircolor;
        break;
      }

      // optional int32 haircolor = 15;
      case 15: {
        if (tag == 120) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_face;
        break;
      }

      // optional int32 face = 16;
      case 16: {
        if (tag == 128) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_facecolor;
        break;
      }

      // optional int32 facecolor = 17;
      case 17: {
        if (tag == 136) {
         parse_facecolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facecolor_)));
          set_has_facecolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_underwear;
        break;
      }

      // optional int32 underwear = 18;
      case 18: {
        if (tag == 144) {
         parse_underwear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &underwear_)));
          set_has_underwear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_underwearcolor;
        break;
      }

      // optional int32 underwearcolor = 19;
      case 19: {
        if (tag == 152) {
         parse_underwearcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &underwearcolor_)));
          set_has_underwearcolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_ownmapnum;
        break;
      }

      // optional int32 ownmapnum = 20;
      case 20: {
        if (tag == 160) {
         parse_ownmapnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownmapnum_)));
          set_has_ownmapnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_hp;
        break;
      }

      // optional int32 hp = 21;
      case 21: {
        if (tag == 168) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_mp;
        break;
      }

      // optional int32 mp = 22;
      case 22: {
        if (tag == 176) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_avatordone;
        break;
      }

      // optional int32 avatordone = 23;
      case 23: {
        if (tag == 184) {
         parse_avatordone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatordone_)));
          set_has_avatordone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_pvpsegment;
        break;
      }

      // optional int32 pvpsegment = 24;
      case 24: {
        if (tag == 192) {
         parse_pvpsegment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpsegment_)));
          set_has_pvpsegment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_pvpscore;
        break;
      }

      // optional int32 pvpscore = 25;
      case 25: {
        if (tag == 200) {
         parse_pvpscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpscore_)));
          set_has_pvpscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_pvpkillscore;
        break;
      }

      // optional int32 pvpkillscore = 26;
      case 26: {
        if (tag == 208) {
         parse_pvpkillscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpkillscore_)));
          set_has_pvpkillscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_pvprankscore;
        break;
      }

      // optional int32 pvprankscore = 27;
      case 27: {
        if (tag == 216) {
         parse_pvprankscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvprankscore_)));
          set_has_pvprankscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_pvptime;
        break;
      }

      // optional int32 pvptime = 28;
      case 28: {
        if (tag == 224) {
         parse_pvptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvptime_)));
          set_has_pvptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_pvpcoin;
        break;
      }

      // optional int32 pvpcoin = 29;
      case 29: {
        if (tag == 232) {
         parse_pvpcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpcoin_)));
          set_has_pvpcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_group;
        break;
      }

      // optional uint32 group = 30;
      case 30: {
        if (tag == 240) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_endlessLev;
        break;
      }

      // optional int32 endlessLev = 31;
      case 31: {
        if (tag == 248) {
         parse_endlessLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endlesslev_)));
          set_has_endlesslev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_endlessExp;
        break;
      }

      // optional int64 endlessExp = 32;
      case 32: {
        if (tag == 256) {
         parse_endlessExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endlessexp_)));
          set_has_endlessexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_notifyType;
        break;
      }

      // optional .MsgPB.MsgPlayerInfoGS2C.NOTIFY notifyType = 33;
      case 33: {
        if (tag == 264) {
         parse_notifyType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgPlayerInfoGS2C_NOTIFY_IsValid(value)) {
            set_notifytype(static_cast< ::MsgPB::MsgPlayerInfoGS2C_NOTIFY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(33, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_maxHp;
        break;
      }

      // optional int32 maxHp = 34;
      case 34: {
        if (tag == 272) {
         parse_maxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_force_up_exp_lv;
        break;
      }

      // optional bool force_up_exp_lv = 35;
      case 35: {
        if (tag == 280) {
         parse_force_up_exp_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_up_exp_lv_)));
          set_has_force_up_exp_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_coin;
        break;
      }

      // optional int64 coin = 36;
      case 36: {
        if (tag == 288) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_cash;
        break;
      }

      // optional int64 cash = 37;
      case 37: {
        if (tag == 296) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_tickets;
        break;
      }

      // optional int64 tickets = 38;
      case 38: {
        if (tag == 304) {
         parse_tickets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tickets_)));
          set_has_tickets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_curDungeonId;
        break;
      }

      // optional int32 curDungeonId = 39;
      case 39: {
        if (tag == 312) {
         parse_curDungeonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curdungeonid_)));
          set_has_curdungeonid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_lottytime;
        break;
      }

      // optional int64 lottytime = 40;
      case 40: {
        if (tag == 320) {
         parse_lottytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lottytime_)));
          set_has_lottytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(792)) goto parse_otherPlayerInfo;
        break;
      }

      // optional bool otherPlayerInfo = 99 [default = false];
      case 99: {
        if (tag == 792) {
         parse_otherPlayerInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &otherplayerinfo_)));
          set_has_otherplayerinfo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerInfoGS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerInfoGS2C)
  return false;
#undef DO_
}

void MsgPlayerInfoGS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerInfoGS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_INFO_GS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 lv = 6;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lv(), output);
  }

  // optional int64 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->exp(), output);
  }

  // optional int32 food = 8;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->food(), output);
  }

  // optional int32 breath = 9;
  if (has_breath()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->breath(), output);
  }

  // optional string nickname = 10;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->nickname(), output);
  }

  // optional int32 race = 11;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->race(), output);
  }

  // optional int32 gender = 12;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gender(), output);
  }

  // optional int32 skincolor = 13;
  if (has_skincolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->skincolor(), output);
  }

  // optional int32 hair = 14;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hair(), output);
  }

  // optional int32 haircolor = 15;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->haircolor(), output);
  }

  // optional int32 face = 16;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->face(), output);
  }

  // optional int32 facecolor = 17;
  if (has_facecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->facecolor(), output);
  }

  // optional int32 underwear = 18;
  if (has_underwear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->underwear(), output);
  }

  // optional int32 underwearcolor = 19;
  if (has_underwearcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->underwearcolor(), output);
  }

  // optional int32 ownmapnum = 20;
  if (has_ownmapnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->ownmapnum(), output);
  }

  // optional int32 hp = 21;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->hp(), output);
  }

  // optional int32 mp = 22;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->mp(), output);
  }

  // optional int32 avatordone = 23;
  if (has_avatordone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->avatordone(), output);
  }

  // optional int32 pvpsegment = 24;
  if (has_pvpsegment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->pvpsegment(), output);
  }

  // optional int32 pvpscore = 25;
  if (has_pvpscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->pvpscore(), output);
  }

  // optional int32 pvpkillscore = 26;
  if (has_pvpkillscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->pvpkillscore(), output);
  }

  // optional int32 pvprankscore = 27;
  if (has_pvprankscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->pvprankscore(), output);
  }

  // optional int32 pvptime = 28;
  if (has_pvptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->pvptime(), output);
  }

  // optional int32 pvpcoin = 29;
  if (has_pvpcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->pvpcoin(), output);
  }

  // optional uint32 group = 30;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->group(), output);
  }

  // optional int32 endlessLev = 31;
  if (has_endlesslev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->endlesslev(), output);
  }

  // optional int64 endlessExp = 32;
  if (has_endlessexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->endlessexp(), output);
  }

  // optional .MsgPB.MsgPlayerInfoGS2C.NOTIFY notifyType = 33;
  if (has_notifytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      33, this->notifytype(), output);
  }

  // optional int32 maxHp = 34;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->maxhp(), output);
  }

  // optional bool force_up_exp_lv = 35;
  if (has_force_up_exp_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->force_up_exp_lv(), output);
  }

  // optional int64 coin = 36;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->coin(), output);
  }

  // optional int64 cash = 37;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->cash(), output);
  }

  // optional int64 tickets = 38;
  if (has_tickets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->tickets(), output);
  }

  // optional int32 curDungeonId = 39;
  if (has_curdungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->curdungeonid(), output);
  }

  // optional int64 lottytime = 40;
  if (has_lottytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->lottytime(), output);
  }

  // optional bool otherPlayerInfo = 99 [default = false];
  if (has_otherplayerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(99, this->otherplayerinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerInfoGS2C)
}

::google::protobuf::uint8* MsgPlayerInfoGS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerInfoGS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_INFO_GS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 lv = 6;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lv(), target);
  }

  // optional int64 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->exp(), target);
  }

  // optional int32 food = 8;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->food(), target);
  }

  // optional int32 breath = 9;
  if (has_breath()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->breath(), target);
  }

  // optional string nickname = 10;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->nickname(), target);
  }

  // optional int32 race = 11;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->race(), target);
  }

  // optional int32 gender = 12;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gender(), target);
  }

  // optional int32 skincolor = 13;
  if (has_skincolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->skincolor(), target);
  }

  // optional int32 hair = 14;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->hair(), target);
  }

  // optional int32 haircolor = 15;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->haircolor(), target);
  }

  // optional int32 face = 16;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->face(), target);
  }

  // optional int32 facecolor = 17;
  if (has_facecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->facecolor(), target);
  }

  // optional int32 underwear = 18;
  if (has_underwear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->underwear(), target);
  }

  // optional int32 underwearcolor = 19;
  if (has_underwearcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->underwearcolor(), target);
  }

  // optional int32 ownmapnum = 20;
  if (has_ownmapnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->ownmapnum(), target);
  }

  // optional int32 hp = 21;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->hp(), target);
  }

  // optional int32 mp = 22;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->mp(), target);
  }

  // optional int32 avatordone = 23;
  if (has_avatordone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->avatordone(), target);
  }

  // optional int32 pvpsegment = 24;
  if (has_pvpsegment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->pvpsegment(), target);
  }

  // optional int32 pvpscore = 25;
  if (has_pvpscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->pvpscore(), target);
  }

  // optional int32 pvpkillscore = 26;
  if (has_pvpkillscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->pvpkillscore(), target);
  }

  // optional int32 pvprankscore = 27;
  if (has_pvprankscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->pvprankscore(), target);
  }

  // optional int32 pvptime = 28;
  if (has_pvptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->pvptime(), target);
  }

  // optional int32 pvpcoin = 29;
  if (has_pvpcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->pvpcoin(), target);
  }

  // optional uint32 group = 30;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->group(), target);
  }

  // optional int32 endlessLev = 31;
  if (has_endlesslev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->endlesslev(), target);
  }

  // optional int64 endlessExp = 32;
  if (has_endlessexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->endlessexp(), target);
  }

  // optional .MsgPB.MsgPlayerInfoGS2C.NOTIFY notifyType = 33;
  if (has_notifytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      33, this->notifytype(), target);
  }

  // optional int32 maxHp = 34;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->maxhp(), target);
  }

  // optional bool force_up_exp_lv = 35;
  if (has_force_up_exp_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->force_up_exp_lv(), target);
  }

  // optional int64 coin = 36;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->coin(), target);
  }

  // optional int64 cash = 37;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->cash(), target);
  }

  // optional int64 tickets = 38;
  if (has_tickets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->tickets(), target);
  }

  // optional int32 curDungeonId = 39;
  if (has_curdungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->curdungeonid(), target);
  }

  // optional int64 lottytime = 40;
  if (has_lottytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->lottytime(), target);
  }

  // optional bool otherPlayerInfo = 99 [default = false];
  if (has_otherplayerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(99, this->otherplayerinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerInfoGS2C)
  return target;
}

int MsgPlayerInfoGS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_INFO_GS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 lv = 6;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int64 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 food = 8;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->food());
    }

    // optional int32 breath = 9;
    if (has_breath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breath());
    }

    // optional string nickname = 10;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 race = 11;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 gender = 12;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 skincolor = 13;
    if (has_skincolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skincolor());
    }

    // optional int32 hair = 14;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // optional int32 haircolor = 15;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haircolor());
    }

    // optional int32 face = 16;
    if (has_face()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->face());
    }

    // optional int32 facecolor = 17;
    if (has_facecolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->facecolor());
    }

    // optional int32 underwear = 18;
    if (has_underwear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->underwear());
    }

    // optional int32 underwearcolor = 19;
    if (has_underwearcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->underwearcolor());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 ownmapnum = 20;
    if (has_ownmapnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownmapnum());
    }

    // optional int32 hp = 21;
    if (has_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 22;
    if (has_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional int32 avatordone = 23;
    if (has_avatordone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatordone());
    }

    // optional int32 pvpsegment = 24;
    if (has_pvpsegment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpsegment());
    }

    // optional int32 pvpscore = 25;
    if (has_pvpscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpscore());
    }

    // optional int32 pvpkillscore = 26;
    if (has_pvpkillscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpkillscore());
    }

    // optional int32 pvprankscore = 27;
    if (has_pvprankscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvprankscore());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 pvptime = 28;
    if (has_pvptime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvptime());
    }

    // optional int32 pvpcoin = 29;
    if (has_pvpcoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpcoin());
    }

    // optional uint32 group = 30;
    if (has_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional int32 endlessLev = 31;
    if (has_endlesslev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endlesslev());
    }

    // optional int64 endlessExp = 32;
    if (has_endlessexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endlessexp());
    }

    // optional .MsgPB.MsgPlayerInfoGS2C.NOTIFY notifyType = 33;
    if (has_notifytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notifytype());
    }

    // optional int32 maxHp = 34;
    if (has_maxhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional bool force_up_exp_lv = 35;
    if (has_force_up_exp_lv()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int64 coin = 36;
    if (has_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional int64 cash = 37;
    if (has_cash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cash());
    }

    // optional int64 tickets = 38;
    if (has_tickets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tickets());
    }

    // optional int32 curDungeonId = 39;
    if (has_curdungeonid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curdungeonid());
    }

    // optional int64 lottytime = 40;
    if (has_lottytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lottytime());
    }

    // optional bool otherPlayerInfo = 99 [default = false];
    if (has_otherplayerinfo()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerInfoGS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerInfoGS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerInfoGS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerInfoGS2C::MergeFrom(const MsgPlayerInfoGS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_breath()) {
      set_breath(from.breath());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_skincolor()) {
      set_skincolor(from.skincolor());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_facecolor()) {
      set_facecolor(from.facecolor());
    }
    if (from.has_underwear()) {
      set_underwear(from.underwear());
    }
    if (from.has_underwearcolor()) {
      set_underwearcolor(from.underwearcolor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ownmapnum()) {
      set_ownmapnum(from.ownmapnum());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_avatordone()) {
      set_avatordone(from.avatordone());
    }
    if (from.has_pvpsegment()) {
      set_pvpsegment(from.pvpsegment());
    }
    if (from.has_pvpscore()) {
      set_pvpscore(from.pvpscore());
    }
    if (from.has_pvpkillscore()) {
      set_pvpkillscore(from.pvpkillscore());
    }
    if (from.has_pvprankscore()) {
      set_pvprankscore(from.pvprankscore());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_pvptime()) {
      set_pvptime(from.pvptime());
    }
    if (from.has_pvpcoin()) {
      set_pvpcoin(from.pvpcoin());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_endlesslev()) {
      set_endlesslev(from.endlesslev());
    }
    if (from.has_endlessexp()) {
      set_endlessexp(from.endlessexp());
    }
    if (from.has_notifytype()) {
      set_notifytype(from.notifytype());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_force_up_exp_lv()) {
      set_force_up_exp_lv(from.force_up_exp_lv());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_tickets()) {
      set_tickets(from.tickets());
    }
    if (from.has_curdungeonid()) {
      set_curdungeonid(from.curdungeonid());
    }
    if (from.has_lottytime()) {
      set_lottytime(from.lottytime());
    }
    if (from.has_otherplayerinfo()) {
      set_otherplayerinfo(from.otherplayerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerInfoGS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerInfoGS2C::CopyFrom(const MsgPlayerInfoGS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerInfoGS2C::IsInitialized() const {

  return true;
}

void MsgPlayerInfoGS2C::Swap(MsgPlayerInfoGS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(food_, other->food_);
    std::swap(breath_, other->breath_);
    std::swap(nickname_, other->nickname_);
    std::swap(race_, other->race_);
    std::swap(gender_, other->gender_);
    std::swap(skincolor_, other->skincolor_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(face_, other->face_);
    std::swap(facecolor_, other->facecolor_);
    std::swap(underwear_, other->underwear_);
    std::swap(underwearcolor_, other->underwearcolor_);
    std::swap(ownmapnum_, other->ownmapnum_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(avatordone_, other->avatordone_);
    std::swap(pvpsegment_, other->pvpsegment_);
    std::swap(pvpscore_, other->pvpscore_);
    std::swap(pvpkillscore_, other->pvpkillscore_);
    std::swap(pvprankscore_, other->pvprankscore_);
    std::swap(pvptime_, other->pvptime_);
    std::swap(pvpcoin_, other->pvpcoin_);
    std::swap(group_, other->group_);
    std::swap(endlesslev_, other->endlesslev_);
    std::swap(endlessexp_, other->endlessexp_);
    std::swap(notifytype_, other->notifytype_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(force_up_exp_lv_, other->force_up_exp_lv_);
    std::swap(coin_, other->coin_);
    std::swap(cash_, other->cash_);
    std::swap(tickets_, other->tickets_);
    std::swap(curdungeonid_, other->curdungeonid_);
    std::swap(lottytime_, other->lottytime_);
    std::swap(otherplayerinfo_, other->otherplayerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerInfoGS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerInfoGS2C_descriptor_;
  metadata.reflection = MsgPlayerInfoGS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerSetAvatorC2S::kMsgTypeFieldNumber;
const int MsgPlayerSetAvatorC2S::kIggidFieldNumber;
const int MsgPlayerSetAvatorC2S::kFirstloginFieldNumber;
const int MsgPlayerSetAvatorC2S::kNicknameFieldNumber;
const int MsgPlayerSetAvatorC2S::kGenderFieldNumber;
const int MsgPlayerSetAvatorC2S::kSkincolorFieldNumber;
const int MsgPlayerSetAvatorC2S::kHairFieldNumber;
const int MsgPlayerSetAvatorC2S::kHaircolorFieldNumber;
#endif  // !_MSC_VER

MsgPlayerSetAvatorC2S::MsgPlayerSetAvatorC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerSetAvatorC2S)
}

void MsgPlayerSetAvatorC2S::InitAsDefaultInstance() {
}

MsgPlayerSetAvatorC2S::MsgPlayerSetAvatorC2S(const MsgPlayerSetAvatorC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerSetAvatorC2S)
}

void MsgPlayerSetAvatorC2S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1035;
  iggid_ = GOOGLE_LONGLONG(0);
  firstlogin_ = false;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  skincolor_ = 0;
  hair_ = 0;
  haircolor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerSetAvatorC2S::~MsgPlayerSetAvatorC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerSetAvatorC2S)
  SharedDtor();
}

void MsgPlayerSetAvatorC2S::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlayerSetAvatorC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerSetAvatorC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerSetAvatorC2S_descriptor_;
}

const MsgPlayerSetAvatorC2S& MsgPlayerSetAvatorC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerSetAvatorC2S* MsgPlayerSetAvatorC2S::default_instance_ = NULL;

MsgPlayerSetAvatorC2S* MsgPlayerSetAvatorC2S::New() const {
  return new MsgPlayerSetAvatorC2S;
}

void MsgPlayerSetAvatorC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerSetAvatorC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gender_, haircolor_);
    msgtype_ = 1035;
    iggid_ = GOOGLE_LONGLONG(0);
    firstlogin_ = false;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerSetAvatorC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerSetAvatorC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SET_AVATOR_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_firstlogin;
        break;
      }

      // optional bool firstlogin = 3;
      case 3: {
        if (tag == 24) {
         parse_firstlogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &firstlogin_)));
          set_has_firstlogin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional int32 gender = 5;
      case 5: {
        if (tag == 40) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_skincolor;
        break;
      }

      // optional int32 skincolor = 6;
      case 6: {
        if (tag == 48) {
         parse_skincolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skincolor_)));
          set_has_skincolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hair;
        break;
      }

      // optional int32 hair = 7;
      case 7: {
        if (tag == 56) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_haircolor;
        break;
      }

      // optional int32 haircolor = 8;
      case 8: {
        if (tag == 64) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerSetAvatorC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerSetAvatorC2S)
  return false;
#undef DO_
}

void MsgPlayerSetAvatorC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerSetAvatorC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SET_AVATOR_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional bool firstlogin = 3;
  if (has_firstlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->firstlogin(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional int32 gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gender(), output);
  }

  // optional int32 skincolor = 6;
  if (has_skincolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skincolor(), output);
  }

  // optional int32 hair = 7;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hair(), output);
  }

  // optional int32 haircolor = 8;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->haircolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerSetAvatorC2S)
}

::google::protobuf::uint8* MsgPlayerSetAvatorC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerSetAvatorC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SET_AVATOR_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional bool firstlogin = 3;
  if (has_firstlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->firstlogin(), target);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional int32 gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gender(), target);
  }

  // optional int32 skincolor = 6;
  if (has_skincolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skincolor(), target);
  }

  // optional int32 hair = 7;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hair(), target);
  }

  // optional int32 haircolor = 8;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->haircolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerSetAvatorC2S)
  return target;
}

int MsgPlayerSetAvatorC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SET_AVATOR_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional bool firstlogin = 3;
    if (has_firstlogin()) {
      total_size += 1 + 1;
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 skincolor = 6;
    if (has_skincolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skincolor());
    }

    // optional int32 hair = 7;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // optional int32 haircolor = 8;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haircolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerSetAvatorC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerSetAvatorC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerSetAvatorC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerSetAvatorC2S::MergeFrom(const MsgPlayerSetAvatorC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_firstlogin()) {
      set_firstlogin(from.firstlogin());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_skincolor()) {
      set_skincolor(from.skincolor());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerSetAvatorC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerSetAvatorC2S::CopyFrom(const MsgPlayerSetAvatorC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerSetAvatorC2S::IsInitialized() const {

  return true;
}

void MsgPlayerSetAvatorC2S::Swap(MsgPlayerSetAvatorC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(firstlogin_, other->firstlogin_);
    std::swap(nickname_, other->nickname_);
    std::swap(gender_, other->gender_);
    std::swap(skincolor_, other->skincolor_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerSetAvatorC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerSetAvatorC2S_descriptor_;
  metadata.reflection = MsgPlayerSetAvatorC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerSetAvatorResultS2C::kMsgTypeFieldNumber;
const int MsgPlayerSetAvatorResultS2C::kResultFieldNumber;
#endif  // !_MSC_VER

MsgPlayerSetAvatorResultS2C::MsgPlayerSetAvatorResultS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerSetAvatorResultS2C)
}

void MsgPlayerSetAvatorResultS2C::InitAsDefaultInstance() {
}

MsgPlayerSetAvatorResultS2C::MsgPlayerSetAvatorResultS2C(const MsgPlayerSetAvatorResultS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerSetAvatorResultS2C)
}

void MsgPlayerSetAvatorResultS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1036;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerSetAvatorResultS2C::~MsgPlayerSetAvatorResultS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerSetAvatorResultS2C)
  SharedDtor();
}

void MsgPlayerSetAvatorResultS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerSetAvatorResultS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerSetAvatorResultS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerSetAvatorResultS2C_descriptor_;
}

const MsgPlayerSetAvatorResultS2C& MsgPlayerSetAvatorResultS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerSetAvatorResultS2C* MsgPlayerSetAvatorResultS2C::default_instance_ = NULL;

MsgPlayerSetAvatorResultS2C* MsgPlayerSetAvatorResultS2C::New() const {
  return new MsgPlayerSetAvatorResultS2C;
}

void MsgPlayerSetAvatorResultS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1036;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerSetAvatorResultS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerSetAvatorResultS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SET_AVATOR_RESULT_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MsgPB.SET_AVATOR_RESULT result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::SET_AVATOR_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::SET_AVATOR_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerSetAvatorResultS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerSetAvatorResultS2C)
  return false;
#undef DO_
}

void MsgPlayerSetAvatorResultS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerSetAvatorResultS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SET_AVATOR_RESULT_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.SET_AVATOR_RESULT result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerSetAvatorResultS2C)
}

::google::protobuf::uint8* MsgPlayerSetAvatorResultS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerSetAvatorResultS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SET_AVATOR_RESULT_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.SET_AVATOR_RESULT result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerSetAvatorResultS2C)
  return target;
}

int MsgPlayerSetAvatorResultS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SET_AVATOR_RESULT_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.SET_AVATOR_RESULT result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerSetAvatorResultS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerSetAvatorResultS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerSetAvatorResultS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerSetAvatorResultS2C::MergeFrom(const MsgPlayerSetAvatorResultS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerSetAvatorResultS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerSetAvatorResultS2C::CopyFrom(const MsgPlayerSetAvatorResultS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerSetAvatorResultS2C::IsInitialized() const {

  return true;
}

void MsgPlayerSetAvatorResultS2C::Swap(MsgPlayerSetAvatorResultS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerSetAvatorResultS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerSetAvatorResultS2C_descriptor_;
  metadata.reflection = MsgPlayerSetAvatorResultS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerUpdateAvatorGS2S::kMsgTypeFieldNumber;
const int MsgPlayerUpdateAvatorGS2S::kIggidFieldNumber;
const int MsgPlayerUpdateAvatorGS2S::kNicknameFieldNumber;
const int MsgPlayerUpdateAvatorGS2S::kGenderFieldNumber;
const int MsgPlayerUpdateAvatorGS2S::kSkincolorFieldNumber;
const int MsgPlayerUpdateAvatorGS2S::kHairFieldNumber;
const int MsgPlayerUpdateAvatorGS2S::kHaircolorFieldNumber;
#endif  // !_MSC_VER

MsgPlayerUpdateAvatorGS2S::MsgPlayerUpdateAvatorGS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerUpdateAvatorGS2S)
}

void MsgPlayerUpdateAvatorGS2S::InitAsDefaultInstance() {
}

MsgPlayerUpdateAvatorGS2S::MsgPlayerUpdateAvatorGS2S(const MsgPlayerUpdateAvatorGS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerUpdateAvatorGS2S)
}

void MsgPlayerUpdateAvatorGS2S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1038;
  iggid_ = GOOGLE_LONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  skincolor_ = 0;
  hair_ = 0;
  haircolor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerUpdateAvatorGS2S::~MsgPlayerUpdateAvatorGS2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerUpdateAvatorGS2S)
  SharedDtor();
}

void MsgPlayerUpdateAvatorGS2S::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlayerUpdateAvatorGS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerUpdateAvatorGS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerUpdateAvatorGS2S_descriptor_;
}

const MsgPlayerUpdateAvatorGS2S& MsgPlayerUpdateAvatorGS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerUpdateAvatorGS2S* MsgPlayerUpdateAvatorGS2S::default_instance_ = NULL;

MsgPlayerUpdateAvatorGS2S* MsgPlayerUpdateAvatorGS2S::New() const {
  return new MsgPlayerUpdateAvatorGS2S;
}

void MsgPlayerUpdateAvatorGS2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerUpdateAvatorGS2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(skincolor_, haircolor_);
    msgtype_ = 1038;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    gender_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerUpdateAvatorGS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerUpdateAvatorGS2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_UPDATE_AVATOR_GS2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional int32 gender = 4;
      case 4: {
        if (tag == 32) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skincolor;
        break;
      }

      // optional int32 skincolor = 5;
      case 5: {
        if (tag == 40) {
         parse_skincolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skincolor_)));
          set_has_skincolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hair;
        break;
      }

      // optional int32 hair = 6;
      case 6: {
        if (tag == 48) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_haircolor;
        break;
      }

      // optional int32 haircolor = 7;
      case 7: {
        if (tag == 56) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerUpdateAvatorGS2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerUpdateAvatorGS2S)
  return false;
#undef DO_
}

void MsgPlayerUpdateAvatorGS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerUpdateAvatorGS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_UPDATE_AVATOR_GS2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional int32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gender(), output);
  }

  // optional int32 skincolor = 5;
  if (has_skincolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skincolor(), output);
  }

  // optional int32 hair = 6;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hair(), output);
  }

  // optional int32 haircolor = 7;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->haircolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerUpdateAvatorGS2S)
}

::google::protobuf::uint8* MsgPlayerUpdateAvatorGS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerUpdateAvatorGS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_UPDATE_AVATOR_GS2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gender(), target);
  }

  // optional int32 skincolor = 5;
  if (has_skincolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skincolor(), target);
  }

  // optional int32 hair = 6;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hair(), target);
  }

  // optional int32 haircolor = 7;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->haircolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerUpdateAvatorGS2S)
  return target;
}

int MsgPlayerUpdateAvatorGS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_UPDATE_AVATOR_GS2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 skincolor = 5;
    if (has_skincolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skincolor());
    }

    // optional int32 hair = 6;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // optional int32 haircolor = 7;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haircolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerUpdateAvatorGS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerUpdateAvatorGS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerUpdateAvatorGS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerUpdateAvatorGS2S::MergeFrom(const MsgPlayerUpdateAvatorGS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_skincolor()) {
      set_skincolor(from.skincolor());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerUpdateAvatorGS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerUpdateAvatorGS2S::CopyFrom(const MsgPlayerUpdateAvatorGS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerUpdateAvatorGS2S::IsInitialized() const {

  return true;
}

void MsgPlayerUpdateAvatorGS2S::Swap(MsgPlayerUpdateAvatorGS2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(nickname_, other->nickname_);
    std::swap(gender_, other->gender_);
    std::swap(skincolor_, other->skincolor_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerUpdateAvatorGS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerUpdateAvatorGS2S_descriptor_;
  metadata.reflection = MsgPlayerUpdateAvatorGS2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoginDayGS2C::kMsgTypeFieldNumber;
const int MsgLoginDayGS2C::kDayFieldNumber;
const int MsgLoginDayGS2C::kFirstLoginFieldNumber;
#endif  // !_MSC_VER

MsgLoginDayGS2C::MsgLoginDayGS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgLoginDayGS2C)
}

void MsgLoginDayGS2C::InitAsDefaultInstance() {
}

MsgLoginDayGS2C::MsgLoginDayGS2C(const MsgLoginDayGS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgLoginDayGS2C)
}

void MsgLoginDayGS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1024;
  day_ = GOOGLE_LONGLONG(0);
  firstlogin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginDayGS2C::~MsgLoginDayGS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgLoginDayGS2C)
  SharedDtor();
}

void MsgLoginDayGS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLoginDayGS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoginDayGS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginDayGS2C_descriptor_;
}

const MsgLoginDayGS2C& MsgLoginDayGS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgLoginDayGS2C* MsgLoginDayGS2C::default_instance_ = NULL;

MsgLoginDayGS2C* MsgLoginDayGS2C::New() const {
  return new MsgLoginDayGS2C;
}

void MsgLoginDayGS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1024;
    day_ = GOOGLE_LONGLONG(0);
    firstlogin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginDayGS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgLoginDayGS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_DAY_GS2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }

      // optional int64 day = 2;
      case 2: {
        if (tag == 16) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_firstLogin;
        break;
      }

      // optional bool firstLogin = 3;
      case 3: {
        if (tag == 24) {
         parse_firstLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &firstlogin_)));
          set_has_firstlogin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgLoginDayGS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgLoginDayGS2C)
  return false;
#undef DO_
}

void MsgLoginDayGS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgLoginDayGS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_DAY_GS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->day(), output);
  }

  // optional bool firstLogin = 3;
  if (has_firstlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->firstlogin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgLoginDayGS2C)
}

::google::protobuf::uint8* MsgLoginDayGS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgLoginDayGS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_DAY_GS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->day(), target);
  }

  // optional bool firstLogin = 3;
  if (has_firstlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->firstlogin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgLoginDayGS2C)
  return target;
}

int MsgLoginDayGS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_DAY_GS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->day());
    }

    // optional bool firstLogin = 3;
    if (has_firstlogin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoginDayGS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginDayGS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginDayGS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginDayGS2C::MergeFrom(const MsgLoginDayGS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_firstlogin()) {
      set_firstlogin(from.firstlogin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginDayGS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginDayGS2C::CopyFrom(const MsgLoginDayGS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginDayGS2C::IsInitialized() const {

  return true;
}

void MsgLoginDayGS2C::Swap(MsgLoginDayGS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(day_, other->day_);
    std::swap(firstlogin_, other->firstlogin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginDayGS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginDayGS2C_descriptor_;
  metadata.reflection = MsgLoginDayGS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDeadG2CS::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgDeadG2CS::MsgDeadG2CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDeadG2CS)
}

void MsgDeadG2CS::InitAsDefaultInstance() {
}

MsgDeadG2CS::MsgDeadG2CS(const MsgDeadG2CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDeadG2CS)
}

void MsgDeadG2CS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1025;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDeadG2CS::~MsgDeadG2CS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDeadG2CS)
  SharedDtor();
}

void MsgDeadG2CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDeadG2CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDeadG2CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDeadG2CS_descriptor_;
}

const MsgDeadG2CS& MsgDeadG2CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgDeadG2CS* MsgDeadG2CS::default_instance_ = NULL;

MsgDeadG2CS* MsgDeadG2CS::New() const {
  return new MsgDeadG2CS;
}

void MsgDeadG2CS::Clear() {
  msgtype_ = 1025;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDeadG2CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDeadG2CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DEAD_GS2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDeadG2CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDeadG2CS)
  return false;
#undef DO_
}

void MsgDeadG2CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDeadG2CS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DEAD_GS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDeadG2CS)
}

::google::protobuf::uint8* MsgDeadG2CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDeadG2CS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DEAD_GS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDeadG2CS)
  return target;
}

int MsgDeadG2CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DEAD_GS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDeadG2CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDeadG2CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDeadG2CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDeadG2CS::MergeFrom(const MsgDeadG2CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDeadG2CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDeadG2CS::CopyFrom(const MsgDeadG2CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDeadG2CS::IsInitialized() const {

  return true;
}

void MsgDeadG2CS::Swap(MsgDeadG2CS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDeadG2CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDeadG2CS_descriptor_;
  metadata.reflection = MsgDeadG2CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRebirthC2GS::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgRebirthC2GS::MsgRebirthC2GS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgRebirthC2GS)
}

void MsgRebirthC2GS::InitAsDefaultInstance() {
}

MsgRebirthC2GS::MsgRebirthC2GS(const MsgRebirthC2GS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgRebirthC2GS)
}

void MsgRebirthC2GS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1026;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRebirthC2GS::~MsgRebirthC2GS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgRebirthC2GS)
  SharedDtor();
}

void MsgRebirthC2GS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRebirthC2GS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRebirthC2GS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRebirthC2GS_descriptor_;
}

const MsgRebirthC2GS& MsgRebirthC2GS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgRebirthC2GS* MsgRebirthC2GS::default_instance_ = NULL;

MsgRebirthC2GS* MsgRebirthC2GS::New() const {
  return new MsgRebirthC2GS;
}

void MsgRebirthC2GS::Clear() {
  msgtype_ = 1026;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRebirthC2GS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgRebirthC2GS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REBIRTH_C2GS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgRebirthC2GS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgRebirthC2GS)
  return false;
#undef DO_
}

void MsgRebirthC2GS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgRebirthC2GS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REBIRTH_C2GS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgRebirthC2GS)
}

::google::protobuf::uint8* MsgRebirthC2GS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgRebirthC2GS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REBIRTH_C2GS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgRebirthC2GS)
  return target;
}

int MsgRebirthC2GS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REBIRTH_C2GS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRebirthC2GS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRebirthC2GS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRebirthC2GS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRebirthC2GS::MergeFrom(const MsgRebirthC2GS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRebirthC2GS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRebirthC2GS::CopyFrom(const MsgRebirthC2GS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRebirthC2GS::IsInitialized() const {

  return true;
}

void MsgRebirthC2GS::Swap(MsgRebirthC2GS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRebirthC2GS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRebirthC2GS_descriptor_;
  metadata.reflection = MsgRebirthC2GS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRebirthGS2C::kMsgTypeFieldNumber;
const int MsgRebirthGS2C::kResultFieldNumber;
#endif  // !_MSC_VER

MsgRebirthGS2C::MsgRebirthGS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgRebirthGS2C)
}

void MsgRebirthGS2C::InitAsDefaultInstance() {
}

MsgRebirthGS2C::MsgRebirthGS2C(const MsgRebirthGS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgRebirthGS2C)
}

void MsgRebirthGS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1027;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRebirthGS2C::~MsgRebirthGS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgRebirthGS2C)
  SharedDtor();
}

void MsgRebirthGS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRebirthGS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRebirthGS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRebirthGS2C_descriptor_;
}

const MsgRebirthGS2C& MsgRebirthGS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgRebirthGS2C* MsgRebirthGS2C::default_instance_ = NULL;

MsgRebirthGS2C* MsgRebirthGS2C::New() const {
  return new MsgRebirthGS2C;
}

void MsgRebirthGS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1027;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRebirthGS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgRebirthGS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REBIRTH_GS2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgRebirthGS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgRebirthGS2C)
  return false;
#undef DO_
}

void MsgRebirthGS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgRebirthGS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REBIRTH_GS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgRebirthGS2C)
}

::google::protobuf::uint8* MsgRebirthGS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgRebirthGS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REBIRTH_GS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgRebirthGS2C)
  return target;
}

int MsgRebirthGS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REBIRTH_GS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRebirthGS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRebirthGS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRebirthGS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRebirthGS2C::MergeFrom(const MsgRebirthGS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRebirthGS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRebirthGS2C::CopyFrom(const MsgRebirthGS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRebirthGS2C::IsInitialized() const {

  return true;
}

void MsgRebirthGS2C::Swap(MsgRebirthGS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRebirthGS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRebirthGS2C_descriptor_;
  metadata.reflection = MsgRebirthGS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerNormalAttackC2S::kMsgTypeFieldNumber;
const int MsgPlayerNormalAttackC2S::kIggidFieldNumber;
const int MsgPlayerNormalAttackC2S::kTargetObjFieldNumber;
const int MsgPlayerNormalAttackC2S::kSerialidFieldNumber;
const int MsgPlayerNormalAttackC2S::kIdHPFieldNumber;
const int MsgPlayerNormalAttackC2S::kIsFinalBlowFieldNumber;
#endif  // !_MSC_VER

MsgPlayerNormalAttackC2S::MsgPlayerNormalAttackC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerNormalAttackC2S)
}

void MsgPlayerNormalAttackC2S::InitAsDefaultInstance() {
}

MsgPlayerNormalAttackC2S::MsgPlayerNormalAttackC2S(const MsgPlayerNormalAttackC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerNormalAttackC2S)
}

void MsgPlayerNormalAttackC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1028;
  iggid_ = GOOGLE_LONGLONG(0);
  serialid_ = 0;
  idhp_ = GOOGLE_LONGLONG(0);
  isfinalblow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerNormalAttackC2S::~MsgPlayerNormalAttackC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerNormalAttackC2S)
  SharedDtor();
}

void MsgPlayerNormalAttackC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerNormalAttackC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerNormalAttackC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerNormalAttackC2S_descriptor_;
}

const MsgPlayerNormalAttackC2S& MsgPlayerNormalAttackC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerNormalAttackC2S* MsgPlayerNormalAttackC2S::default_instance_ = NULL;

MsgPlayerNormalAttackC2S* MsgPlayerNormalAttackC2S::New() const {
  return new MsgPlayerNormalAttackC2S;
}

void MsgPlayerNormalAttackC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerNormalAttackC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(idhp_, isfinalblow_);
    msgtype_ = 1028;
    iggid_ = GOOGLE_LONGLONG(0);
    serialid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  target_obj_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerNormalAttackC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerNormalAttackC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_NORMAL_ATTACK_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_obj;
        break;
      }

      // repeated int32 target_obj = 3;
      case 3: {
        if (tag == 24) {
         parse_target_obj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_target_obj())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_target_obj())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_obj;
        if (input->ExpectTag(32)) goto parse_serialid;
        break;
      }

      // optional int32 serialid = 4;
      case 4: {
        if (tag == 32) {
         parse_serialid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_idHP;
        break;
      }

      // optional int64 idHP = 5;
      case 5: {
        if (tag == 40) {
         parse_idHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &idhp_)));
          set_has_idhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isFinalBlow;
        break;
      }

      // optional bool isFinalBlow = 6;
      case 6: {
        if (tag == 48) {
         parse_isFinalBlow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinalblow_)));
          set_has_isfinalblow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerNormalAttackC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerNormalAttackC2S)
  return false;
#undef DO_
}

void MsgPlayerNormalAttackC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerNormalAttackC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_NORMAL_ATTACK_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // repeated int32 target_obj = 3;
  for (int i = 0; i < this->target_obj_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->target_obj(i), output);
  }

  // optional int32 serialid = 4;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serialid(), output);
  }

  // optional int64 idHP = 5;
  if (has_idhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->idhp(), output);
  }

  // optional bool isFinalBlow = 6;
  if (has_isfinalblow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isfinalblow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerNormalAttackC2S)
}

::google::protobuf::uint8* MsgPlayerNormalAttackC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerNormalAttackC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_NORMAL_ATTACK_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // repeated int32 target_obj = 3;
  for (int i = 0; i < this->target_obj_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->target_obj(i), target);
  }

  // optional int32 serialid = 4;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->serialid(), target);
  }

  // optional int64 idHP = 5;
  if (has_idhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->idhp(), target);
  }

  // optional bool isFinalBlow = 6;
  if (has_isfinalblow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isfinalblow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerNormalAttackC2S)
  return target;
}

int MsgPlayerNormalAttackC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_NORMAL_ATTACK_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 serialid = 4;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional int64 idHP = 5;
    if (has_idhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->idhp());
    }

    // optional bool isFinalBlow = 6;
    if (has_isfinalblow()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 target_obj = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->target_obj_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->target_obj(i));
    }
    total_size += 1 * this->target_obj_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerNormalAttackC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerNormalAttackC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerNormalAttackC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerNormalAttackC2S::MergeFrom(const MsgPlayerNormalAttackC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_obj_.MergeFrom(from.target_obj_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_idhp()) {
      set_idhp(from.idhp());
    }
    if (from.has_isfinalblow()) {
      set_isfinalblow(from.isfinalblow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerNormalAttackC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerNormalAttackC2S::CopyFrom(const MsgPlayerNormalAttackC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerNormalAttackC2S::IsInitialized() const {

  return true;
}

void MsgPlayerNormalAttackC2S::Swap(MsgPlayerNormalAttackC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    target_obj_.Swap(&other->target_obj_);
    std::swap(serialid_, other->serialid_);
    std::swap(idhp_, other->idhp_);
    std::swap(isfinalblow_, other->isfinalblow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerNormalAttackC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerNormalAttackC2S_descriptor_;
  metadata.reflection = MsgPlayerNormalAttackC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerNormalAttackResS2C::kMsgTypeFieldNumber;
const int MsgPlayerNormalAttackResS2C::kIggidFieldNumber;
const int MsgPlayerNormalAttackResS2C::kResFieldNumber;
const int MsgPlayerNormalAttackResS2C::kTargetInfoFieldNumber;
const int MsgPlayerNormalAttackResS2C::kSerialidFieldNumber;
const int MsgPlayerNormalAttackResS2C::kIdHPFieldNumber;
#endif  // !_MSC_VER

MsgPlayerNormalAttackResS2C::MsgPlayerNormalAttackResS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerNormalAttackResS2C)
}

void MsgPlayerNormalAttackResS2C::InitAsDefaultInstance() {
}

MsgPlayerNormalAttackResS2C::MsgPlayerNormalAttackResS2C(const MsgPlayerNormalAttackResS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerNormalAttackResS2C)
}

void MsgPlayerNormalAttackResS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1029;
  iggid_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  serialid_ = 0;
  idhp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerNormalAttackResS2C::~MsgPlayerNormalAttackResS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerNormalAttackResS2C)
  SharedDtor();
}

void MsgPlayerNormalAttackResS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerNormalAttackResS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerNormalAttackResS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerNormalAttackResS2C_descriptor_;
}

const MsgPlayerNormalAttackResS2C& MsgPlayerNormalAttackResS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerNormalAttackResS2C* MsgPlayerNormalAttackResS2C::default_instance_ = NULL;

MsgPlayerNormalAttackResS2C* MsgPlayerNormalAttackResS2C::New() const {
  return new MsgPlayerNormalAttackResS2C;
}

void MsgPlayerNormalAttackResS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerNormalAttackResS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(idhp_, serialid_);
    msgtype_ = 1029;
    iggid_ = GOOGLE_LONGLONG(0);
    res_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  targetinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerNormalAttackResS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerNormalAttackResS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_NORMAL_ATTACK_RES_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }

      // optional .MsgPB.MSG_PLAYER_RESULT res = 3;
      case 3: {
        if (tag == 24) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MSG_PLAYER_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::MSG_PLAYER_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_targetInfo;
        break;
      }

      // repeated .MsgPB.UnderAttack targetInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_targetInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targetinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_targetInfo;
        if (input->ExpectTag(40)) goto parse_serialid;
        break;
      }

      // optional int32 serialid = 5;
      case 5: {
        if (tag == 40) {
         parse_serialid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialid_)));
          set_has_serialid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_idHP;
        break;
      }

      // optional int64 idHP = 6;
      case 6: {
        if (tag == 48) {
         parse_idHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &idhp_)));
          set_has_idhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerNormalAttackResS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerNormalAttackResS2C)
  return false;
#undef DO_
}

void MsgPlayerNormalAttackResS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerNormalAttackResS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_NORMAL_ATTACK_RES_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.MSG_PLAYER_RESULT res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->res(), output);
  }

  // repeated .MsgPB.UnderAttack targetInfo = 4;
  for (int i = 0; i < this->targetinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targetinfo(i), output);
  }

  // optional int32 serialid = 5;
  if (has_serialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->serialid(), output);
  }

  // optional int64 idHP = 6;
  if (has_idhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->idhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerNormalAttackResS2C)
}

::google::protobuf::uint8* MsgPlayerNormalAttackResS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerNormalAttackResS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_NORMAL_ATTACK_RES_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.MSG_PLAYER_RESULT res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->res(), target);
  }

  // repeated .MsgPB.UnderAttack targetInfo = 4;
  for (int i = 0; i < this->targetinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targetinfo(i), target);
  }

  // optional int32 serialid = 5;
  if (has_serialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->serialid(), target);
  }

  // optional int64 idHP = 6;
  if (has_idhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->idhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerNormalAttackResS2C)
  return target;
}

int MsgPlayerNormalAttackResS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_NORMAL_ATTACK_RES_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.MSG_PLAYER_RESULT res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional int32 serialid = 5;
    if (has_serialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialid());
    }

    // optional int64 idHP = 6;
    if (has_idhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->idhp());
    }

  }
  // repeated .MsgPB.UnderAttack targetInfo = 4;
  total_size += 1 * this->targetinfo_size();
  for (int i = 0; i < this->targetinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targetinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerNormalAttackResS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerNormalAttackResS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerNormalAttackResS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerNormalAttackResS2C::MergeFrom(const MsgPlayerNormalAttackResS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetinfo_.MergeFrom(from.targetinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_serialid()) {
      set_serialid(from.serialid());
    }
    if (from.has_idhp()) {
      set_idhp(from.idhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerNormalAttackResS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerNormalAttackResS2C::CopyFrom(const MsgPlayerNormalAttackResS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerNormalAttackResS2C::IsInitialized() const {

  return true;
}

void MsgPlayerNormalAttackResS2C::Swap(MsgPlayerNormalAttackResS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(res_, other->res_);
    targetinfo_.Swap(&other->targetinfo_);
    std::swap(serialid_, other->serialid_);
    std::swap(idhp_, other->idhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerNormalAttackResS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerNormalAttackResS2C_descriptor_;
  metadata.reflection = MsgPlayerNormalAttackResS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerReviveC2S::kMsgTypeFieldNumber;
const int MsgPlayerReviveC2S::kIggidFieldNumber;
const int MsgPlayerReviveC2S::kETypeFieldNumber;
#endif  // !_MSC_VER

MsgPlayerReviveC2S::MsgPlayerReviveC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerReviveC2S)
}

void MsgPlayerReviveC2S::InitAsDefaultInstance() {
}

MsgPlayerReviveC2S::MsgPlayerReviveC2S(const MsgPlayerReviveC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerReviveC2S)
}

void MsgPlayerReviveC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1094;
  iggid_ = GOOGLE_LONGLONG(0);
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerReviveC2S::~MsgPlayerReviveC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerReviveC2S)
  SharedDtor();
}

void MsgPlayerReviveC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerReviveC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerReviveC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerReviveC2S_descriptor_;
}

const MsgPlayerReviveC2S& MsgPlayerReviveC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerReviveC2S* MsgPlayerReviveC2S::default_instance_ = NULL;

MsgPlayerReviveC2S* MsgPlayerReviveC2S::New() const {
  return new MsgPlayerReviveC2S;
}

void MsgPlayerReviveC2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1094;
    iggid_ = GOOGLE_LONGLONG(0);
    etype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerReviveC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerReviveC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_REVIVE_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eType;
        break;
      }

      // optional .MsgPB.REVIVE_TYPE eType = 3;
      case 3: {
        if (tag == 24) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::REVIVE_TYPE_IsValid(value)) {
            set_etype(static_cast< ::MsgPB::REVIVE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerReviveC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerReviveC2S)
  return false;
#undef DO_
}

void MsgPlayerReviveC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerReviveC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_REVIVE_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.REVIVE_TYPE eType = 3;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerReviveC2S)
}

::google::protobuf::uint8* MsgPlayerReviveC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerReviveC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_REVIVE_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.REVIVE_TYPE eType = 3;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerReviveC2S)
  return target;
}

int MsgPlayerReviveC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_REVIVE_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.REVIVE_TYPE eType = 3;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerReviveC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerReviveC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerReviveC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerReviveC2S::MergeFrom(const MsgPlayerReviveC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerReviveC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerReviveC2S::CopyFrom(const MsgPlayerReviveC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerReviveC2S::IsInitialized() const {

  return true;
}

void MsgPlayerReviveC2S::Swap(MsgPlayerReviveC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerReviveC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerReviveC2S_descriptor_;
  metadata.reflection = MsgPlayerReviveC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerDataSyncDoneG2C::kMsgTypeFieldNumber;
const int MsgPlayerDataSyncDoneG2C::kLoginTimeFieldNumber;
const int MsgPlayerDataSyncDoneG2C::kBossBattleOnlineFieldNumber;
#endif  // !_MSC_VER

MsgPlayerDataSyncDoneG2C::MsgPlayerDataSyncDoneG2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerDataSyncDoneG2C)
}

void MsgPlayerDataSyncDoneG2C::InitAsDefaultInstance() {
}

MsgPlayerDataSyncDoneG2C::MsgPlayerDataSyncDoneG2C(const MsgPlayerDataSyncDoneG2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerDataSyncDoneG2C)
}

void MsgPlayerDataSyncDoneG2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1031;
  login_time_ = GOOGLE_LONGLONG(0);
  boss_battle_online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerDataSyncDoneG2C::~MsgPlayerDataSyncDoneG2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerDataSyncDoneG2C)
  SharedDtor();
}

void MsgPlayerDataSyncDoneG2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerDataSyncDoneG2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerDataSyncDoneG2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerDataSyncDoneG2C_descriptor_;
}

const MsgPlayerDataSyncDoneG2C& MsgPlayerDataSyncDoneG2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerDataSyncDoneG2C* MsgPlayerDataSyncDoneG2C::default_instance_ = NULL;

MsgPlayerDataSyncDoneG2C* MsgPlayerDataSyncDoneG2C::New() const {
  return new MsgPlayerDataSyncDoneG2C;
}

void MsgPlayerDataSyncDoneG2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1031;
    login_time_ = GOOGLE_LONGLONG(0);
    boss_battle_online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerDataSyncDoneG2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerDataSyncDoneG2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DATA_SYNC_DONE_G2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_login_time;
        break;
      }

      // optional int64 login_time = 2;
      case 2: {
        if (tag == 16) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_boss_battle_online;
        break;
      }

      // optional bool boss_battle_online = 3;
      case 3: {
        if (tag == 24) {
         parse_boss_battle_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boss_battle_online_)));
          set_has_boss_battle_online();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerDataSyncDoneG2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerDataSyncDoneG2C)
  return false;
#undef DO_
}

void MsgPlayerDataSyncDoneG2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerDataSyncDoneG2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DATA_SYNC_DONE_G2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 login_time = 2;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->login_time(), output);
  }

  // optional bool boss_battle_online = 3;
  if (has_boss_battle_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->boss_battle_online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerDataSyncDoneG2C)
}

::google::protobuf::uint8* MsgPlayerDataSyncDoneG2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerDataSyncDoneG2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DATA_SYNC_DONE_G2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 login_time = 2;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->login_time(), target);
  }

  // optional bool boss_battle_online = 3;
  if (has_boss_battle_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->boss_battle_online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerDataSyncDoneG2C)
  return target;
}

int MsgPlayerDataSyncDoneG2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DATA_SYNC_DONE_G2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 login_time = 2;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->login_time());
    }

    // optional bool boss_battle_online = 3;
    if (has_boss_battle_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerDataSyncDoneG2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerDataSyncDoneG2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerDataSyncDoneG2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerDataSyncDoneG2C::MergeFrom(const MsgPlayerDataSyncDoneG2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_boss_battle_online()) {
      set_boss_battle_online(from.boss_battle_online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerDataSyncDoneG2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerDataSyncDoneG2C::CopyFrom(const MsgPlayerDataSyncDoneG2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerDataSyncDoneG2C::IsInitialized() const {

  return true;
}

void MsgPlayerDataSyncDoneG2C::Swap(MsgPlayerDataSyncDoneG2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(login_time_, other->login_time_);
    std::swap(boss_battle_online_, other->boss_battle_online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerDataSyncDoneG2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerDataSyncDoneG2C_descriptor_;
  metadata.reflection = MsgPlayerDataSyncDoneG2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerSysInfoGS2C::kMsgTypeFieldNumber;
const int MsgPlayerSysInfoGS2C::kPlayersysFieldNumber;
#endif  // !_MSC_VER

MsgPlayerSysInfoGS2C::MsgPlayerSysInfoGS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerSysInfoGS2C)
}

void MsgPlayerSysInfoGS2C::InitAsDefaultInstance() {
  playersys_ = const_cast< ::MsgPB::MsgPlayerSysBaseData*>(&::MsgPB::MsgPlayerSysBaseData::default_instance());
}

MsgPlayerSysInfoGS2C::MsgPlayerSysInfoGS2C(const MsgPlayerSysInfoGS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerSysInfoGS2C)
}

void MsgPlayerSysInfoGS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1037;
  playersys_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerSysInfoGS2C::~MsgPlayerSysInfoGS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerSysInfoGS2C)
  SharedDtor();
}

void MsgPlayerSysInfoGS2C::SharedDtor() {
  if (this != default_instance_) {
    delete playersys_;
  }
}

void MsgPlayerSysInfoGS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerSysInfoGS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerSysInfoGS2C_descriptor_;
}

const MsgPlayerSysInfoGS2C& MsgPlayerSysInfoGS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerSysInfoGS2C* MsgPlayerSysInfoGS2C::default_instance_ = NULL;

MsgPlayerSysInfoGS2C* MsgPlayerSysInfoGS2C::New() const {
  return new MsgPlayerSysInfoGS2C;
}

void MsgPlayerSysInfoGS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1037;
    if (has_playersys()) {
      if (playersys_ != NULL) playersys_->::MsgPB::MsgPlayerSysBaseData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerSysInfoGS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerSysInfoGS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SYS_INFO_GS2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playersys;
        break;
      }

      // optional .MsgPB.MsgPlayerSysBaseData playersys = 2;
      case 2: {
        if (tag == 18) {
         parse_playersys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playersys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerSysInfoGS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerSysInfoGS2C)
  return false;
#undef DO_
}

void MsgPlayerSysInfoGS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerSysInfoGS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SYS_INFO_GS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.MsgPlayerSysBaseData playersys = 2;
  if (has_playersys()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playersys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerSysInfoGS2C)
}

::google::protobuf::uint8* MsgPlayerSysInfoGS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerSysInfoGS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SYS_INFO_GS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.MsgPlayerSysBaseData playersys = 2;
  if (has_playersys()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playersys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerSysInfoGS2C)
  return target;
}

int MsgPlayerSysInfoGS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SYS_INFO_GS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.MsgPlayerSysBaseData playersys = 2;
    if (has_playersys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playersys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerSysInfoGS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerSysInfoGS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerSysInfoGS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerSysInfoGS2C::MergeFrom(const MsgPlayerSysInfoGS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_playersys()) {
      mutable_playersys()->::MsgPB::MsgPlayerSysBaseData::MergeFrom(from.playersys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerSysInfoGS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerSysInfoGS2C::CopyFrom(const MsgPlayerSysInfoGS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerSysInfoGS2C::IsInitialized() const {

  if (has_playersys()) {
    if (!this->playersys().IsInitialized()) return false;
  }
  return true;
}

void MsgPlayerSysInfoGS2C::Swap(MsgPlayerSysInfoGS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(playersys_, other->playersys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerSysInfoGS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerSysInfoGS2C_descriptor_;
  metadata.reflection = MsgPlayerSysInfoGS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerReadyC2S::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgPlayerReadyC2S::MsgPlayerReadyC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerReadyC2S)
}

void MsgPlayerReadyC2S::InitAsDefaultInstance() {
}

MsgPlayerReadyC2S::MsgPlayerReadyC2S(const MsgPlayerReadyC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerReadyC2S)
}

void MsgPlayerReadyC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1154;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerReadyC2S::~MsgPlayerReadyC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerReadyC2S)
  SharedDtor();
}

void MsgPlayerReadyC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerReadyC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerReadyC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerReadyC2S_descriptor_;
}

const MsgPlayerReadyC2S& MsgPlayerReadyC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerReadyC2S* MsgPlayerReadyC2S::default_instance_ = NULL;

MsgPlayerReadyC2S* MsgPlayerReadyC2S::New() const {
  return new MsgPlayerReadyC2S;
}

void MsgPlayerReadyC2S::Clear() {
  msgtype_ = 1154;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerReadyC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerReadyC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_READY_C2G];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerReadyC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerReadyC2S)
  return false;
#undef DO_
}

void MsgPlayerReadyC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerReadyC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_READY_C2G];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerReadyC2S)
}

::google::protobuf::uint8* MsgPlayerReadyC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerReadyC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_READY_C2G];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerReadyC2S)
  return target;
}

int MsgPlayerReadyC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_READY_C2G];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerReadyC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerReadyC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerReadyC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerReadyC2S::MergeFrom(const MsgPlayerReadyC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerReadyC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerReadyC2S::CopyFrom(const MsgPlayerReadyC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerReadyC2S::IsInitialized() const {

  return true;
}

void MsgPlayerReadyC2S::Swap(MsgPlayerReadyC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerReadyC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerReadyC2S_descriptor_;
  metadata.reflection = MsgPlayerReadyC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerInfoQueryC2S::kMsgTypeFieldNumber;
const int MsgPlayerInfoQueryC2S::kIggidFieldNumber;
const int MsgPlayerInfoQueryC2S::kQueryIggidFieldNumber;
const int MsgPlayerInfoQueryC2S::kClientValFieldNumber;
#endif  // !_MSC_VER

MsgPlayerInfoQueryC2S::MsgPlayerInfoQueryC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerInfoQueryC2S)
}

void MsgPlayerInfoQueryC2S::InitAsDefaultInstance() {
}

MsgPlayerInfoQueryC2S::MsgPlayerInfoQueryC2S(const MsgPlayerInfoQueryC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerInfoQueryC2S)
}

void MsgPlayerInfoQueryC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 30027;
  iggid_ = GOOGLE_LONGLONG(0);
  queryiggid_ = GOOGLE_LONGLONG(0);
  clientval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerInfoQueryC2S::~MsgPlayerInfoQueryC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerInfoQueryC2S)
  SharedDtor();
}

void MsgPlayerInfoQueryC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerInfoQueryC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerInfoQueryC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerInfoQueryC2S_descriptor_;
}

const MsgPlayerInfoQueryC2S& MsgPlayerInfoQueryC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerInfoQueryC2S* MsgPlayerInfoQueryC2S::default_instance_ = NULL;

MsgPlayerInfoQueryC2S* MsgPlayerInfoQueryC2S::New() const {
  return new MsgPlayerInfoQueryC2S;
}

void MsgPlayerInfoQueryC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerInfoQueryC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(clientval_, queryiggid_);
    msgtype_ = 30027;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerInfoQueryC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerInfoQueryC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_INFO_QUERY_C2G];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_QueryIggid;
        break;
      }

      // optional int64 QueryIggid = 3;
      case 3: {
        if (tag == 24) {
         parse_QueryIggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &queryiggid_)));
          set_has_queryiggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ClientVal;
        break;
      }

      // optional int32 ClientVal = 4;
      case 4: {
        if (tag == 32) {
         parse_ClientVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientval_)));
          set_has_clientval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerInfoQueryC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerInfoQueryC2S)
  return false;
#undef DO_
}

void MsgPlayerInfoQueryC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerInfoQueryC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_INFO_QUERY_C2G];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int64 QueryIggid = 3;
  if (has_queryiggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->queryiggid(), output);
  }

  // optional int32 ClientVal = 4;
  if (has_clientval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->clientval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerInfoQueryC2S)
}

::google::protobuf::uint8* MsgPlayerInfoQueryC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerInfoQueryC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_INFO_QUERY_C2G];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int64 QueryIggid = 3;
  if (has_queryiggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->queryiggid(), target);
  }

  // optional int32 ClientVal = 4;
  if (has_clientval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clientval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerInfoQueryC2S)
  return target;
}

int MsgPlayerInfoQueryC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_INFO_QUERY_C2G];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 QueryIggid = 3;
    if (has_queryiggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->queryiggid());
    }

    // optional int32 ClientVal = 4;
    if (has_clientval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerInfoQueryC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerInfoQueryC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerInfoQueryC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerInfoQueryC2S::MergeFrom(const MsgPlayerInfoQueryC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_queryiggid()) {
      set_queryiggid(from.queryiggid());
    }
    if (from.has_clientval()) {
      set_clientval(from.clientval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerInfoQueryC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerInfoQueryC2S::CopyFrom(const MsgPlayerInfoQueryC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerInfoQueryC2S::IsInitialized() const {

  return true;
}

void MsgPlayerInfoQueryC2S::Swap(MsgPlayerInfoQueryC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(queryiggid_, other->queryiggid_);
    std::swap(clientval_, other->clientval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerInfoQueryC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerInfoQueryC2S_descriptor_;
  metadata.reflection = MsgPlayerInfoQueryC2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgPlayerInfoQueryResultS2C_QUERY_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerInfoQueryResultS2C_QUERY_RESULT_descriptor_;
}
bool MsgPlayerInfoQueryResultS2C_QUERY_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgPlayerInfoQueryResultS2C_QUERY_RESULT MsgPlayerInfoQueryResultS2C::ERR;
const MsgPlayerInfoQueryResultS2C_QUERY_RESULT MsgPlayerInfoQueryResultS2C::SUCC;
const MsgPlayerInfoQueryResultS2C_QUERY_RESULT MsgPlayerInfoQueryResultS2C::OFFLINE;
const MsgPlayerInfoQueryResultS2C_QUERY_RESULT MsgPlayerInfoQueryResultS2C::FREQ;
const MsgPlayerInfoQueryResultS2C_QUERY_RESULT MsgPlayerInfoQueryResultS2C::QUERY_RESULT_MIN;
const MsgPlayerInfoQueryResultS2C_QUERY_RESULT MsgPlayerInfoQueryResultS2C::QUERY_RESULT_MAX;
const int MsgPlayerInfoQueryResultS2C::QUERY_RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgPlayerInfoQueryResultS2C::kMsgTypeFieldNumber;
const int MsgPlayerInfoQueryResultS2C::kResultFieldNumber;
const int MsgPlayerInfoQueryResultS2C::kIggidFieldNumber;
const int MsgPlayerInfoQueryResultS2C::kQueryIggidFieldNumber;
const int MsgPlayerInfoQueryResultS2C::kClientValFieldNumber;
const int MsgPlayerInfoQueryResultS2C::kBaseInfoFieldNumber;
const int MsgPlayerInfoQueryResultS2C::kEquipInfosFieldNumber;
const int MsgPlayerInfoQueryResultS2C::kBuffInfosFieldNumber;
#endif  // !_MSC_VER

MsgPlayerInfoQueryResultS2C::MsgPlayerInfoQueryResultS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerInfoQueryResultS2C)
}

void MsgPlayerInfoQueryResultS2C::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::MsgPB::MsgQueryPlayerInfo_Base*>(&::MsgPB::MsgQueryPlayerInfo_Base::default_instance());
}

MsgPlayerInfoQueryResultS2C::MsgPlayerInfoQueryResultS2C(const MsgPlayerInfoQueryResultS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerInfoQueryResultS2C)
}

void MsgPlayerInfoQueryResultS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1040;
  result_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  queryiggid_ = GOOGLE_LONGLONG(0);
  clientval_ = 0;
  baseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerInfoQueryResultS2C::~MsgPlayerInfoQueryResultS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerInfoQueryResultS2C)
  SharedDtor();
}

void MsgPlayerInfoQueryResultS2C::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void MsgPlayerInfoQueryResultS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerInfoQueryResultS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerInfoQueryResultS2C_descriptor_;
}

const MsgPlayerInfoQueryResultS2C& MsgPlayerInfoQueryResultS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerInfoQueryResultS2C* MsgPlayerInfoQueryResultS2C::default_instance_ = NULL;

MsgPlayerInfoQueryResultS2C* MsgPlayerInfoQueryResultS2C::New() const {
  return new MsgPlayerInfoQueryResultS2C;
}

void MsgPlayerInfoQueryResultS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerInfoQueryResultS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(result_, queryiggid_);
    msgtype_ = 1040;
    clientval_ = 0;
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::MsgPB::MsgQueryPlayerInfo_Base::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equip_infos_.Clear();
  buff_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerInfoQueryResultS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerInfoQueryResultS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_INFO_QUERY_RESULT_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MsgPB.MsgPlayerInfoQueryResultS2C.QUERY_RESULT result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgPlayerInfoQueryResultS2C_QUERY_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::MsgPlayerInfoQueryResultS2C_QUERY_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_QueryIggid;
        break;
      }

      // optional int64 QueryIggid = 4;
      case 4: {
        if (tag == 32) {
         parse_QueryIggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &queryiggid_)));
          set_has_queryiggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ClientVal;
        break;
      }

      // optional int32 ClientVal = 5;
      case 5: {
        if (tag == 40) {
         parse_ClientVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientval_)));
          set_has_clientval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_baseInfo;
        break;
      }

      // optional .MsgPB.MsgQueryPlayerInfo_Base baseInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_baseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_equip_infos;
        break;
      }

      // repeated .MsgPB.ServerEquipInfo equip_infos = 8;
      case 8: {
        if (tag == 66) {
         parse_equip_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_equip_infos;
        if (input->ExpectTag(74)) goto parse_buff_infos;
        break;
      }

      // repeated .MsgPB.ServerBuffInfo buff_infos = 9;
      case 9: {
        if (tag == 74) {
         parse_buff_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_buff_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerInfoQueryResultS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerInfoQueryResultS2C)
  return false;
#undef DO_
}

void MsgPlayerInfoQueryResultS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerInfoQueryResultS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_INFO_QUERY_RESULT_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.MsgPlayerInfoQueryResultS2C.QUERY_RESULT result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int64 QueryIggid = 4;
  if (has_queryiggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->queryiggid(), output);
  }

  // optional int32 ClientVal = 5;
  if (has_clientval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->clientval(), output);
  }

  // optional .MsgPB.MsgQueryPlayerInfo_Base baseInfo = 7;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->baseinfo(), output);
  }

  // repeated .MsgPB.ServerEquipInfo equip_infos = 8;
  for (int i = 0; i < this->equip_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->equip_infos(i), output);
  }

  // repeated .MsgPB.ServerBuffInfo buff_infos = 9;
  for (int i = 0; i < this->buff_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->buff_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerInfoQueryResultS2C)
}

::google::protobuf::uint8* MsgPlayerInfoQueryResultS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerInfoQueryResultS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_INFO_QUERY_RESULT_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.MsgPlayerInfoQueryResultS2C.QUERY_RESULT result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int64 QueryIggid = 4;
  if (has_queryiggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->queryiggid(), target);
  }

  // optional int32 ClientVal = 5;
  if (has_clientval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->clientval(), target);
  }

  // optional .MsgPB.MsgQueryPlayerInfo_Base baseInfo = 7;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->baseinfo(), target);
  }

  // repeated .MsgPB.ServerEquipInfo equip_infos = 8;
  for (int i = 0; i < this->equip_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->equip_infos(i), target);
  }

  // repeated .MsgPB.ServerBuffInfo buff_infos = 9;
  for (int i = 0; i < this->buff_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->buff_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerInfoQueryResultS2C)
  return target;
}

int MsgPlayerInfoQueryResultS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_INFO_QUERY_RESULT_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.MsgPlayerInfoQueryResultS2C.QUERY_RESULT result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 QueryIggid = 4;
    if (has_queryiggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->queryiggid());
    }

    // optional int32 ClientVal = 5;
    if (has_clientval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientval());
    }

    // optional .MsgPB.MsgQueryPlayerInfo_Base baseInfo = 7;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

  }
  // repeated .MsgPB.ServerEquipInfo equip_infos = 8;
  total_size += 1 * this->equip_infos_size();
  for (int i = 0; i < this->equip_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_infos(i));
  }

  // repeated .MsgPB.ServerBuffInfo buff_infos = 9;
  total_size += 1 * this->buff_infos_size();
  for (int i = 0; i < this->buff_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerInfoQueryResultS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerInfoQueryResultS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerInfoQueryResultS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerInfoQueryResultS2C::MergeFrom(const MsgPlayerInfoQueryResultS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_infos_.MergeFrom(from.equip_infos_);
  buff_infos_.MergeFrom(from.buff_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_queryiggid()) {
      set_queryiggid(from.queryiggid());
    }
    if (from.has_clientval()) {
      set_clientval(from.clientval());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::MsgPB::MsgQueryPlayerInfo_Base::MergeFrom(from.baseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerInfoQueryResultS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerInfoQueryResultS2C::CopyFrom(const MsgPlayerInfoQueryResultS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerInfoQueryResultS2C::IsInitialized() const {

  return true;
}

void MsgPlayerInfoQueryResultS2C::Swap(MsgPlayerInfoQueryResultS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(result_, other->result_);
    std::swap(iggid_, other->iggid_);
    std::swap(queryiggid_, other->queryiggid_);
    std::swap(clientval_, other->clientval_);
    std::swap(baseinfo_, other->baseinfo_);
    equip_infos_.Swap(&other->equip_infos_);
    buff_infos_.Swap(&other->buff_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerInfoQueryResultS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerInfoQueryResultS2C_descriptor_;
  metadata.reflection = MsgPlayerInfoQueryResultS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerLevelUpNotifyS2S::kMsgTypeFieldNumber;
const int MsgPlayerLevelUpNotifyS2S::kIggidFieldNumber;
const int MsgPlayerLevelUpNotifyS2S::kLvFieldNumber;
#endif  // !_MSC_VER

MsgPlayerLevelUpNotifyS2S::MsgPlayerLevelUpNotifyS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerLevelUpNotifyS2S)
}

void MsgPlayerLevelUpNotifyS2S::InitAsDefaultInstance() {
}

MsgPlayerLevelUpNotifyS2S::MsgPlayerLevelUpNotifyS2S(const MsgPlayerLevelUpNotifyS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerLevelUpNotifyS2S)
}

void MsgPlayerLevelUpNotifyS2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1041;
  iggid_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerLevelUpNotifyS2S::~MsgPlayerLevelUpNotifyS2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerLevelUpNotifyS2S)
  SharedDtor();
}

void MsgPlayerLevelUpNotifyS2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerLevelUpNotifyS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerLevelUpNotifyS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerLevelUpNotifyS2S_descriptor_;
}

const MsgPlayerLevelUpNotifyS2S& MsgPlayerLevelUpNotifyS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerLevelUpNotifyS2S* MsgPlayerLevelUpNotifyS2S::default_instance_ = NULL;

MsgPlayerLevelUpNotifyS2S* MsgPlayerLevelUpNotifyS2S::New() const {
  return new MsgPlayerLevelUpNotifyS2S;
}

void MsgPlayerLevelUpNotifyS2S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1041;
    iggid_ = GOOGLE_LONGLONG(0);
    lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerLevelUpNotifyS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerLevelUpNotifyS2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_LEVEL_UP_NOTIFY_S2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional int32 lv = 3;
      case 3: {
        if (tag == 24) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerLevelUpNotifyS2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerLevelUpNotifyS2S)
  return false;
#undef DO_
}

void MsgPlayerLevelUpNotifyS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerLevelUpNotifyS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_LEVEL_UP_NOTIFY_S2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerLevelUpNotifyS2S)
}

::google::protobuf::uint8* MsgPlayerLevelUpNotifyS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerLevelUpNotifyS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_LEVEL_UP_NOTIFY_S2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerLevelUpNotifyS2S)
  return target;
}

int MsgPlayerLevelUpNotifyS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_LEVEL_UP_NOTIFY_S2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerLevelUpNotifyS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerLevelUpNotifyS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerLevelUpNotifyS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerLevelUpNotifyS2S::MergeFrom(const MsgPlayerLevelUpNotifyS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerLevelUpNotifyS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerLevelUpNotifyS2S::CopyFrom(const MsgPlayerLevelUpNotifyS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerLevelUpNotifyS2S::IsInitialized() const {

  return true;
}

void MsgPlayerLevelUpNotifyS2S::Swap(MsgPlayerLevelUpNotifyS2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerLevelUpNotifyS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerLevelUpNotifyS2S_descriptor_;
  metadata.reflection = MsgPlayerLevelUpNotifyS2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgServerQueryPlayerInfoS2S::kMsgTypeFieldNumber;
const int MsgServerQueryPlayerInfoS2S::kIggidFieldNumber;
const int MsgServerQueryPlayerInfoS2S::kQueryIggidFieldNumber;
const int MsgServerQueryPlayerInfoS2S::kStrNameFieldNumber;
const int MsgServerQueryPlayerInfoS2S::kIFlagFieldNumber;
#endif  // !_MSC_VER

MsgServerQueryPlayerInfoS2S::MsgServerQueryPlayerInfoS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgServerQueryPlayerInfoS2S)
}

void MsgServerQueryPlayerInfoS2S::InitAsDefaultInstance() {
}

MsgServerQueryPlayerInfoS2S::MsgServerQueryPlayerInfoS2S(const MsgServerQueryPlayerInfoS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgServerQueryPlayerInfoS2S)
}

void MsgServerQueryPlayerInfoS2S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1042;
  iggid_ = GOOGLE_LONGLONG(0);
  queryiggid_ = GOOGLE_LONGLONG(0);
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iflag_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgServerQueryPlayerInfoS2S::~MsgServerQueryPlayerInfoS2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgServerQueryPlayerInfoS2S)
  SharedDtor();
}

void MsgServerQueryPlayerInfoS2S::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void MsgServerQueryPlayerInfoS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgServerQueryPlayerInfoS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgServerQueryPlayerInfoS2S_descriptor_;
}

const MsgServerQueryPlayerInfoS2S& MsgServerQueryPlayerInfoS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgServerQueryPlayerInfoS2S* MsgServerQueryPlayerInfoS2S::default_instance_ = NULL;

MsgServerQueryPlayerInfoS2S* MsgServerQueryPlayerInfoS2S::New() const {
  return new MsgServerQueryPlayerInfoS2S;
}

void MsgServerQueryPlayerInfoS2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgServerQueryPlayerInfoS2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(iggid_, queryiggid_);
    msgtype_ = 1042;
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strname_->clear();
      }
    }
    iflag_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgServerQueryPlayerInfoS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgServerQueryPlayerInfoS2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_QUERYPLAYER_INFO_S2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_QueryIggid;
        break;
      }

      // optional int64 QueryIggid = 3;
      case 3: {
        if (tag == 24) {
         parse_QueryIggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &queryiggid_)));
          set_has_queryiggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_strName;
        break;
      }

      // optional string strName = 4;
      case 4: {
        if (tag == 34) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iFlag;
        break;
      }

      // optional .MsgPB.MSG_SERVER_QPINFO_FLG iFlag = 5;
      case 5: {
        if (tag == 40) {
         parse_iFlag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MSG_SERVER_QPINFO_FLG_IsValid(value)) {
            set_iflag(static_cast< ::MsgPB::MSG_SERVER_QPINFO_FLG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgServerQueryPlayerInfoS2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgServerQueryPlayerInfoS2S)
  return false;
#undef DO_
}

void MsgServerQueryPlayerInfoS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgServerQueryPlayerInfoS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_QUERYPLAYER_INFO_S2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int64 QueryIggid = 3;
  if (has_queryiggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->queryiggid(), output);
  }

  // optional string strName = 4;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->strname(), output);
  }

  // optional .MsgPB.MSG_SERVER_QPINFO_FLG iFlag = 5;
  if (has_iflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->iflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgServerQueryPlayerInfoS2S)
}

::google::protobuf::uint8* MsgServerQueryPlayerInfoS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgServerQueryPlayerInfoS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_QUERYPLAYER_INFO_S2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int64 QueryIggid = 3;
  if (has_queryiggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->queryiggid(), target);
  }

  // optional string strName = 4;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strname(), target);
  }

  // optional .MsgPB.MSG_SERVER_QPINFO_FLG iFlag = 5;
  if (has_iflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->iflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgServerQueryPlayerInfoS2S)
  return target;
}

int MsgServerQueryPlayerInfoS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_QUERYPLAYER_INFO_S2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 QueryIggid = 3;
    if (has_queryiggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->queryiggid());
    }

    // optional string strName = 4;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // optional .MsgPB.MSG_SERVER_QPINFO_FLG iFlag = 5;
    if (has_iflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->iflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgServerQueryPlayerInfoS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgServerQueryPlayerInfoS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgServerQueryPlayerInfoS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgServerQueryPlayerInfoS2S::MergeFrom(const MsgServerQueryPlayerInfoS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_queryiggid()) {
      set_queryiggid(from.queryiggid());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_iflag()) {
      set_iflag(from.iflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgServerQueryPlayerInfoS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgServerQueryPlayerInfoS2S::CopyFrom(const MsgServerQueryPlayerInfoS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgServerQueryPlayerInfoS2S::IsInitialized() const {

  return true;
}

void MsgServerQueryPlayerInfoS2S::Swap(MsgServerQueryPlayerInfoS2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(queryiggid_, other->queryiggid_);
    std::swap(strname_, other->strname_);
    std::swap(iflag_, other->iflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgServerQueryPlayerInfoS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgServerQueryPlayerInfoS2S_descriptor_;
  metadata.reflection = MsgServerQueryPlayerInfoS2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgServerQueryPlayerInfoRetS2S_QUERY_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgServerQueryPlayerInfoRetS2S_QUERY_RESULT_descriptor_;
}
bool MsgServerQueryPlayerInfoRetS2S_QUERY_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgServerQueryPlayerInfoRetS2S_QUERY_RESULT MsgServerQueryPlayerInfoRetS2S::ERR;
const MsgServerQueryPlayerInfoRetS2S_QUERY_RESULT MsgServerQueryPlayerInfoRetS2S::SUCC;
const MsgServerQueryPlayerInfoRetS2S_QUERY_RESULT MsgServerQueryPlayerInfoRetS2S::OFFLINE;
const MsgServerQueryPlayerInfoRetS2S_QUERY_RESULT MsgServerQueryPlayerInfoRetS2S::QUERY_RESULT_MIN;
const MsgServerQueryPlayerInfoRetS2S_QUERY_RESULT MsgServerQueryPlayerInfoRetS2S::QUERY_RESULT_MAX;
const int MsgServerQueryPlayerInfoRetS2S::QUERY_RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgServerQueryPlayerInfoRetS2S::kMsgTypeFieldNumber;
const int MsgServerQueryPlayerInfoRetS2S::kResultFieldNumber;
const int MsgServerQueryPlayerInfoRetS2S::kIggidFieldNumber;
const int MsgServerQueryPlayerInfoRetS2S::kQueryIggidFieldNumber;
const int MsgServerQueryPlayerInfoRetS2S::kStrNameFieldNumber;
const int MsgServerQueryPlayerInfoRetS2S::kIFlagFieldNumber;
const int MsgServerQueryPlayerInfoRetS2S::kBaseFieldNumber;
#endif  // !_MSC_VER

MsgServerQueryPlayerInfoRetS2S::MsgServerQueryPlayerInfoRetS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgServerQueryPlayerInfoRetS2S)
}

void MsgServerQueryPlayerInfoRetS2S::InitAsDefaultInstance() {
  base_ = const_cast< ::MsgPB::MsgQueryPlayerInfo_Base*>(&::MsgPB::MsgQueryPlayerInfo_Base::default_instance());
}

MsgServerQueryPlayerInfoRetS2S::MsgServerQueryPlayerInfoRetS2S(const MsgServerQueryPlayerInfoRetS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgServerQueryPlayerInfoRetS2S)
}

void MsgServerQueryPlayerInfoRetS2S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1043;
  result_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  queryiggid_ = GOOGLE_LONGLONG(0);
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iflag_ = 1;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgServerQueryPlayerInfoRetS2S::~MsgServerQueryPlayerInfoRetS2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgServerQueryPlayerInfoRetS2S)
  SharedDtor();
}

void MsgServerQueryPlayerInfoRetS2S::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strname_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

void MsgServerQueryPlayerInfoRetS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgServerQueryPlayerInfoRetS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgServerQueryPlayerInfoRetS2S_descriptor_;
}

const MsgServerQueryPlayerInfoRetS2S& MsgServerQueryPlayerInfoRetS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgServerQueryPlayerInfoRetS2S* MsgServerQueryPlayerInfoRetS2S::default_instance_ = NULL;

MsgServerQueryPlayerInfoRetS2S* MsgServerQueryPlayerInfoRetS2S::New() const {
  return new MsgServerQueryPlayerInfoRetS2S;
}

void MsgServerQueryPlayerInfoRetS2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgServerQueryPlayerInfoRetS2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(result_, queryiggid_);
    msgtype_ = 1043;
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strname_->clear();
      }
    }
    iflag_ = 1;
    if (has_base()) {
      if (base_ != NULL) base_->::MsgPB::MsgQueryPlayerInfo_Base::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgServerQueryPlayerInfoRetS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgServerQueryPlayerInfoRetS2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_QUERYPLAYER_INFO_RET_S2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MsgPB.MsgServerQueryPlayerInfoRetS2S.QUERY_RESULT result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgServerQueryPlayerInfoRetS2S_QUERY_RESULT_IsValid(value)) {
            set_result(static_cast< ::MsgPB::MsgServerQueryPlayerInfoRetS2S_QUERY_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_QueryIggid;
        break;
      }

      // optional int64 QueryIggid = 4;
      case 4: {
        if (tag == 32) {
         parse_QueryIggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &queryiggid_)));
          set_has_queryiggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_strName;
        break;
      }

      // optional string strName = 5;
      case 5: {
        if (tag == 42) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_iFlag;
        break;
      }

      // optional .MsgPB.MSG_SERVER_QPINFO_FLG iFlag = 6;
      case 6: {
        if (tag == 48) {
         parse_iFlag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MSG_SERVER_QPINFO_FLG_IsValid(value)) {
            set_iflag(static_cast< ::MsgPB::MSG_SERVER_QPINFO_FLG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_base;
        break;
      }

      // optional .MsgPB.MsgQueryPlayerInfo_Base base = 7;
      case 7: {
        if (tag == 58) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgServerQueryPlayerInfoRetS2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgServerQueryPlayerInfoRetS2S)
  return false;
#undef DO_
}

void MsgServerQueryPlayerInfoRetS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgServerQueryPlayerInfoRetS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_QUERYPLAYER_INFO_RET_S2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.MsgServerQueryPlayerInfoRetS2S.QUERY_RESULT result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int64 QueryIggid = 4;
  if (has_queryiggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->queryiggid(), output);
  }

  // optional string strName = 5;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->strname(), output);
  }

  // optional .MsgPB.MSG_SERVER_QPINFO_FLG iFlag = 6;
  if (has_iflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->iflag(), output);
  }

  // optional .MsgPB.MsgQueryPlayerInfo_Base base = 7;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgServerQueryPlayerInfoRetS2S)
}

::google::protobuf::uint8* MsgServerQueryPlayerInfoRetS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgServerQueryPlayerInfoRetS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_QUERYPLAYER_INFO_RET_S2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.MsgServerQueryPlayerInfoRetS2S.QUERY_RESULT result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 iggid = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int64 QueryIggid = 4;
  if (has_queryiggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->queryiggid(), target);
  }

  // optional string strName = 5;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strname(), target);
  }

  // optional .MsgPB.MSG_SERVER_QPINFO_FLG iFlag = 6;
  if (has_iflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->iflag(), target);
  }

  // optional .MsgPB.MsgQueryPlayerInfo_Base base = 7;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgServerQueryPlayerInfoRetS2S)
  return target;
}

int MsgServerQueryPlayerInfoRetS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_QUERYPLAYER_INFO_RET_S2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.MsgServerQueryPlayerInfoRetS2S.QUERY_RESULT result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 iggid = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 QueryIggid = 4;
    if (has_queryiggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->queryiggid());
    }

    // optional string strName = 5;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // optional .MsgPB.MSG_SERVER_QPINFO_FLG iFlag = 6;
    if (has_iflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->iflag());
    }

    // optional .MsgPB.MsgQueryPlayerInfo_Base base = 7;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgServerQueryPlayerInfoRetS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgServerQueryPlayerInfoRetS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgServerQueryPlayerInfoRetS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgServerQueryPlayerInfoRetS2S::MergeFrom(const MsgServerQueryPlayerInfoRetS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_queryiggid()) {
      set_queryiggid(from.queryiggid());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_iflag()) {
      set_iflag(from.iflag());
    }
    if (from.has_base()) {
      mutable_base()->::MsgPB::MsgQueryPlayerInfo_Base::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgServerQueryPlayerInfoRetS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgServerQueryPlayerInfoRetS2S::CopyFrom(const MsgServerQueryPlayerInfoRetS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgServerQueryPlayerInfoRetS2S::IsInitialized() const {

  return true;
}

void MsgServerQueryPlayerInfoRetS2S::Swap(MsgServerQueryPlayerInfoRetS2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(result_, other->result_);
    std::swap(iggid_, other->iggid_);
    std::swap(queryiggid_, other->queryiggid_);
    std::swap(strname_, other->strname_);
    std::swap(iflag_, other->iflag_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgServerQueryPlayerInfoRetS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgServerQueryPlayerInfoRetS2S_descriptor_;
  metadata.reflection = MsgServerQueryPlayerInfoRetS2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerRenameC2S::kMsgTypeFieldNumber;
const int MsgPlayerRenameC2S::kIggidFieldNumber;
const int MsgPlayerRenameC2S::kNameFieldNumber;
const int MsgPlayerRenameC2S::kFirstFreeFieldNumber;
#endif  // !_MSC_VER

MsgPlayerRenameC2S::MsgPlayerRenameC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerRenameC2S)
}

void MsgPlayerRenameC2S::InitAsDefaultInstance() {
}

MsgPlayerRenameC2S::MsgPlayerRenameC2S(const MsgPlayerRenameC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerRenameC2S)
}

void MsgPlayerRenameC2S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1096;
  iggid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstfree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerRenameC2S::~MsgPlayerRenameC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerRenameC2S)
  SharedDtor();
}

void MsgPlayerRenameC2S::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlayerRenameC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerRenameC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerRenameC2S_descriptor_;
}

const MsgPlayerRenameC2S& MsgPlayerRenameC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerRenameC2S* MsgPlayerRenameC2S::default_instance_ = NULL;

MsgPlayerRenameC2S* MsgPlayerRenameC2S::New() const {
  return new MsgPlayerRenameC2S;
}

void MsgPlayerRenameC2S::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 1096;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    firstfree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerRenameC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerRenameC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_RENAME_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_firstFree;
        break;
      }

      // optional bool firstFree = 4;
      case 4: {
        if (tag == 32) {
         parse_firstFree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &firstfree_)));
          set_has_firstfree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerRenameC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerRenameC2S)
  return false;
#undef DO_
}

void MsgPlayerRenameC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerRenameC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_RENAME_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional bool firstFree = 4;
  if (has_firstfree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->firstfree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerRenameC2S)
}

::google::protobuf::uint8* MsgPlayerRenameC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerRenameC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_RENAME_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional bool firstFree = 4;
  if (has_firstfree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->firstfree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerRenameC2S)
  return target;
}

int MsgPlayerRenameC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_RENAME_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool firstFree = 4;
    if (has_firstfree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerRenameC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerRenameC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerRenameC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerRenameC2S::MergeFrom(const MsgPlayerRenameC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_firstfree()) {
      set_firstfree(from.firstfree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerRenameC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerRenameC2S::CopyFrom(const MsgPlayerRenameC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerRenameC2S::IsInitialized() const {

  return true;
}

void MsgPlayerRenameC2S::Swap(MsgPlayerRenameC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(name_, other->name_);
    std::swap(firstfree_, other->firstfree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerRenameC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerRenameC2S_descriptor_;
  metadata.reflection = MsgPlayerRenameC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerRenameS2C::kMsgTypeFieldNumber;
const int MsgPlayerRenameS2C::kIggidFieldNumber;
const int MsgPlayerRenameS2C::kResFieldNumber;
const int MsgPlayerRenameS2C::kFirstFreeFieldNumber;
#endif  // !_MSC_VER

MsgPlayerRenameS2C::MsgPlayerRenameS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerRenameS2C)
}

void MsgPlayerRenameS2C::InitAsDefaultInstance() {
}

MsgPlayerRenameS2C::MsgPlayerRenameS2C(const MsgPlayerRenameS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerRenameS2C)
}

void MsgPlayerRenameS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1097;
  iggid_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  firstfree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerRenameS2C::~MsgPlayerRenameS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerRenameS2C)
  SharedDtor();
}

void MsgPlayerRenameS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerRenameS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerRenameS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerRenameS2C_descriptor_;
}

const MsgPlayerRenameS2C& MsgPlayerRenameS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerRenameS2C* MsgPlayerRenameS2C::default_instance_ = NULL;

MsgPlayerRenameS2C* MsgPlayerRenameS2C::New() const {
  return new MsgPlayerRenameS2C;
}

void MsgPlayerRenameS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerRenameS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(res_, firstfree_);
    msgtype_ = 1097;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerRenameS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerRenameS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_RENAME_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }

      // optional .MsgPB.MSG_PLAYER_RESULT res = 3;
      case 3: {
        if (tag == 24) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MSG_PLAYER_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::MSG_PLAYER_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_firstFree;
        break;
      }

      // optional bool firstFree = 4;
      case 4: {
        if (tag == 32) {
         parse_firstFree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &firstfree_)));
          set_has_firstfree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerRenameS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerRenameS2C)
  return false;
#undef DO_
}

void MsgPlayerRenameS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerRenameS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_RENAME_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.MSG_PLAYER_RESULT res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->res(), output);
  }

  // optional bool firstFree = 4;
  if (has_firstfree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->firstfree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerRenameS2C)
}

::google::protobuf::uint8* MsgPlayerRenameS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerRenameS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_RENAME_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.MSG_PLAYER_RESULT res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->res(), target);
  }

  // optional bool firstFree = 4;
  if (has_firstfree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->firstfree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerRenameS2C)
  return target;
}

int MsgPlayerRenameS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_RENAME_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.MSG_PLAYER_RESULT res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional bool firstFree = 4;
    if (has_firstfree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerRenameS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerRenameS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerRenameS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerRenameS2C::MergeFrom(const MsgPlayerRenameS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_firstfree()) {
      set_firstfree(from.firstfree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerRenameS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerRenameS2C::CopyFrom(const MsgPlayerRenameS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerRenameS2C::IsInitialized() const {

  return true;
}

void MsgPlayerRenameS2C::Swap(MsgPlayerRenameS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(res_, other->res_);
    std::swap(firstfree_, other->firstfree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerRenameS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerRenameS2C_descriptor_;
  metadata.reflection = MsgPlayerRenameS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerDataContainerSyncDoneG2C::kMsgTypeFieldNumber;
const int MsgPlayerDataContainerSyncDoneG2C::kLoginTimeFieldNumber;
const int MsgPlayerDataContainerSyncDoneG2C::kNextZeroTimeFieldNumber;
#endif  // !_MSC_VER

MsgPlayerDataContainerSyncDoneG2C::MsgPlayerDataContainerSyncDoneG2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerDataContainerSyncDoneG2C)
}

void MsgPlayerDataContainerSyncDoneG2C::InitAsDefaultInstance() {
}

MsgPlayerDataContainerSyncDoneG2C::MsgPlayerDataContainerSyncDoneG2C(const MsgPlayerDataContainerSyncDoneG2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerDataContainerSyncDoneG2C)
}

void MsgPlayerDataContainerSyncDoneG2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1044;
  login_time_ = GOOGLE_LONGLONG(0);
  next_zero_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerDataContainerSyncDoneG2C::~MsgPlayerDataContainerSyncDoneG2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerDataContainerSyncDoneG2C)
  SharedDtor();
}

void MsgPlayerDataContainerSyncDoneG2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerDataContainerSyncDoneG2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerDataContainerSyncDoneG2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerDataContainerSyncDoneG2C_descriptor_;
}

const MsgPlayerDataContainerSyncDoneG2C& MsgPlayerDataContainerSyncDoneG2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerDataContainerSyncDoneG2C* MsgPlayerDataContainerSyncDoneG2C::default_instance_ = NULL;

MsgPlayerDataContainerSyncDoneG2C* MsgPlayerDataContainerSyncDoneG2C::New() const {
  return new MsgPlayerDataContainerSyncDoneG2C;
}

void MsgPlayerDataContainerSyncDoneG2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerDataContainerSyncDoneG2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(login_time_, next_zero_time_);
    msgtype_ = 1044;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerDataContainerSyncDoneG2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerDataContainerSyncDoneG2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DATA_SYNC_CONTAINER_DONE_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_login_time;
        break;
      }

      // optional int64 login_time = 2;
      case 2: {
        if (tag == 16) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_next_zero_time;
        break;
      }

      // optional int64 next_zero_time = 3;
      case 3: {
        if (tag == 24) {
         parse_next_zero_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_zero_time_)));
          set_has_next_zero_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerDataContainerSyncDoneG2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerDataContainerSyncDoneG2C)
  return false;
#undef DO_
}

void MsgPlayerDataContainerSyncDoneG2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerDataContainerSyncDoneG2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DATA_SYNC_CONTAINER_DONE_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 login_time = 2;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->login_time(), output);
  }

  // optional int64 next_zero_time = 3;
  if (has_next_zero_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->next_zero_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerDataContainerSyncDoneG2C)
}

::google::protobuf::uint8* MsgPlayerDataContainerSyncDoneG2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerDataContainerSyncDoneG2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DATA_SYNC_CONTAINER_DONE_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 login_time = 2;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->login_time(), target);
  }

  // optional int64 next_zero_time = 3;
  if (has_next_zero_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->next_zero_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerDataContainerSyncDoneG2C)
  return target;
}

int MsgPlayerDataContainerSyncDoneG2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DATA_SYNC_CONTAINER_DONE_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 login_time = 2;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->login_time());
    }

    // optional int64 next_zero_time = 3;
    if (has_next_zero_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_zero_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerDataContainerSyncDoneG2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerDataContainerSyncDoneG2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerDataContainerSyncDoneG2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerDataContainerSyncDoneG2C::MergeFrom(const MsgPlayerDataContainerSyncDoneG2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_next_zero_time()) {
      set_next_zero_time(from.next_zero_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerDataContainerSyncDoneG2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerDataContainerSyncDoneG2C::CopyFrom(const MsgPlayerDataContainerSyncDoneG2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerDataContainerSyncDoneG2C::IsInitialized() const {

  return true;
}

void MsgPlayerDataContainerSyncDoneG2C::Swap(MsgPlayerDataContainerSyncDoneG2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(login_time_, other->login_time_);
    std::swap(next_zero_time_, other->next_zero_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerDataContainerSyncDoneG2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerDataContainerSyncDoneG2C_descriptor_;
  metadata.reflection = MsgPlayerDataContainerSyncDoneG2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPlayerRequest::kSerialFieldNumber;
const int QueryPlayerRequest::kIggidFieldNumber;
const int QueryPlayerRequest::kQueryIggidFieldNumber;
const int QueryPlayerRequest::kIncludesFieldNumber;
const int QueryPlayerRequest::kBuildTowerDataFieldNumber;
const int QueryPlayerRequest::kMapIdFieldNumber;
const int QueryPlayerRequest::kMapServerIdFieldNumber;
#endif  // !_MSC_VER

QueryPlayerRequest::QueryPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.QueryPlayerRequest)
}

void QueryPlayerRequest::InitAsDefaultInstance() {
}

QueryPlayerRequest::QueryPlayerRequest(const QueryPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.QueryPlayerRequest)
}

void QueryPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  serial_ = GOOGLE_LONGLONG(0);
  iggid_ = GOOGLE_LONGLONG(0);
  query_iggid_ = GOOGLE_LONGLONG(0);
  map_id_ = 0;
  mapserverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPlayerRequest::~QueryPlayerRequest() {
  // @@protoc_insertion_point(destructor:MsgPB.QueryPlayerRequest)
  SharedDtor();
}

void QueryPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPlayerRequest_descriptor_;
}

const QueryPlayerRequest& QueryPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

QueryPlayerRequest* QueryPlayerRequest::default_instance_ = NULL;

QueryPlayerRequest* QueryPlayerRequest::New() const {
  return new QueryPlayerRequest;
}

void QueryPlayerRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryPlayerRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 103) {
    ZR_(serial_, query_iggid_);
    ZR_(map_id_, mapserverid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  includes_.Clear();
  build_tower_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.QueryPlayerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 serial = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // required int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_query_iggid;
        break;
      }

      // required int64 query_iggid = 3;
      case 3: {
        if (tag == 24) {
         parse_query_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &query_iggid_)));
          set_has_query_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_includes;
        break;
      }

      // repeated .MsgPB.E_QueryPlayerInclude includes = 4;
      case 4: {
        if (tag == 32) {
         parse_includes:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_QueryPlayerInclude_IsValid(value)) {
            add_includes(static_cast< ::MsgPB::E_QueryPlayerInclude >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::MsgPB::E_QueryPlayerInclude_IsValid,
                 this->mutable_includes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_includes;
        if (input->ExpectTag(42)) goto parse_build_tower_data;
        break;
      }

      // repeated .MsgPB.MsgBuildTowerData build_tower_data = 5;
      case 5: {
        if (tag == 42) {
         parse_build_tower_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_build_tower_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_build_tower_data;
        if (input->ExpectTag(48)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 6;
      case 6: {
        if (tag == 48) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mapServerId;
        break;
      }

      // optional int32 mapServerId = 7;
      case 7: {
        if (tag == 56) {
         parse_mapServerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapserverid_)));
          set_has_mapserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.QueryPlayerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.QueryPlayerRequest)
  return false;
#undef DO_
}

void QueryPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.QueryPlayerRequest)
  // required int64 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->serial(), output);
  }

  // required int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // required int64 query_iggid = 3;
  if (has_query_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->query_iggid(), output);
  }

  // repeated .MsgPB.E_QueryPlayerInclude includes = 4;
  for (int i = 0; i < this->includes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->includes(i), output);
  }

  // repeated .MsgPB.MsgBuildTowerData build_tower_data = 5;
  for (int i = 0; i < this->build_tower_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->build_tower_data(i), output);
  }

  // optional int32 map_id = 6;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->map_id(), output);
  }

  // optional int32 mapServerId = 7;
  if (has_mapserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mapserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.QueryPlayerRequest)
}

::google::protobuf::uint8* QueryPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.QueryPlayerRequest)
  // required int64 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->serial(), target);
  }

  // required int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // required int64 query_iggid = 3;
  if (has_query_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->query_iggid(), target);
  }

  // repeated .MsgPB.E_QueryPlayerInclude includes = 4;
  for (int i = 0; i < this->includes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->includes(i), target);
  }

  // repeated .MsgPB.MsgBuildTowerData build_tower_data = 5;
  for (int i = 0; i < this->build_tower_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->build_tower_data(i), target);
  }

  // optional int32 map_id = 6;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->map_id(), target);
  }

  // optional int32 mapServerId = 7;
  if (has_mapserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mapserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.QueryPlayerRequest)
  return target;
}

int QueryPlayerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serial());
    }

    // required int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // required int64 query_iggid = 3;
    if (has_query_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->query_iggid());
    }

    // optional int32 map_id = 6;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // optional int32 mapServerId = 7;
    if (has_mapserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapserverid());
    }

  }
  // repeated .MsgPB.E_QueryPlayerInclude includes = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->includes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->includes(i));
    }
    total_size += 1 * this->includes_size() + data_size;
  }

  // repeated .MsgPB.MsgBuildTowerData build_tower_data = 5;
  total_size += 1 * this->build_tower_data_size();
  for (int i = 0; i < this->build_tower_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->build_tower_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPlayerRequest::MergeFrom(const QueryPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  includes_.MergeFrom(from.includes_);
  build_tower_data_.MergeFrom(from.build_tower_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_query_iggid()) {
      set_query_iggid(from.query_iggid());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_mapserverid()) {
      set_mapserverid(from.mapserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPlayerRequest::CopyFrom(const QueryPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPlayerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void QueryPlayerRequest::Swap(QueryPlayerRequest* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(iggid_, other->iggid_);
    std::swap(query_iggid_, other->query_iggid_);
    includes_.Swap(&other->includes_);
    build_tower_data_.Swap(&other->build_tower_data_);
    std::swap(map_id_, other->map_id_);
    std::swap(mapserverid_, other->mapserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPlayerRequest_descriptor_;
  metadata.reflection = QueryPlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPlayerResult::kBaseFieldNumber;
const int QueryPlayerResult::kEquipsFieldNumber;
const int QueryPlayerResult::kMapIdFieldNumber;
const int QueryPlayerResult::kMapFileNameFieldNumber;
const int QueryPlayerResult::kProtectorDataFieldNumber;
const int QueryPlayerResult::kBlocknumFieldNumber;
const int QueryPlayerResult::kMapblockxFieldNumber;
const int QueryPlayerResult::kMapblockyFieldNumber;
const int QueryPlayerResult::kBlocksizexFieldNumber;
const int QueryPlayerResult::kBlocksizeyFieldNumber;
#endif  // !_MSC_VER

QueryPlayerResult::QueryPlayerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.QueryPlayerResult)
}

void QueryPlayerResult::InitAsDefaultInstance() {
  base_ = const_cast< ::MsgPB::MsgQueryPlayerInfo_Base*>(&::MsgPB::MsgQueryPlayerInfo_Base::default_instance());
}

QueryPlayerResult::QueryPlayerResult(const QueryPlayerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.QueryPlayerResult)
}

void QueryPlayerResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_ = NULL;
  map_id_ = 0;
  map_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocknum_ = 0;
  mapblockx_ = 0;
  mapblocky_ = 0;
  blocksizex_ = 0;
  blocksizey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPlayerResult::~QueryPlayerResult() {
  // @@protoc_insertion_point(destructor:MsgPB.QueryPlayerResult)
  SharedDtor();
}

void QueryPlayerResult::SharedDtor() {
  if (map_file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_file_name_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

void QueryPlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPlayerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPlayerResult_descriptor_;
}

const QueryPlayerResult& QueryPlayerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

QueryPlayerResult* QueryPlayerResult::default_instance_ = NULL;

QueryPlayerResult* QueryPlayerResult::New() const {
  return new QueryPlayerResult;
}

void QueryPlayerResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryPlayerResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 237) {
    ZR_(map_id_, blocknum_);
    ZR_(mapblockx_, mapblocky_);
    if (has_base()) {
      if (base_ != NULL) base_->::MsgPB::MsgQueryPlayerInfo_Base::Clear();
    }
    if (has_map_file_name()) {
      if (map_file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        map_file_name_->clear();
      }
    }
  }
  ZR_(blocksizex_, blocksizey_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  equips_.Clear();
  protector_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.QueryPlayerResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.MsgQueryPlayerInfo_Base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equips;
        break;
      }

      // repeated .MsgPB.ServerEquipInfo equips = 2;
      case 2: {
        if (tag == 18) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equips;
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 3;
      case 3: {
        if (tag == 24) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_map_file_name;
        break;
      }

      // optional string map_file_name = 4;
      case 4: {
        if (tag == 34) {
         parse_map_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_file_name().data(), this->map_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map_file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_protector_data;
        break;
      }

      // repeated .MsgPB.MsgProtectorData protector_data = 5;
      case 5: {
        if (tag == 42) {
         parse_protector_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_protector_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_protector_data;
        if (input->ExpectTag(48)) goto parse_blocknum;
        break;
      }

      // optional int32 blocknum = 6;
      case 6: {
        if (tag == 48) {
         parse_blocknum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocknum_)));
          set_has_blocknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mapblockx;
        break;
      }

      // optional int32 mapblockx = 7;
      case 7: {
        if (tag == 56) {
         parse_mapblockx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapblockx_)));
          set_has_mapblockx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mapblocky;
        break;
      }

      // optional int32 mapblocky = 8;
      case 8: {
        if (tag == 64) {
         parse_mapblocky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapblocky_)));
          set_has_mapblocky();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_blocksizex;
        break;
      }

      // optional int32 blocksizex = 9;
      case 9: {
        if (tag == 72) {
         parse_blocksizex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocksizex_)));
          set_has_blocksizex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_blocksizey;
        break;
      }

      // optional int32 blocksizey = 10;
      case 10: {
        if (tag == 80) {
         parse_blocksizey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocksizey_)));
          set_has_blocksizey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.QueryPlayerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.QueryPlayerResult)
  return false;
#undef DO_
}

void QueryPlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.QueryPlayerResult)
  // optional .MsgPB.MsgQueryPlayerInfo_Base base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // repeated .MsgPB.ServerEquipInfo equips = 2;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equips(i), output);
  }

  // optional int32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }

  // optional string map_file_name = 4;
  if (has_map_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_file_name().data(), this->map_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->map_file_name(), output);
  }

  // repeated .MsgPB.MsgProtectorData protector_data = 5;
  for (int i = 0; i < this->protector_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->protector_data(i), output);
  }

  // optional int32 blocknum = 6;
  if (has_blocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->blocknum(), output);
  }

  // optional int32 mapblockx = 7;
  if (has_mapblockx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mapblockx(), output);
  }

  // optional int32 mapblocky = 8;
  if (has_mapblocky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mapblocky(), output);
  }

  // optional int32 blocksizex = 9;
  if (has_blocksizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->blocksizex(), output);
  }

  // optional int32 blocksizey = 10;
  if (has_blocksizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->blocksizey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.QueryPlayerResult)
}

::google::protobuf::uint8* QueryPlayerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.QueryPlayerResult)
  // optional .MsgPB.MsgQueryPlayerInfo_Base base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // repeated .MsgPB.ServerEquipInfo equips = 2;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equips(i), target);
  }

  // optional int32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }

  // optional string map_file_name = 4;
  if (has_map_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_file_name().data(), this->map_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->map_file_name(), target);
  }

  // repeated .MsgPB.MsgProtectorData protector_data = 5;
  for (int i = 0; i < this->protector_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->protector_data(i), target);
  }

  // optional int32 blocknum = 6;
  if (has_blocknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->blocknum(), target);
  }

  // optional int32 mapblockx = 7;
  if (has_mapblockx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mapblockx(), target);
  }

  // optional int32 mapblocky = 8;
  if (has_mapblocky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mapblocky(), target);
  }

  // optional int32 blocksizex = 9;
  if (has_blocksizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->blocksizex(), target);
  }

  // optional int32 blocksizey = 10;
  if (has_blocksizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->blocksizey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.QueryPlayerResult)
  return target;
}

int QueryPlayerResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.MsgQueryPlayerInfo_Base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional int32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // optional string map_file_name = 4;
    if (has_map_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_file_name());
    }

    // optional int32 blocknum = 6;
    if (has_blocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocknum());
    }

    // optional int32 mapblockx = 7;
    if (has_mapblockx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapblockx());
    }

    // optional int32 mapblocky = 8;
    if (has_mapblocky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapblocky());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 blocksizex = 9;
    if (has_blocksizex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocksizex());
    }

    // optional int32 blocksizey = 10;
    if (has_blocksizey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocksizey());
    }

  }
  // repeated .MsgPB.ServerEquipInfo equips = 2;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .MsgPB.MsgProtectorData protector_data = 5;
  total_size += 1 * this->protector_data_size();
  for (int i = 0; i < this->protector_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->protector_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPlayerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPlayerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPlayerResult::MergeFrom(const QueryPlayerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  protector_data_.MergeFrom(from.protector_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::MsgPB::MsgQueryPlayerInfo_Base::MergeFrom(from.base());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_file_name()) {
      set_map_file_name(from.map_file_name());
    }
    if (from.has_blocknum()) {
      set_blocknum(from.blocknum());
    }
    if (from.has_mapblockx()) {
      set_mapblockx(from.mapblockx());
    }
    if (from.has_mapblocky()) {
      set_mapblocky(from.mapblocky());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blocksizex()) {
      set_blocksizex(from.blocksizex());
    }
    if (from.has_blocksizey()) {
      set_blocksizey(from.blocksizey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPlayerResult::CopyFrom(const QueryPlayerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPlayerResult::IsInitialized() const {

  return true;
}

void QueryPlayerResult::Swap(QueryPlayerResult* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    equips_.Swap(&other->equips_);
    std::swap(map_id_, other->map_id_);
    std::swap(map_file_name_, other->map_file_name_);
    protector_data_.Swap(&other->protector_data_);
    std::swap(blocknum_, other->blocknum_);
    std::swap(mapblockx_, other->mapblockx_);
    std::swap(mapblocky_, other->mapblocky_);
    std::swap(blocksizex_, other->blocksizex_);
    std::swap(blocksizey_, other->blocksizey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPlayerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPlayerResult_descriptor_;
  metadata.reflection = QueryPlayerResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryPlayerM2MRequest::kMsgTypeFieldNumber;
const int MsgQueryPlayerM2MRequest::kIggidFieldNumber;
const int MsgQueryPlayerM2MRequest::kRequestFieldNumber;
#endif  // !_MSC_VER

MsgQueryPlayerM2MRequest::MsgQueryPlayerM2MRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgQueryPlayerM2MRequest)
}

void MsgQueryPlayerM2MRequest::InitAsDefaultInstance() {
  request_ = const_cast< ::MsgPB::QueryPlayerRequest*>(&::MsgPB::QueryPlayerRequest::default_instance());
}

MsgQueryPlayerM2MRequest::MsgQueryPlayerM2MRequest(const MsgQueryPlayerM2MRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgQueryPlayerM2MRequest)
}

void MsgQueryPlayerM2MRequest::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 6001;
  iggid_ = GOOGLE_LONGLONG(0);
  request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryPlayerM2MRequest::~MsgQueryPlayerM2MRequest() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgQueryPlayerM2MRequest)
  SharedDtor();
}

void MsgQueryPlayerM2MRequest::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
  }
}

void MsgQueryPlayerM2MRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryPlayerM2MRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryPlayerM2MRequest_descriptor_;
}

const MsgQueryPlayerM2MRequest& MsgQueryPlayerM2MRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgQueryPlayerM2MRequest* MsgQueryPlayerM2MRequest::default_instance_ = NULL;

MsgQueryPlayerM2MRequest* MsgQueryPlayerM2MRequest::New() const {
  return new MsgQueryPlayerM2MRequest;
}

void MsgQueryPlayerM2MRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 6001;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_request()) {
      if (request_ != NULL) request_->::MsgPB::QueryPlayerRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryPlayerM2MRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgQueryPlayerM2MRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2M_REQUEST];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // required int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_request;
        break;
      }

      // required .MsgPB.QueryPlayerRequest request = 3;
      case 3: {
        if (tag == 26) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgQueryPlayerM2MRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgQueryPlayerM2MRequest)
  return false;
#undef DO_
}

void MsgQueryPlayerM2MRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgQueryPlayerM2MRequest)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2M_REQUEST];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // required .MsgPB.QueryPlayerRequest request = 3;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgQueryPlayerM2MRequest)
}

::google::protobuf::uint8* MsgQueryPlayerM2MRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgQueryPlayerM2MRequest)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2M_REQUEST];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // required int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // required .MsgPB.QueryPlayerRequest request = 3;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgQueryPlayerM2MRequest)
  return target;
}

int MsgQueryPlayerM2MRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2M_REQUEST];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // required int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // required .MsgPB.QueryPlayerRequest request = 3;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryPlayerM2MRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryPlayerM2MRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryPlayerM2MRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryPlayerM2MRequest::MergeFrom(const MsgQueryPlayerM2MRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_request()) {
      mutable_request()->::MsgPB::QueryPlayerRequest::MergeFrom(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryPlayerM2MRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryPlayerM2MRequest::CopyFrom(const MsgQueryPlayerM2MRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryPlayerM2MRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  return true;
}

void MsgQueryPlayerM2MRequest::Swap(MsgQueryPlayerM2MRequest* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryPlayerM2MRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryPlayerM2MRequest_descriptor_;
  metadata.reflection = MsgQueryPlayerM2MRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryPlayerM2MResponse::kMsgTypeFieldNumber;
const int MsgQueryPlayerM2MResponse::kIggidFieldNumber;
const int MsgQueryPlayerM2MResponse::kIsTailFieldNumber;
const int MsgQueryPlayerM2MResponse::kSerialFieldNumber;
const int MsgQueryPlayerM2MResponse::kQueryIggidFieldNumber;
const int MsgQueryPlayerM2MResponse::kErrFieldNumber;
const int MsgQueryPlayerM2MResponse::kResultFieldNumber;
const int MsgQueryPlayerM2MResponse::kFinishedFieldNumber;
const int MsgQueryPlayerM2MResponse::kMapServerIdFieldNumber;
#endif  // !_MSC_VER

MsgQueryPlayerM2MResponse::MsgQueryPlayerM2MResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgQueryPlayerM2MResponse)
}

void MsgQueryPlayerM2MResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::MsgPB::QueryPlayerResult*>(&::MsgPB::QueryPlayerResult::default_instance());
}

MsgQueryPlayerM2MResponse::MsgQueryPlayerM2MResponse(const MsgQueryPlayerM2MResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgQueryPlayerM2MResponse)
}

void MsgQueryPlayerM2MResponse::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 6002;
  iggid_ = GOOGLE_LONGLONG(0);
  istail_ = false;
  serial_ = GOOGLE_LONGLONG(0);
  query_iggid_ = GOOGLE_LONGLONG(0);
  err_ = 1;
  result_ = NULL;
  mapserverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryPlayerM2MResponse::~MsgQueryPlayerM2MResponse() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgQueryPlayerM2MResponse)
  SharedDtor();
}

void MsgQueryPlayerM2MResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void MsgQueryPlayerM2MResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryPlayerM2MResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryPlayerM2MResponse_descriptor_;
}

const MsgQueryPlayerM2MResponse& MsgQueryPlayerM2MResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgQueryPlayerM2MResponse* MsgQueryPlayerM2MResponse::default_instance_ = NULL;

MsgQueryPlayerM2MResponse* MsgQueryPlayerM2MResponse::New() const {
  return new MsgQueryPlayerM2MResponse;
}

void MsgQueryPlayerM2MResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQueryPlayerM2MResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(istail_, query_iggid_);
    msgtype_ = 6002;
    iggid_ = GOOGLE_LONGLONG(0);
    err_ = 1;
    if (has_result()) {
      if (result_ != NULL) result_->::MsgPB::QueryPlayerResult::Clear();
    }
  }
  mapserverid_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  finished_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryPlayerM2MResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgQueryPlayerM2MResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2M_RESPONSE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // required int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isTail;
        break;
      }

      // optional bool isTail = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_isTail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istail_)));
          set_has_istail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_serial;
        break;
      }

      // required int64 serial = 4;
      case 4: {
        if (tag == 32) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_query_iggid;
        break;
      }

      // required int64 query_iggid = 5;
      case 5: {
        if (tag == 40) {
         parse_query_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &query_iggid_)));
          set_has_query_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_err;
        break;
      }

      // optional .MsgPB.E_QueryPlayerErrorCode err = 6 [default = E_QueryPlayerErrorCode_Fail];
      case 6: {
        if (tag == 48) {
         parse_err:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_QueryPlayerErrorCode_IsValid(value)) {
            set_err(static_cast< ::MsgPB::E_QueryPlayerErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_result;
        break;
      }

      // optional .MsgPB.QueryPlayerResult result = 7;
      case 7: {
        if (tag == 58) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_finished;
        break;
      }

      // repeated .MsgPB.E_QueryPlayerInclude finished = 8;
      case 8: {
        if (tag == 64) {
         parse_finished:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_QueryPlayerInclude_IsValid(value)) {
            add_finished(static_cast< ::MsgPB::E_QueryPlayerInclude >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::MsgPB::E_QueryPlayerInclude_IsValid,
                 this->mutable_finished())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_finished;
        if (input->ExpectTag(72)) goto parse_mapServerId;
        break;
      }

      // optional int32 mapServerId = 9;
      case 9: {
        if (tag == 72) {
         parse_mapServerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapserverid_)));
          set_has_mapserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgQueryPlayerM2MResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgQueryPlayerM2MResponse)
  return false;
#undef DO_
}

void MsgQueryPlayerM2MResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgQueryPlayerM2MResponse)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2M_RESPONSE];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional bool isTail = 3 [default = false];
  if (has_istail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->istail(), output);
  }

  // required int64 serial = 4;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->serial(), output);
  }

  // required int64 query_iggid = 5;
  if (has_query_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->query_iggid(), output);
  }

  // optional .MsgPB.E_QueryPlayerErrorCode err = 6 [default = E_QueryPlayerErrorCode_Fail];
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->err(), output);
  }

  // optional .MsgPB.QueryPlayerResult result = 7;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->result(), output);
  }

  // repeated .MsgPB.E_QueryPlayerInclude finished = 8;
  for (int i = 0; i < this->finished_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->finished(i), output);
  }

  // optional int32 mapServerId = 9;
  if (has_mapserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mapserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgQueryPlayerM2MResponse)
}

::google::protobuf::uint8* MsgQueryPlayerM2MResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgQueryPlayerM2MResponse)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2M_RESPONSE];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // required int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional bool isTail = 3 [default = false];
  if (has_istail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istail(), target);
  }

  // required int64 serial = 4;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->serial(), target);
  }

  // required int64 query_iggid = 5;
  if (has_query_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->query_iggid(), target);
  }

  // optional .MsgPB.E_QueryPlayerErrorCode err = 6 [default = E_QueryPlayerErrorCode_Fail];
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->err(), target);
  }

  // optional .MsgPB.QueryPlayerResult result = 7;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->result(), target);
  }

  // repeated .MsgPB.E_QueryPlayerInclude finished = 8;
  for (int i = 0; i < this->finished_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->finished(i), target);
  }

  // optional int32 mapServerId = 9;
  if (has_mapserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mapserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgQueryPlayerM2MResponse)
  return target;
}

int MsgQueryPlayerM2MResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2M_RESPONSE];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // required int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional bool isTail = 3 [default = false];
    if (has_istail()) {
      total_size += 1 + 1;
    }

    // required int64 serial = 4;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serial());
    }

    // required int64 query_iggid = 5;
    if (has_query_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->query_iggid());
    }

    // optional .MsgPB.E_QueryPlayerErrorCode err = 6 [default = E_QueryPlayerErrorCode_Fail];
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->err());
    }

    // optional .MsgPB.QueryPlayerResult result = 7;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 mapServerId = 9;
    if (has_mapserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapserverid());
    }

  }
  // repeated .MsgPB.E_QueryPlayerInclude finished = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->finished_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->finished(i));
    }
    total_size += 1 * this->finished_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryPlayerM2MResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryPlayerM2MResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryPlayerM2MResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryPlayerM2MResponse::MergeFrom(const MsgQueryPlayerM2MResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  finished_.MergeFrom(from.finished_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_istail()) {
      set_istail(from.istail());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_query_iggid()) {
      set_query_iggid(from.query_iggid());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_result()) {
      mutable_result()->::MsgPB::QueryPlayerResult::MergeFrom(from.result());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mapserverid()) {
      set_mapserverid(from.mapserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryPlayerM2MResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryPlayerM2MResponse::CopyFrom(const MsgQueryPlayerM2MResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryPlayerM2MResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001a) != 0x0000001a) return false;

  return true;
}

void MsgQueryPlayerM2MResponse::Swap(MsgQueryPlayerM2MResponse* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(istail_, other->istail_);
    std::swap(serial_, other->serial_);
    std::swap(query_iggid_, other->query_iggid_);
    std::swap(err_, other->err_);
    std::swap(result_, other->result_);
    finished_.Swap(&other->finished_);
    std::swap(mapserverid_, other->mapserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryPlayerM2MResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryPlayerM2MResponse_descriptor_;
  metadata.reflection = MsgQueryPlayerM2MResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryPlayerM2GRequest::kMsgTypeFieldNumber;
const int MsgQueryPlayerM2GRequest::kIggidFieldNumber;
const int MsgQueryPlayerM2GRequest::kRequestFieldNumber;
#endif  // !_MSC_VER

MsgQueryPlayerM2GRequest::MsgQueryPlayerM2GRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgQueryPlayerM2GRequest)
}

void MsgQueryPlayerM2GRequest::InitAsDefaultInstance() {
  request_ = const_cast< ::MsgPB::QueryPlayerRequest*>(&::MsgPB::QueryPlayerRequest::default_instance());
}

MsgQueryPlayerM2GRequest::MsgQueryPlayerM2GRequest(const MsgQueryPlayerM2GRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgQueryPlayerM2GRequest)
}

void MsgQueryPlayerM2GRequest::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 6003;
  iggid_ = GOOGLE_LONGLONG(0);
  request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryPlayerM2GRequest::~MsgQueryPlayerM2GRequest() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgQueryPlayerM2GRequest)
  SharedDtor();
}

void MsgQueryPlayerM2GRequest::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
  }
}

void MsgQueryPlayerM2GRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryPlayerM2GRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryPlayerM2GRequest_descriptor_;
}

const MsgQueryPlayerM2GRequest& MsgQueryPlayerM2GRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgQueryPlayerM2GRequest* MsgQueryPlayerM2GRequest::default_instance_ = NULL;

MsgQueryPlayerM2GRequest* MsgQueryPlayerM2GRequest::New() const {
  return new MsgQueryPlayerM2GRequest;
}

void MsgQueryPlayerM2GRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 6003;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_request()) {
      if (request_ != NULL) request_->::MsgPB::QueryPlayerRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryPlayerM2GRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgQueryPlayerM2GRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2G_REQUEST];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // required int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_request;
        break;
      }

      // required .MsgPB.QueryPlayerRequest request = 3;
      case 3: {
        if (tag == 26) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgQueryPlayerM2GRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgQueryPlayerM2GRequest)
  return false;
#undef DO_
}

void MsgQueryPlayerM2GRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgQueryPlayerM2GRequest)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2G_REQUEST];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // required .MsgPB.QueryPlayerRequest request = 3;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgQueryPlayerM2GRequest)
}

::google::protobuf::uint8* MsgQueryPlayerM2GRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgQueryPlayerM2GRequest)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2G_REQUEST];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // required int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // required .MsgPB.QueryPlayerRequest request = 3;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgQueryPlayerM2GRequest)
  return target;
}

int MsgQueryPlayerM2GRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2G_REQUEST];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // required int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // required .MsgPB.QueryPlayerRequest request = 3;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryPlayerM2GRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryPlayerM2GRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryPlayerM2GRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryPlayerM2GRequest::MergeFrom(const MsgQueryPlayerM2GRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_request()) {
      mutable_request()->::MsgPB::QueryPlayerRequest::MergeFrom(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryPlayerM2GRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryPlayerM2GRequest::CopyFrom(const MsgQueryPlayerM2GRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryPlayerM2GRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  return true;
}

void MsgQueryPlayerM2GRequest::Swap(MsgQueryPlayerM2GRequest* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryPlayerM2GRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryPlayerM2GRequest_descriptor_;
  metadata.reflection = MsgQueryPlayerM2GRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryPlayerM2GResponse::kMsgTypeFieldNumber;
const int MsgQueryPlayerM2GResponse::kIggidFieldNumber;
const int MsgQueryPlayerM2GResponse::kIsTailFieldNumber;
const int MsgQueryPlayerM2GResponse::kSerialFieldNumber;
const int MsgQueryPlayerM2GResponse::kQueryIggidFieldNumber;
const int MsgQueryPlayerM2GResponse::kErrFieldNumber;
const int MsgQueryPlayerM2GResponse::kResultFieldNumber;
const int MsgQueryPlayerM2GResponse::kFinishedFieldNumber;
const int MsgQueryPlayerM2GResponse::kMapServerIdFieldNumber;
#endif  // !_MSC_VER

MsgQueryPlayerM2GResponse::MsgQueryPlayerM2GResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgQueryPlayerM2GResponse)
}

void MsgQueryPlayerM2GResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::MsgPB::QueryPlayerResult*>(&::MsgPB::QueryPlayerResult::default_instance());
}

MsgQueryPlayerM2GResponse::MsgQueryPlayerM2GResponse(const MsgQueryPlayerM2GResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgQueryPlayerM2GResponse)
}

void MsgQueryPlayerM2GResponse::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 6004;
  iggid_ = GOOGLE_LONGLONG(0);
  istail_ = false;
  serial_ = GOOGLE_LONGLONG(0);
  query_iggid_ = GOOGLE_LONGLONG(0);
  err_ = 1;
  result_ = NULL;
  mapserverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryPlayerM2GResponse::~MsgQueryPlayerM2GResponse() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgQueryPlayerM2GResponse)
  SharedDtor();
}

void MsgQueryPlayerM2GResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void MsgQueryPlayerM2GResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryPlayerM2GResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryPlayerM2GResponse_descriptor_;
}

const MsgQueryPlayerM2GResponse& MsgQueryPlayerM2GResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgQueryPlayerM2GResponse* MsgQueryPlayerM2GResponse::default_instance_ = NULL;

MsgQueryPlayerM2GResponse* MsgQueryPlayerM2GResponse::New() const {
  return new MsgQueryPlayerM2GResponse;
}

void MsgQueryPlayerM2GResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQueryPlayerM2GResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(istail_, query_iggid_);
    msgtype_ = 6004;
    iggid_ = GOOGLE_LONGLONG(0);
    err_ = 1;
    if (has_result()) {
      if (result_ != NULL) result_->::MsgPB::QueryPlayerResult::Clear();
    }
  }
  mapserverid_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  finished_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryPlayerM2GResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgQueryPlayerM2GResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2G_RESPONSE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // required int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isTail;
        break;
      }

      // optional bool isTail = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_isTail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istail_)));
          set_has_istail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_serial;
        break;
      }

      // required int64 serial = 4;
      case 4: {
        if (tag == 32) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_query_iggid;
        break;
      }

      // required int64 query_iggid = 5;
      case 5: {
        if (tag == 40) {
         parse_query_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &query_iggid_)));
          set_has_query_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_err;
        break;
      }

      // optional .MsgPB.E_QueryPlayerErrorCode err = 6 [default = E_QueryPlayerErrorCode_Fail];
      case 6: {
        if (tag == 48) {
         parse_err:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_QueryPlayerErrorCode_IsValid(value)) {
            set_err(static_cast< ::MsgPB::E_QueryPlayerErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_result;
        break;
      }

      // optional .MsgPB.QueryPlayerResult result = 7;
      case 7: {
        if (tag == 58) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_finished;
        break;
      }

      // repeated .MsgPB.E_QueryPlayerInclude finished = 8;
      case 8: {
        if (tag == 64) {
         parse_finished:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_QueryPlayerInclude_IsValid(value)) {
            add_finished(static_cast< ::MsgPB::E_QueryPlayerInclude >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::MsgPB::E_QueryPlayerInclude_IsValid,
                 this->mutable_finished())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_finished;
        if (input->ExpectTag(72)) goto parse_mapServerId;
        break;
      }

      // optional int32 mapServerId = 9;
      case 9: {
        if (tag == 72) {
         parse_mapServerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapserverid_)));
          set_has_mapserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgQueryPlayerM2GResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgQueryPlayerM2GResponse)
  return false;
#undef DO_
}

void MsgQueryPlayerM2GResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgQueryPlayerM2GResponse)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2G_RESPONSE];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional bool isTail = 3 [default = false];
  if (has_istail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->istail(), output);
  }

  // required int64 serial = 4;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->serial(), output);
  }

  // required int64 query_iggid = 5;
  if (has_query_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->query_iggid(), output);
  }

  // optional .MsgPB.E_QueryPlayerErrorCode err = 6 [default = E_QueryPlayerErrorCode_Fail];
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->err(), output);
  }

  // optional .MsgPB.QueryPlayerResult result = 7;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->result(), output);
  }

  // repeated .MsgPB.E_QueryPlayerInclude finished = 8;
  for (int i = 0; i < this->finished_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->finished(i), output);
  }

  // optional int32 mapServerId = 9;
  if (has_mapserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mapserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgQueryPlayerM2GResponse)
}

::google::protobuf::uint8* MsgQueryPlayerM2GResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgQueryPlayerM2GResponse)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2G_RESPONSE];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // required int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional bool isTail = 3 [default = false];
  if (has_istail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istail(), target);
  }

  // required int64 serial = 4;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->serial(), target);
  }

  // required int64 query_iggid = 5;
  if (has_query_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->query_iggid(), target);
  }

  // optional .MsgPB.E_QueryPlayerErrorCode err = 6 [default = E_QueryPlayerErrorCode_Fail];
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->err(), target);
  }

  // optional .MsgPB.QueryPlayerResult result = 7;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->result(), target);
  }

  // repeated .MsgPB.E_QueryPlayerInclude finished = 8;
  for (int i = 0; i < this->finished_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->finished(i), target);
  }

  // optional int32 mapServerId = 9;
  if (has_mapserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mapserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgQueryPlayerM2GResponse)
  return target;
}

int MsgQueryPlayerM2GResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_M2G_RESPONSE];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // required int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional bool isTail = 3 [default = false];
    if (has_istail()) {
      total_size += 1 + 1;
    }

    // required int64 serial = 4;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serial());
    }

    // required int64 query_iggid = 5;
    if (has_query_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->query_iggid());
    }

    // optional .MsgPB.E_QueryPlayerErrorCode err = 6 [default = E_QueryPlayerErrorCode_Fail];
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->err());
    }

    // optional .MsgPB.QueryPlayerResult result = 7;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 mapServerId = 9;
    if (has_mapserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapserverid());
    }

  }
  // repeated .MsgPB.E_QueryPlayerInclude finished = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->finished_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->finished(i));
    }
    total_size += 1 * this->finished_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryPlayerM2GResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryPlayerM2GResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryPlayerM2GResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryPlayerM2GResponse::MergeFrom(const MsgQueryPlayerM2GResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  finished_.MergeFrom(from.finished_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_istail()) {
      set_istail(from.istail());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_query_iggid()) {
      set_query_iggid(from.query_iggid());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_result()) {
      mutable_result()->::MsgPB::QueryPlayerResult::MergeFrom(from.result());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mapserverid()) {
      set_mapserverid(from.mapserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryPlayerM2GResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryPlayerM2GResponse::CopyFrom(const MsgQueryPlayerM2GResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryPlayerM2GResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001a) != 0x0000001a) return false;

  return true;
}

void MsgQueryPlayerM2GResponse::Swap(MsgQueryPlayerM2GResponse* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(istail_, other->istail_);
    std::swap(serial_, other->serial_);
    std::swap(query_iggid_, other->query_iggid_);
    std::swap(err_, other->err_);
    std::swap(result_, other->result_);
    finished_.Swap(&other->finished_);
    std::swap(mapserverid_, other->mapserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryPlayerM2GResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryPlayerM2GResponse_descriptor_;
  metadata.reflection = MsgQueryPlayerM2GResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerRenameFlagS2C::kMsgTypeFieldNumber;
const int MsgPlayerRenameFlagS2C::kFirstFreeRenameFieldNumber;
#endif  // !_MSC_VER

MsgPlayerRenameFlagS2C::MsgPlayerRenameFlagS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerRenameFlagS2C)
}

void MsgPlayerRenameFlagS2C::InitAsDefaultInstance() {
}

MsgPlayerRenameFlagS2C::MsgPlayerRenameFlagS2C(const MsgPlayerRenameFlagS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerRenameFlagS2C)
}

void MsgPlayerRenameFlagS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4450;
  first_free_rename_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerRenameFlagS2C::~MsgPlayerRenameFlagS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerRenameFlagS2C)
  SharedDtor();
}

void MsgPlayerRenameFlagS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerRenameFlagS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerRenameFlagS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerRenameFlagS2C_descriptor_;
}

const MsgPlayerRenameFlagS2C& MsgPlayerRenameFlagS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerRenameFlagS2C* MsgPlayerRenameFlagS2C::default_instance_ = NULL;

MsgPlayerRenameFlagS2C* MsgPlayerRenameFlagS2C::New() const {
  return new MsgPlayerRenameFlagS2C;
}

void MsgPlayerRenameFlagS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 4450;
    first_free_rename_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerRenameFlagS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerRenameFlagS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_RENAME_FLAG_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_First_Free_Rename;
        break;
      }

      // optional int32 First_Free_Rename = 2;
      case 2: {
        if (tag == 16) {
         parse_First_Free_Rename:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_free_rename_)));
          set_has_first_free_rename();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerRenameFlagS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerRenameFlagS2C)
  return false;
#undef DO_
}

void MsgPlayerRenameFlagS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerRenameFlagS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_RENAME_FLAG_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 First_Free_Rename = 2;
  if (has_first_free_rename()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->first_free_rename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerRenameFlagS2C)
}

::google::protobuf::uint8* MsgPlayerRenameFlagS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerRenameFlagS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_RENAME_FLAG_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 First_Free_Rename = 2;
  if (has_first_free_rename()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->first_free_rename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerRenameFlagS2C)
  return target;
}

int MsgPlayerRenameFlagS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_RENAME_FLAG_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 First_Free_Rename = 2;
    if (has_first_free_rename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_free_rename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerRenameFlagS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerRenameFlagS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerRenameFlagS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerRenameFlagS2C::MergeFrom(const MsgPlayerRenameFlagS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_first_free_rename()) {
      set_first_free_rename(from.first_free_rename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerRenameFlagS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerRenameFlagS2C::CopyFrom(const MsgPlayerRenameFlagS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerRenameFlagS2C::IsInitialized() const {

  return true;
}

void MsgPlayerRenameFlagS2C::Swap(MsgPlayerRenameFlagS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(first_free_rename_, other->first_free_rename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerRenameFlagS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerRenameFlagS2C_descriptor_;
  metadata.reflection = MsgPlayerRenameFlagS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerDailyResetS2C::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgPlayerDailyResetS2C::MsgPlayerDailyResetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerDailyResetS2C)
}

void MsgPlayerDailyResetS2C::InitAsDefaultInstance() {
}

MsgPlayerDailyResetS2C::MsgPlayerDailyResetS2C(const MsgPlayerDailyResetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerDailyResetS2C)
}

void MsgPlayerDailyResetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4451;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerDailyResetS2C::~MsgPlayerDailyResetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerDailyResetS2C)
  SharedDtor();
}

void MsgPlayerDailyResetS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerDailyResetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerDailyResetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerDailyResetS2C_descriptor_;
}

const MsgPlayerDailyResetS2C& MsgPlayerDailyResetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerDailyResetS2C* MsgPlayerDailyResetS2C::default_instance_ = NULL;

MsgPlayerDailyResetS2C* MsgPlayerDailyResetS2C::New() const {
  return new MsgPlayerDailyResetS2C;
}

void MsgPlayerDailyResetS2C::Clear() {
  msgtype_ = 4451;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerDailyResetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerDailyResetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DAILY_RESET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerDailyResetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerDailyResetS2C)
  return false;
#undef DO_
}

void MsgPlayerDailyResetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerDailyResetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DAILY_RESET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerDailyResetS2C)
}

::google::protobuf::uint8* MsgPlayerDailyResetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerDailyResetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DAILY_RESET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerDailyResetS2C)
  return target;
}

int MsgPlayerDailyResetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DAILY_RESET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerDailyResetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerDailyResetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerDailyResetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerDailyResetS2C::MergeFrom(const MsgPlayerDailyResetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerDailyResetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerDailyResetS2C::CopyFrom(const MsgPlayerDailyResetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerDailyResetS2C::IsInitialized() const {

  return true;
}

void MsgPlayerDailyResetS2C::Swap(MsgPlayerDailyResetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerDailyResetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerDailyResetS2C_descriptor_;
  metadata.reflection = MsgPlayerDailyResetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerSlideBegin::kMsgTypeFieldNumber;
const int MsgPlayerSlideBegin::kObjIdFieldNumber;
const int MsgPlayerSlideBegin::kDirFieldNumber;
const int MsgPlayerSlideBegin::kDistanceFieldNumber;
const int MsgPlayerSlideBegin::kTimeFieldNumber;
#endif  // !_MSC_VER

MsgPlayerSlideBegin::MsgPlayerSlideBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerSlideBegin)
}

void MsgPlayerSlideBegin::InitAsDefaultInstance() {
}

MsgPlayerSlideBegin::MsgPlayerSlideBegin(const MsgPlayerSlideBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerSlideBegin)
}

void MsgPlayerSlideBegin::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4452;
  obj_id_ = 0;
  dir_ = 0;
  distance_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerSlideBegin::~MsgPlayerSlideBegin() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerSlideBegin)
  SharedDtor();
}

void MsgPlayerSlideBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerSlideBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerSlideBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerSlideBegin_descriptor_;
}

const MsgPlayerSlideBegin& MsgPlayerSlideBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerSlideBegin* MsgPlayerSlideBegin::default_instance_ = NULL;

MsgPlayerSlideBegin* MsgPlayerSlideBegin::New() const {
  return new MsgPlayerSlideBegin;
}

void MsgPlayerSlideBegin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerSlideBegin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(obj_id_, time_);
    msgtype_ = 4452;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerSlideBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerSlideBegin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SLIDE_BEGIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_obj_id;
        break;
      }

      // optional int32 obj_id = 2;
      case 2: {
        if (tag == 16) {
         parse_obj_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dir;
        break;
      }

      // optional int32 dir = 3;
      case 3: {
        if (tag == 24) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_distance;
        break;
      }

      // optional int32 distance = 4;
      case 4: {
        if (tag == 32) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerSlideBegin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerSlideBegin)
  return false;
#undef DO_
}

void MsgPlayerSlideBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerSlideBegin)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SLIDE_BEGIN];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 obj_id = 2;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->obj_id(), output);
  }

  // optional int32 dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dir(), output);
  }

  // optional int32 distance = 4;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->distance(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerSlideBegin)
}

::google::protobuf::uint8* MsgPlayerSlideBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerSlideBegin)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SLIDE_BEGIN];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 obj_id = 2;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->obj_id(), target);
  }

  // optional int32 dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dir(), target);
  }

  // optional int32 distance = 4;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->distance(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerSlideBegin)
  return target;
}

int MsgPlayerSlideBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SLIDE_BEGIN];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 obj_id = 2;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_id());
    }

    // optional int32 dir = 3;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dir());
    }

    // optional int32 distance = 4;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerSlideBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerSlideBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerSlideBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerSlideBegin::MergeFrom(const MsgPlayerSlideBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerSlideBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerSlideBegin::CopyFrom(const MsgPlayerSlideBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerSlideBegin::IsInitialized() const {

  return true;
}

void MsgPlayerSlideBegin::Swap(MsgPlayerSlideBegin* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(obj_id_, other->obj_id_);
    std::swap(dir_, other->dir_);
    std::swap(distance_, other->distance_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerSlideBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerSlideBegin_descriptor_;
  metadata.reflection = MsgPlayerSlideBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerSlideEnd::kMsgTypeFieldNumber;
const int MsgPlayerSlideEnd::kObjIdFieldNumber;
const int MsgPlayerSlideEnd::kPosXFieldNumber;
const int MsgPlayerSlideEnd::kPosYFieldNumber;
#endif  // !_MSC_VER

MsgPlayerSlideEnd::MsgPlayerSlideEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerSlideEnd)
}

void MsgPlayerSlideEnd::InitAsDefaultInstance() {
}

MsgPlayerSlideEnd::MsgPlayerSlideEnd(const MsgPlayerSlideEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerSlideEnd)
}

void MsgPlayerSlideEnd::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4453;
  obj_id_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerSlideEnd::~MsgPlayerSlideEnd() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerSlideEnd)
  SharedDtor();
}

void MsgPlayerSlideEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerSlideEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerSlideEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerSlideEnd_descriptor_;
}

const MsgPlayerSlideEnd& MsgPlayerSlideEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerSlideEnd* MsgPlayerSlideEnd::default_instance_ = NULL;

MsgPlayerSlideEnd* MsgPlayerSlideEnd::New() const {
  return new MsgPlayerSlideEnd;
}

void MsgPlayerSlideEnd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerSlideEnd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(obj_id_, pos_y_);
    msgtype_ = 4453;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerSlideEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerSlideEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SLIDE_END];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_obj_id;
        break;
      }

      // optional int32 obj_id = 2;
      case 2: {
        if (tag == 16) {
         parse_obj_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 3;
      case 3: {
        if (tag == 24) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 4;
      case 4: {
        if (tag == 32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerSlideEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerSlideEnd)
  return false;
#undef DO_
}

void MsgPlayerSlideEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerSlideEnd)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SLIDE_END];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 obj_id = 2;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->obj_id(), output);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_x(), output);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerSlideEnd)
}

::google::protobuf::uint8* MsgPlayerSlideEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerSlideEnd)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SLIDE_END];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 obj_id = 2;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->obj_id(), target);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_x(), target);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerSlideEnd)
  return target;
}

int MsgPlayerSlideEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_SLIDE_END];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 obj_id = 2;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_id());
    }

    // optional int32 pos_x = 3;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 4;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerSlideEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerSlideEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerSlideEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerSlideEnd::MergeFrom(const MsgPlayerSlideEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerSlideEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerSlideEnd::CopyFrom(const MsgPlayerSlideEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerSlideEnd::IsInitialized() const {

  return true;
}

void MsgPlayerSlideEnd::Swap(MsgPlayerSlideEnd* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(obj_id_, other->obj_id_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerSlideEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerSlideEnd_descriptor_;
  metadata.reflection = MsgPlayerSlideEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerAuthenticationC2S::kMsgTypeFieldNumber;
const int MsgPlayerAuthenticationC2S::kIsAdultFieldNumber;
#endif  // !_MSC_VER

MsgPlayerAuthenticationC2S::MsgPlayerAuthenticationC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerAuthenticationC2S)
}

void MsgPlayerAuthenticationC2S::InitAsDefaultInstance() {
}

MsgPlayerAuthenticationC2S::MsgPlayerAuthenticationC2S(const MsgPlayerAuthenticationC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerAuthenticationC2S)
}

void MsgPlayerAuthenticationC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 30033;
  is_adult_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerAuthenticationC2S::~MsgPlayerAuthenticationC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerAuthenticationC2S)
  SharedDtor();
}

void MsgPlayerAuthenticationC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerAuthenticationC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerAuthenticationC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerAuthenticationC2S_descriptor_;
}

const MsgPlayerAuthenticationC2S& MsgPlayerAuthenticationC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerAuthenticationC2S* MsgPlayerAuthenticationC2S::default_instance_ = NULL;

MsgPlayerAuthenticationC2S* MsgPlayerAuthenticationC2S::New() const {
  return new MsgPlayerAuthenticationC2S;
}

void MsgPlayerAuthenticationC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 30033;
    is_adult_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerAuthenticationC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerAuthenticationC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_AUTHENTICATION_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_adult;
        break;
      }

      // optional bool is_adult = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_is_adult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_adult_)));
          set_has_is_adult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerAuthenticationC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerAuthenticationC2S)
  return false;
#undef DO_
}

void MsgPlayerAuthenticationC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerAuthenticationC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_AUTHENTICATION_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional bool is_adult = 2 [default = false];
  if (has_is_adult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_adult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerAuthenticationC2S)
}

::google::protobuf::uint8* MsgPlayerAuthenticationC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerAuthenticationC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_AUTHENTICATION_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional bool is_adult = 2 [default = false];
  if (has_is_adult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_adult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerAuthenticationC2S)
  return target;
}

int MsgPlayerAuthenticationC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_AUTHENTICATION_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional bool is_adult = 2 [default = false];
    if (has_is_adult()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerAuthenticationC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerAuthenticationC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerAuthenticationC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerAuthenticationC2S::MergeFrom(const MsgPlayerAuthenticationC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_is_adult()) {
      set_is_adult(from.is_adult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerAuthenticationC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerAuthenticationC2S::CopyFrom(const MsgPlayerAuthenticationC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerAuthenticationC2S::IsInitialized() const {

  return true;
}

void MsgPlayerAuthenticationC2S::Swap(MsgPlayerAuthenticationC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(is_adult_, other->is_adult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerAuthenticationC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerAuthenticationC2S_descriptor_;
  metadata.reflection = MsgPlayerAuthenticationC2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgPlayerKickOutS2C_Reason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerKickOutS2C_Reason_descriptor_;
}
bool MsgPlayerKickOutS2C_Reason_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgPlayerKickOutS2C_Reason MsgPlayerKickOutS2C::ANTI_ADDICTION;
const MsgPlayerKickOutS2C_Reason MsgPlayerKickOutS2C::Reason_MIN;
const MsgPlayerKickOutS2C_Reason MsgPlayerKickOutS2C::Reason_MAX;
const int MsgPlayerKickOutS2C::Reason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgPlayerKickOutS2C::kMsgTypeFieldNumber;
const int MsgPlayerKickOutS2C::kResFieldNumber;
#endif  // !_MSC_VER

MsgPlayerKickOutS2C::MsgPlayerKickOutS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerKickOutS2C)
}

void MsgPlayerKickOutS2C::InitAsDefaultInstance() {
}

MsgPlayerKickOutS2C::MsgPlayerKickOutS2C(const MsgPlayerKickOutS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerKickOutS2C)
}

void MsgPlayerKickOutS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4455;
  res_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerKickOutS2C::~MsgPlayerKickOutS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerKickOutS2C)
  SharedDtor();
}

void MsgPlayerKickOutS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerKickOutS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerKickOutS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerKickOutS2C_descriptor_;
}

const MsgPlayerKickOutS2C& MsgPlayerKickOutS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerKickOutS2C* MsgPlayerKickOutS2C::default_instance_ = NULL;

MsgPlayerKickOutS2C* MsgPlayerKickOutS2C::New() const {
  return new MsgPlayerKickOutS2C;
}

void MsgPlayerKickOutS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 4455;
    res_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerKickOutS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerKickOutS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_KICK_OUT_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.MsgPlayerKickOutS2C.Reason res = 2 [default = ANTI_ADDICTION];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgPlayerKickOutS2C_Reason_IsValid(value)) {
            set_res(static_cast< ::MsgPB::MsgPlayerKickOutS2C_Reason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerKickOutS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerKickOutS2C)
  return false;
#undef DO_
}

void MsgPlayerKickOutS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerKickOutS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_KICK_OUT_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.MsgPlayerKickOutS2C.Reason res = 2 [default = ANTI_ADDICTION];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerKickOutS2C)
}

::google::protobuf::uint8* MsgPlayerKickOutS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerKickOutS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_KICK_OUT_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.MsgPlayerKickOutS2C.Reason res = 2 [default = ANTI_ADDICTION];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerKickOutS2C)
  return target;
}

int MsgPlayerKickOutS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_KICK_OUT_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.MsgPlayerKickOutS2C.Reason res = 2 [default = ANTI_ADDICTION];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerKickOutS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerKickOutS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerKickOutS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerKickOutS2C::MergeFrom(const MsgPlayerKickOutS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerKickOutS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerKickOutS2C::CopyFrom(const MsgPlayerKickOutS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerKickOutS2C::IsInitialized() const {

  return true;
}

void MsgPlayerKickOutS2C::Swap(MsgPlayerKickOutS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerKickOutS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerKickOutS2C_descriptor_;
  metadata.reflection = MsgPlayerKickOutS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryPlayerAccuOnlineTimeC2S::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgQueryPlayerAccuOnlineTimeC2S::MsgQueryPlayerAccuOnlineTimeC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgQueryPlayerAccuOnlineTimeC2S)
}

void MsgQueryPlayerAccuOnlineTimeC2S::InitAsDefaultInstance() {
}

MsgQueryPlayerAccuOnlineTimeC2S::MsgQueryPlayerAccuOnlineTimeC2S(const MsgQueryPlayerAccuOnlineTimeC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgQueryPlayerAccuOnlineTimeC2S)
}

void MsgQueryPlayerAccuOnlineTimeC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 30034;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryPlayerAccuOnlineTimeC2S::~MsgQueryPlayerAccuOnlineTimeC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgQueryPlayerAccuOnlineTimeC2S)
  SharedDtor();
}

void MsgQueryPlayerAccuOnlineTimeC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryPlayerAccuOnlineTimeC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryPlayerAccuOnlineTimeC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryPlayerAccuOnlineTimeC2S_descriptor_;
}

const MsgQueryPlayerAccuOnlineTimeC2S& MsgQueryPlayerAccuOnlineTimeC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgQueryPlayerAccuOnlineTimeC2S* MsgQueryPlayerAccuOnlineTimeC2S::default_instance_ = NULL;

MsgQueryPlayerAccuOnlineTimeC2S* MsgQueryPlayerAccuOnlineTimeC2S::New() const {
  return new MsgQueryPlayerAccuOnlineTimeC2S;
}

void MsgQueryPlayerAccuOnlineTimeC2S::Clear() {
  msgtype_ = 30034;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryPlayerAccuOnlineTimeC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgQueryPlayerAccuOnlineTimeC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_ACCU_ONLINE_TIME_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgQueryPlayerAccuOnlineTimeC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgQueryPlayerAccuOnlineTimeC2S)
  return false;
#undef DO_
}

void MsgQueryPlayerAccuOnlineTimeC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgQueryPlayerAccuOnlineTimeC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_ACCU_ONLINE_TIME_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgQueryPlayerAccuOnlineTimeC2S)
}

::google::protobuf::uint8* MsgQueryPlayerAccuOnlineTimeC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgQueryPlayerAccuOnlineTimeC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_ACCU_ONLINE_TIME_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgQueryPlayerAccuOnlineTimeC2S)
  return target;
}

int MsgQueryPlayerAccuOnlineTimeC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_ACCU_ONLINE_TIME_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryPlayerAccuOnlineTimeC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryPlayerAccuOnlineTimeC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryPlayerAccuOnlineTimeC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryPlayerAccuOnlineTimeC2S::MergeFrom(const MsgQueryPlayerAccuOnlineTimeC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryPlayerAccuOnlineTimeC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryPlayerAccuOnlineTimeC2S::CopyFrom(const MsgQueryPlayerAccuOnlineTimeC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryPlayerAccuOnlineTimeC2S::IsInitialized() const {

  return true;
}

void MsgQueryPlayerAccuOnlineTimeC2S::Swap(MsgQueryPlayerAccuOnlineTimeC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryPlayerAccuOnlineTimeC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryPlayerAccuOnlineTimeC2S_descriptor_;
  metadata.reflection = MsgQueryPlayerAccuOnlineTimeC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryPlayerAccuOnlineTimeS2C::kMsgTypeFieldNumber;
const int MsgQueryPlayerAccuOnlineTimeS2C::kAccuTimeFieldNumber;
#endif  // !_MSC_VER

MsgQueryPlayerAccuOnlineTimeS2C::MsgQueryPlayerAccuOnlineTimeS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgQueryPlayerAccuOnlineTimeS2C)
}

void MsgQueryPlayerAccuOnlineTimeS2C::InitAsDefaultInstance() {
}

MsgQueryPlayerAccuOnlineTimeS2C::MsgQueryPlayerAccuOnlineTimeS2C(const MsgQueryPlayerAccuOnlineTimeS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgQueryPlayerAccuOnlineTimeS2C)
}

void MsgQueryPlayerAccuOnlineTimeS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4456;
  accu_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryPlayerAccuOnlineTimeS2C::~MsgQueryPlayerAccuOnlineTimeS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgQueryPlayerAccuOnlineTimeS2C)
  SharedDtor();
}

void MsgQueryPlayerAccuOnlineTimeS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryPlayerAccuOnlineTimeS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryPlayerAccuOnlineTimeS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryPlayerAccuOnlineTimeS2C_descriptor_;
}

const MsgQueryPlayerAccuOnlineTimeS2C& MsgQueryPlayerAccuOnlineTimeS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgQueryPlayerAccuOnlineTimeS2C* MsgQueryPlayerAccuOnlineTimeS2C::default_instance_ = NULL;

MsgQueryPlayerAccuOnlineTimeS2C* MsgQueryPlayerAccuOnlineTimeS2C::New() const {
  return new MsgQueryPlayerAccuOnlineTimeS2C;
}

void MsgQueryPlayerAccuOnlineTimeS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 4456;
    accu_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryPlayerAccuOnlineTimeS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgQueryPlayerAccuOnlineTimeS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_ACCU_ONLINE_TIME_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accu_time;
        break;
      }

      // optional int32 accu_time = 2;
      case 2: {
        if (tag == 16) {
         parse_accu_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accu_time_)));
          set_has_accu_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgQueryPlayerAccuOnlineTimeS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgQueryPlayerAccuOnlineTimeS2C)
  return false;
#undef DO_
}

void MsgQueryPlayerAccuOnlineTimeS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgQueryPlayerAccuOnlineTimeS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_ACCU_ONLINE_TIME_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 accu_time = 2;
  if (has_accu_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->accu_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgQueryPlayerAccuOnlineTimeS2C)
}

::google::protobuf::uint8* MsgQueryPlayerAccuOnlineTimeS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgQueryPlayerAccuOnlineTimeS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_ACCU_ONLINE_TIME_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 accu_time = 2;
  if (has_accu_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->accu_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgQueryPlayerAccuOnlineTimeS2C)
  return target;
}

int MsgQueryPlayerAccuOnlineTimeS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_PLAYER_ACCU_ONLINE_TIME_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 accu_time = 2;
    if (has_accu_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accu_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryPlayerAccuOnlineTimeS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryPlayerAccuOnlineTimeS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryPlayerAccuOnlineTimeS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryPlayerAccuOnlineTimeS2C::MergeFrom(const MsgQueryPlayerAccuOnlineTimeS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_accu_time()) {
      set_accu_time(from.accu_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryPlayerAccuOnlineTimeS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryPlayerAccuOnlineTimeS2C::CopyFrom(const MsgQueryPlayerAccuOnlineTimeS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryPlayerAccuOnlineTimeS2C::IsInitialized() const {

  return true;
}

void MsgQueryPlayerAccuOnlineTimeS2C::Swap(MsgQueryPlayerAccuOnlineTimeS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(accu_time_, other->accu_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryPlayerAccuOnlineTimeS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryPlayerAccuOnlineTimeS2C_descriptor_;
  metadata.reflection = MsgQueryPlayerAccuOnlineTimeS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerPrivateTaskFlagGetC2S::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgPlayerPrivateTaskFlagGetC2S::MsgPlayerPrivateTaskFlagGetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerPrivateTaskFlagGetC2S)
}

void MsgPlayerPrivateTaskFlagGetC2S::InitAsDefaultInstance() {
}

MsgPlayerPrivateTaskFlagGetC2S::MsgPlayerPrivateTaskFlagGetC2S(const MsgPlayerPrivateTaskFlagGetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerPrivateTaskFlagGetC2S)
}

void MsgPlayerPrivateTaskFlagGetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4457;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerPrivateTaskFlagGetC2S::~MsgPlayerPrivateTaskFlagGetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerPrivateTaskFlagGetC2S)
  SharedDtor();
}

void MsgPlayerPrivateTaskFlagGetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerPrivateTaskFlagGetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerPrivateTaskFlagGetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerPrivateTaskFlagGetC2S_descriptor_;
}

const MsgPlayerPrivateTaskFlagGetC2S& MsgPlayerPrivateTaskFlagGetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerPrivateTaskFlagGetC2S* MsgPlayerPrivateTaskFlagGetC2S::default_instance_ = NULL;

MsgPlayerPrivateTaskFlagGetC2S* MsgPlayerPrivateTaskFlagGetC2S::New() const {
  return new MsgPlayerPrivateTaskFlagGetC2S;
}

void MsgPlayerPrivateTaskFlagGetC2S::Clear() {
  msgtype_ = 4457;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerPrivateTaskFlagGetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerPrivateTaskFlagGetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_GET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerPrivateTaskFlagGetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerPrivateTaskFlagGetC2S)
  return false;
#undef DO_
}

void MsgPlayerPrivateTaskFlagGetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerPrivateTaskFlagGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_GET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerPrivateTaskFlagGetC2S)
}

::google::protobuf::uint8* MsgPlayerPrivateTaskFlagGetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerPrivateTaskFlagGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_GET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerPrivateTaskFlagGetC2S)
  return target;
}

int MsgPlayerPrivateTaskFlagGetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_GET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerPrivateTaskFlagGetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerPrivateTaskFlagGetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerPrivateTaskFlagGetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerPrivateTaskFlagGetC2S::MergeFrom(const MsgPlayerPrivateTaskFlagGetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerPrivateTaskFlagGetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerPrivateTaskFlagGetC2S::CopyFrom(const MsgPlayerPrivateTaskFlagGetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerPrivateTaskFlagGetC2S::IsInitialized() const {

  return true;
}

void MsgPlayerPrivateTaskFlagGetC2S::Swap(MsgPlayerPrivateTaskFlagGetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerPrivateTaskFlagGetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerPrivateTaskFlagGetC2S_descriptor_;
  metadata.reflection = MsgPlayerPrivateTaskFlagGetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerPrivateTaskFlagGetS2C::kMsgTypeFieldNumber;
const int MsgPlayerPrivateTaskFlagGetS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgPlayerPrivateTaskFlagGetS2C::MsgPlayerPrivateTaskFlagGetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerPrivateTaskFlagGetS2C)
}

void MsgPlayerPrivateTaskFlagGetS2C::InitAsDefaultInstance() {
}

MsgPlayerPrivateTaskFlagGetS2C::MsgPlayerPrivateTaskFlagGetS2C(const MsgPlayerPrivateTaskFlagGetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerPrivateTaskFlagGetS2C)
}

void MsgPlayerPrivateTaskFlagGetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4458;
  data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerPrivateTaskFlagGetS2C::~MsgPlayerPrivateTaskFlagGetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerPrivateTaskFlagGetS2C)
  SharedDtor();
}

void MsgPlayerPrivateTaskFlagGetS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerPrivateTaskFlagGetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerPrivateTaskFlagGetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerPrivateTaskFlagGetS2C_descriptor_;
}

const MsgPlayerPrivateTaskFlagGetS2C& MsgPlayerPrivateTaskFlagGetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerPrivateTaskFlagGetS2C* MsgPlayerPrivateTaskFlagGetS2C::default_instance_ = NULL;

MsgPlayerPrivateTaskFlagGetS2C* MsgPlayerPrivateTaskFlagGetS2C::New() const {
  return new MsgPlayerPrivateTaskFlagGetS2C;
}

void MsgPlayerPrivateTaskFlagGetS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 4458;
    data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerPrivateTaskFlagGetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerPrivateTaskFlagGetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_GET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }

      // optional int64 data = 2;
      case 2: {
        if (tag == 16) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerPrivateTaskFlagGetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerPrivateTaskFlagGetS2C)
  return false;
#undef DO_
}

void MsgPlayerPrivateTaskFlagGetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerPrivateTaskFlagGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_GET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerPrivateTaskFlagGetS2C)
}

::google::protobuf::uint8* MsgPlayerPrivateTaskFlagGetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerPrivateTaskFlagGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_GET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerPrivateTaskFlagGetS2C)
  return target;
}

int MsgPlayerPrivateTaskFlagGetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_GET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerPrivateTaskFlagGetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerPrivateTaskFlagGetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerPrivateTaskFlagGetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerPrivateTaskFlagGetS2C::MergeFrom(const MsgPlayerPrivateTaskFlagGetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerPrivateTaskFlagGetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerPrivateTaskFlagGetS2C::CopyFrom(const MsgPlayerPrivateTaskFlagGetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerPrivateTaskFlagGetS2C::IsInitialized() const {

  return true;
}

void MsgPlayerPrivateTaskFlagGetS2C::Swap(MsgPlayerPrivateTaskFlagGetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerPrivateTaskFlagGetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerPrivateTaskFlagGetS2C_descriptor_;
  metadata.reflection = MsgPlayerPrivateTaskFlagGetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerPrivateTaskFlagTrigC2S::kMsgTypeFieldNumber;
const int MsgPlayerPrivateTaskFlagTrigC2S::kFlagFieldNumber;
#endif  // !_MSC_VER

MsgPlayerPrivateTaskFlagTrigC2S::MsgPlayerPrivateTaskFlagTrigC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerPrivateTaskFlagTrigC2S)
}

void MsgPlayerPrivateTaskFlagTrigC2S::InitAsDefaultInstance() {
}

MsgPlayerPrivateTaskFlagTrigC2S::MsgPlayerPrivateTaskFlagTrigC2S(const MsgPlayerPrivateTaskFlagTrigC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerPrivateTaskFlagTrigC2S)
}

void MsgPlayerPrivateTaskFlagTrigC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4459;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerPrivateTaskFlagTrigC2S::~MsgPlayerPrivateTaskFlagTrigC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerPrivateTaskFlagTrigC2S)
  SharedDtor();
}

void MsgPlayerPrivateTaskFlagTrigC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerPrivateTaskFlagTrigC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerPrivateTaskFlagTrigC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerPrivateTaskFlagTrigC2S_descriptor_;
}

const MsgPlayerPrivateTaskFlagTrigC2S& MsgPlayerPrivateTaskFlagTrigC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerPrivateTaskFlagTrigC2S* MsgPlayerPrivateTaskFlagTrigC2S::default_instance_ = NULL;

MsgPlayerPrivateTaskFlagTrigC2S* MsgPlayerPrivateTaskFlagTrigC2S::New() const {
  return new MsgPlayerPrivateTaskFlagTrigC2S;
}

void MsgPlayerPrivateTaskFlagTrigC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 4459;
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerPrivateTaskFlagTrigC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerPrivateTaskFlagTrigC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_TRIG_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerPrivateTaskFlagTrigC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerPrivateTaskFlagTrigC2S)
  return false;
#undef DO_
}

void MsgPlayerPrivateTaskFlagTrigC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerPrivateTaskFlagTrigC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_TRIG_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerPrivateTaskFlagTrigC2S)
}

::google::protobuf::uint8* MsgPlayerPrivateTaskFlagTrigC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerPrivateTaskFlagTrigC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_TRIG_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerPrivateTaskFlagTrigC2S)
  return target;
}

int MsgPlayerPrivateTaskFlagTrigC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_TRIG_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerPrivateTaskFlagTrigC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerPrivateTaskFlagTrigC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerPrivateTaskFlagTrigC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerPrivateTaskFlagTrigC2S::MergeFrom(const MsgPlayerPrivateTaskFlagTrigC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerPrivateTaskFlagTrigC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerPrivateTaskFlagTrigC2S::CopyFrom(const MsgPlayerPrivateTaskFlagTrigC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerPrivateTaskFlagTrigC2S::IsInitialized() const {

  return true;
}

void MsgPlayerPrivateTaskFlagTrigC2S::Swap(MsgPlayerPrivateTaskFlagTrigC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerPrivateTaskFlagTrigC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerPrivateTaskFlagTrigC2S_descriptor_;
  metadata.reflection = MsgPlayerPrivateTaskFlagTrigC2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgPlayerPrivateTaskFlagTrigS2C_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerPrivateTaskFlagTrigS2C_RESULT_descriptor_;
}
bool MsgPlayerPrivateTaskFlagTrigS2C_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgPlayerPrivateTaskFlagTrigS2C_RESULT MsgPlayerPrivateTaskFlagTrigS2C::SUC;
const MsgPlayerPrivateTaskFlagTrigS2C_RESULT MsgPlayerPrivateTaskFlagTrigS2C::FAIL;
const MsgPlayerPrivateTaskFlagTrigS2C_RESULT MsgPlayerPrivateTaskFlagTrigS2C::REPEAT;
const MsgPlayerPrivateTaskFlagTrigS2C_RESULT MsgPlayerPrivateTaskFlagTrigS2C::RESULT_MIN;
const MsgPlayerPrivateTaskFlagTrigS2C_RESULT MsgPlayerPrivateTaskFlagTrigS2C::RESULT_MAX;
const int MsgPlayerPrivateTaskFlagTrigS2C::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgPlayerPrivateTaskFlagTrigS2C::kMsgTypeFieldNumber;
const int MsgPlayerPrivateTaskFlagTrigS2C::kDataFieldNumber;
const int MsgPlayerPrivateTaskFlagTrigS2C::kResFieldNumber;
#endif  // !_MSC_VER

MsgPlayerPrivateTaskFlagTrigS2C::MsgPlayerPrivateTaskFlagTrigS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerPrivateTaskFlagTrigS2C)
}

void MsgPlayerPrivateTaskFlagTrigS2C::InitAsDefaultInstance() {
}

MsgPlayerPrivateTaskFlagTrigS2C::MsgPlayerPrivateTaskFlagTrigS2C(const MsgPlayerPrivateTaskFlagTrigS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerPrivateTaskFlagTrigS2C)
}

void MsgPlayerPrivateTaskFlagTrigS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4460;
  data_ = GOOGLE_LONGLONG(0);
  res_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerPrivateTaskFlagTrigS2C::~MsgPlayerPrivateTaskFlagTrigS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerPrivateTaskFlagTrigS2C)
  SharedDtor();
}

void MsgPlayerPrivateTaskFlagTrigS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerPrivateTaskFlagTrigS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerPrivateTaskFlagTrigS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerPrivateTaskFlagTrigS2C_descriptor_;
}

const MsgPlayerPrivateTaskFlagTrigS2C& MsgPlayerPrivateTaskFlagTrigS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerPrivateTaskFlagTrigS2C* MsgPlayerPrivateTaskFlagTrigS2C::default_instance_ = NULL;

MsgPlayerPrivateTaskFlagTrigS2C* MsgPlayerPrivateTaskFlagTrigS2C::New() const {
  return new MsgPlayerPrivateTaskFlagTrigS2C;
}

void MsgPlayerPrivateTaskFlagTrigS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 4460;
    data_ = GOOGLE_LONGLONG(0);
    res_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerPrivateTaskFlagTrigS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerPrivateTaskFlagTrigS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_TRIG_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }

      // optional int64 data = 2;
      case 2: {
        if (tag == 16) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }

      // optional .MsgPB.MsgPlayerPrivateTaskFlagTrigS2C.RESULT res = 3 [default = FAIL];
      case 3: {
        if (tag == 24) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgPlayerPrivateTaskFlagTrigS2C_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::MsgPlayerPrivateTaskFlagTrigS2C_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerPrivateTaskFlagTrigS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerPrivateTaskFlagTrigS2C)
  return false;
#undef DO_
}

void MsgPlayerPrivateTaskFlagTrigS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerPrivateTaskFlagTrigS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_TRIG_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->data(), output);
  }

  // optional .MsgPB.MsgPlayerPrivateTaskFlagTrigS2C.RESULT res = 3 [default = FAIL];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerPrivateTaskFlagTrigS2C)
}

::google::protobuf::uint8* MsgPlayerPrivateTaskFlagTrigS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerPrivateTaskFlagTrigS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_TRIG_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->data(), target);
  }

  // optional .MsgPB.MsgPlayerPrivateTaskFlagTrigS2C.RESULT res = 3 [default = FAIL];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerPrivateTaskFlagTrigS2C)
  return target;
}

int MsgPlayerPrivateTaskFlagTrigS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_PRIVATE_TASK_FLAG_TRIG_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data());
    }

    // optional .MsgPB.MsgPlayerPrivateTaskFlagTrigS2C.RESULT res = 3 [default = FAIL];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerPrivateTaskFlagTrigS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerPrivateTaskFlagTrigS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerPrivateTaskFlagTrigS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerPrivateTaskFlagTrigS2C::MergeFrom(const MsgPlayerPrivateTaskFlagTrigS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerPrivateTaskFlagTrigS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerPrivateTaskFlagTrigS2C::CopyFrom(const MsgPlayerPrivateTaskFlagTrigS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerPrivateTaskFlagTrigS2C::IsInitialized() const {

  return true;
}

void MsgPlayerPrivateTaskFlagTrigS2C::Swap(MsgPlayerPrivateTaskFlagTrigS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(data_, other->data_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerPrivateTaskFlagTrigS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerPrivateTaskFlagTrigS2C_descriptor_;
  metadata.reflection = MsgPlayerPrivateTaskFlagTrigS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGetPrivateMapBotC2S::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgGetPrivateMapBotC2S::MsgGetPrivateMapBotC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgGetPrivateMapBotC2S)
}

void MsgGetPrivateMapBotC2S::InitAsDefaultInstance() {
}

MsgGetPrivateMapBotC2S::MsgGetPrivateMapBotC2S(const MsgGetPrivateMapBotC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgGetPrivateMapBotC2S)
}

void MsgGetPrivateMapBotC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4461;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGetPrivateMapBotC2S::~MsgGetPrivateMapBotC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgGetPrivateMapBotC2S)
  SharedDtor();
}

void MsgGetPrivateMapBotC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGetPrivateMapBotC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGetPrivateMapBotC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGetPrivateMapBotC2S_descriptor_;
}

const MsgGetPrivateMapBotC2S& MsgGetPrivateMapBotC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgGetPrivateMapBotC2S* MsgGetPrivateMapBotC2S::default_instance_ = NULL;

MsgGetPrivateMapBotC2S* MsgGetPrivateMapBotC2S::New() const {
  return new MsgGetPrivateMapBotC2S;
}

void MsgGetPrivateMapBotC2S::Clear() {
  msgtype_ = 4461;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGetPrivateMapBotC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgGetPrivateMapBotC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GET_PRIVATE_MAP_BOT_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgGetPrivateMapBotC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgGetPrivateMapBotC2S)
  return false;
#undef DO_
}

void MsgGetPrivateMapBotC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgGetPrivateMapBotC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GET_PRIVATE_MAP_BOT_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgGetPrivateMapBotC2S)
}

::google::protobuf::uint8* MsgGetPrivateMapBotC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgGetPrivateMapBotC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GET_PRIVATE_MAP_BOT_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgGetPrivateMapBotC2S)
  return target;
}

int MsgGetPrivateMapBotC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GET_PRIVATE_MAP_BOT_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGetPrivateMapBotC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGetPrivateMapBotC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGetPrivateMapBotC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGetPrivateMapBotC2S::MergeFrom(const MsgGetPrivateMapBotC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGetPrivateMapBotC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetPrivateMapBotC2S::CopyFrom(const MsgGetPrivateMapBotC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetPrivateMapBotC2S::IsInitialized() const {

  return true;
}

void MsgGetPrivateMapBotC2S::Swap(MsgGetPrivateMapBotC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGetPrivateMapBotC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGetPrivateMapBotC2S_descriptor_;
  metadata.reflection = MsgGetPrivateMapBotC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGetPrivateMapBotS2C_BotData::kIggidFieldNumber;
const int MsgGetPrivateMapBotS2C_BotData::kNicknameFieldNumber;
const int MsgGetPrivateMapBotS2C_BotData::kLevFieldNumber;
const int MsgGetPrivateMapBotS2C_BotData::kGenderFieldNumber;
const int MsgGetPrivateMapBotS2C_BotData::kSkinColorFieldNumber;
const int MsgGetPrivateMapBotS2C_BotData::kHairFieldNumber;
const int MsgGetPrivateMapBotS2C_BotData::kHairColorFieldNumber;
const int MsgGetPrivateMapBotS2C_BotData::kEquipsFieldNumber;
#endif  // !_MSC_VER

MsgGetPrivateMapBotS2C_BotData::MsgGetPrivateMapBotS2C_BotData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgGetPrivateMapBotS2C.BotData)
}

void MsgGetPrivateMapBotS2C_BotData::InitAsDefaultInstance() {
}

MsgGetPrivateMapBotS2C_BotData::MsgGetPrivateMapBotS2C_BotData(const MsgGetPrivateMapBotS2C_BotData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgGetPrivateMapBotS2C.BotData)
}

void MsgGetPrivateMapBotS2C_BotData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lev_ = 0;
  gender_ = 0;
  skincolor_ = 0;
  hair_ = 0;
  haircolor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGetPrivateMapBotS2C_BotData::~MsgGetPrivateMapBotS2C_BotData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgGetPrivateMapBotS2C.BotData)
  SharedDtor();
}

void MsgGetPrivateMapBotS2C_BotData::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void MsgGetPrivateMapBotS2C_BotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGetPrivateMapBotS2C_BotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGetPrivateMapBotS2C_BotData_descriptor_;
}

const MsgGetPrivateMapBotS2C_BotData& MsgGetPrivateMapBotS2C_BotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgGetPrivateMapBotS2C_BotData* MsgGetPrivateMapBotS2C_BotData::default_instance_ = NULL;

MsgGetPrivateMapBotS2C_BotData* MsgGetPrivateMapBotS2C_BotData::New() const {
  return new MsgGetPrivateMapBotS2C_BotData;
}

void MsgGetPrivateMapBotS2C_BotData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGetPrivateMapBotS2C_BotData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(lev_, hair_);
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    haircolor_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGetPrivateMapBotS2C_BotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgGetPrivateMapBotS2C.BotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iggid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lev;
        break;
      }

      // optional int32 lev = 3;
      case 3: {
        if (tag == 24) {
         parse_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lev_)));
          set_has_lev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional int32 gender = 4;
      case 4: {
        if (tag == 32) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skinColor;
        break;
      }

      // optional int32 skinColor = 5;
      case 5: {
        if (tag == 40) {
         parse_skinColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skincolor_)));
          set_has_skincolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hair;
        break;
      }

      // optional int32 hair = 6;
      case 6: {
        if (tag == 48) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hairColor;
        break;
      }

      // optional int32 hairColor = 7;
      case 7: {
        if (tag == 56) {
         parse_hairColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_equips;
        break;
      }

      // repeated int32 equips = 8;
      case 8: {
        if (tag == 64) {
         parse_equips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_equips())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equips())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_equips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgGetPrivateMapBotS2C.BotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgGetPrivateMapBotS2C.BotData)
  return false;
#undef DO_
}

void MsgGetPrivateMapBotS2C_BotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgGetPrivateMapBotS2C.BotData)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iggid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 lev = 3;
  if (has_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lev(), output);
  }

  // optional int32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gender(), output);
  }

  // optional int32 skinColor = 5;
  if (has_skincolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skincolor(), output);
  }

  // optional int32 hair = 6;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hair(), output);
  }

  // optional int32 hairColor = 7;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->haircolor(), output);
  }

  // repeated int32 equips = 8;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgGetPrivateMapBotS2C.BotData)
}

::google::protobuf::uint8* MsgGetPrivateMapBotS2C_BotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgGetPrivateMapBotS2C.BotData)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iggid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 lev = 3;
  if (has_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lev(), target);
  }

  // optional int32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gender(), target);
  }

  // optional int32 skinColor = 5;
  if (has_skincolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skincolor(), target);
  }

  // optional int32 hair = 6;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hair(), target);
  }

  // optional int32 hairColor = 7;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->haircolor(), target);
  }

  // repeated int32 equips = 8;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgGetPrivateMapBotS2C.BotData)
  return target;
}

int MsgGetPrivateMapBotS2C_BotData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iggid = 1;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 lev = 3;
    if (has_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lev());
    }

    // optional int32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 skinColor = 5;
    if (has_skincolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skincolor());
    }

    // optional int32 hair = 6;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // optional int32 hairColor = 7;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haircolor());
    }

  }
  // repeated int32 equips = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->equips_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equips(i));
    }
    total_size += 1 * this->equips_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGetPrivateMapBotS2C_BotData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGetPrivateMapBotS2C_BotData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGetPrivateMapBotS2C_BotData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGetPrivateMapBotS2C_BotData::MergeFrom(const MsgGetPrivateMapBotS2C_BotData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_lev()) {
      set_lev(from.lev());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_skincolor()) {
      set_skincolor(from.skincolor());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGetPrivateMapBotS2C_BotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetPrivateMapBotS2C_BotData::CopyFrom(const MsgGetPrivateMapBotS2C_BotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetPrivateMapBotS2C_BotData::IsInitialized() const {

  return true;
}

void MsgGetPrivateMapBotS2C_BotData::Swap(MsgGetPrivateMapBotS2C_BotData* other) {
  if (other != this) {
    std::swap(iggid_, other->iggid_);
    std::swap(nickname_, other->nickname_);
    std::swap(lev_, other->lev_);
    std::swap(gender_, other->gender_);
    std::swap(skincolor_, other->skincolor_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGetPrivateMapBotS2C_BotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGetPrivateMapBotS2C_BotData_descriptor_;
  metadata.reflection = MsgGetPrivateMapBotS2C_BotData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgGetPrivateMapBotS2C::kMsgTypeFieldNumber;
const int MsgGetPrivateMapBotS2C::kBotFieldNumber;
#endif  // !_MSC_VER

MsgGetPrivateMapBotS2C::MsgGetPrivateMapBotS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgGetPrivateMapBotS2C)
}

void MsgGetPrivateMapBotS2C::InitAsDefaultInstance() {
}

MsgGetPrivateMapBotS2C::MsgGetPrivateMapBotS2C(const MsgGetPrivateMapBotS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgGetPrivateMapBotS2C)
}

void MsgGetPrivateMapBotS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4462;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGetPrivateMapBotS2C::~MsgGetPrivateMapBotS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgGetPrivateMapBotS2C)
  SharedDtor();
}

void MsgGetPrivateMapBotS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGetPrivateMapBotS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGetPrivateMapBotS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGetPrivateMapBotS2C_descriptor_;
}

const MsgGetPrivateMapBotS2C& MsgGetPrivateMapBotS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgGetPrivateMapBotS2C* MsgGetPrivateMapBotS2C::default_instance_ = NULL;

MsgGetPrivateMapBotS2C* MsgGetPrivateMapBotS2C::New() const {
  return new MsgGetPrivateMapBotS2C;
}

void MsgGetPrivateMapBotS2C::Clear() {
  msgtype_ = 4462;
  bot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGetPrivateMapBotS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgGetPrivateMapBotS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GET_PRIVATE_MAP_BOT_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bot;
        break;
      }

      // repeated .MsgPB.MsgGetPrivateMapBotS2C.BotData bot = 2;
      case 2: {
        if (tag == 18) {
         parse_bot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bot;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgGetPrivateMapBotS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgGetPrivateMapBotS2C)
  return false;
#undef DO_
}

void MsgGetPrivateMapBotS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgGetPrivateMapBotS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GET_PRIVATE_MAP_BOT_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // repeated .MsgPB.MsgGetPrivateMapBotS2C.BotData bot = 2;
  for (int i = 0; i < this->bot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bot(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgGetPrivateMapBotS2C)
}

::google::protobuf::uint8* MsgGetPrivateMapBotS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgGetPrivateMapBotS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GET_PRIVATE_MAP_BOT_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // repeated .MsgPB.MsgGetPrivateMapBotS2C.BotData bot = 2;
  for (int i = 0; i < this->bot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bot(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgGetPrivateMapBotS2C)
  return target;
}

int MsgGetPrivateMapBotS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GET_PRIVATE_MAP_BOT_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  // repeated .MsgPB.MsgGetPrivateMapBotS2C.BotData bot = 2;
  total_size += 1 * this->bot_size();
  for (int i = 0; i < this->bot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGetPrivateMapBotS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGetPrivateMapBotS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGetPrivateMapBotS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGetPrivateMapBotS2C::MergeFrom(const MsgGetPrivateMapBotS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  bot_.MergeFrom(from.bot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGetPrivateMapBotS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetPrivateMapBotS2C::CopyFrom(const MsgGetPrivateMapBotS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetPrivateMapBotS2C::IsInitialized() const {

  return true;
}

void MsgGetPrivateMapBotS2C::Swap(MsgGetPrivateMapBotS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    bot_.Swap(&other->bot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGetPrivateMapBotS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGetPrivateMapBotS2C_descriptor_;
  metadata.reflection = MsgGetPrivateMapBotS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGotoPrivateBotHomeC2S::kMsgTypeFieldNumber;
const int MsgGotoPrivateBotHomeC2S::kTargetIggidFieldNumber;
#endif  // !_MSC_VER

MsgGotoPrivateBotHomeC2S::MsgGotoPrivateBotHomeC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgGotoPrivateBotHomeC2S)
}

void MsgGotoPrivateBotHomeC2S::InitAsDefaultInstance() {
}

MsgGotoPrivateBotHomeC2S::MsgGotoPrivateBotHomeC2S(const MsgGotoPrivateBotHomeC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgGotoPrivateBotHomeC2S)
}

void MsgGotoPrivateBotHomeC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 30036;
  target_iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGotoPrivateBotHomeC2S::~MsgGotoPrivateBotHomeC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgGotoPrivateBotHomeC2S)
  SharedDtor();
}

void MsgGotoPrivateBotHomeC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGotoPrivateBotHomeC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGotoPrivateBotHomeC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGotoPrivateBotHomeC2S_descriptor_;
}

const MsgGotoPrivateBotHomeC2S& MsgGotoPrivateBotHomeC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgGotoPrivateBotHomeC2S* MsgGotoPrivateBotHomeC2S::default_instance_ = NULL;

MsgGotoPrivateBotHomeC2S* MsgGotoPrivateBotHomeC2S::New() const {
  return new MsgGotoPrivateBotHomeC2S;
}

void MsgGotoPrivateBotHomeC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 30036;
    target_iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGotoPrivateBotHomeC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgGotoPrivateBotHomeC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GO_TO_PRIVATE_BOT_HOME_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_iggid;
        break;
      }

      // required int64 target_iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_target_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_iggid_)));
          set_has_target_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgGotoPrivateBotHomeC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgGotoPrivateBotHomeC2S)
  return false;
#undef DO_
}

void MsgGotoPrivateBotHomeC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgGotoPrivateBotHomeC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GO_TO_PRIVATE_BOT_HOME_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required int64 target_iggid = 2;
  if (has_target_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->target_iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgGotoPrivateBotHomeC2S)
}

::google::protobuf::uint8* MsgGotoPrivateBotHomeC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgGotoPrivateBotHomeC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GO_TO_PRIVATE_BOT_HOME_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // required int64 target_iggid = 2;
  if (has_target_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->target_iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgGotoPrivateBotHomeC2S)
  return target;
}

int MsgGotoPrivateBotHomeC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GO_TO_PRIVATE_BOT_HOME_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // required int64 target_iggid = 2;
    if (has_target_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGotoPrivateBotHomeC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGotoPrivateBotHomeC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGotoPrivateBotHomeC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGotoPrivateBotHomeC2S::MergeFrom(const MsgGotoPrivateBotHomeC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_target_iggid()) {
      set_target_iggid(from.target_iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGotoPrivateBotHomeC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGotoPrivateBotHomeC2S::CopyFrom(const MsgGotoPrivateBotHomeC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGotoPrivateBotHomeC2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void MsgGotoPrivateBotHomeC2S::Swap(MsgGotoPrivateBotHomeC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(target_iggid_, other->target_iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGotoPrivateBotHomeC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGotoPrivateBotHomeC2S_descriptor_;
  metadata.reflection = MsgGotoPrivateBotHomeC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerModifyAvatorC2S::kMsgTypeFieldNumber;
const int MsgPlayerModifyAvatorC2S::kSkinColorFieldNumber;
const int MsgPlayerModifyAvatorC2S::kHairFieldNumber;
const int MsgPlayerModifyAvatorC2S::kHairColorFieldNumber;
#endif  // !_MSC_VER

MsgPlayerModifyAvatorC2S::MsgPlayerModifyAvatorC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerModifyAvatorC2S)
}

void MsgPlayerModifyAvatorC2S::InitAsDefaultInstance() {
}

MsgPlayerModifyAvatorC2S::MsgPlayerModifyAvatorC2S(const MsgPlayerModifyAvatorC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerModifyAvatorC2S)
}

void MsgPlayerModifyAvatorC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4463;
  skincolor_ = 0;
  hair_ = 0;
  haircolor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerModifyAvatorC2S::~MsgPlayerModifyAvatorC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerModifyAvatorC2S)
  SharedDtor();
}

void MsgPlayerModifyAvatorC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerModifyAvatorC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerModifyAvatorC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerModifyAvatorC2S_descriptor_;
}

const MsgPlayerModifyAvatorC2S& MsgPlayerModifyAvatorC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerModifyAvatorC2S* MsgPlayerModifyAvatorC2S::default_instance_ = NULL;

MsgPlayerModifyAvatorC2S* MsgPlayerModifyAvatorC2S::New() const {
  return new MsgPlayerModifyAvatorC2S;
}

void MsgPlayerModifyAvatorC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerModifyAvatorC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(skincolor_, haircolor_);
    msgtype_ = 4463;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerModifyAvatorC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerModifyAvatorC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MODIFY_AVATOR_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skinColor;
        break;
      }

      // optional int32 skinColor = 2;
      case 2: {
        if (tag == 16) {
         parse_skinColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skincolor_)));
          set_has_skincolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hair;
        break;
      }

      // optional int32 hair = 3;
      case 3: {
        if (tag == 24) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hairColor;
        break;
      }

      // optional int32 hairColor = 4;
      case 4: {
        if (tag == 32) {
         parse_hairColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerModifyAvatorC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerModifyAvatorC2S)
  return false;
#undef DO_
}

void MsgPlayerModifyAvatorC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerModifyAvatorC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MODIFY_AVATOR_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 skinColor = 2;
  if (has_skincolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skincolor(), output);
  }

  // optional int32 hair = 3;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hair(), output);
  }

  // optional int32 hairColor = 4;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->haircolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerModifyAvatorC2S)
}

::google::protobuf::uint8* MsgPlayerModifyAvatorC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerModifyAvatorC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MODIFY_AVATOR_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 skinColor = 2;
  if (has_skincolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skincolor(), target);
  }

  // optional int32 hair = 3;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hair(), target);
  }

  // optional int32 hairColor = 4;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->haircolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerModifyAvatorC2S)
  return target;
}

int MsgPlayerModifyAvatorC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MODIFY_AVATOR_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 skinColor = 2;
    if (has_skincolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skincolor());
    }

    // optional int32 hair = 3;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // optional int32 hairColor = 4;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haircolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerModifyAvatorC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerModifyAvatorC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerModifyAvatorC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerModifyAvatorC2S::MergeFrom(const MsgPlayerModifyAvatorC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_skincolor()) {
      set_skincolor(from.skincolor());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerModifyAvatorC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerModifyAvatorC2S::CopyFrom(const MsgPlayerModifyAvatorC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerModifyAvatorC2S::IsInitialized() const {

  return true;
}

void MsgPlayerModifyAvatorC2S::Swap(MsgPlayerModifyAvatorC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(skincolor_, other->skincolor_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerModifyAvatorC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerModifyAvatorC2S_descriptor_;
  metadata.reflection = MsgPlayerModifyAvatorC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerModifyAvatorS2C::kMsgTypeFieldNumber;
const int MsgPlayerModifyAvatorS2C::kResFieldNumber;
#endif  // !_MSC_VER

MsgPlayerModifyAvatorS2C::MsgPlayerModifyAvatorS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerModifyAvatorS2C)
}

void MsgPlayerModifyAvatorS2C::InitAsDefaultInstance() {
}

MsgPlayerModifyAvatorS2C::MsgPlayerModifyAvatorS2C(const MsgPlayerModifyAvatorS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerModifyAvatorS2C)
}

void MsgPlayerModifyAvatorS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 4464;
  res_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerModifyAvatorS2C::~MsgPlayerModifyAvatorS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerModifyAvatorS2C)
  SharedDtor();
}

void MsgPlayerModifyAvatorS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerModifyAvatorS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerModifyAvatorS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerModifyAvatorS2C_descriptor_;
}

const MsgPlayerModifyAvatorS2C& MsgPlayerModifyAvatorS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerModifyAvatorS2C* MsgPlayerModifyAvatorS2C::default_instance_ = NULL;

MsgPlayerModifyAvatorS2C* MsgPlayerModifyAvatorS2C::New() const {
  return new MsgPlayerModifyAvatorS2C;
}

void MsgPlayerModifyAvatorS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 4464;
    res_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerModifyAvatorS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerModifyAvatorS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MODIFY_AVATOR_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerModifyAvatorS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerModifyAvatorS2C)
  return false;
#undef DO_
}

void MsgPlayerModifyAvatorS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerModifyAvatorS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MODIFY_AVATOR_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerModifyAvatorS2C)
}

::google::protobuf::uint8* MsgPlayerModifyAvatorS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerModifyAvatorS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MODIFY_AVATOR_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerModifyAvatorS2C)
  return target;
}

int MsgPlayerModifyAvatorS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_MODIFY_AVATOR_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerModifyAvatorS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerModifyAvatorS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerModifyAvatorS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerModifyAvatorS2C::MergeFrom(const MsgPlayerModifyAvatorS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerModifyAvatorS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerModifyAvatorS2C::CopyFrom(const MsgPlayerModifyAvatorS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerModifyAvatorS2C::IsInitialized() const {

  return true;
}

void MsgPlayerModifyAvatorS2C::Swap(MsgPlayerModifyAvatorS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerModifyAvatorS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerModifyAvatorS2C_descriptor_;
  metadata.reflection = MsgPlayerModifyAvatorS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerADNVideoAwardC2S::kMsgTypeFieldNumber;
const int MsgPlayerADNVideoAwardC2S::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgPlayerADNVideoAwardC2S::MsgPlayerADNVideoAwardC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerADNVideoAwardC2S)
}

void MsgPlayerADNVideoAwardC2S::InitAsDefaultInstance() {
}

MsgPlayerADNVideoAwardC2S::MsgPlayerADNVideoAwardC2S(const MsgPlayerADNVideoAwardC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerADNVideoAwardC2S)
}

void MsgPlayerADNVideoAwardC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7300;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerADNVideoAwardC2S::~MsgPlayerADNVideoAwardC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerADNVideoAwardC2S)
  SharedDtor();
}

void MsgPlayerADNVideoAwardC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerADNVideoAwardC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerADNVideoAwardC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerADNVideoAwardC2S_descriptor_;
}

const MsgPlayerADNVideoAwardC2S& MsgPlayerADNVideoAwardC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerADNVideoAwardC2S* MsgPlayerADNVideoAwardC2S::default_instance_ = NULL;

MsgPlayerADNVideoAwardC2S* MsgPlayerADNVideoAwardC2S::New() const {
  return new MsgPlayerADNVideoAwardC2S;
}

void MsgPlayerADNVideoAwardC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 7300;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerADNVideoAwardC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerADNVideoAwardC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_ADN_VIDEO_AWARD_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerADNVideoAwardC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerADNVideoAwardC2S)
  return false;
#undef DO_
}

void MsgPlayerADNVideoAwardC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerADNVideoAwardC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_ADN_VIDEO_AWARD_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerADNVideoAwardC2S)
}

::google::protobuf::uint8* MsgPlayerADNVideoAwardC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerADNVideoAwardC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_ADN_VIDEO_AWARD_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerADNVideoAwardC2S)
  return target;
}

int MsgPlayerADNVideoAwardC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_ADN_VIDEO_AWARD_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerADNVideoAwardC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerADNVideoAwardC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerADNVideoAwardC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerADNVideoAwardC2S::MergeFrom(const MsgPlayerADNVideoAwardC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerADNVideoAwardC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerADNVideoAwardC2S::CopyFrom(const MsgPlayerADNVideoAwardC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerADNVideoAwardC2S::IsInitialized() const {

  return true;
}

void MsgPlayerADNVideoAwardC2S::Swap(MsgPlayerADNVideoAwardC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerADNVideoAwardC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerADNVideoAwardC2S_descriptor_;
  metadata.reflection = MsgPlayerADNVideoAwardC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerADNVideoAwardS2C::kMsgTypeFieldNumber;
const int MsgPlayerADNVideoAwardS2C::kIggidFieldNumber;
const int MsgPlayerADNVideoAwardS2C::kNextTimeFieldNumber;
const int MsgPlayerADNVideoAwardS2C::kCoinFieldNumber;
#endif  // !_MSC_VER

MsgPlayerADNVideoAwardS2C::MsgPlayerADNVideoAwardS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerADNVideoAwardS2C)
}

void MsgPlayerADNVideoAwardS2C::InitAsDefaultInstance() {
}

MsgPlayerADNVideoAwardS2C::MsgPlayerADNVideoAwardS2C(const MsgPlayerADNVideoAwardS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerADNVideoAwardS2C)
}

void MsgPlayerADNVideoAwardS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7301;
  iggid_ = GOOGLE_LONGLONG(0);
  nexttime_ = GOOGLE_LONGLONG(0);
  coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerADNVideoAwardS2C::~MsgPlayerADNVideoAwardS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerADNVideoAwardS2C)
  SharedDtor();
}

void MsgPlayerADNVideoAwardS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerADNVideoAwardS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerADNVideoAwardS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerADNVideoAwardS2C_descriptor_;
}

const MsgPlayerADNVideoAwardS2C& MsgPlayerADNVideoAwardS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerADNVideoAwardS2C* MsgPlayerADNVideoAwardS2C::default_instance_ = NULL;

MsgPlayerADNVideoAwardS2C* MsgPlayerADNVideoAwardS2C::New() const {
  return new MsgPlayerADNVideoAwardS2C;
}

void MsgPlayerADNVideoAwardS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerADNVideoAwardS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(coin_, nexttime_);
    msgtype_ = 7301;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerADNVideoAwardS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerADNVideoAwardS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_ADN_VIDEO_AWARD_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nextTime;
        break;
      }

      // optional int64 nextTime = 3;
      case 3: {
        if (tag == 24) {
         parse_nextTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nexttime_)));
          set_has_nexttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_coin;
        break;
      }

      // optional int32 coin = 4;
      case 4: {
        if (tag == 32) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerADNVideoAwardS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerADNVideoAwardS2C)
  return false;
#undef DO_
}

void MsgPlayerADNVideoAwardS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerADNVideoAwardS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_ADN_VIDEO_AWARD_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int64 nextTime = 3;
  if (has_nexttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->nexttime(), output);
  }

  // optional int32 coin = 4;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerADNVideoAwardS2C)
}

::google::protobuf::uint8* MsgPlayerADNVideoAwardS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerADNVideoAwardS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_ADN_VIDEO_AWARD_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int64 nextTime = 3;
  if (has_nexttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->nexttime(), target);
  }

  // optional int32 coin = 4;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerADNVideoAwardS2C)
  return target;
}

int MsgPlayerADNVideoAwardS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_ADN_VIDEO_AWARD_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 nextTime = 3;
    if (has_nexttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nexttime());
    }

    // optional int32 coin = 4;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerADNVideoAwardS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerADNVideoAwardS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerADNVideoAwardS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerADNVideoAwardS2C::MergeFrom(const MsgPlayerADNVideoAwardS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_nexttime()) {
      set_nexttime(from.nexttime());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerADNVideoAwardS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerADNVideoAwardS2C::CopyFrom(const MsgPlayerADNVideoAwardS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerADNVideoAwardS2C::IsInitialized() const {

  return true;
}

void MsgPlayerADNVideoAwardS2C::Swap(MsgPlayerADNVideoAwardS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(nexttime_, other->nexttime_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerADNVideoAwardS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerADNVideoAwardS2C_descriptor_;
  metadata.reflection = MsgPlayerADNVideoAwardS2C_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_descriptor_;
}
bool MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_HP;
const MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_MP;
const MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_STRENTH;
const MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_ANGER;
const MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_MIN;
const MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_MAX;
const int MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_REASON_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_REASON_descriptor_;
}
bool MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_REASON_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_REASON MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_REASON_UPDATE;
const MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_REASON MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_REASON_SKILL;
const MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_REASON MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_REASON_ATTACK;
const MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_REASON MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_REASON_BE_ATTACK;
const MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_REASON MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_REASON_MIN;
const MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_REASON MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_REASON_MAX;
const int MsgPlayerSynBaseC2S::MSG_SYN_BASE_TPY_REASON_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgPlayerSynBaseC2S::kMsgTypeFieldNumber;
const int MsgPlayerSynBaseC2S::kIggidFieldNumber;
const int MsgPlayerSynBaseC2S::kBaseTpyFieldNumber;
const int MsgPlayerSynBaseC2S::kBIncFieldNumber;
const int MsgPlayerSynBaseC2S::kNValueFieldNumber;
const int MsgPlayerSynBaseC2S::kReasonFieldNumber;
#endif  // !_MSC_VER

MsgPlayerSynBaseC2S::MsgPlayerSynBaseC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerSynBaseC2S)
}

void MsgPlayerSynBaseC2S::InitAsDefaultInstance() {
}

MsgPlayerSynBaseC2S::MsgPlayerSynBaseC2S(const MsgPlayerSynBaseC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerSynBaseC2S)
}

void MsgPlayerSynBaseC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1170;
  iggid_ = GOOGLE_LONGLONG(0);
  basetpy_ = 0;
  binc_ = false;
  nvalue_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerSynBaseC2S::~MsgPlayerSynBaseC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerSynBaseC2S)
  SharedDtor();
}

void MsgPlayerSynBaseC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerSynBaseC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerSynBaseC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerSynBaseC2S_descriptor_;
}

const MsgPlayerSynBaseC2S& MsgPlayerSynBaseC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlayer_2eproto();
  return *default_instance_;
}

MsgPlayerSynBaseC2S* MsgPlayerSynBaseC2S::default_instance_ = NULL;

MsgPlayerSynBaseC2S* MsgPlayerSynBaseC2S::New() const {
  return new MsgPlayerSynBaseC2S;
}

void MsgPlayerSynBaseC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerSynBaseC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(basetpy_, reason_);
    msgtype_ = 1170;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerSynBaseC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerSynBaseC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PALYER_SYN_HP_MP_TIC_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_baseTpy;
        break;
      }

      // optional .MsgPB.MsgPlayerSynBaseC2S.MSG_SYN_BASE_TPY baseTpy = 3;
      case 3: {
        if (tag == 24) {
         parse_baseTpy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_IsValid(value)) {
            set_basetpy(static_cast< ::MsgPB::MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bInc;
        break;
      }

      // optional bool bInc = 4;
      case 4: {
        if (tag == 32) {
         parse_bInc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binc_)));
          set_has_binc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nValue;
        break;
      }

      // optional int32 nValue = 5;
      case 5: {
        if (tag == 40) {
         parse_nValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nvalue_)));
          set_has_nvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reason;
        break;
      }

      // optional .MsgPB.MsgPlayerSynBaseC2S.MSG_SYN_BASE_TPY_REASON reason = 6;
      case 6: {
        if (tag == 48) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_REASON_IsValid(value)) {
            set_reason(static_cast< ::MsgPB::MsgPlayerSynBaseC2S_MSG_SYN_BASE_TPY_REASON >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerSynBaseC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerSynBaseC2S)
  return false;
#undef DO_
}

void MsgPlayerSynBaseC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerSynBaseC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PALYER_SYN_HP_MP_TIC_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.MsgPlayerSynBaseC2S.MSG_SYN_BASE_TPY baseTpy = 3;
  if (has_basetpy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->basetpy(), output);
  }

  // optional bool bInc = 4;
  if (has_binc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->binc(), output);
  }

  // optional int32 nValue = 5;
  if (has_nvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nvalue(), output);
  }

  // optional .MsgPB.MsgPlayerSynBaseC2S.MSG_SYN_BASE_TPY_REASON reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerSynBaseC2S)
}

::google::protobuf::uint8* MsgPlayerSynBaseC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerSynBaseC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PALYER_SYN_HP_MP_TIC_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.MsgPlayerSynBaseC2S.MSG_SYN_BASE_TPY baseTpy = 3;
  if (has_basetpy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->basetpy(), target);
  }

  // optional bool bInc = 4;
  if (has_binc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->binc(), target);
  }

  // optional int32 nValue = 5;
  if (has_nvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nvalue(), target);
  }

  // optional .MsgPB.MsgPlayerSynBaseC2S.MSG_SYN_BASE_TPY_REASON reason = 6;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerSynBaseC2S)
  return target;
}

int MsgPlayerSynBaseC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PALYER_SYN_HP_MP_TIC_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.MsgPlayerSynBaseC2S.MSG_SYN_BASE_TPY baseTpy = 3;
    if (has_basetpy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->basetpy());
    }

    // optional bool bInc = 4;
    if (has_binc()) {
      total_size += 1 + 1;
    }

    // optional int32 nValue = 5;
    if (has_nvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nvalue());
    }

    // optional .MsgPB.MsgPlayerSynBaseC2S.MSG_SYN_BASE_TPY_REASON reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerSynBaseC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerSynBaseC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerSynBaseC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerSynBaseC2S::MergeFrom(const MsgPlayerSynBaseC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_basetpy()) {
      set_basetpy(from.basetpy());
    }
    if (from.has_binc()) {
      set_binc(from.binc());
    }
    if (from.has_nvalue()) {
      set_nvalue(from.nvalue());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerSynBaseC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerSynBaseC2S::CopyFrom(const MsgPlayerSynBaseC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerSynBaseC2S::IsInitialized() const {

  return true;
}

void MsgPlayerSynBaseC2S::Swap(MsgPlayerSynBaseC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(basetpy_, other->basetpy_);
    std::swap(binc_, other->binc_);
    std::swap(nvalue_, other->nvalue_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerSynBaseC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerSynBaseC2S_descriptor_;
  metadata.reflection = MsgPlayerSynBaseC2S_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
