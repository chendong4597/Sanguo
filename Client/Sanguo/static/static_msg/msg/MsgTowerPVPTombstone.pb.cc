// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgTowerPVPTombstone.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgTowerPVPTombstone.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* TowerPVPTombStoneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerPVPTombStoneData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgTowerPVPTombstone_2eproto() {
  protobuf_AddDesc_MsgTowerPVPTombstone_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgTowerPVPTombstone.proto");
  GOOGLE_CHECK(file != NULL);
  TowerPVPTombStoneData_descriptor_ = file->message_type(0);
  static const int TowerPVPTombStoneData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerPVPTombStoneData, attack_iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerPVPTombStoneData, attack_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerPVPTombStoneData, attack_paragraph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerPVPTombStoneData, defence_paragraph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerPVPTombStoneData, tombstone_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerPVPTombStoneData, tombstone_pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerPVPTombStoneData, get_reward_),
  };
  TowerPVPTombStoneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerPVPTombStoneData_descriptor_,
      TowerPVPTombStoneData::default_instance_,
      TowerPVPTombStoneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerPVPTombStoneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerPVPTombStoneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerPVPTombStoneData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgTowerPVPTombstone_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerPVPTombStoneData_descriptor_, &TowerPVPTombStoneData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgTowerPVPTombstone_2eproto() {
  delete TowerPVPTombStoneData::default_instance_;
  delete TowerPVPTombStoneData_reflection_;
}

void protobuf_AddDesc_MsgTowerPVPTombstone_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032MsgTowerPVPTombstone.proto\022\005MsgPB\"\275\001\n\025"
    "TowerPVPTombStoneData\022\024\n\014attack_iggid\030\001 "
    "\001(\003\022\023\n\013attack_time\030\002 \001(\003\022\030\n\020attack_parag"
    "raph\030\003 \001(\005\022\031\n\021defence_paragraph\030\004 \001(\005\022\027\n"
    "\017tombstone_pos_x\030\005 \001(\005\022\027\n\017tombstone_pos_"
    "y\030\006 \001(\005\022\022\n\nget_reward\030\007 \001(\005", 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgTowerPVPTombstone.proto", &protobuf_RegisterTypes);
  TowerPVPTombStoneData::default_instance_ = new TowerPVPTombStoneData();
  TowerPVPTombStoneData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgTowerPVPTombstone_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgTowerPVPTombstone_2eproto {
  StaticDescriptorInitializer_MsgTowerPVPTombstone_2eproto() {
    protobuf_AddDesc_MsgTowerPVPTombstone_2eproto();
  }
} static_descriptor_initializer_MsgTowerPVPTombstone_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TowerPVPTombStoneData::kAttackIggidFieldNumber;
const int TowerPVPTombStoneData::kAttackTimeFieldNumber;
const int TowerPVPTombStoneData::kAttackParagraphFieldNumber;
const int TowerPVPTombStoneData::kDefenceParagraphFieldNumber;
const int TowerPVPTombStoneData::kTombstonePosXFieldNumber;
const int TowerPVPTombStoneData::kTombstonePosYFieldNumber;
const int TowerPVPTombStoneData::kGetRewardFieldNumber;
#endif  // !_MSC_VER

TowerPVPTombStoneData::TowerPVPTombStoneData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.TowerPVPTombStoneData)
}

void TowerPVPTombStoneData::InitAsDefaultInstance() {
}

TowerPVPTombStoneData::TowerPVPTombStoneData(const TowerPVPTombStoneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.TowerPVPTombStoneData)
}

void TowerPVPTombStoneData::SharedCtor() {
  _cached_size_ = 0;
  attack_iggid_ = GOOGLE_LONGLONG(0);
  attack_time_ = GOOGLE_LONGLONG(0);
  attack_paragraph_ = 0;
  defence_paragraph_ = 0;
  tombstone_pos_x_ = 0;
  tombstone_pos_y_ = 0;
  get_reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerPVPTombStoneData::~TowerPVPTombStoneData() {
  // @@protoc_insertion_point(destructor:MsgPB.TowerPVPTombStoneData)
  SharedDtor();
}

void TowerPVPTombStoneData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerPVPTombStoneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerPVPTombStoneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerPVPTombStoneData_descriptor_;
}

const TowerPVPTombStoneData& TowerPVPTombStoneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgTowerPVPTombstone_2eproto();
  return *default_instance_;
}

TowerPVPTombStoneData* TowerPVPTombStoneData::default_instance_ = NULL;

TowerPVPTombStoneData* TowerPVPTombStoneData::New() const {
  return new TowerPVPTombStoneData;
}

void TowerPVPTombStoneData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TowerPVPTombStoneData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(attack_iggid_, get_reward_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerPVPTombStoneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.TowerPVPTombStoneData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 attack_iggid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attack_iggid_)));
          set_has_attack_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attack_time;
        break;
      }

      // optional int64 attack_time = 2;
      case 2: {
        if (tag == 16) {
         parse_attack_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attack_time_)));
          set_has_attack_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attack_paragraph;
        break;
      }

      // optional int32 attack_paragraph = 3;
      case 3: {
        if (tag == 24) {
         parse_attack_paragraph:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_paragraph_)));
          set_has_attack_paragraph();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_defence_paragraph;
        break;
      }

      // optional int32 defence_paragraph = 4;
      case 4: {
        if (tag == 32) {
         parse_defence_paragraph:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_paragraph_)));
          set_has_defence_paragraph();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tombstone_pos_x;
        break;
      }

      // optional int32 tombstone_pos_x = 5;
      case 5: {
        if (tag == 40) {
         parse_tombstone_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tombstone_pos_x_)));
          set_has_tombstone_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tombstone_pos_y;
        break;
      }

      // optional int32 tombstone_pos_y = 6;
      case 6: {
        if (tag == 48) {
         parse_tombstone_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tombstone_pos_y_)));
          set_has_tombstone_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_get_reward;
        break;
      }

      // optional int32 get_reward = 7;
      case 7: {
        if (tag == 56) {
         parse_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_reward_)));
          set_has_get_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.TowerPVPTombStoneData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.TowerPVPTombStoneData)
  return false;
#undef DO_
}

void TowerPVPTombStoneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.TowerPVPTombStoneData)
  // optional int64 attack_iggid = 1;
  if (has_attack_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->attack_iggid(), output);
  }

  // optional int64 attack_time = 2;
  if (has_attack_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->attack_time(), output);
  }

  // optional int32 attack_paragraph = 3;
  if (has_attack_paragraph()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attack_paragraph(), output);
  }

  // optional int32 defence_paragraph = 4;
  if (has_defence_paragraph()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->defence_paragraph(), output);
  }

  // optional int32 tombstone_pos_x = 5;
  if (has_tombstone_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tombstone_pos_x(), output);
  }

  // optional int32 tombstone_pos_y = 6;
  if (has_tombstone_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tombstone_pos_y(), output);
  }

  // optional int32 get_reward = 7;
  if (has_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->get_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.TowerPVPTombStoneData)
}

::google::protobuf::uint8* TowerPVPTombStoneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.TowerPVPTombStoneData)
  // optional int64 attack_iggid = 1;
  if (has_attack_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->attack_iggid(), target);
  }

  // optional int64 attack_time = 2;
  if (has_attack_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->attack_time(), target);
  }

  // optional int32 attack_paragraph = 3;
  if (has_attack_paragraph()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attack_paragraph(), target);
  }

  // optional int32 defence_paragraph = 4;
  if (has_defence_paragraph()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->defence_paragraph(), target);
  }

  // optional int32 tombstone_pos_x = 5;
  if (has_tombstone_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tombstone_pos_x(), target);
  }

  // optional int32 tombstone_pos_y = 6;
  if (has_tombstone_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tombstone_pos_y(), target);
  }

  // optional int32 get_reward = 7;
  if (has_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->get_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.TowerPVPTombStoneData)
  return target;
}

int TowerPVPTombStoneData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 attack_iggid = 1;
    if (has_attack_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attack_iggid());
    }

    // optional int64 attack_time = 2;
    if (has_attack_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attack_time());
    }

    // optional int32 attack_paragraph = 3;
    if (has_attack_paragraph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_paragraph());
    }

    // optional int32 defence_paragraph = 4;
    if (has_defence_paragraph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_paragraph());
    }

    // optional int32 tombstone_pos_x = 5;
    if (has_tombstone_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tombstone_pos_x());
    }

    // optional int32 tombstone_pos_y = 6;
    if (has_tombstone_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tombstone_pos_y());
    }

    // optional int32 get_reward = 7;
    if (has_get_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerPVPTombStoneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerPVPTombStoneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerPVPTombStoneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerPVPTombStoneData::MergeFrom(const TowerPVPTombStoneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack_iggid()) {
      set_attack_iggid(from.attack_iggid());
    }
    if (from.has_attack_time()) {
      set_attack_time(from.attack_time());
    }
    if (from.has_attack_paragraph()) {
      set_attack_paragraph(from.attack_paragraph());
    }
    if (from.has_defence_paragraph()) {
      set_defence_paragraph(from.defence_paragraph());
    }
    if (from.has_tombstone_pos_x()) {
      set_tombstone_pos_x(from.tombstone_pos_x());
    }
    if (from.has_tombstone_pos_y()) {
      set_tombstone_pos_y(from.tombstone_pos_y());
    }
    if (from.has_get_reward()) {
      set_get_reward(from.get_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerPVPTombStoneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerPVPTombStoneData::CopyFrom(const TowerPVPTombStoneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerPVPTombStoneData::IsInitialized() const {

  return true;
}

void TowerPVPTombStoneData::Swap(TowerPVPTombStoneData* other) {
  if (other != this) {
    std::swap(attack_iggid_, other->attack_iggid_);
    std::swap(attack_time_, other->attack_time_);
    std::swap(attack_paragraph_, other->attack_paragraph_);
    std::swap(defence_paragraph_, other->defence_paragraph_);
    std::swap(tombstone_pos_x_, other->tombstone_pos_x_);
    std::swap(tombstone_pos_y_, other->tombstone_pos_y_);
    std::swap(get_reward_, other->get_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerPVPTombStoneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerPVPTombStoneData_descriptor_;
  metadata.reflection = TowerPVPTombStoneData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
