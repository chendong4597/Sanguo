// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgNpcAutoIncome.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgNpcAutoIncome.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* NpcExploreData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcExploreData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcFeedingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcFeedingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcFeedingData_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcFeedingData_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcPlantData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcPlantData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcPlantData_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcPlantData_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcMineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcMineData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeBiomeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeBiomeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFarmingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeFarmingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcRefiningMineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcRefiningMineData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcRefiningMineData_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcRefiningMineData_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreDataGetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeExploreDataGetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreDataGetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeExploreDataGetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreSetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeExploreSetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreSetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeExploreSetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreUnlockNextBiomeC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeExploreUnlockNextBiomeC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreUnlockNextBiomeS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeExploreUnlockNextBiomeS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreTimeAwardGetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeExploreTimeAwardGetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreTimeAwardGetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeExploreTimeAwardGetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExplorePassStageC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeExplorePassStageC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExplorePassStageS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeExplorePassStageS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingDataGetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeFeedingDataGetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingDataGetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeFeedingDataGetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingSetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeFeedingSetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingSetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeFeedingSetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingTimeAwardGetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeFeedingTimeAwardGetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingTimeAwardGetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeFeedingTimeAwardGetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingUnlockC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeFeedingUnlockC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingUnlockS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeFeedingUnlockS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantDataGetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomePlantDataGetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantDataGetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomePlantDataGetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantSetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomePlantSetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantSetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomePlantSetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantTimeAwardGetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomePlantTimeAwardGetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantTimeAwardGetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomePlantTimeAwardGetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantUnlockC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomePlantUnlockC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantUnlockS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomePlantUnlockS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeMineDataGetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeMineDataGetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeMineDataGetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeMineDataGetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeMineSetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeMineSetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeMineSetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeMineSetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeMineTimeAwardGetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeMineTimeAwardGetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeMineTimeAwardGetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcAutoIncomeMineTimeAwardGetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcRefiningMineDataGetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcRefiningMineDataGetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcRefiningMineDataGetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcRefiningMineDataGetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcRefiningMineSetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcRefiningMineSetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcRefiningMineSetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcRefiningMineSetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcRefiningMineAwardGetC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcRefiningMineAwardGetC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcRefiningMineAwardGetS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcRefiningMineAwardGetS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgNpcAutoIncome_2eproto() {
  protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgNpcAutoIncome.proto");
  GOOGLE_CHECK(file != NULL);
  NpcExploreData_descriptor_ = file->message_type(0);
  static const int NpcExploreData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcExploreData, biome_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcExploreData, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcExploreData, protectors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcExploreData, time_stamp_),
  };
  NpcExploreData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcExploreData_descriptor_,
      NpcExploreData::default_instance_,
      NpcExploreData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcExploreData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcExploreData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcExploreData));
  NpcFeedingData_descriptor_ = file->message_type(1);
  static const int NpcFeedingData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcFeedingData, feedings_),
  };
  NpcFeedingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcFeedingData_descriptor_,
      NpcFeedingData::default_instance_,
      NpcFeedingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcFeedingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcFeedingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcFeedingData));
  NpcFeedingData_info_descriptor_ = NpcFeedingData_descriptor_->nested_type(0);
  static const int NpcFeedingData_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcFeedingData_info, fence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcFeedingData_info, protector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcFeedingData_info, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcFeedingData_info, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcFeedingData_info, reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcFeedingData_info, cost_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcFeedingData_info, accumulate_time_),
  };
  NpcFeedingData_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcFeedingData_info_descriptor_,
      NpcFeedingData_info::default_instance_,
      NpcFeedingData_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcFeedingData_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcFeedingData_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcFeedingData_info));
  NpcPlantData_descriptor_ = file->message_type(2);
  static const int NpcPlantData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPlantData, plants_),
  };
  NpcPlantData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcPlantData_descriptor_,
      NpcPlantData::default_instance_,
      NpcPlantData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPlantData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPlantData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcPlantData));
  NpcPlantData_info_descriptor_ = NpcPlantData_descriptor_->nested_type(0);
  static const int NpcPlantData_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPlantData_info, protector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPlantData_info, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPlantData_info, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPlantData_info, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPlantData_info, reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPlantData_info, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPlantData_info, cost_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPlantData_info, accumulate_time_),
  };
  NpcPlantData_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcPlantData_info_descriptor_,
      NpcPlantData_info::default_instance_,
      NpcPlantData_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPlantData_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPlantData_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcPlantData_info));
  NpcMineData_descriptor_ = file->message_type(3);
  static const int NpcMineData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMineData, biome_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMineData, protectors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMineData, time_stamp_),
  };
  NpcMineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcMineData_descriptor_,
      NpcMineData::default_instance_,
      NpcMineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcMineData));
  MsgNpcAutoIncomeBiomeData_descriptor_ = file->message_type(4);
  static const int MsgNpcAutoIncomeBiomeData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeBiomeData, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeBiomeData, biome_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeBiomeData, explore_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeBiomeData, mine_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeBiomeData, dirty_),
  };
  MsgNpcAutoIncomeBiomeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeBiomeData_descriptor_,
      MsgNpcAutoIncomeBiomeData::default_instance_,
      MsgNpcAutoIncomeBiomeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeBiomeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeBiomeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeBiomeData));
  MsgNpcAutoIncomeFarmingData_descriptor_ = file->message_type(5);
  static const int MsgNpcAutoIncomeFarmingData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFarmingData, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFarmingData, feeding_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFarmingData, plant_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFarmingData, refining_mine_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFarmingData, dirty_),
  };
  MsgNpcAutoIncomeFarmingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeFarmingData_descriptor_,
      MsgNpcAutoIncomeFarmingData::default_instance_,
      MsgNpcAutoIncomeFarmingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFarmingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFarmingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeFarmingData));
  NpcRefiningMineData_descriptor_ = file->message_type(6);
  static const int NpcRefiningMineData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcRefiningMineData, refining_mine_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcRefiningMineData, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcRefiningMineData, remain_time_),
  };
  NpcRefiningMineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcRefiningMineData_descriptor_,
      NpcRefiningMineData::default_instance_,
      NpcRefiningMineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcRefiningMineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcRefiningMineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcRefiningMineData));
  NpcRefiningMineData_info_descriptor_ = NpcRefiningMineData_descriptor_->nested_type(0);
  static const int NpcRefiningMineData_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcRefiningMineData_info, mine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcRefiningMineData_info, mine_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcRefiningMineData_info, reward_time_),
  };
  NpcRefiningMineData_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcRefiningMineData_info_descriptor_,
      NpcRefiningMineData_info::default_instance_,
      NpcRefiningMineData_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcRefiningMineData_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcRefiningMineData_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcRefiningMineData_info));
  MsgNpcAutoIncomeExploreDataGetC2S_descriptor_ = file->message_type(7);
  static const int MsgNpcAutoIncomeExploreDataGetC2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreDataGetC2S, msgtype_),
  };
  MsgNpcAutoIncomeExploreDataGetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeExploreDataGetC2S_descriptor_,
      MsgNpcAutoIncomeExploreDataGetC2S::default_instance_,
      MsgNpcAutoIncomeExploreDataGetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreDataGetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreDataGetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeExploreDataGetC2S));
  MsgNpcAutoIncomeExploreDataGetS2C_descriptor_ = file->message_type(8);
  static const int MsgNpcAutoIncomeExploreDataGetS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreDataGetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreDataGetS2C, data_),
  };
  MsgNpcAutoIncomeExploreDataGetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeExploreDataGetS2C_descriptor_,
      MsgNpcAutoIncomeExploreDataGetS2C::default_instance_,
      MsgNpcAutoIncomeExploreDataGetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreDataGetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreDataGetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeExploreDataGetS2C));
  MsgNpcAutoIncomeExploreSetC2S_descriptor_ = file->message_type(9);
  static const int MsgNpcAutoIncomeExploreSetC2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreSetC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreSetC2S, biome_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreSetC2S, protectors_),
  };
  MsgNpcAutoIncomeExploreSetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeExploreSetC2S_descriptor_,
      MsgNpcAutoIncomeExploreSetC2S::default_instance_,
      MsgNpcAutoIncomeExploreSetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreSetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreSetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeExploreSetC2S));
  MsgNpcAutoIncomeExploreSetS2C_descriptor_ = file->message_type(10);
  static const int MsgNpcAutoIncomeExploreSetS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreSetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreSetS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreSetS2C, data_),
  };
  MsgNpcAutoIncomeExploreSetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeExploreSetS2C_descriptor_,
      MsgNpcAutoIncomeExploreSetS2C::default_instance_,
      MsgNpcAutoIncomeExploreSetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreSetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreSetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeExploreSetS2C));
  MsgNpcAutoIncomeExploreUnlockNextBiomeC2S_descriptor_ = file->message_type(11);
  static const int MsgNpcAutoIncomeExploreUnlockNextBiomeC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreUnlockNextBiomeC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreUnlockNextBiomeC2S, biome_id_),
  };
  MsgNpcAutoIncomeExploreUnlockNextBiomeC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeExploreUnlockNextBiomeC2S_descriptor_,
      MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::default_instance_,
      MsgNpcAutoIncomeExploreUnlockNextBiomeC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreUnlockNextBiomeC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreUnlockNextBiomeC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeExploreUnlockNextBiomeC2S));
  MsgNpcAutoIncomeExploreUnlockNextBiomeS2C_descriptor_ = file->message_type(12);
  static const int MsgNpcAutoIncomeExploreUnlockNextBiomeS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreUnlockNextBiomeS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreUnlockNextBiomeS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreUnlockNextBiomeS2C, data_),
  };
  MsgNpcAutoIncomeExploreUnlockNextBiomeS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeExploreUnlockNextBiomeS2C_descriptor_,
      MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::default_instance_,
      MsgNpcAutoIncomeExploreUnlockNextBiomeS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreUnlockNextBiomeS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreUnlockNextBiomeS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeExploreUnlockNextBiomeS2C));
  MsgNpcAutoIncomeExploreTimeAwardGetC2S_descriptor_ = file->message_type(13);
  static const int MsgNpcAutoIncomeExploreTimeAwardGetC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreTimeAwardGetC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreTimeAwardGetC2S, biome_id_),
  };
  MsgNpcAutoIncomeExploreTimeAwardGetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeExploreTimeAwardGetC2S_descriptor_,
      MsgNpcAutoIncomeExploreTimeAwardGetC2S::default_instance_,
      MsgNpcAutoIncomeExploreTimeAwardGetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreTimeAwardGetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreTimeAwardGetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeExploreTimeAwardGetC2S));
  MsgNpcAutoIncomeExploreTimeAwardGetS2C_descriptor_ = file->message_type(14);
  static const int MsgNpcAutoIncomeExploreTimeAwardGetS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreTimeAwardGetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreTimeAwardGetS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreTimeAwardGetS2C, biome_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreTimeAwardGetS2C, time_stamp_),
  };
  MsgNpcAutoIncomeExploreTimeAwardGetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeExploreTimeAwardGetS2C_descriptor_,
      MsgNpcAutoIncomeExploreTimeAwardGetS2C::default_instance_,
      MsgNpcAutoIncomeExploreTimeAwardGetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreTimeAwardGetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExploreTimeAwardGetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeExploreTimeAwardGetS2C));
  MsgNpcAutoIncomeExplorePassStageC2S_descriptor_ = file->message_type(15);
  static const int MsgNpcAutoIncomeExplorePassStageC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExplorePassStageC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExplorePassStageC2S, biome_id_),
  };
  MsgNpcAutoIncomeExplorePassStageC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeExplorePassStageC2S_descriptor_,
      MsgNpcAutoIncomeExplorePassStageC2S::default_instance_,
      MsgNpcAutoIncomeExplorePassStageC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExplorePassStageC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExplorePassStageC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeExplorePassStageC2S));
  MsgNpcAutoIncomeExplorePassStageS2C_descriptor_ = file->message_type(16);
  static const int MsgNpcAutoIncomeExplorePassStageS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExplorePassStageS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExplorePassStageS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExplorePassStageS2C, biome_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExplorePassStageS2C, stage_),
  };
  MsgNpcAutoIncomeExplorePassStageS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeExplorePassStageS2C_descriptor_,
      MsgNpcAutoIncomeExplorePassStageS2C::default_instance_,
      MsgNpcAutoIncomeExplorePassStageS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExplorePassStageS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeExplorePassStageS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeExplorePassStageS2C));
  MsgNpcAutoIncomeFeedingDataGetC2S_descriptor_ = file->message_type(17);
  static const int MsgNpcAutoIncomeFeedingDataGetC2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingDataGetC2S, msgtype_),
  };
  MsgNpcAutoIncomeFeedingDataGetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeFeedingDataGetC2S_descriptor_,
      MsgNpcAutoIncomeFeedingDataGetC2S::default_instance_,
      MsgNpcAutoIncomeFeedingDataGetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingDataGetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingDataGetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeFeedingDataGetC2S));
  MsgNpcAutoIncomeFeedingDataGetS2C_descriptor_ = file->message_type(18);
  static const int MsgNpcAutoIncomeFeedingDataGetS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingDataGetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingDataGetS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingDataGetS2C, data_),
  };
  MsgNpcAutoIncomeFeedingDataGetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeFeedingDataGetS2C_descriptor_,
      MsgNpcAutoIncomeFeedingDataGetS2C::default_instance_,
      MsgNpcAutoIncomeFeedingDataGetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingDataGetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingDataGetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeFeedingDataGetS2C));
  MsgNpcAutoIncomeFeedingSetC2S_descriptor_ = file->message_type(19);
  static const int MsgNpcAutoIncomeFeedingSetC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingSetC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingSetC2S, fence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingSetC2S, protector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingSetC2S, item_num_),
  };
  MsgNpcAutoIncomeFeedingSetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeFeedingSetC2S_descriptor_,
      MsgNpcAutoIncomeFeedingSetC2S::default_instance_,
      MsgNpcAutoIncomeFeedingSetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingSetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingSetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeFeedingSetC2S));
  MsgNpcAutoIncomeFeedingSetS2C_descriptor_ = file->message_type(20);
  static const int MsgNpcAutoIncomeFeedingSetS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingSetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingSetS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingSetS2C, fence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingSetS2C, data_),
  };
  MsgNpcAutoIncomeFeedingSetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeFeedingSetS2C_descriptor_,
      MsgNpcAutoIncomeFeedingSetS2C::default_instance_,
      MsgNpcAutoIncomeFeedingSetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingSetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingSetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeFeedingSetS2C));
  MsgNpcAutoIncomeFeedingTimeAwardGetC2S_descriptor_ = file->message_type(21);
  static const int MsgNpcAutoIncomeFeedingTimeAwardGetC2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingTimeAwardGetC2S, msgtype_),
  };
  MsgNpcAutoIncomeFeedingTimeAwardGetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeFeedingTimeAwardGetC2S_descriptor_,
      MsgNpcAutoIncomeFeedingTimeAwardGetC2S::default_instance_,
      MsgNpcAutoIncomeFeedingTimeAwardGetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingTimeAwardGetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingTimeAwardGetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeFeedingTimeAwardGetC2S));
  MsgNpcAutoIncomeFeedingTimeAwardGetS2C_descriptor_ = file->message_type(22);
  static const int MsgNpcAutoIncomeFeedingTimeAwardGetS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingTimeAwardGetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingTimeAwardGetS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingTimeAwardGetS2C, data_),
  };
  MsgNpcAutoIncomeFeedingTimeAwardGetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeFeedingTimeAwardGetS2C_descriptor_,
      MsgNpcAutoIncomeFeedingTimeAwardGetS2C::default_instance_,
      MsgNpcAutoIncomeFeedingTimeAwardGetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingTimeAwardGetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingTimeAwardGetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeFeedingTimeAwardGetS2C));
  MsgNpcAutoIncomeFeedingUnlockC2S_descriptor_ = file->message_type(23);
  static const int MsgNpcAutoIncomeFeedingUnlockC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingUnlockC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingUnlockC2S, fence_id_),
  };
  MsgNpcAutoIncomeFeedingUnlockC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeFeedingUnlockC2S_descriptor_,
      MsgNpcAutoIncomeFeedingUnlockC2S::default_instance_,
      MsgNpcAutoIncomeFeedingUnlockC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingUnlockC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingUnlockC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeFeedingUnlockC2S));
  MsgNpcAutoIncomeFeedingUnlockS2C_descriptor_ = file->message_type(24);
  static const int MsgNpcAutoIncomeFeedingUnlockS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingUnlockS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingUnlockS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingUnlockS2C, fence_id_),
  };
  MsgNpcAutoIncomeFeedingUnlockS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeFeedingUnlockS2C_descriptor_,
      MsgNpcAutoIncomeFeedingUnlockS2C::default_instance_,
      MsgNpcAutoIncomeFeedingUnlockS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingUnlockS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeFeedingUnlockS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeFeedingUnlockS2C));
  MsgNpcAutoIncomePlantDataGetC2S_descriptor_ = file->message_type(25);
  static const int MsgNpcAutoIncomePlantDataGetC2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantDataGetC2S, msgtype_),
  };
  MsgNpcAutoIncomePlantDataGetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomePlantDataGetC2S_descriptor_,
      MsgNpcAutoIncomePlantDataGetC2S::default_instance_,
      MsgNpcAutoIncomePlantDataGetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantDataGetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantDataGetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomePlantDataGetC2S));
  MsgNpcAutoIncomePlantDataGetS2C_descriptor_ = file->message_type(26);
  static const int MsgNpcAutoIncomePlantDataGetS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantDataGetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantDataGetS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantDataGetS2C, data_),
  };
  MsgNpcAutoIncomePlantDataGetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomePlantDataGetS2C_descriptor_,
      MsgNpcAutoIncomePlantDataGetS2C::default_instance_,
      MsgNpcAutoIncomePlantDataGetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantDataGetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantDataGetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomePlantDataGetS2C));
  MsgNpcAutoIncomePlantSetC2S_descriptor_ = file->message_type(27);
  static const int MsgNpcAutoIncomePlantSetC2S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantSetC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantSetC2S, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantSetC2S, protector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantSetC2S, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantSetC2S, item_num_),
  };
  MsgNpcAutoIncomePlantSetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomePlantSetC2S_descriptor_,
      MsgNpcAutoIncomePlantSetC2S::default_instance_,
      MsgNpcAutoIncomePlantSetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantSetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantSetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomePlantSetC2S));
  MsgNpcAutoIncomePlantSetS2C_descriptor_ = file->message_type(28);
  static const int MsgNpcAutoIncomePlantSetS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantSetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantSetS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantSetS2C, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantSetS2C, data_),
  };
  MsgNpcAutoIncomePlantSetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomePlantSetS2C_descriptor_,
      MsgNpcAutoIncomePlantSetS2C::default_instance_,
      MsgNpcAutoIncomePlantSetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantSetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantSetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomePlantSetS2C));
  MsgNpcAutoIncomePlantTimeAwardGetC2S_descriptor_ = file->message_type(29);
  static const int MsgNpcAutoIncomePlantTimeAwardGetC2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantTimeAwardGetC2S, msgtype_),
  };
  MsgNpcAutoIncomePlantTimeAwardGetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomePlantTimeAwardGetC2S_descriptor_,
      MsgNpcAutoIncomePlantTimeAwardGetC2S::default_instance_,
      MsgNpcAutoIncomePlantTimeAwardGetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantTimeAwardGetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantTimeAwardGetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomePlantTimeAwardGetC2S));
  MsgNpcAutoIncomePlantTimeAwardGetS2C_descriptor_ = file->message_type(30);
  static const int MsgNpcAutoIncomePlantTimeAwardGetS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantTimeAwardGetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantTimeAwardGetS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantTimeAwardGetS2C, data_),
  };
  MsgNpcAutoIncomePlantTimeAwardGetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomePlantTimeAwardGetS2C_descriptor_,
      MsgNpcAutoIncomePlantTimeAwardGetS2C::default_instance_,
      MsgNpcAutoIncomePlantTimeAwardGetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantTimeAwardGetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantTimeAwardGetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomePlantTimeAwardGetS2C));
  MsgNpcAutoIncomePlantUnlockC2S_descriptor_ = file->message_type(31);
  static const int MsgNpcAutoIncomePlantUnlockC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantUnlockC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantUnlockC2S, idx_),
  };
  MsgNpcAutoIncomePlantUnlockC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomePlantUnlockC2S_descriptor_,
      MsgNpcAutoIncomePlantUnlockC2S::default_instance_,
      MsgNpcAutoIncomePlantUnlockC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantUnlockC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantUnlockC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomePlantUnlockC2S));
  MsgNpcAutoIncomePlantUnlockS2C_descriptor_ = file->message_type(32);
  static const int MsgNpcAutoIncomePlantUnlockS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantUnlockS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantUnlockS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantUnlockS2C, idx_),
  };
  MsgNpcAutoIncomePlantUnlockS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomePlantUnlockS2C_descriptor_,
      MsgNpcAutoIncomePlantUnlockS2C::default_instance_,
      MsgNpcAutoIncomePlantUnlockS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantUnlockS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomePlantUnlockS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomePlantUnlockS2C));
  MsgNpcAutoIncomeMineDataGetC2S_descriptor_ = file->message_type(33);
  static const int MsgNpcAutoIncomeMineDataGetC2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineDataGetC2S, msgtype_),
  };
  MsgNpcAutoIncomeMineDataGetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeMineDataGetC2S_descriptor_,
      MsgNpcAutoIncomeMineDataGetC2S::default_instance_,
      MsgNpcAutoIncomeMineDataGetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineDataGetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineDataGetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeMineDataGetC2S));
  MsgNpcAutoIncomeMineDataGetS2C_descriptor_ = file->message_type(34);
  static const int MsgNpcAutoIncomeMineDataGetS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineDataGetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineDataGetS2C, data_),
  };
  MsgNpcAutoIncomeMineDataGetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeMineDataGetS2C_descriptor_,
      MsgNpcAutoIncomeMineDataGetS2C::default_instance_,
      MsgNpcAutoIncomeMineDataGetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineDataGetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineDataGetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeMineDataGetS2C));
  MsgNpcAutoIncomeMineSetC2S_descriptor_ = file->message_type(35);
  static const int MsgNpcAutoIncomeMineSetC2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineSetC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineSetC2S, biome_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineSetC2S, protectors_),
  };
  MsgNpcAutoIncomeMineSetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeMineSetC2S_descriptor_,
      MsgNpcAutoIncomeMineSetC2S::default_instance_,
      MsgNpcAutoIncomeMineSetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineSetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineSetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeMineSetC2S));
  MsgNpcAutoIncomeMineSetS2C_descriptor_ = file->message_type(36);
  static const int MsgNpcAutoIncomeMineSetS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineSetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineSetS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineSetS2C, data_),
  };
  MsgNpcAutoIncomeMineSetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeMineSetS2C_descriptor_,
      MsgNpcAutoIncomeMineSetS2C::default_instance_,
      MsgNpcAutoIncomeMineSetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineSetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineSetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeMineSetS2C));
  MsgNpcAutoIncomeMineTimeAwardGetC2S_descriptor_ = file->message_type(37);
  static const int MsgNpcAutoIncomeMineTimeAwardGetC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineTimeAwardGetC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineTimeAwardGetC2S, biome_id_),
  };
  MsgNpcAutoIncomeMineTimeAwardGetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeMineTimeAwardGetC2S_descriptor_,
      MsgNpcAutoIncomeMineTimeAwardGetC2S::default_instance_,
      MsgNpcAutoIncomeMineTimeAwardGetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineTimeAwardGetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineTimeAwardGetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeMineTimeAwardGetC2S));
  MsgNpcAutoIncomeMineTimeAwardGetS2C_descriptor_ = file->message_type(38);
  static const int MsgNpcAutoIncomeMineTimeAwardGetS2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineTimeAwardGetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineTimeAwardGetS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineTimeAwardGetS2C, biome_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineTimeAwardGetS2C, time_stamp_),
  };
  MsgNpcAutoIncomeMineTimeAwardGetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcAutoIncomeMineTimeAwardGetS2C_descriptor_,
      MsgNpcAutoIncomeMineTimeAwardGetS2C::default_instance_,
      MsgNpcAutoIncomeMineTimeAwardGetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineTimeAwardGetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcAutoIncomeMineTimeAwardGetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcAutoIncomeMineTimeAwardGetS2C));
  MsgNpcRefiningMineDataGetC2S_descriptor_ = file->message_type(39);
  static const int MsgNpcRefiningMineDataGetC2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineDataGetC2S, msgtype_),
  };
  MsgNpcRefiningMineDataGetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcRefiningMineDataGetC2S_descriptor_,
      MsgNpcRefiningMineDataGetC2S::default_instance_,
      MsgNpcRefiningMineDataGetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineDataGetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineDataGetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcRefiningMineDataGetC2S));
  MsgNpcRefiningMineDataGetS2C_descriptor_ = file->message_type(40);
  static const int MsgNpcRefiningMineDataGetS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineDataGetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineDataGetS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineDataGetS2C, refining_mine_data_),
  };
  MsgNpcRefiningMineDataGetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcRefiningMineDataGetS2C_descriptor_,
      MsgNpcRefiningMineDataGetS2C::default_instance_,
      MsgNpcRefiningMineDataGetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineDataGetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineDataGetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcRefiningMineDataGetS2C));
  MsgNpcRefiningMineSetC2S_descriptor_ = file->message_type(41);
  static const int MsgNpcRefiningMineSetC2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineSetC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineSetC2S, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineSetC2S, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineSetC2S, refining_index_),
  };
  MsgNpcRefiningMineSetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcRefiningMineSetC2S_descriptor_,
      MsgNpcRefiningMineSetC2S::default_instance_,
      MsgNpcRefiningMineSetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineSetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineSetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcRefiningMineSetC2S));
  MsgNpcRefiningMineSetS2C_descriptor_ = file->message_type(42);
  static const int MsgNpcRefiningMineSetS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineSetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineSetS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineSetS2C, refining_mine_data_),
  };
  MsgNpcRefiningMineSetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcRefiningMineSetS2C_descriptor_,
      MsgNpcRefiningMineSetS2C::default_instance_,
      MsgNpcRefiningMineSetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineSetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineSetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcRefiningMineSetS2C));
  MsgNpcRefiningMineAwardGetC2S_descriptor_ = file->message_type(43);
  static const int MsgNpcRefiningMineAwardGetC2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineAwardGetC2S, msgtype_),
  };
  MsgNpcRefiningMineAwardGetC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcRefiningMineAwardGetC2S_descriptor_,
      MsgNpcRefiningMineAwardGetC2S::default_instance_,
      MsgNpcRefiningMineAwardGetC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineAwardGetC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineAwardGetC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcRefiningMineAwardGetC2S));
  MsgNpcRefiningMineAwardGetS2C_descriptor_ = file->message_type(44);
  static const int MsgNpcRefiningMineAwardGetS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineAwardGetS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineAwardGetS2C, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineAwardGetS2C, award_info_),
  };
  MsgNpcRefiningMineAwardGetS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcRefiningMineAwardGetS2C_descriptor_,
      MsgNpcRefiningMineAwardGetS2C::default_instance_,
      MsgNpcRefiningMineAwardGetS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineAwardGetS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineAwardGetS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcRefiningMineAwardGetS2C));
  MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo_descriptor_ = MsgNpcRefiningMineAwardGetS2C_descriptor_->nested_type(0);
  static const int MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo, item_num_),
  };
  MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo_descriptor_,
      MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::default_instance_,
      MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgNpcAutoIncome_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcExploreData_descriptor_, &NpcExploreData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcFeedingData_descriptor_, &NpcFeedingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcFeedingData_info_descriptor_, &NpcFeedingData_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcPlantData_descriptor_, &NpcPlantData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcPlantData_info_descriptor_, &NpcPlantData_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcMineData_descriptor_, &NpcMineData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeBiomeData_descriptor_, &MsgNpcAutoIncomeBiomeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeFarmingData_descriptor_, &MsgNpcAutoIncomeFarmingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcRefiningMineData_descriptor_, &NpcRefiningMineData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcRefiningMineData_info_descriptor_, &NpcRefiningMineData_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeExploreDataGetC2S_descriptor_, &MsgNpcAutoIncomeExploreDataGetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeExploreDataGetS2C_descriptor_, &MsgNpcAutoIncomeExploreDataGetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeExploreSetC2S_descriptor_, &MsgNpcAutoIncomeExploreSetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeExploreSetS2C_descriptor_, &MsgNpcAutoIncomeExploreSetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeExploreUnlockNextBiomeC2S_descriptor_, &MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeExploreUnlockNextBiomeS2C_descriptor_, &MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeExploreTimeAwardGetC2S_descriptor_, &MsgNpcAutoIncomeExploreTimeAwardGetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeExploreTimeAwardGetS2C_descriptor_, &MsgNpcAutoIncomeExploreTimeAwardGetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeExplorePassStageC2S_descriptor_, &MsgNpcAutoIncomeExplorePassStageC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeExplorePassStageS2C_descriptor_, &MsgNpcAutoIncomeExplorePassStageS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeFeedingDataGetC2S_descriptor_, &MsgNpcAutoIncomeFeedingDataGetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeFeedingDataGetS2C_descriptor_, &MsgNpcAutoIncomeFeedingDataGetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeFeedingSetC2S_descriptor_, &MsgNpcAutoIncomeFeedingSetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeFeedingSetS2C_descriptor_, &MsgNpcAutoIncomeFeedingSetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeFeedingTimeAwardGetC2S_descriptor_, &MsgNpcAutoIncomeFeedingTimeAwardGetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeFeedingTimeAwardGetS2C_descriptor_, &MsgNpcAutoIncomeFeedingTimeAwardGetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeFeedingUnlockC2S_descriptor_, &MsgNpcAutoIncomeFeedingUnlockC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeFeedingUnlockS2C_descriptor_, &MsgNpcAutoIncomeFeedingUnlockS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomePlantDataGetC2S_descriptor_, &MsgNpcAutoIncomePlantDataGetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomePlantDataGetS2C_descriptor_, &MsgNpcAutoIncomePlantDataGetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomePlantSetC2S_descriptor_, &MsgNpcAutoIncomePlantSetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomePlantSetS2C_descriptor_, &MsgNpcAutoIncomePlantSetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomePlantTimeAwardGetC2S_descriptor_, &MsgNpcAutoIncomePlantTimeAwardGetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomePlantTimeAwardGetS2C_descriptor_, &MsgNpcAutoIncomePlantTimeAwardGetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomePlantUnlockC2S_descriptor_, &MsgNpcAutoIncomePlantUnlockC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomePlantUnlockS2C_descriptor_, &MsgNpcAutoIncomePlantUnlockS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeMineDataGetC2S_descriptor_, &MsgNpcAutoIncomeMineDataGetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeMineDataGetS2C_descriptor_, &MsgNpcAutoIncomeMineDataGetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeMineSetC2S_descriptor_, &MsgNpcAutoIncomeMineSetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeMineSetS2C_descriptor_, &MsgNpcAutoIncomeMineSetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeMineTimeAwardGetC2S_descriptor_, &MsgNpcAutoIncomeMineTimeAwardGetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcAutoIncomeMineTimeAwardGetS2C_descriptor_, &MsgNpcAutoIncomeMineTimeAwardGetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcRefiningMineDataGetC2S_descriptor_, &MsgNpcRefiningMineDataGetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcRefiningMineDataGetS2C_descriptor_, &MsgNpcRefiningMineDataGetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcRefiningMineSetC2S_descriptor_, &MsgNpcRefiningMineSetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcRefiningMineSetS2C_descriptor_, &MsgNpcRefiningMineSetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcRefiningMineAwardGetC2S_descriptor_, &MsgNpcRefiningMineAwardGetC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcRefiningMineAwardGetS2C_descriptor_, &MsgNpcRefiningMineAwardGetS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo_descriptor_, &MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgNpcAutoIncome_2eproto() {
  delete NpcExploreData::default_instance_;
  delete NpcExploreData_reflection_;
  delete NpcFeedingData::default_instance_;
  delete NpcFeedingData_reflection_;
  delete NpcFeedingData_info::default_instance_;
  delete NpcFeedingData_info_reflection_;
  delete NpcPlantData::default_instance_;
  delete NpcPlantData_reflection_;
  delete NpcPlantData_info::default_instance_;
  delete NpcPlantData_info_reflection_;
  delete NpcMineData::default_instance_;
  delete NpcMineData_reflection_;
  delete MsgNpcAutoIncomeBiomeData::default_instance_;
  delete MsgNpcAutoIncomeBiomeData_reflection_;
  delete MsgNpcAutoIncomeFarmingData::default_instance_;
  delete MsgNpcAutoIncomeFarmingData_reflection_;
  delete NpcRefiningMineData::default_instance_;
  delete NpcRefiningMineData_reflection_;
  delete NpcRefiningMineData_info::default_instance_;
  delete NpcRefiningMineData_info_reflection_;
  delete MsgNpcAutoIncomeExploreDataGetC2S::default_instance_;
  delete MsgNpcAutoIncomeExploreDataGetC2S_reflection_;
  delete MsgNpcAutoIncomeExploreDataGetS2C::default_instance_;
  delete MsgNpcAutoIncomeExploreDataGetS2C_reflection_;
  delete MsgNpcAutoIncomeExploreSetC2S::default_instance_;
  delete MsgNpcAutoIncomeExploreSetC2S_reflection_;
  delete MsgNpcAutoIncomeExploreSetS2C::default_instance_;
  delete MsgNpcAutoIncomeExploreSetS2C_reflection_;
  delete MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::default_instance_;
  delete MsgNpcAutoIncomeExploreUnlockNextBiomeC2S_reflection_;
  delete MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::default_instance_;
  delete MsgNpcAutoIncomeExploreUnlockNextBiomeS2C_reflection_;
  delete MsgNpcAutoIncomeExploreTimeAwardGetC2S::default_instance_;
  delete MsgNpcAutoIncomeExploreTimeAwardGetC2S_reflection_;
  delete MsgNpcAutoIncomeExploreTimeAwardGetS2C::default_instance_;
  delete MsgNpcAutoIncomeExploreTimeAwardGetS2C_reflection_;
  delete MsgNpcAutoIncomeExplorePassStageC2S::default_instance_;
  delete MsgNpcAutoIncomeExplorePassStageC2S_reflection_;
  delete MsgNpcAutoIncomeExplorePassStageS2C::default_instance_;
  delete MsgNpcAutoIncomeExplorePassStageS2C_reflection_;
  delete MsgNpcAutoIncomeFeedingDataGetC2S::default_instance_;
  delete MsgNpcAutoIncomeFeedingDataGetC2S_reflection_;
  delete MsgNpcAutoIncomeFeedingDataGetS2C::default_instance_;
  delete MsgNpcAutoIncomeFeedingDataGetS2C_reflection_;
  delete MsgNpcAutoIncomeFeedingSetC2S::default_instance_;
  delete MsgNpcAutoIncomeFeedingSetC2S_reflection_;
  delete MsgNpcAutoIncomeFeedingSetS2C::default_instance_;
  delete MsgNpcAutoIncomeFeedingSetS2C_reflection_;
  delete MsgNpcAutoIncomeFeedingTimeAwardGetC2S::default_instance_;
  delete MsgNpcAutoIncomeFeedingTimeAwardGetC2S_reflection_;
  delete MsgNpcAutoIncomeFeedingTimeAwardGetS2C::default_instance_;
  delete MsgNpcAutoIncomeFeedingTimeAwardGetS2C_reflection_;
  delete MsgNpcAutoIncomeFeedingUnlockC2S::default_instance_;
  delete MsgNpcAutoIncomeFeedingUnlockC2S_reflection_;
  delete MsgNpcAutoIncomeFeedingUnlockS2C::default_instance_;
  delete MsgNpcAutoIncomeFeedingUnlockS2C_reflection_;
  delete MsgNpcAutoIncomePlantDataGetC2S::default_instance_;
  delete MsgNpcAutoIncomePlantDataGetC2S_reflection_;
  delete MsgNpcAutoIncomePlantDataGetS2C::default_instance_;
  delete MsgNpcAutoIncomePlantDataGetS2C_reflection_;
  delete MsgNpcAutoIncomePlantSetC2S::default_instance_;
  delete MsgNpcAutoIncomePlantSetC2S_reflection_;
  delete MsgNpcAutoIncomePlantSetS2C::default_instance_;
  delete MsgNpcAutoIncomePlantSetS2C_reflection_;
  delete MsgNpcAutoIncomePlantTimeAwardGetC2S::default_instance_;
  delete MsgNpcAutoIncomePlantTimeAwardGetC2S_reflection_;
  delete MsgNpcAutoIncomePlantTimeAwardGetS2C::default_instance_;
  delete MsgNpcAutoIncomePlantTimeAwardGetS2C_reflection_;
  delete MsgNpcAutoIncomePlantUnlockC2S::default_instance_;
  delete MsgNpcAutoIncomePlantUnlockC2S_reflection_;
  delete MsgNpcAutoIncomePlantUnlockS2C::default_instance_;
  delete MsgNpcAutoIncomePlantUnlockS2C_reflection_;
  delete MsgNpcAutoIncomeMineDataGetC2S::default_instance_;
  delete MsgNpcAutoIncomeMineDataGetC2S_reflection_;
  delete MsgNpcAutoIncomeMineDataGetS2C::default_instance_;
  delete MsgNpcAutoIncomeMineDataGetS2C_reflection_;
  delete MsgNpcAutoIncomeMineSetC2S::default_instance_;
  delete MsgNpcAutoIncomeMineSetC2S_reflection_;
  delete MsgNpcAutoIncomeMineSetS2C::default_instance_;
  delete MsgNpcAutoIncomeMineSetS2C_reflection_;
  delete MsgNpcAutoIncomeMineTimeAwardGetC2S::default_instance_;
  delete MsgNpcAutoIncomeMineTimeAwardGetC2S_reflection_;
  delete MsgNpcAutoIncomeMineTimeAwardGetS2C::default_instance_;
  delete MsgNpcAutoIncomeMineTimeAwardGetS2C_reflection_;
  delete MsgNpcRefiningMineDataGetC2S::default_instance_;
  delete MsgNpcRefiningMineDataGetC2S_reflection_;
  delete MsgNpcRefiningMineDataGetS2C::default_instance_;
  delete MsgNpcRefiningMineDataGetS2C_reflection_;
  delete MsgNpcRefiningMineSetC2S::default_instance_;
  delete MsgNpcRefiningMineSetC2S_reflection_;
  delete MsgNpcRefiningMineSetS2C::default_instance_;
  delete MsgNpcRefiningMineSetS2C_reflection_;
  delete MsgNpcRefiningMineAwardGetC2S::default_instance_;
  delete MsgNpcRefiningMineAwardGetC2S_reflection_;
  delete MsgNpcRefiningMineAwardGetS2C::default_instance_;
  delete MsgNpcRefiningMineAwardGetS2C_reflection_;
  delete MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::default_instance_;
  delete MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo_reflection_;
}

void protobuf_AddDesc_MsgNpcAutoIncome_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgGameDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026MsgNpcAutoIncome.proto\022\005MsgPB\032\rMsgType"
    ".proto\032\020MsgGameDef.proto\"Y\n\016NpcExploreDa"
    "ta\022\020\n\010biome_id\030\001 \001(\003\022\r\n\005stage\030\002 \001(\005\022\022\n\np"
    "rotectors\030\003 \003(\005\022\022\n\ntime_stamp\030\004 \001(\003\"\322\001\n\016"
    "NpcFeedingData\022,\n\010feedings\030\001 \003(\0132\032.MsgPB"
    ".NpcFeedingData.info\032\221\001\n\004info\022\020\n\010fence_i"
    "d\030\001 \001(\005\022\021\n\tprotector\030\002 \001(\005\022\020\n\010item_num\030\003"
    " \001(\005\022\022\n\ntime_stamp\030\004 \001(\003\022\023\n\013reward_time\030"
    "\005 \001(\005\022\020\n\010cost_num\030\006 \001(\005\022\027\n\017accumulate_ti"
    "me\030\007 \001(\005\"\332\001\n\014NpcPlantData\022(\n\006plants\030\001 \003("
    "\0132\030.MsgPB.NpcPlantData.info\032\237\001\n\004info\022\021\n\t"
    "protector\030\001 \001(\005\022\017\n\007item_id\030\002 \001(\005\022\020\n\010item"
    "_num\030\003 \001(\005\022\022\n\ntime_stamp\030\004 \001(\003\022\023\n\013reward"
    "_time\030\005 \001(\005\022\r\n\005index\030\006 \001(\005\022\020\n\010cost_num\030\007"
    " \001(\005\022\027\n\017accumulate_time\030\010 \001(\005\"G\n\013NpcMine"
    "Data\022\020\n\010biome_id\030\001 \001(\003\022\022\n\nprotectors\030\002 \003"
    "(\005\022\022\n\ntime_stamp\030\003 \001(\003\"\237\001\n\031MsgNpcAutoInc"
    "omeBiomeData\022\r\n\005iggid\030\001 \001(\003\022\020\n\010biome_id\030"
    "\002 \001(\003\022+\n\014explore_data\030\003 \001(\0132\025.MsgPB.NpcE"
    "xploreData\022%\n\tmine_data\030\004 \001(\0132\022.MsgPB.Np"
    "cMineData\022\r\n\005dirty\030\005 \001(\003\"\311\001\n\033MsgNpcAutoI"
    "ncomeFarmingData\022\r\n\005iggid\030\001 \001(\003\022+\n\014feedi"
    "ng_data\030\002 \001(\0132\025.MsgPB.NpcFeedingData\022\'\n\n"
    "plant_data\030\003 \001(\0132\023.MsgPB.NpcPlantData\0226\n"
    "\022refining_mine_data\030\004 \001(\0132\032.MsgPB.NpcRef"
    "iningMineData\022\r\n\005dirty\030\005 \001(\003\"\273\001\n\023NpcRefi"
    "ningMineData\022;\n\022refining_mine_data\030\001 \003(\013"
    "2\037.MsgPB.NpcRefiningMineData.info\022\022\n\nbeg"
    "in_time\030\002 \001(\003\022\023\n\013remain_time\030\003 \001(\003\032>\n\004in"
    "fo\022\017\n\007mine_id\030\001 \001(\005\022\020\n\010mine_num\030\002 \001(\005\022\023\n"
    "\013reward_time\030\003 \001(\005\"p\n!MsgNpcAutoIncomeEx"
    "ploreDataGetC2S\022K\n\007msgType\030\001 \001(\0162\017.MsgPB"
    ".EMsgType:)_MSG_NPC_AUTO_INCOME_EXPLORE_"
    "DATA_GET_C2S\"\225\001\n!MsgNpcAutoIncomeExplore"
    "DataGetS2C\022K\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsg"
    "Type:)_MSG_NPC_AUTO_INCOME_EXPLORE_DATA_"
    "GET_S2C\022#\n\004data\030\002 \003(\0132\025.MsgPB.NpcExplore"
    "Data\"\215\001\n\035MsgNpcAutoIncomeExploreSetC2S\022F"
    "\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:$_MSG_N"
    "PC_AUTO_INCOME_EXPLORE_SET_C2S\022\020\n\010biome_"
    "id\030\002 \001(\003\022\022\n\nprotectors\030\003 \003(\005\"\266\001\n\035MsgNpcA"
    "utoIncomeExploreSetS2C\022F\n\007msgType\030\001 \001(\0162"
    "\017.MsgPB.EMsgType:$_MSG_NPC_AUTO_INCOME_E"
    "XPLORE_SET_S2C\022(\n\003res\030\002 \001(\0162\022.MsgPB.E_Er"
    "rorCode:\007EC_Fail\022#\n\004data\030\003 \001(\0132\025.MsgPB.N"
    "pcExploreData\"\223\001\n)MsgNpcAutoIncomeExplor"
    "eUnlockNextBiomeC2S\022T\n\007msgType\030\001 \001(\0162\017.M"
    "sgPB.EMsgType:2_MSG_NPC_AUTO_INCOME_EXPL"
    "ORE_UNLOCK_NEXT_BIOME_C2S\022\020\n\010biome_id\030\002 "
    "\001(\003\"\320\001\n)MsgNpcAutoIncomeExploreUnlockNex"
    "tBiomeS2C\022T\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgT"
    "ype:2_MSG_NPC_AUTO_INCOME_EXPLORE_UNLOCK"
    "_NEXT_BIOME_S2C\022(\n\003res\030\002 \001(\0162\022.MsgPB.E_E"
    "rrorCode:\007EC_Fail\022#\n\004data\030\003 \003(\0132\025.MsgPB."
    "NpcExploreData\"\215\001\n&MsgNpcAutoIncomeExplo"
    "reTimeAwardGetC2S\022Q\n\007msgType\030\001 \001(\0162\017.Msg"
    "PB.EMsgType:/_MSG_NPC_AUTO_INCOME_EXPLOR"
    "E_TIME_AWARD_GET_C2S\022\020\n\010biome_id\030\002 \001(\003\"\313"
    "\001\n&MsgNpcAutoIncomeExploreTimeAwardGetS2"
    "C\022Q\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:/_MS"
    "G_NPC_AUTO_INCOME_EXPLORE_TIME_AWARD_GET"
    "_S2C\022(\n\003res\030\002 \001(\0162\022.MsgPB.E_ErrorCode:\007E"
    "C_Fail\022\020\n\010biome_id\030\003 \001(\003\022\022\n\ntime_stamp\030\004"
    " \001(\003\"\206\001\n#MsgNpcAutoIncomeExplorePassStag"
    "eC2S\022M\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:+"
    "_MSG_NPC_AUTO_INCOME_EXPLORE_PASS_STAGE_"
    "C2S\022\020\n\010biome_id\030\002 \001(\003\"\277\001\n#MsgNpcAutoInco"
    "meExplorePassStageS2C\022M\n\007msgType\030\001 \001(\0162\017"
    ".MsgPB.EMsgType:+_MSG_NPC_AUTO_INCOME_EX"
    "PLORE_PASS_STAGE_S2C\022(\n\003res\030\002 \001(\0162\022.MsgP"
    "B.E_ErrorCode:\007EC_Fail\022\020\n\010biome_id\030\003 \001(\003"
    "\022\r\n\005stage\030\004 \001(\005\"p\n!MsgNpcAutoIncomeFeedi"
    "ngDataGetC2S\022K\n\007msgType\030\001 \001(\0162\017.MsgPB.EM"
    "sgType:)_MSG_NPC_AUTO_INCOME_FEEDING_DAT"
    "A_GET_C2S\"\277\001\n!MsgNpcAutoIncomeFeedingDat"
    "aGetS2C\022K\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTyp"
    "e:)_MSG_NPC_AUTO_INCOME_FEEDING_DATA_GET"
    "_S2C\022(\n\003res\030\002 \001(\0162\022.MsgPB.E_ErrorCode:\007E"
    "C_Fail\022#\n\004data\030\003 \001(\0132\025.MsgPB.NpcFeedingD"
    "ata\"\236\001\n\035MsgNpcAutoIncomeFeedingSetC2S\022F\n"
    "\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:$_MSG_NP"
    "C_AUTO_INCOME_FEEDING_SET_C2S\022\020\n\010fence_i"
    "d\030\002 \001(\005\022\021\n\tprotector\030\003 \001(\005\022\020\n\010item_num\030\004"
    " \001(\005\"\315\001\n\035MsgNpcAutoIncomeFeedingSetS2C\022F"
    "\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:$_MSG_N"
    "PC_AUTO_INCOME_FEEDING_SET_S2C\022(\n\003res\030\002 "
    "\001(\0162\022.MsgPB.E_ErrorCode:\007EC_Fail\022\020\n\010fenc"
    "e_id\030\003 \001(\005\022(\n\004data\030\004 \001(\0132\032.MsgPB.NpcFeed"
    "ingData.info\"{\n&MsgNpcAutoIncomeFeedingT"
    "imeAwardGetC2S\022Q\n\007msgType\030\001 \001(\0162\017.MsgPB."
    "EMsgType:/_MSG_NPC_AUTO_INCOME_FEEDING_T"
    "IME_AWARD_GET_C2S\"\312\001\n&MsgNpcAutoIncomeFe"
    "edingTimeAwardGetS2C\022Q\n\007msgType\030\001 \001(\0162\017."
    "MsgPB.EMsgType:/_MSG_NPC_AUTO_INCOME_FEE"
    "DING_TIME_AWARD_GET_S2C\022(\n\003res\030\002 \001(\0162\022.M"
    "sgPB.E_ErrorCode:\007EC_Fail\022#\n\004data\030\003 \001(\0132"
    "\025.MsgPB.NpcFeedingData\"\177\n MsgNpcAutoInco"
    "meFeedingUnlockC2S\022I\n\007msgType\030\001 \001(\0162\017.Ms"
    "gPB.EMsgType:\'_MSG_NPC_AUTO_INCOME_FEEDI"
    "NG_UNLOCK_C2S\022\020\n\010fence_id\030\002 \001(\005\"\251\001\n MsgN"
    "pcAutoIncomeFeedingUnlockS2C\022I\n\007msgType\030"
    "\001 \001(\0162\017.MsgPB.EMsgType:\'_MSG_NPC_AUTO_IN"
    "COME_FEEDING_UNLOCK_S2C\022(\n\003res\030\002 \001(\0162\022.M"
    "sgPB.E_ErrorCode:\007EC_Fail\022\020\n\010fence_id\030\003 "
    "\001(\005\"l\n\037MsgNpcAutoIncomePlantDataGetC2S\022I"
    "\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\'_MSG_N"
    "PC_AUTO_INCOME_PLANT_DATA_GET_C2S\"\271\001\n\037Ms"
    "gNpcAutoIncomePlantDataGetS2C\022I\n\007msgType"
    "\030\001 \001(\0162\017.MsgPB.EMsgType:\'_MSG_NPC_AUTO_I"
    "NCOME_PLANT_DATA_GET_S2C\022(\n\003res\030\002 \001(\0162\022."
    "MsgPB.E_ErrorCode:\007EC_Fail\022!\n\004data\030\003 \001(\013"
    "2\023.MsgPB.NpcPlantData\"\246\001\n\033MsgNpcAutoInco"
    "mePlantSetC2S\022D\n\007msgType\030\001 \001(\0162\017.MsgPB.E"
    "MsgType:\"_MSG_NPC_AUTO_INCOME_PLANT_SET_"
    "C2S\022\013\n\003idx\030\002 \001(\005\022\021\n\tprotector\030\003 \001(\005\022\017\n\007i"
    "tem_id\030\004 \001(\005\022\020\n\010item_num\030\005 \001(\005\"\302\001\n\033MsgNp"
    "cAutoIncomePlantSetS2C\022D\n\007msgType\030\001 \001(\0162"
    "\017.MsgPB.EMsgType:\"_MSG_NPC_AUTO_INCOME_P"
    "LANT_SET_S2C\022(\n\003res\030\002 \001(\0162\022.MsgPB.E_Erro"
    "rCode:\007EC_Fail\022\013\n\003idx\030\003 \001(\005\022&\n\004data\030\004 \001("
    "\0132\030.MsgPB.NpcPlantData.info\"w\n$MsgNpcAut"
    "oIncomePlantTimeAwardGetC2S\022O\n\007msgType\030\001"
    " \001(\0162\017.MsgPB.EMsgType:-_MSG_NPC_AUTO_INC"
    "OME_PLANT_TIME_AWARD_GET_C2S\"\304\001\n$MsgNpcA"
    "utoIncomePlantTimeAwardGetS2C\022O\n\007msgType"
    "\030\001 \001(\0162\017.MsgPB.EMsgType:-_MSG_NPC_AUTO_I"
    "NCOME_PLANT_TIME_AWARD_GET_S2C\022(\n\003res\030\002 "
    "\001(\0162\022.MsgPB.E_ErrorCode:\007EC_Fail\022!\n\004data"
    "\030\003 \001(\0132\023.MsgPB.NpcPlantData\"v\n\036MsgNpcAut"
    "oIncomePlantUnlockC2S\022G\n\007msgType\030\001 \001(\0162\017"
    ".MsgPB.EMsgType:%_MSG_NPC_AUTO_INCOME_PL"
    "ANT_UNLOCK_C2S\022\013\n\003idx\030\002 \001(\005\"\240\001\n\036MsgNpcAu"
    "toIncomePlantUnlockS2C\022G\n\007msgType\030\001 \001(\0162"
    "\017.MsgPB.EMsgType:%_MSG_NPC_AUTO_INCOME_P"
    "LANT_UNLOCK_S2C\022(\n\003res\030\002 \001(\0162\022.MsgPB.E_E"
    "rrorCode:\007EC_Fail\022\013\n\003idx\030\003 \001(\005\"j\n\036MsgNpc"
    "AutoIncomeMineDataGetC2S\022H\n\007msgType\030\001 \001("
    "\0162\017.MsgPB.EMsgType:&_MSG_NPC_AUTO_INCOME"
    "_MINE_DATA_GET_C2S\"\214\001\n\036MsgNpcAutoIncomeM"
    "ineDataGetS2C\022H\n\007msgType\030\001 \001(\0162\017.MsgPB.E"
    "MsgType:&_MSG_NPC_AUTO_INCOME_MINE_DATA_"
    "GET_S2C\022 \n\004data\030\002 \003(\0132\022.MsgPB.NpcMineDat"
    "a\"\207\001\n\032MsgNpcAutoIncomeMineSetC2S\022C\n\007msgT"
    "ype\030\001 \001(\0162\017.MsgPB.EMsgType:!_MSG_NPC_AUT"
    "O_INCOME_MINE_SET_C2S\022\020\n\010biome_id\030\002 \001(\003\022"
    "\022\n\nprotectors\030\003 \003(\005\"\255\001\n\032MsgNpcAutoIncome"
    "MineSetS2C\022C\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsg"
    "Type:!_MSG_NPC_AUTO_INCOME_MINE_SET_S2C\022"
    "(\n\003res\030\002 \001(\0162\022.MsgPB.E_ErrorCode:\007EC_Fai"
    "l\022 \n\004data\030\003 \001(\0132\022.MsgPB.NpcMineData\"\207\001\n#"
    "MsgNpcAutoIncomeMineTimeAwardGetC2S\022N\n\007m"
    "sgType\030\001 \001(\0162\017.MsgPB.EMsgType:,_MSG_NPC_"
    "AUTO_INCOME_MINE_TIME_AWARD_GET_C2S\022\020\n\010b"
    "iome_id\030\002 \001(\003\"\305\001\n#MsgNpcAutoIncomeMineTi"
    "meAwardGetS2C\022N\n\007msgType\030\001 \001(\0162\017.MsgPB.E"
    "MsgType:,_MSG_NPC_AUTO_INCOME_MINE_TIME_"
    "AWARD_GET_S2C\022(\n\003res\030\002 \001(\0162\022.MsgPB.E_Err"
    "orCode:\007EC_Fail\022\020\n\010biome_id\030\003 \001(\003\022\022\n\ntim"
    "e_stamp\030\004 \001(\003\"e\n\034MsgNpcRefiningMineDataG"
    "etC2S\022E\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:"
    "#_MSG_NPC_REFINING_MINE_DATA_GET_C2S\"\307\001\n"
    "\034MsgNpcRefiningMineDataGetS2C\022E\n\007msgType"
    "\030\001 \001(\0162\017.MsgPB.EMsgType:#_MSG_NPC_REFINI"
    "NG_MINE_DATA_GET_S2C\022(\n\003res\030\002 \001(\0162\022.MsgP"
    "B.E_ErrorCode:\007EC_Fail\0226\n\022refining_mine_"
    "data\030\003 \001(\0132\032.MsgPB.NpcRefiningMineData\"\227"
    "\001\n\030MsgNpcRefiningMineSetC2S\022@\n\007msgType\030\001"
    " \001(\0162\017.MsgPB.EMsgType:\036_MSG_NPC_REFINING"
    "_MINE_SET_C2S\022\017\n\007item_id\030\002 \001(\005\022\020\n\010item_n"
    "um\030\003 \001(\005\022\026\n\016refining_index\030\004 \001(\005\"\276\001\n\030Msg"
    "NpcRefiningMineSetS2C\022@\n\007msgType\030\001 \001(\0162\017"
    ".MsgPB.EMsgType:\036_MSG_NPC_REFINING_MINE_"
    "SET_S2C\022(\n\003res\030\002 \001(\0162\022.MsgPB.E_ErrorCode"
    ":\007EC_Fail\0226\n\022refining_mine_data\030\003 \001(\0132\032."
    "MsgPB.NpcRefiningMineData\"g\n\035MsgNpcRefin"
    "ingMineAwardGetC2S\022F\n\007msgType\030\001 \001(\0162\017.Ms"
    "gPB.EMsgType:$_MSG_NPC_REFINING_MINE_AWA"
    "RD_GET_C2S\"\225\002\n\035MsgNpcRefiningMineAwardGe"
    "tS2C\022F\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:$"
    "_MSG_NPC_REFINING_MINE_AWARD_GET_S2C\022(\n\003"
    "res\030\002 \001(\0162\022.MsgPB.E_ErrorCode:\007EC_Fail\022J"
    "\n\naward_info\030\003 \003(\01326.MsgPB.MsgNpcRefinin"
    "gMineAwardGetS2C.RefiningAwardInfo\0326\n\021Re"
    "finingAwardInfo\022\017\n\007item_id\030\001 \001(\005\022\020\n\010item"
    "_num\030\002 \001(\005", 7370);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgNpcAutoIncome.proto", &protobuf_RegisterTypes);
  NpcExploreData::default_instance_ = new NpcExploreData();
  NpcFeedingData::default_instance_ = new NpcFeedingData();
  NpcFeedingData_info::default_instance_ = new NpcFeedingData_info();
  NpcPlantData::default_instance_ = new NpcPlantData();
  NpcPlantData_info::default_instance_ = new NpcPlantData_info();
  NpcMineData::default_instance_ = new NpcMineData();
  MsgNpcAutoIncomeBiomeData::default_instance_ = new MsgNpcAutoIncomeBiomeData();
  MsgNpcAutoIncomeFarmingData::default_instance_ = new MsgNpcAutoIncomeFarmingData();
  NpcRefiningMineData::default_instance_ = new NpcRefiningMineData();
  NpcRefiningMineData_info::default_instance_ = new NpcRefiningMineData_info();
  MsgNpcAutoIncomeExploreDataGetC2S::default_instance_ = new MsgNpcAutoIncomeExploreDataGetC2S();
  MsgNpcAutoIncomeExploreDataGetS2C::default_instance_ = new MsgNpcAutoIncomeExploreDataGetS2C();
  MsgNpcAutoIncomeExploreSetC2S::default_instance_ = new MsgNpcAutoIncomeExploreSetC2S();
  MsgNpcAutoIncomeExploreSetS2C::default_instance_ = new MsgNpcAutoIncomeExploreSetS2C();
  MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::default_instance_ = new MsgNpcAutoIncomeExploreUnlockNextBiomeC2S();
  MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::default_instance_ = new MsgNpcAutoIncomeExploreUnlockNextBiomeS2C();
  MsgNpcAutoIncomeExploreTimeAwardGetC2S::default_instance_ = new MsgNpcAutoIncomeExploreTimeAwardGetC2S();
  MsgNpcAutoIncomeExploreTimeAwardGetS2C::default_instance_ = new MsgNpcAutoIncomeExploreTimeAwardGetS2C();
  MsgNpcAutoIncomeExplorePassStageC2S::default_instance_ = new MsgNpcAutoIncomeExplorePassStageC2S();
  MsgNpcAutoIncomeExplorePassStageS2C::default_instance_ = new MsgNpcAutoIncomeExplorePassStageS2C();
  MsgNpcAutoIncomeFeedingDataGetC2S::default_instance_ = new MsgNpcAutoIncomeFeedingDataGetC2S();
  MsgNpcAutoIncomeFeedingDataGetS2C::default_instance_ = new MsgNpcAutoIncomeFeedingDataGetS2C();
  MsgNpcAutoIncomeFeedingSetC2S::default_instance_ = new MsgNpcAutoIncomeFeedingSetC2S();
  MsgNpcAutoIncomeFeedingSetS2C::default_instance_ = new MsgNpcAutoIncomeFeedingSetS2C();
  MsgNpcAutoIncomeFeedingTimeAwardGetC2S::default_instance_ = new MsgNpcAutoIncomeFeedingTimeAwardGetC2S();
  MsgNpcAutoIncomeFeedingTimeAwardGetS2C::default_instance_ = new MsgNpcAutoIncomeFeedingTimeAwardGetS2C();
  MsgNpcAutoIncomeFeedingUnlockC2S::default_instance_ = new MsgNpcAutoIncomeFeedingUnlockC2S();
  MsgNpcAutoIncomeFeedingUnlockS2C::default_instance_ = new MsgNpcAutoIncomeFeedingUnlockS2C();
  MsgNpcAutoIncomePlantDataGetC2S::default_instance_ = new MsgNpcAutoIncomePlantDataGetC2S();
  MsgNpcAutoIncomePlantDataGetS2C::default_instance_ = new MsgNpcAutoIncomePlantDataGetS2C();
  MsgNpcAutoIncomePlantSetC2S::default_instance_ = new MsgNpcAutoIncomePlantSetC2S();
  MsgNpcAutoIncomePlantSetS2C::default_instance_ = new MsgNpcAutoIncomePlantSetS2C();
  MsgNpcAutoIncomePlantTimeAwardGetC2S::default_instance_ = new MsgNpcAutoIncomePlantTimeAwardGetC2S();
  MsgNpcAutoIncomePlantTimeAwardGetS2C::default_instance_ = new MsgNpcAutoIncomePlantTimeAwardGetS2C();
  MsgNpcAutoIncomePlantUnlockC2S::default_instance_ = new MsgNpcAutoIncomePlantUnlockC2S();
  MsgNpcAutoIncomePlantUnlockS2C::default_instance_ = new MsgNpcAutoIncomePlantUnlockS2C();
  MsgNpcAutoIncomeMineDataGetC2S::default_instance_ = new MsgNpcAutoIncomeMineDataGetC2S();
  MsgNpcAutoIncomeMineDataGetS2C::default_instance_ = new MsgNpcAutoIncomeMineDataGetS2C();
  MsgNpcAutoIncomeMineSetC2S::default_instance_ = new MsgNpcAutoIncomeMineSetC2S();
  MsgNpcAutoIncomeMineSetS2C::default_instance_ = new MsgNpcAutoIncomeMineSetS2C();
  MsgNpcAutoIncomeMineTimeAwardGetC2S::default_instance_ = new MsgNpcAutoIncomeMineTimeAwardGetC2S();
  MsgNpcAutoIncomeMineTimeAwardGetS2C::default_instance_ = new MsgNpcAutoIncomeMineTimeAwardGetS2C();
  MsgNpcRefiningMineDataGetC2S::default_instance_ = new MsgNpcRefiningMineDataGetC2S();
  MsgNpcRefiningMineDataGetS2C::default_instance_ = new MsgNpcRefiningMineDataGetS2C();
  MsgNpcRefiningMineSetC2S::default_instance_ = new MsgNpcRefiningMineSetC2S();
  MsgNpcRefiningMineSetS2C::default_instance_ = new MsgNpcRefiningMineSetS2C();
  MsgNpcRefiningMineAwardGetC2S::default_instance_ = new MsgNpcRefiningMineAwardGetC2S();
  MsgNpcRefiningMineAwardGetS2C::default_instance_ = new MsgNpcRefiningMineAwardGetS2C();
  MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::default_instance_ = new MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo();
  NpcExploreData::default_instance_->InitAsDefaultInstance();
  NpcFeedingData::default_instance_->InitAsDefaultInstance();
  NpcFeedingData_info::default_instance_->InitAsDefaultInstance();
  NpcPlantData::default_instance_->InitAsDefaultInstance();
  NpcPlantData_info::default_instance_->InitAsDefaultInstance();
  NpcMineData::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeBiomeData::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeFarmingData::default_instance_->InitAsDefaultInstance();
  NpcRefiningMineData::default_instance_->InitAsDefaultInstance();
  NpcRefiningMineData_info::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeExploreDataGetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeExploreDataGetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeExploreSetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeExploreSetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeExploreTimeAwardGetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeExploreTimeAwardGetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeExplorePassStageC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeExplorePassStageS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeFeedingDataGetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeFeedingDataGetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeFeedingSetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeFeedingSetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeFeedingTimeAwardGetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeFeedingTimeAwardGetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeFeedingUnlockC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeFeedingUnlockS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomePlantDataGetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomePlantDataGetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomePlantSetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomePlantSetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomePlantTimeAwardGetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomePlantTimeAwardGetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomePlantUnlockC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomePlantUnlockS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeMineDataGetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeMineDataGetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeMineSetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeMineSetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeMineTimeAwardGetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcAutoIncomeMineTimeAwardGetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcRefiningMineDataGetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcRefiningMineDataGetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcRefiningMineSetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcRefiningMineSetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcRefiningMineAwardGetC2S::default_instance_->InitAsDefaultInstance();
  MsgNpcRefiningMineAwardGetS2C::default_instance_->InitAsDefaultInstance();
  MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgNpcAutoIncome_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgNpcAutoIncome_2eproto {
  StaticDescriptorInitializer_MsgNpcAutoIncome_2eproto() {
    protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  }
} static_descriptor_initializer_MsgNpcAutoIncome_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NpcExploreData::kBiomeIdFieldNumber;
const int NpcExploreData::kStageFieldNumber;
const int NpcExploreData::kProtectorsFieldNumber;
const int NpcExploreData::kTimeStampFieldNumber;
#endif  // !_MSC_VER

NpcExploreData::NpcExploreData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.NpcExploreData)
}

void NpcExploreData::InitAsDefaultInstance() {
}

NpcExploreData::NpcExploreData(const NpcExploreData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.NpcExploreData)
}

void NpcExploreData::SharedCtor() {
  _cached_size_ = 0;
  biome_id_ = GOOGLE_LONGLONG(0);
  stage_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcExploreData::~NpcExploreData() {
  // @@protoc_insertion_point(destructor:MsgPB.NpcExploreData)
  SharedDtor();
}

void NpcExploreData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcExploreData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcExploreData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcExploreData_descriptor_;
}

const NpcExploreData& NpcExploreData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

NpcExploreData* NpcExploreData::default_instance_ = NULL;

NpcExploreData* NpcExploreData::New() const {
  return new NpcExploreData;
}

void NpcExploreData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NpcExploreData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(time_stamp_, stage_);
    biome_id_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  protectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcExploreData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.NpcExploreData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 biome_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &biome_id_)));
          set_has_biome_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stage;
        break;
      }

      // optional int32 stage = 2;
      case 2: {
        if (tag == 16) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_protectors;
        break;
      }

      // repeated int32 protectors = 3;
      case 3: {
        if (tag == 24) {
         parse_protectors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_protectors())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_protectors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_protectors;
        if (input->ExpectTag(32)) goto parse_time_stamp;
        break;
      }

      // optional int64 time_stamp = 4;
      case 4: {
        if (tag == 32) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.NpcExploreData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.NpcExploreData)
  return false;
#undef DO_
}

void NpcExploreData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.NpcExploreData)
  // optional int64 biome_id = 1;
  if (has_biome_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->biome_id(), output);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage(), output);
  }

  // repeated int32 protectors = 3;
  for (int i = 0; i < this->protectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->protectors(i), output);
  }

  // optional int64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.NpcExploreData)
}

::google::protobuf::uint8* NpcExploreData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.NpcExploreData)
  // optional int64 biome_id = 1;
  if (has_biome_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->biome_id(), target);
  }

  // optional int32 stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage(), target);
  }

  // repeated int32 protectors = 3;
  for (int i = 0; i < this->protectors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->protectors(i), target);
  }

  // optional int64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.NpcExploreData)
  return target;
}

int NpcExploreData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 biome_id = 1;
    if (has_biome_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->biome_id());
    }

    // optional int32 stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional int64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

  }
  // repeated int32 protectors = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->protectors_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->protectors(i));
    }
    total_size += 1 * this->protectors_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcExploreData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcExploreData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcExploreData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcExploreData::MergeFrom(const NpcExploreData& from) {
  GOOGLE_CHECK_NE(&from, this);
  protectors_.MergeFrom(from.protectors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_biome_id()) {
      set_biome_id(from.biome_id());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcExploreData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcExploreData::CopyFrom(const NpcExploreData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcExploreData::IsInitialized() const {

  return true;
}

void NpcExploreData::Swap(NpcExploreData* other) {
  if (other != this) {
    std::swap(biome_id_, other->biome_id_);
    std::swap(stage_, other->stage_);
    protectors_.Swap(&other->protectors_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcExploreData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcExploreData_descriptor_;
  metadata.reflection = NpcExploreData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcFeedingData_info::kFenceIdFieldNumber;
const int NpcFeedingData_info::kProtectorFieldNumber;
const int NpcFeedingData_info::kItemNumFieldNumber;
const int NpcFeedingData_info::kTimeStampFieldNumber;
const int NpcFeedingData_info::kRewardTimeFieldNumber;
const int NpcFeedingData_info::kCostNumFieldNumber;
const int NpcFeedingData_info::kAccumulateTimeFieldNumber;
#endif  // !_MSC_VER

NpcFeedingData_info::NpcFeedingData_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.NpcFeedingData.info)
}

void NpcFeedingData_info::InitAsDefaultInstance() {
}

NpcFeedingData_info::NpcFeedingData_info(const NpcFeedingData_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.NpcFeedingData.info)
}

void NpcFeedingData_info::SharedCtor() {
  _cached_size_ = 0;
  fence_id_ = 0;
  protector_ = 0;
  item_num_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  reward_time_ = 0;
  cost_num_ = 0;
  accumulate_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcFeedingData_info::~NpcFeedingData_info() {
  // @@protoc_insertion_point(destructor:MsgPB.NpcFeedingData.info)
  SharedDtor();
}

void NpcFeedingData_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcFeedingData_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcFeedingData_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcFeedingData_info_descriptor_;
}

const NpcFeedingData_info& NpcFeedingData_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

NpcFeedingData_info* NpcFeedingData_info::default_instance_ = NULL;

NpcFeedingData_info* NpcFeedingData_info::New() const {
  return new NpcFeedingData_info;
}

void NpcFeedingData_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NpcFeedingData_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(fence_id_, accumulate_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcFeedingData_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.NpcFeedingData.info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fence_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fence_id_)));
          set_has_fence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_protector;
        break;
      }

      // optional int32 protector = 2;
      case 2: {
        if (tag == 16) {
         parse_protector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protector_)));
          set_has_protector();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 3;
      case 3: {
        if (tag == 24) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_stamp;
        break;
      }

      // optional int64 time_stamp = 4;
      case 4: {
        if (tag == 32) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_time;
        break;
      }

      // optional int32 reward_time = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_time_)));
          set_has_reward_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cost_num;
        break;
      }

      // optional int32 cost_num = 6;
      case 6: {
        if (tag == 48) {
         parse_cost_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_num_)));
          set_has_cost_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_accumulate_time;
        break;
      }

      // optional int32 accumulate_time = 7;
      case 7: {
        if (tag == 56) {
         parse_accumulate_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accumulate_time_)));
          set_has_accumulate_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.NpcFeedingData.info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.NpcFeedingData.info)
  return false;
#undef DO_
}

void NpcFeedingData_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.NpcFeedingData.info)
  // optional int32 fence_id = 1;
  if (has_fence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fence_id(), output);
  }

  // optional int32 protector = 2;
  if (has_protector()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->protector(), output);
  }

  // optional int32 item_num = 3;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_num(), output);
  }

  // optional int64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time_stamp(), output);
  }

  // optional int32 reward_time = 5;
  if (has_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_time(), output);
  }

  // optional int32 cost_num = 6;
  if (has_cost_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cost_num(), output);
  }

  // optional int32 accumulate_time = 7;
  if (has_accumulate_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->accumulate_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.NpcFeedingData.info)
}

::google::protobuf::uint8* NpcFeedingData_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.NpcFeedingData.info)
  // optional int32 fence_id = 1;
  if (has_fence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fence_id(), target);
  }

  // optional int32 protector = 2;
  if (has_protector()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->protector(), target);
  }

  // optional int32 item_num = 3;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_num(), target);
  }

  // optional int64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time_stamp(), target);
  }

  // optional int32 reward_time = 5;
  if (has_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_time(), target);
  }

  // optional int32 cost_num = 6;
  if (has_cost_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cost_num(), target);
  }

  // optional int32 accumulate_time = 7;
  if (has_accumulate_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->accumulate_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.NpcFeedingData.info)
  return target;
}

int NpcFeedingData_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fence_id = 1;
    if (has_fence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fence_id());
    }

    // optional int32 protector = 2;
    if (has_protector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protector());
    }

    // optional int32 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

    // optional int64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

    // optional int32 reward_time = 5;
    if (has_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_time());
    }

    // optional int32 cost_num = 6;
    if (has_cost_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_num());
    }

    // optional int32 accumulate_time = 7;
    if (has_accumulate_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accumulate_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcFeedingData_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcFeedingData_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcFeedingData_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcFeedingData_info::MergeFrom(const NpcFeedingData_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fence_id()) {
      set_fence_id(from.fence_id());
    }
    if (from.has_protector()) {
      set_protector(from.protector());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_reward_time()) {
      set_reward_time(from.reward_time());
    }
    if (from.has_cost_num()) {
      set_cost_num(from.cost_num());
    }
    if (from.has_accumulate_time()) {
      set_accumulate_time(from.accumulate_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcFeedingData_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcFeedingData_info::CopyFrom(const NpcFeedingData_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcFeedingData_info::IsInitialized() const {

  return true;
}

void NpcFeedingData_info::Swap(NpcFeedingData_info* other) {
  if (other != this) {
    std::swap(fence_id_, other->fence_id_);
    std::swap(protector_, other->protector_);
    std::swap(item_num_, other->item_num_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(reward_time_, other->reward_time_);
    std::swap(cost_num_, other->cost_num_);
    std::swap(accumulate_time_, other->accumulate_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcFeedingData_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcFeedingData_info_descriptor_;
  metadata.reflection = NpcFeedingData_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NpcFeedingData::kFeedingsFieldNumber;
#endif  // !_MSC_VER

NpcFeedingData::NpcFeedingData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.NpcFeedingData)
}

void NpcFeedingData::InitAsDefaultInstance() {
}

NpcFeedingData::NpcFeedingData(const NpcFeedingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.NpcFeedingData)
}

void NpcFeedingData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcFeedingData::~NpcFeedingData() {
  // @@protoc_insertion_point(destructor:MsgPB.NpcFeedingData)
  SharedDtor();
}

void NpcFeedingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcFeedingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcFeedingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcFeedingData_descriptor_;
}

const NpcFeedingData& NpcFeedingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

NpcFeedingData* NpcFeedingData::default_instance_ = NULL;

NpcFeedingData* NpcFeedingData::New() const {
  return new NpcFeedingData;
}

void NpcFeedingData::Clear() {
  feedings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcFeedingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.NpcFeedingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgPB.NpcFeedingData.info feedings = 1;
      case 1: {
        if (tag == 10) {
         parse_feedings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_feedings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_feedings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.NpcFeedingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.NpcFeedingData)
  return false;
#undef DO_
}

void NpcFeedingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.NpcFeedingData)
  // repeated .MsgPB.NpcFeedingData.info feedings = 1;
  for (int i = 0; i < this->feedings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->feedings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.NpcFeedingData)
}

::google::protobuf::uint8* NpcFeedingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.NpcFeedingData)
  // repeated .MsgPB.NpcFeedingData.info feedings = 1;
  for (int i = 0; i < this->feedings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->feedings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.NpcFeedingData)
  return target;
}

int NpcFeedingData::ByteSize() const {
  int total_size = 0;

  // repeated .MsgPB.NpcFeedingData.info feedings = 1;
  total_size += 1 * this->feedings_size();
  for (int i = 0; i < this->feedings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feedings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcFeedingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcFeedingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcFeedingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcFeedingData::MergeFrom(const NpcFeedingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  feedings_.MergeFrom(from.feedings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcFeedingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcFeedingData::CopyFrom(const NpcFeedingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcFeedingData::IsInitialized() const {

  return true;
}

void NpcFeedingData::Swap(NpcFeedingData* other) {
  if (other != this) {
    feedings_.Swap(&other->feedings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcFeedingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcFeedingData_descriptor_;
  metadata.reflection = NpcFeedingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcPlantData_info::kProtectorFieldNumber;
const int NpcPlantData_info::kItemIdFieldNumber;
const int NpcPlantData_info::kItemNumFieldNumber;
const int NpcPlantData_info::kTimeStampFieldNumber;
const int NpcPlantData_info::kRewardTimeFieldNumber;
const int NpcPlantData_info::kIndexFieldNumber;
const int NpcPlantData_info::kCostNumFieldNumber;
const int NpcPlantData_info::kAccumulateTimeFieldNumber;
#endif  // !_MSC_VER

NpcPlantData_info::NpcPlantData_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.NpcPlantData.info)
}

void NpcPlantData_info::InitAsDefaultInstance() {
}

NpcPlantData_info::NpcPlantData_info(const NpcPlantData_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.NpcPlantData.info)
}

void NpcPlantData_info::SharedCtor() {
  _cached_size_ = 0;
  protector_ = 0;
  item_id_ = 0;
  item_num_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  reward_time_ = 0;
  index_ = 0;
  cost_num_ = 0;
  accumulate_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcPlantData_info::~NpcPlantData_info() {
  // @@protoc_insertion_point(destructor:MsgPB.NpcPlantData.info)
  SharedDtor();
}

void NpcPlantData_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcPlantData_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcPlantData_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcPlantData_info_descriptor_;
}

const NpcPlantData_info& NpcPlantData_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

NpcPlantData_info* NpcPlantData_info::default_instance_ = NULL;

NpcPlantData_info* NpcPlantData_info::New() const {
  return new NpcPlantData_info;
}

void NpcPlantData_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NpcPlantData_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(protector_, accumulate_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcPlantData_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.NpcPlantData.info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 protector = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protector_)));
          set_has_protector();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 3;
      case 3: {
        if (tag == 24) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_stamp;
        break;
      }

      // optional int64 time_stamp = 4;
      case 4: {
        if (tag == 32) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_time;
        break;
      }

      // optional int32 reward_time = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_time_)));
          set_has_reward_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_index;
        break;
      }

      // optional int32 index = 6;
      case 6: {
        if (tag == 48) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cost_num;
        break;
      }

      // optional int32 cost_num = 7;
      case 7: {
        if (tag == 56) {
         parse_cost_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_num_)));
          set_has_cost_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_accumulate_time;
        break;
      }

      // optional int32 accumulate_time = 8;
      case 8: {
        if (tag == 64) {
         parse_accumulate_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accumulate_time_)));
          set_has_accumulate_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.NpcPlantData.info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.NpcPlantData.info)
  return false;
#undef DO_
}

void NpcPlantData_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.NpcPlantData.info)
  // optional int32 protector = 1;
  if (has_protector()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protector(), output);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }

  // optional int32 item_num = 3;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_num(), output);
  }

  // optional int64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time_stamp(), output);
  }

  // optional int32 reward_time = 5;
  if (has_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_time(), output);
  }

  // optional int32 index = 6;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->index(), output);
  }

  // optional int32 cost_num = 7;
  if (has_cost_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cost_num(), output);
  }

  // optional int32 accumulate_time = 8;
  if (has_accumulate_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->accumulate_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.NpcPlantData.info)
}

::google::protobuf::uint8* NpcPlantData_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.NpcPlantData.info)
  // optional int32 protector = 1;
  if (has_protector()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protector(), target);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }

  // optional int32 item_num = 3;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_num(), target);
  }

  // optional int64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time_stamp(), target);
  }

  // optional int32 reward_time = 5;
  if (has_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_time(), target);
  }

  // optional int32 index = 6;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->index(), target);
  }

  // optional int32 cost_num = 7;
  if (has_cost_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cost_num(), target);
  }

  // optional int32 accumulate_time = 8;
  if (has_accumulate_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->accumulate_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.NpcPlantData.info)
  return target;
}

int NpcPlantData_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 protector = 1;
    if (has_protector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protector());
    }

    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

    // optional int64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

    // optional int32 reward_time = 5;
    if (has_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_time());
    }

    // optional int32 index = 6;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 cost_num = 7;
    if (has_cost_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_num());
    }

    // optional int32 accumulate_time = 8;
    if (has_accumulate_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accumulate_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcPlantData_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcPlantData_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcPlantData_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcPlantData_info::MergeFrom(const NpcPlantData_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protector()) {
      set_protector(from.protector());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_reward_time()) {
      set_reward_time(from.reward_time());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_cost_num()) {
      set_cost_num(from.cost_num());
    }
    if (from.has_accumulate_time()) {
      set_accumulate_time(from.accumulate_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcPlantData_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcPlantData_info::CopyFrom(const NpcPlantData_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcPlantData_info::IsInitialized() const {

  return true;
}

void NpcPlantData_info::Swap(NpcPlantData_info* other) {
  if (other != this) {
    std::swap(protector_, other->protector_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(reward_time_, other->reward_time_);
    std::swap(index_, other->index_);
    std::swap(cost_num_, other->cost_num_);
    std::swap(accumulate_time_, other->accumulate_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcPlantData_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcPlantData_info_descriptor_;
  metadata.reflection = NpcPlantData_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NpcPlantData::kPlantsFieldNumber;
#endif  // !_MSC_VER

NpcPlantData::NpcPlantData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.NpcPlantData)
}

void NpcPlantData::InitAsDefaultInstance() {
}

NpcPlantData::NpcPlantData(const NpcPlantData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.NpcPlantData)
}

void NpcPlantData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcPlantData::~NpcPlantData() {
  // @@protoc_insertion_point(destructor:MsgPB.NpcPlantData)
  SharedDtor();
}

void NpcPlantData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcPlantData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcPlantData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcPlantData_descriptor_;
}

const NpcPlantData& NpcPlantData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

NpcPlantData* NpcPlantData::default_instance_ = NULL;

NpcPlantData* NpcPlantData::New() const {
  return new NpcPlantData;
}

void NpcPlantData::Clear() {
  plants_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcPlantData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.NpcPlantData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgPB.NpcPlantData.info plants = 1;
      case 1: {
        if (tag == 10) {
         parse_plants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plants()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_plants;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.NpcPlantData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.NpcPlantData)
  return false;
#undef DO_
}

void NpcPlantData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.NpcPlantData)
  // repeated .MsgPB.NpcPlantData.info plants = 1;
  for (int i = 0; i < this->plants_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plants(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.NpcPlantData)
}

::google::protobuf::uint8* NpcPlantData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.NpcPlantData)
  // repeated .MsgPB.NpcPlantData.info plants = 1;
  for (int i = 0; i < this->plants_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plants(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.NpcPlantData)
  return target;
}

int NpcPlantData::ByteSize() const {
  int total_size = 0;

  // repeated .MsgPB.NpcPlantData.info plants = 1;
  total_size += 1 * this->plants_size();
  for (int i = 0; i < this->plants_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plants(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcPlantData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcPlantData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcPlantData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcPlantData::MergeFrom(const NpcPlantData& from) {
  GOOGLE_CHECK_NE(&from, this);
  plants_.MergeFrom(from.plants_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcPlantData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcPlantData::CopyFrom(const NpcPlantData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcPlantData::IsInitialized() const {

  return true;
}

void NpcPlantData::Swap(NpcPlantData* other) {
  if (other != this) {
    plants_.Swap(&other->plants_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcPlantData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcPlantData_descriptor_;
  metadata.reflection = NpcPlantData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcMineData::kBiomeIdFieldNumber;
const int NpcMineData::kProtectorsFieldNumber;
const int NpcMineData::kTimeStampFieldNumber;
#endif  // !_MSC_VER

NpcMineData::NpcMineData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.NpcMineData)
}

void NpcMineData::InitAsDefaultInstance() {
}

NpcMineData::NpcMineData(const NpcMineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.NpcMineData)
}

void NpcMineData::SharedCtor() {
  _cached_size_ = 0;
  biome_id_ = GOOGLE_LONGLONG(0);
  time_stamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcMineData::~NpcMineData() {
  // @@protoc_insertion_point(destructor:MsgPB.NpcMineData)
  SharedDtor();
}

void NpcMineData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcMineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcMineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcMineData_descriptor_;
}

const NpcMineData& NpcMineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

NpcMineData* NpcMineData::default_instance_ = NULL;

NpcMineData* NpcMineData::New() const {
  return new NpcMineData;
}

void NpcMineData::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    biome_id_ = GOOGLE_LONGLONG(0);
    time_stamp_ = GOOGLE_LONGLONG(0);
  }
  protectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcMineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.NpcMineData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 biome_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &biome_id_)));
          set_has_biome_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_protectors;
        break;
      }

      // repeated int32 protectors = 2;
      case 2: {
        if (tag == 16) {
         parse_protectors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_protectors())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_protectors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_protectors;
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }

      // optional int64 time_stamp = 3;
      case 3: {
        if (tag == 24) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.NpcMineData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.NpcMineData)
  return false;
#undef DO_
}

void NpcMineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.NpcMineData)
  // optional int64 biome_id = 1;
  if (has_biome_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->biome_id(), output);
  }

  // repeated int32 protectors = 2;
  for (int i = 0; i < this->protectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->protectors(i), output);
  }

  // optional int64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.NpcMineData)
}

::google::protobuf::uint8* NpcMineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.NpcMineData)
  // optional int64 biome_id = 1;
  if (has_biome_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->biome_id(), target);
  }

  // repeated int32 protectors = 2;
  for (int i = 0; i < this->protectors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->protectors(i), target);
  }

  // optional int64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.NpcMineData)
  return target;
}

int NpcMineData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 biome_id = 1;
    if (has_biome_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->biome_id());
    }

    // optional int64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

  }
  // repeated int32 protectors = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->protectors_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->protectors(i));
    }
    total_size += 1 * this->protectors_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcMineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcMineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcMineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcMineData::MergeFrom(const NpcMineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  protectors_.MergeFrom(from.protectors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_biome_id()) {
      set_biome_id(from.biome_id());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcMineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcMineData::CopyFrom(const NpcMineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcMineData::IsInitialized() const {

  return true;
}

void NpcMineData::Swap(NpcMineData* other) {
  if (other != this) {
    std::swap(biome_id_, other->biome_id_);
    protectors_.Swap(&other->protectors_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcMineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcMineData_descriptor_;
  metadata.reflection = NpcMineData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeBiomeData::kIggidFieldNumber;
const int MsgNpcAutoIncomeBiomeData::kBiomeIdFieldNumber;
const int MsgNpcAutoIncomeBiomeData::kExploreDataFieldNumber;
const int MsgNpcAutoIncomeBiomeData::kMineDataFieldNumber;
const int MsgNpcAutoIncomeBiomeData::kDirtyFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeBiomeData::MsgNpcAutoIncomeBiomeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeBiomeData)
}

void MsgNpcAutoIncomeBiomeData::InitAsDefaultInstance() {
  explore_data_ = const_cast< ::MsgPB::NpcExploreData*>(&::MsgPB::NpcExploreData::default_instance());
  mine_data_ = const_cast< ::MsgPB::NpcMineData*>(&::MsgPB::NpcMineData::default_instance());
}

MsgNpcAutoIncomeBiomeData::MsgNpcAutoIncomeBiomeData(const MsgNpcAutoIncomeBiomeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeBiomeData)
}

void MsgNpcAutoIncomeBiomeData::SharedCtor() {
  _cached_size_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  biome_id_ = GOOGLE_LONGLONG(0);
  explore_data_ = NULL;
  mine_data_ = NULL;
  dirty_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeBiomeData::~MsgNpcAutoIncomeBiomeData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeBiomeData)
  SharedDtor();
}

void MsgNpcAutoIncomeBiomeData::SharedDtor() {
  if (this != default_instance_) {
    delete explore_data_;
    delete mine_data_;
  }
}

void MsgNpcAutoIncomeBiomeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeBiomeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeBiomeData_descriptor_;
}

const MsgNpcAutoIncomeBiomeData& MsgNpcAutoIncomeBiomeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeBiomeData* MsgNpcAutoIncomeBiomeData::default_instance_ = NULL;

MsgNpcAutoIncomeBiomeData* MsgNpcAutoIncomeBiomeData::New() const {
  return new MsgNpcAutoIncomeBiomeData;
}

void MsgNpcAutoIncomeBiomeData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcAutoIncomeBiomeData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(iggid_, biome_id_);
    if (has_explore_data()) {
      if (explore_data_ != NULL) explore_data_->::MsgPB::NpcExploreData::Clear();
    }
    if (has_mine_data()) {
      if (mine_data_ != NULL) mine_data_->::MsgPB::NpcMineData::Clear();
    }
    dirty_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeBiomeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeBiomeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iggid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_biome_id;
        break;
      }

      // optional int64 biome_id = 2;
      case 2: {
        if (tag == 16) {
         parse_biome_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &biome_id_)));
          set_has_biome_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_explore_data;
        break;
      }

      // optional .MsgPB.NpcExploreData explore_data = 3;
      case 3: {
        if (tag == 26) {
         parse_explore_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_explore_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mine_data;
        break;
      }

      // optional .MsgPB.NpcMineData mine_data = 4;
      case 4: {
        if (tag == 34) {
         parse_mine_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mine_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dirty;
        break;
      }

      // optional int64 dirty = 5;
      case 5: {
        if (tag == 40) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeBiomeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeBiomeData)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeBiomeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeBiomeData)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iggid(), output);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->biome_id(), output);
  }

  // optional .MsgPB.NpcExploreData explore_data = 3;
  if (has_explore_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->explore_data(), output);
  }

  // optional .MsgPB.NpcMineData mine_data = 4;
  if (has_mine_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mine_data(), output);
  }

  // optional int64 dirty = 5;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->dirty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeBiomeData)
}

::google::protobuf::uint8* MsgNpcAutoIncomeBiomeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeBiomeData)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iggid(), target);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->biome_id(), target);
  }

  // optional .MsgPB.NpcExploreData explore_data = 3;
  if (has_explore_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->explore_data(), target);
  }

  // optional .MsgPB.NpcMineData mine_data = 4;
  if (has_mine_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mine_data(), target);
  }

  // optional int64 dirty = 5;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->dirty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeBiomeData)
  return target;
}

int MsgNpcAutoIncomeBiomeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iggid = 1;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 biome_id = 2;
    if (has_biome_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->biome_id());
    }

    // optional .MsgPB.NpcExploreData explore_data = 3;
    if (has_explore_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->explore_data());
    }

    // optional .MsgPB.NpcMineData mine_data = 4;
    if (has_mine_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mine_data());
    }

    // optional int64 dirty = 5;
    if (has_dirty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeBiomeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeBiomeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeBiomeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeBiomeData::MergeFrom(const MsgNpcAutoIncomeBiomeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_biome_id()) {
      set_biome_id(from.biome_id());
    }
    if (from.has_explore_data()) {
      mutable_explore_data()->::MsgPB::NpcExploreData::MergeFrom(from.explore_data());
    }
    if (from.has_mine_data()) {
      mutable_mine_data()->::MsgPB::NpcMineData::MergeFrom(from.mine_data());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeBiomeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeBiomeData::CopyFrom(const MsgNpcAutoIncomeBiomeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeBiomeData::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeBiomeData::Swap(MsgNpcAutoIncomeBiomeData* other) {
  if (other != this) {
    std::swap(iggid_, other->iggid_);
    std::swap(biome_id_, other->biome_id_);
    std::swap(explore_data_, other->explore_data_);
    std::swap(mine_data_, other->mine_data_);
    std::swap(dirty_, other->dirty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeBiomeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeBiomeData_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeBiomeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeFarmingData::kIggidFieldNumber;
const int MsgNpcAutoIncomeFarmingData::kFeedingDataFieldNumber;
const int MsgNpcAutoIncomeFarmingData::kPlantDataFieldNumber;
const int MsgNpcAutoIncomeFarmingData::kRefiningMineDataFieldNumber;
const int MsgNpcAutoIncomeFarmingData::kDirtyFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeFarmingData::MsgNpcAutoIncomeFarmingData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeFarmingData)
}

void MsgNpcAutoIncomeFarmingData::InitAsDefaultInstance() {
  feeding_data_ = const_cast< ::MsgPB::NpcFeedingData*>(&::MsgPB::NpcFeedingData::default_instance());
  plant_data_ = const_cast< ::MsgPB::NpcPlantData*>(&::MsgPB::NpcPlantData::default_instance());
  refining_mine_data_ = const_cast< ::MsgPB::NpcRefiningMineData*>(&::MsgPB::NpcRefiningMineData::default_instance());
}

MsgNpcAutoIncomeFarmingData::MsgNpcAutoIncomeFarmingData(const MsgNpcAutoIncomeFarmingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeFarmingData)
}

void MsgNpcAutoIncomeFarmingData::SharedCtor() {
  _cached_size_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  feeding_data_ = NULL;
  plant_data_ = NULL;
  refining_mine_data_ = NULL;
  dirty_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeFarmingData::~MsgNpcAutoIncomeFarmingData() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeFarmingData)
  SharedDtor();
}

void MsgNpcAutoIncomeFarmingData::SharedDtor() {
  if (this != default_instance_) {
    delete feeding_data_;
    delete plant_data_;
    delete refining_mine_data_;
  }
}

void MsgNpcAutoIncomeFarmingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFarmingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeFarmingData_descriptor_;
}

const MsgNpcAutoIncomeFarmingData& MsgNpcAutoIncomeFarmingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeFarmingData* MsgNpcAutoIncomeFarmingData::default_instance_ = NULL;

MsgNpcAutoIncomeFarmingData* MsgNpcAutoIncomeFarmingData::New() const {
  return new MsgNpcAutoIncomeFarmingData;
}

void MsgNpcAutoIncomeFarmingData::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_feeding_data()) {
      if (feeding_data_ != NULL) feeding_data_->::MsgPB::NpcFeedingData::Clear();
    }
    if (has_plant_data()) {
      if (plant_data_ != NULL) plant_data_->::MsgPB::NpcPlantData::Clear();
    }
    if (has_refining_mine_data()) {
      if (refining_mine_data_ != NULL) refining_mine_data_->::MsgPB::NpcRefiningMineData::Clear();
    }
    dirty_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeFarmingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeFarmingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iggid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_feeding_data;
        break;
      }

      // optional .MsgPB.NpcFeedingData feeding_data = 2;
      case 2: {
        if (tag == 18) {
         parse_feeding_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feeding_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_plant_data;
        break;
      }

      // optional .MsgPB.NpcPlantData plant_data = 3;
      case 3: {
        if (tag == 26) {
         parse_plant_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plant_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_refining_mine_data;
        break;
      }

      // optional .MsgPB.NpcRefiningMineData refining_mine_data = 4;
      case 4: {
        if (tag == 34) {
         parse_refining_mine_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refining_mine_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dirty;
        break;
      }

      // optional int64 dirty = 5;
      case 5: {
        if (tag == 40) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeFarmingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeFarmingData)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeFarmingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeFarmingData)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iggid(), output);
  }

  // optional .MsgPB.NpcFeedingData feeding_data = 2;
  if (has_feeding_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->feeding_data(), output);
  }

  // optional .MsgPB.NpcPlantData plant_data = 3;
  if (has_plant_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->plant_data(), output);
  }

  // optional .MsgPB.NpcRefiningMineData refining_mine_data = 4;
  if (has_refining_mine_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->refining_mine_data(), output);
  }

  // optional int64 dirty = 5;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->dirty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeFarmingData)
}

::google::protobuf::uint8* MsgNpcAutoIncomeFarmingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeFarmingData)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iggid(), target);
  }

  // optional .MsgPB.NpcFeedingData feeding_data = 2;
  if (has_feeding_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->feeding_data(), target);
  }

  // optional .MsgPB.NpcPlantData plant_data = 3;
  if (has_plant_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->plant_data(), target);
  }

  // optional .MsgPB.NpcRefiningMineData refining_mine_data = 4;
  if (has_refining_mine_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->refining_mine_data(), target);
  }

  // optional int64 dirty = 5;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->dirty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeFarmingData)
  return target;
}

int MsgNpcAutoIncomeFarmingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iggid = 1;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.NpcFeedingData feeding_data = 2;
    if (has_feeding_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feeding_data());
    }

    // optional .MsgPB.NpcPlantData plant_data = 3;
    if (has_plant_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plant_data());
    }

    // optional .MsgPB.NpcRefiningMineData refining_mine_data = 4;
    if (has_refining_mine_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refining_mine_data());
    }

    // optional int64 dirty = 5;
    if (has_dirty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dirty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeFarmingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeFarmingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeFarmingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeFarmingData::MergeFrom(const MsgNpcAutoIncomeFarmingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_feeding_data()) {
      mutable_feeding_data()->::MsgPB::NpcFeedingData::MergeFrom(from.feeding_data());
    }
    if (from.has_plant_data()) {
      mutable_plant_data()->::MsgPB::NpcPlantData::MergeFrom(from.plant_data());
    }
    if (from.has_refining_mine_data()) {
      mutable_refining_mine_data()->::MsgPB::NpcRefiningMineData::MergeFrom(from.refining_mine_data());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeFarmingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeFarmingData::CopyFrom(const MsgNpcAutoIncomeFarmingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeFarmingData::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeFarmingData::Swap(MsgNpcAutoIncomeFarmingData* other) {
  if (other != this) {
    std::swap(iggid_, other->iggid_);
    std::swap(feeding_data_, other->feeding_data_);
    std::swap(plant_data_, other->plant_data_);
    std::swap(refining_mine_data_, other->refining_mine_data_);
    std::swap(dirty_, other->dirty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeFarmingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeFarmingData_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeFarmingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcRefiningMineData_info::kMineIdFieldNumber;
const int NpcRefiningMineData_info::kMineNumFieldNumber;
const int NpcRefiningMineData_info::kRewardTimeFieldNumber;
#endif  // !_MSC_VER

NpcRefiningMineData_info::NpcRefiningMineData_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.NpcRefiningMineData.info)
}

void NpcRefiningMineData_info::InitAsDefaultInstance() {
}

NpcRefiningMineData_info::NpcRefiningMineData_info(const NpcRefiningMineData_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.NpcRefiningMineData.info)
}

void NpcRefiningMineData_info::SharedCtor() {
  _cached_size_ = 0;
  mine_id_ = 0;
  mine_num_ = 0;
  reward_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcRefiningMineData_info::~NpcRefiningMineData_info() {
  // @@protoc_insertion_point(destructor:MsgPB.NpcRefiningMineData.info)
  SharedDtor();
}

void NpcRefiningMineData_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcRefiningMineData_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcRefiningMineData_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcRefiningMineData_info_descriptor_;
}

const NpcRefiningMineData_info& NpcRefiningMineData_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

NpcRefiningMineData_info* NpcRefiningMineData_info::default_instance_ = NULL;

NpcRefiningMineData_info* NpcRefiningMineData_info::New() const {
  return new NpcRefiningMineData_info;
}

void NpcRefiningMineData_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NpcRefiningMineData_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mine_id_, reward_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcRefiningMineData_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.NpcRefiningMineData.info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mine_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mine_id_)));
          set_has_mine_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mine_num;
        break;
      }

      // optional int32 mine_num = 2;
      case 2: {
        if (tag == 16) {
         parse_mine_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mine_num_)));
          set_has_mine_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_time;
        break;
      }

      // optional int32 reward_time = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_time_)));
          set_has_reward_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.NpcRefiningMineData.info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.NpcRefiningMineData.info)
  return false;
#undef DO_
}

void NpcRefiningMineData_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.NpcRefiningMineData.info)
  // optional int32 mine_id = 1;
  if (has_mine_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mine_id(), output);
  }

  // optional int32 mine_num = 2;
  if (has_mine_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mine_num(), output);
  }

  // optional int32 reward_time = 3;
  if (has_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.NpcRefiningMineData.info)
}

::google::protobuf::uint8* NpcRefiningMineData_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.NpcRefiningMineData.info)
  // optional int32 mine_id = 1;
  if (has_mine_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mine_id(), target);
  }

  // optional int32 mine_num = 2;
  if (has_mine_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mine_num(), target);
  }

  // optional int32 reward_time = 3;
  if (has_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.NpcRefiningMineData.info)
  return target;
}

int NpcRefiningMineData_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mine_id = 1;
    if (has_mine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mine_id());
    }

    // optional int32 mine_num = 2;
    if (has_mine_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mine_num());
    }

    // optional int32 reward_time = 3;
    if (has_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcRefiningMineData_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcRefiningMineData_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcRefiningMineData_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcRefiningMineData_info::MergeFrom(const NpcRefiningMineData_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mine_id()) {
      set_mine_id(from.mine_id());
    }
    if (from.has_mine_num()) {
      set_mine_num(from.mine_num());
    }
    if (from.has_reward_time()) {
      set_reward_time(from.reward_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcRefiningMineData_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcRefiningMineData_info::CopyFrom(const NpcRefiningMineData_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcRefiningMineData_info::IsInitialized() const {

  return true;
}

void NpcRefiningMineData_info::Swap(NpcRefiningMineData_info* other) {
  if (other != this) {
    std::swap(mine_id_, other->mine_id_);
    std::swap(mine_num_, other->mine_num_);
    std::swap(reward_time_, other->reward_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcRefiningMineData_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcRefiningMineData_info_descriptor_;
  metadata.reflection = NpcRefiningMineData_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NpcRefiningMineData::kRefiningMineDataFieldNumber;
const int NpcRefiningMineData::kBeginTimeFieldNumber;
const int NpcRefiningMineData::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

NpcRefiningMineData::NpcRefiningMineData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.NpcRefiningMineData)
}

void NpcRefiningMineData::InitAsDefaultInstance() {
}

NpcRefiningMineData::NpcRefiningMineData(const NpcRefiningMineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.NpcRefiningMineData)
}

void NpcRefiningMineData::SharedCtor() {
  _cached_size_ = 0;
  begin_time_ = GOOGLE_LONGLONG(0);
  remain_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcRefiningMineData::~NpcRefiningMineData() {
  // @@protoc_insertion_point(destructor:MsgPB.NpcRefiningMineData)
  SharedDtor();
}

void NpcRefiningMineData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcRefiningMineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcRefiningMineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcRefiningMineData_descriptor_;
}

const NpcRefiningMineData& NpcRefiningMineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

NpcRefiningMineData* NpcRefiningMineData::default_instance_ = NULL;

NpcRefiningMineData* NpcRefiningMineData::New() const {
  return new NpcRefiningMineData;
}

void NpcRefiningMineData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NpcRefiningMineData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(begin_time_, remain_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  refining_mine_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcRefiningMineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.NpcRefiningMineData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgPB.NpcRefiningMineData.info refining_mine_data = 1;
      case 1: {
        if (tag == 10) {
         parse_refining_mine_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refining_mine_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_refining_mine_data;
        if (input->ExpectTag(16)) goto parse_begin_time;
        break;
      }

      // optional int64 begin_time = 2;
      case 2: {
        if (tag == 16) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_remain_time;
        break;
      }

      // optional int64 remain_time = 3;
      case 3: {
        if (tag == 24) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.NpcRefiningMineData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.NpcRefiningMineData)
  return false;
#undef DO_
}

void NpcRefiningMineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.NpcRefiningMineData)
  // repeated .MsgPB.NpcRefiningMineData.info refining_mine_data = 1;
  for (int i = 0; i < this->refining_mine_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->refining_mine_data(i), output);
  }

  // optional int64 begin_time = 2;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begin_time(), output);
  }

  // optional int64 remain_time = 3;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->remain_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.NpcRefiningMineData)
}

::google::protobuf::uint8* NpcRefiningMineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.NpcRefiningMineData)
  // repeated .MsgPB.NpcRefiningMineData.info refining_mine_data = 1;
  for (int i = 0; i < this->refining_mine_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->refining_mine_data(i), target);
  }

  // optional int64 begin_time = 2;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begin_time(), target);
  }

  // optional int64 remain_time = 3;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->remain_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.NpcRefiningMineData)
  return target;
}

int NpcRefiningMineData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 begin_time = 2;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // optional int64 remain_time = 3;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->remain_time());
    }

  }
  // repeated .MsgPB.NpcRefiningMineData.info refining_mine_data = 1;
  total_size += 1 * this->refining_mine_data_size();
  for (int i = 0; i < this->refining_mine_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refining_mine_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcRefiningMineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcRefiningMineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcRefiningMineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcRefiningMineData::MergeFrom(const NpcRefiningMineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  refining_mine_data_.MergeFrom(from.refining_mine_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcRefiningMineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcRefiningMineData::CopyFrom(const NpcRefiningMineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcRefiningMineData::IsInitialized() const {

  return true;
}

void NpcRefiningMineData::Swap(NpcRefiningMineData* other) {
  if (other != this) {
    refining_mine_data_.Swap(&other->refining_mine_data_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcRefiningMineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcRefiningMineData_descriptor_;
  metadata.reflection = NpcRefiningMineData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeExploreDataGetC2S::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeExploreDataGetC2S::MsgNpcAutoIncomeExploreDataGetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeExploreDataGetC2S)
}

void MsgNpcAutoIncomeExploreDataGetC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeExploreDataGetC2S::MsgNpcAutoIncomeExploreDataGetC2S(const MsgNpcAutoIncomeExploreDataGetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeExploreDataGetC2S)
}

void MsgNpcAutoIncomeExploreDataGetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7250;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeExploreDataGetC2S::~MsgNpcAutoIncomeExploreDataGetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeExploreDataGetC2S)
  SharedDtor();
}

void MsgNpcAutoIncomeExploreDataGetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeExploreDataGetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreDataGetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeExploreDataGetC2S_descriptor_;
}

const MsgNpcAutoIncomeExploreDataGetC2S& MsgNpcAutoIncomeExploreDataGetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeExploreDataGetC2S* MsgNpcAutoIncomeExploreDataGetC2S::default_instance_ = NULL;

MsgNpcAutoIncomeExploreDataGetC2S* MsgNpcAutoIncomeExploreDataGetC2S::New() const {
  return new MsgNpcAutoIncomeExploreDataGetC2S;
}

void MsgNpcAutoIncomeExploreDataGetC2S::Clear() {
  msgtype_ = 7250;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeExploreDataGetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeExploreDataGetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_DATA_GET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeExploreDataGetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeExploreDataGetC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeExploreDataGetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeExploreDataGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_DATA_GET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeExploreDataGetC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomeExploreDataGetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeExploreDataGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_DATA_GET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeExploreDataGetC2S)
  return target;
}

int MsgNpcAutoIncomeExploreDataGetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_DATA_GET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeExploreDataGetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeExploreDataGetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeExploreDataGetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeExploreDataGetC2S::MergeFrom(const MsgNpcAutoIncomeExploreDataGetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeExploreDataGetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeExploreDataGetC2S::CopyFrom(const MsgNpcAutoIncomeExploreDataGetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeExploreDataGetC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeExploreDataGetC2S::Swap(MsgNpcAutoIncomeExploreDataGetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeExploreDataGetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeExploreDataGetC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeExploreDataGetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeExploreDataGetS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeExploreDataGetS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeExploreDataGetS2C::MsgNpcAutoIncomeExploreDataGetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeExploreDataGetS2C)
}

void MsgNpcAutoIncomeExploreDataGetS2C::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeExploreDataGetS2C::MsgNpcAutoIncomeExploreDataGetS2C(const MsgNpcAutoIncomeExploreDataGetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeExploreDataGetS2C)
}

void MsgNpcAutoIncomeExploreDataGetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7251;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeExploreDataGetS2C::~MsgNpcAutoIncomeExploreDataGetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeExploreDataGetS2C)
  SharedDtor();
}

void MsgNpcAutoIncomeExploreDataGetS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeExploreDataGetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreDataGetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeExploreDataGetS2C_descriptor_;
}

const MsgNpcAutoIncomeExploreDataGetS2C& MsgNpcAutoIncomeExploreDataGetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeExploreDataGetS2C* MsgNpcAutoIncomeExploreDataGetS2C::default_instance_ = NULL;

MsgNpcAutoIncomeExploreDataGetS2C* MsgNpcAutoIncomeExploreDataGetS2C::New() const {
  return new MsgNpcAutoIncomeExploreDataGetS2C;
}

void MsgNpcAutoIncomeExploreDataGetS2C::Clear() {
  msgtype_ = 7251;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeExploreDataGetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeExploreDataGetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_DATA_GET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .MsgPB.NpcExploreData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeExploreDataGetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeExploreDataGetS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeExploreDataGetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeExploreDataGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_DATA_GET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // repeated .MsgPB.NpcExploreData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeExploreDataGetS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomeExploreDataGetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeExploreDataGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_DATA_GET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // repeated .MsgPB.NpcExploreData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeExploreDataGetS2C)
  return target;
}

int MsgNpcAutoIncomeExploreDataGetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_DATA_GET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  // repeated .MsgPB.NpcExploreData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeExploreDataGetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeExploreDataGetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeExploreDataGetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeExploreDataGetS2C::MergeFrom(const MsgNpcAutoIncomeExploreDataGetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeExploreDataGetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeExploreDataGetS2C::CopyFrom(const MsgNpcAutoIncomeExploreDataGetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeExploreDataGetS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeExploreDataGetS2C::Swap(MsgNpcAutoIncomeExploreDataGetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeExploreDataGetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeExploreDataGetS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeExploreDataGetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeExploreSetC2S::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeExploreSetC2S::kBiomeIdFieldNumber;
const int MsgNpcAutoIncomeExploreSetC2S::kProtectorsFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeExploreSetC2S::MsgNpcAutoIncomeExploreSetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeExploreSetC2S)
}

void MsgNpcAutoIncomeExploreSetC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeExploreSetC2S::MsgNpcAutoIncomeExploreSetC2S(const MsgNpcAutoIncomeExploreSetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeExploreSetC2S)
}

void MsgNpcAutoIncomeExploreSetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7252;
  biome_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeExploreSetC2S::~MsgNpcAutoIncomeExploreSetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeExploreSetC2S)
  SharedDtor();
}

void MsgNpcAutoIncomeExploreSetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeExploreSetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreSetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeExploreSetC2S_descriptor_;
}

const MsgNpcAutoIncomeExploreSetC2S& MsgNpcAutoIncomeExploreSetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeExploreSetC2S* MsgNpcAutoIncomeExploreSetC2S::default_instance_ = NULL;

MsgNpcAutoIncomeExploreSetC2S* MsgNpcAutoIncomeExploreSetC2S::New() const {
  return new MsgNpcAutoIncomeExploreSetC2S;
}

void MsgNpcAutoIncomeExploreSetC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 7252;
    biome_id_ = GOOGLE_LONGLONG(0);
  }
  protectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeExploreSetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeExploreSetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_SET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_biome_id;
        break;
      }

      // optional int64 biome_id = 2;
      case 2: {
        if (tag == 16) {
         parse_biome_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &biome_id_)));
          set_has_biome_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_protectors;
        break;
      }

      // repeated int32 protectors = 3;
      case 3: {
        if (tag == 24) {
         parse_protectors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_protectors())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_protectors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_protectors;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeExploreSetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeExploreSetC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeExploreSetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeExploreSetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_SET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->biome_id(), output);
  }

  // repeated int32 protectors = 3;
  for (int i = 0; i < this->protectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->protectors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeExploreSetC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomeExploreSetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeExploreSetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_SET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->biome_id(), target);
  }

  // repeated int32 protectors = 3;
  for (int i = 0; i < this->protectors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->protectors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeExploreSetC2S)
  return target;
}

int MsgNpcAutoIncomeExploreSetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_SET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 biome_id = 2;
    if (has_biome_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->biome_id());
    }

  }
  // repeated int32 protectors = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->protectors_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->protectors(i));
    }
    total_size += 1 * this->protectors_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeExploreSetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeExploreSetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeExploreSetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeExploreSetC2S::MergeFrom(const MsgNpcAutoIncomeExploreSetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  protectors_.MergeFrom(from.protectors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_biome_id()) {
      set_biome_id(from.biome_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeExploreSetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeExploreSetC2S::CopyFrom(const MsgNpcAutoIncomeExploreSetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeExploreSetC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeExploreSetC2S::Swap(MsgNpcAutoIncomeExploreSetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(biome_id_, other->biome_id_);
    protectors_.Swap(&other->protectors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeExploreSetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeExploreSetC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeExploreSetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeExploreSetS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeExploreSetS2C::kResFieldNumber;
const int MsgNpcAutoIncomeExploreSetS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeExploreSetS2C::MsgNpcAutoIncomeExploreSetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeExploreSetS2C)
}

void MsgNpcAutoIncomeExploreSetS2C::InitAsDefaultInstance() {
  data_ = const_cast< ::MsgPB::NpcExploreData*>(&::MsgPB::NpcExploreData::default_instance());
}

MsgNpcAutoIncomeExploreSetS2C::MsgNpcAutoIncomeExploreSetS2C(const MsgNpcAutoIncomeExploreSetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeExploreSetS2C)
}

void MsgNpcAutoIncomeExploreSetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7253;
  res_ = 1;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeExploreSetS2C::~MsgNpcAutoIncomeExploreSetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeExploreSetS2C)
  SharedDtor();
}

void MsgNpcAutoIncomeExploreSetS2C::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgNpcAutoIncomeExploreSetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreSetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeExploreSetS2C_descriptor_;
}

const MsgNpcAutoIncomeExploreSetS2C& MsgNpcAutoIncomeExploreSetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeExploreSetS2C* MsgNpcAutoIncomeExploreSetS2C::default_instance_ = NULL;

MsgNpcAutoIncomeExploreSetS2C* MsgNpcAutoIncomeExploreSetS2C::New() const {
  return new MsgNpcAutoIncomeExploreSetS2C;
}

void MsgNpcAutoIncomeExploreSetS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 7253;
    res_ = 1;
    if (has_data()) {
      if (data_ != NULL) data_->::MsgPB::NpcExploreData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeExploreSetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeExploreSetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_SET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .MsgPB.NpcExploreData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeExploreSetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeExploreSetS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeExploreSetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeExploreSetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_SET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional .MsgPB.NpcExploreData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeExploreSetS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomeExploreSetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeExploreSetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_SET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional .MsgPB.NpcExploreData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeExploreSetS2C)
  return target;
}

int MsgNpcAutoIncomeExploreSetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_SET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional .MsgPB.NpcExploreData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeExploreSetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeExploreSetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeExploreSetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeExploreSetS2C::MergeFrom(const MsgNpcAutoIncomeExploreSetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_data()) {
      mutable_data()->::MsgPB::NpcExploreData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeExploreSetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeExploreSetS2C::CopyFrom(const MsgNpcAutoIncomeExploreSetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeExploreSetS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeExploreSetS2C::Swap(MsgNpcAutoIncomeExploreSetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeExploreSetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeExploreSetS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeExploreSetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::kBiomeIdFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::MsgNpcAutoIncomeExploreUnlockNextBiomeC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeC2S)
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::MsgNpcAutoIncomeExploreUnlockNextBiomeC2S(const MsgNpcAutoIncomeExploreUnlockNextBiomeC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeC2S)
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7254;
  biome_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::~MsgNpcAutoIncomeExploreUnlockNextBiomeC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeC2S)
  SharedDtor();
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeExploreUnlockNextBiomeC2S_descriptor_;
}

const MsgNpcAutoIncomeExploreUnlockNextBiomeC2S& MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeExploreUnlockNextBiomeC2S* MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::default_instance_ = NULL;

MsgNpcAutoIncomeExploreUnlockNextBiomeC2S* MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::New() const {
  return new MsgNpcAutoIncomeExploreUnlockNextBiomeC2S;
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 7254;
    biome_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_UNLOCK_NEXT_BIOME_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_biome_id;
        break;
      }

      // optional int64 biome_id = 2;
      case 2: {
        if (tag == 16) {
         parse_biome_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &biome_id_)));
          set_has_biome_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_UNLOCK_NEXT_BIOME_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->biome_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_UNLOCK_NEXT_BIOME_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->biome_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeC2S)
  return target;
}

int MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_UNLOCK_NEXT_BIOME_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 biome_id = 2;
    if (has_biome_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->biome_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeExploreUnlockNextBiomeC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeExploreUnlockNextBiomeC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::MergeFrom(const MsgNpcAutoIncomeExploreUnlockNextBiomeC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_biome_id()) {
      set_biome_id(from.biome_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::CopyFrom(const MsgNpcAutoIncomeExploreUnlockNextBiomeC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::Swap(MsgNpcAutoIncomeExploreUnlockNextBiomeC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(biome_id_, other->biome_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeExploreUnlockNextBiomeC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeExploreUnlockNextBiomeC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeExploreUnlockNextBiomeC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::kResFieldNumber;
const int MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::MsgNpcAutoIncomeExploreUnlockNextBiomeS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeS2C)
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::MsgNpcAutoIncomeExploreUnlockNextBiomeS2C(const MsgNpcAutoIncomeExploreUnlockNextBiomeS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeS2C)
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7255;
  res_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::~MsgNpcAutoIncomeExploreUnlockNextBiomeS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeS2C)
  SharedDtor();
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeExploreUnlockNextBiomeS2C_descriptor_;
}

const MsgNpcAutoIncomeExploreUnlockNextBiomeS2C& MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeExploreUnlockNextBiomeS2C* MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::default_instance_ = NULL;

MsgNpcAutoIncomeExploreUnlockNextBiomeS2C* MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::New() const {
  return new MsgNpcAutoIncomeExploreUnlockNextBiomeS2C;
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 7255;
    res_ = 1;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_UNLOCK_NEXT_BIOME_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .MsgPB.NpcExploreData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_UNLOCK_NEXT_BIOME_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // repeated .MsgPB.NpcExploreData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_UNLOCK_NEXT_BIOME_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // repeated .MsgPB.NpcExploreData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeExploreUnlockNextBiomeS2C)
  return target;
}

int MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_UNLOCK_NEXT_BIOME_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  // repeated .MsgPB.NpcExploreData data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeExploreUnlockNextBiomeS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeExploreUnlockNextBiomeS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::MergeFrom(const MsgNpcAutoIncomeExploreUnlockNextBiomeS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::CopyFrom(const MsgNpcAutoIncomeExploreUnlockNextBiomeS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::Swap(MsgNpcAutoIncomeExploreUnlockNextBiomeS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeExploreUnlockNextBiomeS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeExploreUnlockNextBiomeS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeExploreUnlockNextBiomeS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeExploreTimeAwardGetC2S::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeExploreTimeAwardGetC2S::kBiomeIdFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeExploreTimeAwardGetC2S::MsgNpcAutoIncomeExploreTimeAwardGetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetC2S)
}

void MsgNpcAutoIncomeExploreTimeAwardGetC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeExploreTimeAwardGetC2S::MsgNpcAutoIncomeExploreTimeAwardGetC2S(const MsgNpcAutoIncomeExploreTimeAwardGetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetC2S)
}

void MsgNpcAutoIncomeExploreTimeAwardGetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7256;
  biome_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeExploreTimeAwardGetC2S::~MsgNpcAutoIncomeExploreTimeAwardGetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetC2S)
  SharedDtor();
}

void MsgNpcAutoIncomeExploreTimeAwardGetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeExploreTimeAwardGetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreTimeAwardGetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeExploreTimeAwardGetC2S_descriptor_;
}

const MsgNpcAutoIncomeExploreTimeAwardGetC2S& MsgNpcAutoIncomeExploreTimeAwardGetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeExploreTimeAwardGetC2S* MsgNpcAutoIncomeExploreTimeAwardGetC2S::default_instance_ = NULL;

MsgNpcAutoIncomeExploreTimeAwardGetC2S* MsgNpcAutoIncomeExploreTimeAwardGetC2S::New() const {
  return new MsgNpcAutoIncomeExploreTimeAwardGetC2S;
}

void MsgNpcAutoIncomeExploreTimeAwardGetC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 7256;
    biome_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeExploreTimeAwardGetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_TIME_AWARD_GET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_biome_id;
        break;
      }

      // optional int64 biome_id = 2;
      case 2: {
        if (tag == 16) {
         parse_biome_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &biome_id_)));
          set_has_biome_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeExploreTimeAwardGetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_TIME_AWARD_GET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->biome_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomeExploreTimeAwardGetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_TIME_AWARD_GET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->biome_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetC2S)
  return target;
}

int MsgNpcAutoIncomeExploreTimeAwardGetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_TIME_AWARD_GET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 biome_id = 2;
    if (has_biome_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->biome_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeExploreTimeAwardGetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeExploreTimeAwardGetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeExploreTimeAwardGetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeExploreTimeAwardGetC2S::MergeFrom(const MsgNpcAutoIncomeExploreTimeAwardGetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_biome_id()) {
      set_biome_id(from.biome_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeExploreTimeAwardGetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeExploreTimeAwardGetC2S::CopyFrom(const MsgNpcAutoIncomeExploreTimeAwardGetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeExploreTimeAwardGetC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeExploreTimeAwardGetC2S::Swap(MsgNpcAutoIncomeExploreTimeAwardGetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(biome_id_, other->biome_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeExploreTimeAwardGetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeExploreTimeAwardGetC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeExploreTimeAwardGetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeExploreTimeAwardGetS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeExploreTimeAwardGetS2C::kResFieldNumber;
const int MsgNpcAutoIncomeExploreTimeAwardGetS2C::kBiomeIdFieldNumber;
const int MsgNpcAutoIncomeExploreTimeAwardGetS2C::kTimeStampFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeExploreTimeAwardGetS2C::MsgNpcAutoIncomeExploreTimeAwardGetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetS2C)
}

void MsgNpcAutoIncomeExploreTimeAwardGetS2C::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeExploreTimeAwardGetS2C::MsgNpcAutoIncomeExploreTimeAwardGetS2C(const MsgNpcAutoIncomeExploreTimeAwardGetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetS2C)
}

void MsgNpcAutoIncomeExploreTimeAwardGetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7257;
  res_ = 1;
  biome_id_ = GOOGLE_LONGLONG(0);
  time_stamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeExploreTimeAwardGetS2C::~MsgNpcAutoIncomeExploreTimeAwardGetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetS2C)
  SharedDtor();
}

void MsgNpcAutoIncomeExploreTimeAwardGetS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeExploreTimeAwardGetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExploreTimeAwardGetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeExploreTimeAwardGetS2C_descriptor_;
}

const MsgNpcAutoIncomeExploreTimeAwardGetS2C& MsgNpcAutoIncomeExploreTimeAwardGetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeExploreTimeAwardGetS2C* MsgNpcAutoIncomeExploreTimeAwardGetS2C::default_instance_ = NULL;

MsgNpcAutoIncomeExploreTimeAwardGetS2C* MsgNpcAutoIncomeExploreTimeAwardGetS2C::New() const {
  return new MsgNpcAutoIncomeExploreTimeAwardGetS2C;
}

void MsgNpcAutoIncomeExploreTimeAwardGetS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcAutoIncomeExploreTimeAwardGetS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(biome_id_, time_stamp_);
    msgtype_ = 7257;
    res_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeExploreTimeAwardGetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_TIME_AWARD_GET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_biome_id;
        break;
      }

      // optional int64 biome_id = 3;
      case 3: {
        if (tag == 24) {
         parse_biome_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &biome_id_)));
          set_has_biome_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_stamp;
        break;
      }

      // optional int64 time_stamp = 4;
      case 4: {
        if (tag == 32) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeExploreTimeAwardGetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_TIME_AWARD_GET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional int64 biome_id = 3;
  if (has_biome_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->biome_id(), output);
  }

  // optional int64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomeExploreTimeAwardGetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_TIME_AWARD_GET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional int64 biome_id = 3;
  if (has_biome_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->biome_id(), target);
  }

  // optional int64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeExploreTimeAwardGetS2C)
  return target;
}

int MsgNpcAutoIncomeExploreTimeAwardGetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_TIME_AWARD_GET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional int64 biome_id = 3;
    if (has_biome_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->biome_id());
    }

    // optional int64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeExploreTimeAwardGetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeExploreTimeAwardGetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeExploreTimeAwardGetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeExploreTimeAwardGetS2C::MergeFrom(const MsgNpcAutoIncomeExploreTimeAwardGetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_biome_id()) {
      set_biome_id(from.biome_id());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeExploreTimeAwardGetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeExploreTimeAwardGetS2C::CopyFrom(const MsgNpcAutoIncomeExploreTimeAwardGetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeExploreTimeAwardGetS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeExploreTimeAwardGetS2C::Swap(MsgNpcAutoIncomeExploreTimeAwardGetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(biome_id_, other->biome_id_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeExploreTimeAwardGetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeExploreTimeAwardGetS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeExploreTimeAwardGetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeExplorePassStageC2S::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeExplorePassStageC2S::kBiomeIdFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeExplorePassStageC2S::MsgNpcAutoIncomeExplorePassStageC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeExplorePassStageC2S)
}

void MsgNpcAutoIncomeExplorePassStageC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeExplorePassStageC2S::MsgNpcAutoIncomeExplorePassStageC2S(const MsgNpcAutoIncomeExplorePassStageC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeExplorePassStageC2S)
}

void MsgNpcAutoIncomeExplorePassStageC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7258;
  biome_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeExplorePassStageC2S::~MsgNpcAutoIncomeExplorePassStageC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeExplorePassStageC2S)
  SharedDtor();
}

void MsgNpcAutoIncomeExplorePassStageC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeExplorePassStageC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExplorePassStageC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeExplorePassStageC2S_descriptor_;
}

const MsgNpcAutoIncomeExplorePassStageC2S& MsgNpcAutoIncomeExplorePassStageC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeExplorePassStageC2S* MsgNpcAutoIncomeExplorePassStageC2S::default_instance_ = NULL;

MsgNpcAutoIncomeExplorePassStageC2S* MsgNpcAutoIncomeExplorePassStageC2S::New() const {
  return new MsgNpcAutoIncomeExplorePassStageC2S;
}

void MsgNpcAutoIncomeExplorePassStageC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 7258;
    biome_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeExplorePassStageC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeExplorePassStageC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_PASS_STAGE_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_biome_id;
        break;
      }

      // optional int64 biome_id = 2;
      case 2: {
        if (tag == 16) {
         parse_biome_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &biome_id_)));
          set_has_biome_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeExplorePassStageC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeExplorePassStageC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeExplorePassStageC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeExplorePassStageC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_PASS_STAGE_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->biome_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeExplorePassStageC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomeExplorePassStageC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeExplorePassStageC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_PASS_STAGE_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->biome_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeExplorePassStageC2S)
  return target;
}

int MsgNpcAutoIncomeExplorePassStageC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_PASS_STAGE_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 biome_id = 2;
    if (has_biome_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->biome_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeExplorePassStageC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeExplorePassStageC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeExplorePassStageC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeExplorePassStageC2S::MergeFrom(const MsgNpcAutoIncomeExplorePassStageC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_biome_id()) {
      set_biome_id(from.biome_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeExplorePassStageC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeExplorePassStageC2S::CopyFrom(const MsgNpcAutoIncomeExplorePassStageC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeExplorePassStageC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeExplorePassStageC2S::Swap(MsgNpcAutoIncomeExplorePassStageC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(biome_id_, other->biome_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeExplorePassStageC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeExplorePassStageC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeExplorePassStageC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeExplorePassStageS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeExplorePassStageS2C::kResFieldNumber;
const int MsgNpcAutoIncomeExplorePassStageS2C::kBiomeIdFieldNumber;
const int MsgNpcAutoIncomeExplorePassStageS2C::kStageFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeExplorePassStageS2C::MsgNpcAutoIncomeExplorePassStageS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeExplorePassStageS2C)
}

void MsgNpcAutoIncomeExplorePassStageS2C::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeExplorePassStageS2C::MsgNpcAutoIncomeExplorePassStageS2C(const MsgNpcAutoIncomeExplorePassStageS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeExplorePassStageS2C)
}

void MsgNpcAutoIncomeExplorePassStageS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7259;
  res_ = 1;
  biome_id_ = GOOGLE_LONGLONG(0);
  stage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeExplorePassStageS2C::~MsgNpcAutoIncomeExplorePassStageS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeExplorePassStageS2C)
  SharedDtor();
}

void MsgNpcAutoIncomeExplorePassStageS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeExplorePassStageS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeExplorePassStageS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeExplorePassStageS2C_descriptor_;
}

const MsgNpcAutoIncomeExplorePassStageS2C& MsgNpcAutoIncomeExplorePassStageS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeExplorePassStageS2C* MsgNpcAutoIncomeExplorePassStageS2C::default_instance_ = NULL;

MsgNpcAutoIncomeExplorePassStageS2C* MsgNpcAutoIncomeExplorePassStageS2C::New() const {
  return new MsgNpcAutoIncomeExplorePassStageS2C;
}

void MsgNpcAutoIncomeExplorePassStageS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcAutoIncomeExplorePassStageS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(biome_id_, stage_);
    msgtype_ = 7259;
    res_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeExplorePassStageS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeExplorePassStageS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_PASS_STAGE_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_biome_id;
        break;
      }

      // optional int64 biome_id = 3;
      case 3: {
        if (tag == 24) {
         parse_biome_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &biome_id_)));
          set_has_biome_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stage;
        break;
      }

      // optional int32 stage = 4;
      case 4: {
        if (tag == 32) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeExplorePassStageS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeExplorePassStageS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeExplorePassStageS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeExplorePassStageS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_PASS_STAGE_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional int64 biome_id = 3;
  if (has_biome_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->biome_id(), output);
  }

  // optional int32 stage = 4;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeExplorePassStageS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomeExplorePassStageS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeExplorePassStageS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_PASS_STAGE_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional int64 biome_id = 3;
  if (has_biome_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->biome_id(), target);
  }

  // optional int32 stage = 4;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeExplorePassStageS2C)
  return target;
}

int MsgNpcAutoIncomeExplorePassStageS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_EXPLORE_PASS_STAGE_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional int64 biome_id = 3;
    if (has_biome_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->biome_id());
    }

    // optional int32 stage = 4;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeExplorePassStageS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeExplorePassStageS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeExplorePassStageS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeExplorePassStageS2C::MergeFrom(const MsgNpcAutoIncomeExplorePassStageS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_biome_id()) {
      set_biome_id(from.biome_id());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeExplorePassStageS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeExplorePassStageS2C::CopyFrom(const MsgNpcAutoIncomeExplorePassStageS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeExplorePassStageS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeExplorePassStageS2C::Swap(MsgNpcAutoIncomeExplorePassStageS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(biome_id_, other->biome_id_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeExplorePassStageS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeExplorePassStageS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeExplorePassStageS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeFeedingDataGetC2S::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeFeedingDataGetC2S::MsgNpcAutoIncomeFeedingDataGetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeFeedingDataGetC2S)
}

void MsgNpcAutoIncomeFeedingDataGetC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeFeedingDataGetC2S::MsgNpcAutoIncomeFeedingDataGetC2S(const MsgNpcAutoIncomeFeedingDataGetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeFeedingDataGetC2S)
}

void MsgNpcAutoIncomeFeedingDataGetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7278;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeFeedingDataGetC2S::~MsgNpcAutoIncomeFeedingDataGetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeFeedingDataGetC2S)
  SharedDtor();
}

void MsgNpcAutoIncomeFeedingDataGetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeFeedingDataGetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingDataGetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeFeedingDataGetC2S_descriptor_;
}

const MsgNpcAutoIncomeFeedingDataGetC2S& MsgNpcAutoIncomeFeedingDataGetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeFeedingDataGetC2S* MsgNpcAutoIncomeFeedingDataGetC2S::default_instance_ = NULL;

MsgNpcAutoIncomeFeedingDataGetC2S* MsgNpcAutoIncomeFeedingDataGetC2S::New() const {
  return new MsgNpcAutoIncomeFeedingDataGetC2S;
}

void MsgNpcAutoIncomeFeedingDataGetC2S::Clear() {
  msgtype_ = 7278;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeFeedingDataGetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeFeedingDataGetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_DATA_GET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeFeedingDataGetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeFeedingDataGetC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeFeedingDataGetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeFeedingDataGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_DATA_GET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeFeedingDataGetC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomeFeedingDataGetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeFeedingDataGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_DATA_GET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeFeedingDataGetC2S)
  return target;
}

int MsgNpcAutoIncomeFeedingDataGetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_DATA_GET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeFeedingDataGetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeFeedingDataGetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeFeedingDataGetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeFeedingDataGetC2S::MergeFrom(const MsgNpcAutoIncomeFeedingDataGetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeFeedingDataGetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeFeedingDataGetC2S::CopyFrom(const MsgNpcAutoIncomeFeedingDataGetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeFeedingDataGetC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeFeedingDataGetC2S::Swap(MsgNpcAutoIncomeFeedingDataGetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeFeedingDataGetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeFeedingDataGetC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeFeedingDataGetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeFeedingDataGetS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeFeedingDataGetS2C::kResFieldNumber;
const int MsgNpcAutoIncomeFeedingDataGetS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeFeedingDataGetS2C::MsgNpcAutoIncomeFeedingDataGetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeFeedingDataGetS2C)
}

void MsgNpcAutoIncomeFeedingDataGetS2C::InitAsDefaultInstance() {
  data_ = const_cast< ::MsgPB::NpcFeedingData*>(&::MsgPB::NpcFeedingData::default_instance());
}

MsgNpcAutoIncomeFeedingDataGetS2C::MsgNpcAutoIncomeFeedingDataGetS2C(const MsgNpcAutoIncomeFeedingDataGetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeFeedingDataGetS2C)
}

void MsgNpcAutoIncomeFeedingDataGetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7279;
  res_ = 1;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeFeedingDataGetS2C::~MsgNpcAutoIncomeFeedingDataGetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeFeedingDataGetS2C)
  SharedDtor();
}

void MsgNpcAutoIncomeFeedingDataGetS2C::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgNpcAutoIncomeFeedingDataGetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingDataGetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeFeedingDataGetS2C_descriptor_;
}

const MsgNpcAutoIncomeFeedingDataGetS2C& MsgNpcAutoIncomeFeedingDataGetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeFeedingDataGetS2C* MsgNpcAutoIncomeFeedingDataGetS2C::default_instance_ = NULL;

MsgNpcAutoIncomeFeedingDataGetS2C* MsgNpcAutoIncomeFeedingDataGetS2C::New() const {
  return new MsgNpcAutoIncomeFeedingDataGetS2C;
}

void MsgNpcAutoIncomeFeedingDataGetS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 7279;
    res_ = 1;
    if (has_data()) {
      if (data_ != NULL) data_->::MsgPB::NpcFeedingData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeFeedingDataGetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeFeedingDataGetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_DATA_GET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .MsgPB.NpcFeedingData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeFeedingDataGetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeFeedingDataGetS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeFeedingDataGetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeFeedingDataGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_DATA_GET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional .MsgPB.NpcFeedingData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeFeedingDataGetS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomeFeedingDataGetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeFeedingDataGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_DATA_GET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional .MsgPB.NpcFeedingData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeFeedingDataGetS2C)
  return target;
}

int MsgNpcAutoIncomeFeedingDataGetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_DATA_GET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional .MsgPB.NpcFeedingData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeFeedingDataGetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeFeedingDataGetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeFeedingDataGetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeFeedingDataGetS2C::MergeFrom(const MsgNpcAutoIncomeFeedingDataGetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_data()) {
      mutable_data()->::MsgPB::NpcFeedingData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeFeedingDataGetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeFeedingDataGetS2C::CopyFrom(const MsgNpcAutoIncomeFeedingDataGetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeFeedingDataGetS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeFeedingDataGetS2C::Swap(MsgNpcAutoIncomeFeedingDataGetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeFeedingDataGetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeFeedingDataGetS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeFeedingDataGetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeFeedingSetC2S::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeFeedingSetC2S::kFenceIdFieldNumber;
const int MsgNpcAutoIncomeFeedingSetC2S::kProtectorFieldNumber;
const int MsgNpcAutoIncomeFeedingSetC2S::kItemNumFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeFeedingSetC2S::MsgNpcAutoIncomeFeedingSetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeFeedingSetC2S)
}

void MsgNpcAutoIncomeFeedingSetC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeFeedingSetC2S::MsgNpcAutoIncomeFeedingSetC2S(const MsgNpcAutoIncomeFeedingSetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeFeedingSetC2S)
}

void MsgNpcAutoIncomeFeedingSetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7270;
  fence_id_ = 0;
  protector_ = 0;
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeFeedingSetC2S::~MsgNpcAutoIncomeFeedingSetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeFeedingSetC2S)
  SharedDtor();
}

void MsgNpcAutoIncomeFeedingSetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeFeedingSetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingSetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeFeedingSetC2S_descriptor_;
}

const MsgNpcAutoIncomeFeedingSetC2S& MsgNpcAutoIncomeFeedingSetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeFeedingSetC2S* MsgNpcAutoIncomeFeedingSetC2S::default_instance_ = NULL;

MsgNpcAutoIncomeFeedingSetC2S* MsgNpcAutoIncomeFeedingSetC2S::New() const {
  return new MsgNpcAutoIncomeFeedingSetC2S;
}

void MsgNpcAutoIncomeFeedingSetC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcAutoIncomeFeedingSetC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(fence_id_, item_num_);
    msgtype_ = 7270;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeFeedingSetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeFeedingSetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_SET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fence_id;
        break;
      }

      // optional int32 fence_id = 2;
      case 2: {
        if (tag == 16) {
         parse_fence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fence_id_)));
          set_has_fence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_protector;
        break;
      }

      // optional int32 protector = 3;
      case 3: {
        if (tag == 24) {
         parse_protector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protector_)));
          set_has_protector();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 4;
      case 4: {
        if (tag == 32) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeFeedingSetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeFeedingSetC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeFeedingSetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeFeedingSetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_SET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 fence_id = 2;
  if (has_fence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fence_id(), output);
  }

  // optional int32 protector = 3;
  if (has_protector()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->protector(), output);
  }

  // optional int32 item_num = 4;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeFeedingSetC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomeFeedingSetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeFeedingSetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_SET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 fence_id = 2;
  if (has_fence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fence_id(), target);
  }

  // optional int32 protector = 3;
  if (has_protector()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->protector(), target);
  }

  // optional int32 item_num = 4;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeFeedingSetC2S)
  return target;
}

int MsgNpcAutoIncomeFeedingSetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_SET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 fence_id = 2;
    if (has_fence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fence_id());
    }

    // optional int32 protector = 3;
    if (has_protector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protector());
    }

    // optional int32 item_num = 4;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeFeedingSetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeFeedingSetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeFeedingSetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeFeedingSetC2S::MergeFrom(const MsgNpcAutoIncomeFeedingSetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_fence_id()) {
      set_fence_id(from.fence_id());
    }
    if (from.has_protector()) {
      set_protector(from.protector());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeFeedingSetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeFeedingSetC2S::CopyFrom(const MsgNpcAutoIncomeFeedingSetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeFeedingSetC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeFeedingSetC2S::Swap(MsgNpcAutoIncomeFeedingSetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(fence_id_, other->fence_id_);
    std::swap(protector_, other->protector_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeFeedingSetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeFeedingSetC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeFeedingSetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeFeedingSetS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeFeedingSetS2C::kResFieldNumber;
const int MsgNpcAutoIncomeFeedingSetS2C::kFenceIdFieldNumber;
const int MsgNpcAutoIncomeFeedingSetS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeFeedingSetS2C::MsgNpcAutoIncomeFeedingSetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeFeedingSetS2C)
}

void MsgNpcAutoIncomeFeedingSetS2C::InitAsDefaultInstance() {
  data_ = const_cast< ::MsgPB::NpcFeedingData_info*>(&::MsgPB::NpcFeedingData_info::default_instance());
}

MsgNpcAutoIncomeFeedingSetS2C::MsgNpcAutoIncomeFeedingSetS2C(const MsgNpcAutoIncomeFeedingSetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeFeedingSetS2C)
}

void MsgNpcAutoIncomeFeedingSetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7271;
  res_ = 1;
  fence_id_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeFeedingSetS2C::~MsgNpcAutoIncomeFeedingSetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeFeedingSetS2C)
  SharedDtor();
}

void MsgNpcAutoIncomeFeedingSetS2C::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgNpcAutoIncomeFeedingSetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingSetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeFeedingSetS2C_descriptor_;
}

const MsgNpcAutoIncomeFeedingSetS2C& MsgNpcAutoIncomeFeedingSetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeFeedingSetS2C* MsgNpcAutoIncomeFeedingSetS2C::default_instance_ = NULL;

MsgNpcAutoIncomeFeedingSetS2C* MsgNpcAutoIncomeFeedingSetS2C::New() const {
  return new MsgNpcAutoIncomeFeedingSetS2C;
}

void MsgNpcAutoIncomeFeedingSetS2C::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 7271;
    res_ = 1;
    fence_id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::MsgPB::NpcFeedingData_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeFeedingSetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeFeedingSetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_SET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fence_id;
        break;
      }

      // optional int32 fence_id = 3;
      case 3: {
        if (tag == 24) {
         parse_fence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fence_id_)));
          set_has_fence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .MsgPB.NpcFeedingData.info data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeFeedingSetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeFeedingSetS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeFeedingSetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeFeedingSetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_SET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional int32 fence_id = 3;
  if (has_fence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fence_id(), output);
  }

  // optional .MsgPB.NpcFeedingData.info data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeFeedingSetS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomeFeedingSetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeFeedingSetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_SET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional int32 fence_id = 3;
  if (has_fence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fence_id(), target);
  }

  // optional .MsgPB.NpcFeedingData.info data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeFeedingSetS2C)
  return target;
}

int MsgNpcAutoIncomeFeedingSetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_SET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional int32 fence_id = 3;
    if (has_fence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fence_id());
    }

    // optional .MsgPB.NpcFeedingData.info data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeFeedingSetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeFeedingSetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeFeedingSetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeFeedingSetS2C::MergeFrom(const MsgNpcAutoIncomeFeedingSetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_fence_id()) {
      set_fence_id(from.fence_id());
    }
    if (from.has_data()) {
      mutable_data()->::MsgPB::NpcFeedingData_info::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeFeedingSetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeFeedingSetS2C::CopyFrom(const MsgNpcAutoIncomeFeedingSetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeFeedingSetS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeFeedingSetS2C::Swap(MsgNpcAutoIncomeFeedingSetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(fence_id_, other->fence_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeFeedingSetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeFeedingSetS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeFeedingSetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeFeedingTimeAwardGetC2S::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeFeedingTimeAwardGetC2S::MsgNpcAutoIncomeFeedingTimeAwardGetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetC2S)
}

void MsgNpcAutoIncomeFeedingTimeAwardGetC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeFeedingTimeAwardGetC2S::MsgNpcAutoIncomeFeedingTimeAwardGetC2S(const MsgNpcAutoIncomeFeedingTimeAwardGetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetC2S)
}

void MsgNpcAutoIncomeFeedingTimeAwardGetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7272;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeFeedingTimeAwardGetC2S::~MsgNpcAutoIncomeFeedingTimeAwardGetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetC2S)
  SharedDtor();
}

void MsgNpcAutoIncomeFeedingTimeAwardGetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeFeedingTimeAwardGetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingTimeAwardGetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeFeedingTimeAwardGetC2S_descriptor_;
}

const MsgNpcAutoIncomeFeedingTimeAwardGetC2S& MsgNpcAutoIncomeFeedingTimeAwardGetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeFeedingTimeAwardGetC2S* MsgNpcAutoIncomeFeedingTimeAwardGetC2S::default_instance_ = NULL;

MsgNpcAutoIncomeFeedingTimeAwardGetC2S* MsgNpcAutoIncomeFeedingTimeAwardGetC2S::New() const {
  return new MsgNpcAutoIncomeFeedingTimeAwardGetC2S;
}

void MsgNpcAutoIncomeFeedingTimeAwardGetC2S::Clear() {
  msgtype_ = 7272;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeFeedingTimeAwardGetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_TIME_AWARD_GET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeFeedingTimeAwardGetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_TIME_AWARD_GET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomeFeedingTimeAwardGetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_TIME_AWARD_GET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetC2S)
  return target;
}

int MsgNpcAutoIncomeFeedingTimeAwardGetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_TIME_AWARD_GET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeFeedingTimeAwardGetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeFeedingTimeAwardGetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeFeedingTimeAwardGetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeFeedingTimeAwardGetC2S::MergeFrom(const MsgNpcAutoIncomeFeedingTimeAwardGetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeFeedingTimeAwardGetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeFeedingTimeAwardGetC2S::CopyFrom(const MsgNpcAutoIncomeFeedingTimeAwardGetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeFeedingTimeAwardGetC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeFeedingTimeAwardGetC2S::Swap(MsgNpcAutoIncomeFeedingTimeAwardGetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeFeedingTimeAwardGetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeFeedingTimeAwardGetC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeFeedingTimeAwardGetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeFeedingTimeAwardGetS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeFeedingTimeAwardGetS2C::kResFieldNumber;
const int MsgNpcAutoIncomeFeedingTimeAwardGetS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeFeedingTimeAwardGetS2C::MsgNpcAutoIncomeFeedingTimeAwardGetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetS2C)
}

void MsgNpcAutoIncomeFeedingTimeAwardGetS2C::InitAsDefaultInstance() {
  data_ = const_cast< ::MsgPB::NpcFeedingData*>(&::MsgPB::NpcFeedingData::default_instance());
}

MsgNpcAutoIncomeFeedingTimeAwardGetS2C::MsgNpcAutoIncomeFeedingTimeAwardGetS2C(const MsgNpcAutoIncomeFeedingTimeAwardGetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetS2C)
}

void MsgNpcAutoIncomeFeedingTimeAwardGetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7273;
  res_ = 1;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeFeedingTimeAwardGetS2C::~MsgNpcAutoIncomeFeedingTimeAwardGetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetS2C)
  SharedDtor();
}

void MsgNpcAutoIncomeFeedingTimeAwardGetS2C::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgNpcAutoIncomeFeedingTimeAwardGetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingTimeAwardGetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeFeedingTimeAwardGetS2C_descriptor_;
}

const MsgNpcAutoIncomeFeedingTimeAwardGetS2C& MsgNpcAutoIncomeFeedingTimeAwardGetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeFeedingTimeAwardGetS2C* MsgNpcAutoIncomeFeedingTimeAwardGetS2C::default_instance_ = NULL;

MsgNpcAutoIncomeFeedingTimeAwardGetS2C* MsgNpcAutoIncomeFeedingTimeAwardGetS2C::New() const {
  return new MsgNpcAutoIncomeFeedingTimeAwardGetS2C;
}

void MsgNpcAutoIncomeFeedingTimeAwardGetS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 7273;
    res_ = 1;
    if (has_data()) {
      if (data_ != NULL) data_->::MsgPB::NpcFeedingData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeFeedingTimeAwardGetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_TIME_AWARD_GET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .MsgPB.NpcFeedingData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeFeedingTimeAwardGetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_TIME_AWARD_GET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional .MsgPB.NpcFeedingData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomeFeedingTimeAwardGetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_TIME_AWARD_GET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional .MsgPB.NpcFeedingData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeFeedingTimeAwardGetS2C)
  return target;
}

int MsgNpcAutoIncomeFeedingTimeAwardGetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_TIME_AWARD_GET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional .MsgPB.NpcFeedingData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeFeedingTimeAwardGetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeFeedingTimeAwardGetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeFeedingTimeAwardGetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeFeedingTimeAwardGetS2C::MergeFrom(const MsgNpcAutoIncomeFeedingTimeAwardGetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_data()) {
      mutable_data()->::MsgPB::NpcFeedingData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeFeedingTimeAwardGetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeFeedingTimeAwardGetS2C::CopyFrom(const MsgNpcAutoIncomeFeedingTimeAwardGetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeFeedingTimeAwardGetS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeFeedingTimeAwardGetS2C::Swap(MsgNpcAutoIncomeFeedingTimeAwardGetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeFeedingTimeAwardGetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeFeedingTimeAwardGetS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeFeedingTimeAwardGetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeFeedingUnlockC2S::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeFeedingUnlockC2S::kFenceIdFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeFeedingUnlockC2S::MsgNpcAutoIncomeFeedingUnlockC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeFeedingUnlockC2S)
}

void MsgNpcAutoIncomeFeedingUnlockC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeFeedingUnlockC2S::MsgNpcAutoIncomeFeedingUnlockC2S(const MsgNpcAutoIncomeFeedingUnlockC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeFeedingUnlockC2S)
}

void MsgNpcAutoIncomeFeedingUnlockC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7282;
  fence_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeFeedingUnlockC2S::~MsgNpcAutoIncomeFeedingUnlockC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeFeedingUnlockC2S)
  SharedDtor();
}

void MsgNpcAutoIncomeFeedingUnlockC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeFeedingUnlockC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingUnlockC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeFeedingUnlockC2S_descriptor_;
}

const MsgNpcAutoIncomeFeedingUnlockC2S& MsgNpcAutoIncomeFeedingUnlockC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeFeedingUnlockC2S* MsgNpcAutoIncomeFeedingUnlockC2S::default_instance_ = NULL;

MsgNpcAutoIncomeFeedingUnlockC2S* MsgNpcAutoIncomeFeedingUnlockC2S::New() const {
  return new MsgNpcAutoIncomeFeedingUnlockC2S;
}

void MsgNpcAutoIncomeFeedingUnlockC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 7282;
    fence_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeFeedingUnlockC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeFeedingUnlockC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_UNLOCK_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fence_id;
        break;
      }

      // optional int32 fence_id = 2;
      case 2: {
        if (tag == 16) {
         parse_fence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fence_id_)));
          set_has_fence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeFeedingUnlockC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeFeedingUnlockC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeFeedingUnlockC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeFeedingUnlockC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_UNLOCK_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 fence_id = 2;
  if (has_fence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fence_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeFeedingUnlockC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomeFeedingUnlockC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeFeedingUnlockC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_UNLOCK_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 fence_id = 2;
  if (has_fence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fence_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeFeedingUnlockC2S)
  return target;
}

int MsgNpcAutoIncomeFeedingUnlockC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_UNLOCK_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 fence_id = 2;
    if (has_fence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fence_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeFeedingUnlockC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeFeedingUnlockC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeFeedingUnlockC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeFeedingUnlockC2S::MergeFrom(const MsgNpcAutoIncomeFeedingUnlockC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_fence_id()) {
      set_fence_id(from.fence_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeFeedingUnlockC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeFeedingUnlockC2S::CopyFrom(const MsgNpcAutoIncomeFeedingUnlockC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeFeedingUnlockC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeFeedingUnlockC2S::Swap(MsgNpcAutoIncomeFeedingUnlockC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(fence_id_, other->fence_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeFeedingUnlockC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeFeedingUnlockC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeFeedingUnlockC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeFeedingUnlockS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeFeedingUnlockS2C::kResFieldNumber;
const int MsgNpcAutoIncomeFeedingUnlockS2C::kFenceIdFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeFeedingUnlockS2C::MsgNpcAutoIncomeFeedingUnlockS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeFeedingUnlockS2C)
}

void MsgNpcAutoIncomeFeedingUnlockS2C::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeFeedingUnlockS2C::MsgNpcAutoIncomeFeedingUnlockS2C(const MsgNpcAutoIncomeFeedingUnlockS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeFeedingUnlockS2C)
}

void MsgNpcAutoIncomeFeedingUnlockS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7283;
  res_ = 1;
  fence_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeFeedingUnlockS2C::~MsgNpcAutoIncomeFeedingUnlockS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeFeedingUnlockS2C)
  SharedDtor();
}

void MsgNpcAutoIncomeFeedingUnlockS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeFeedingUnlockS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeFeedingUnlockS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeFeedingUnlockS2C_descriptor_;
}

const MsgNpcAutoIncomeFeedingUnlockS2C& MsgNpcAutoIncomeFeedingUnlockS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeFeedingUnlockS2C* MsgNpcAutoIncomeFeedingUnlockS2C::default_instance_ = NULL;

MsgNpcAutoIncomeFeedingUnlockS2C* MsgNpcAutoIncomeFeedingUnlockS2C::New() const {
  return new MsgNpcAutoIncomeFeedingUnlockS2C;
}

void MsgNpcAutoIncomeFeedingUnlockS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 7283;
    res_ = 1;
    fence_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeFeedingUnlockS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeFeedingUnlockS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_UNLOCK_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fence_id;
        break;
      }

      // optional int32 fence_id = 3;
      case 3: {
        if (tag == 24) {
         parse_fence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fence_id_)));
          set_has_fence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeFeedingUnlockS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeFeedingUnlockS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeFeedingUnlockS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeFeedingUnlockS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_UNLOCK_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional int32 fence_id = 3;
  if (has_fence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fence_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeFeedingUnlockS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomeFeedingUnlockS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeFeedingUnlockS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_UNLOCK_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional int32 fence_id = 3;
  if (has_fence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fence_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeFeedingUnlockS2C)
  return target;
}

int MsgNpcAutoIncomeFeedingUnlockS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_FEEDING_UNLOCK_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional int32 fence_id = 3;
    if (has_fence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fence_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeFeedingUnlockS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeFeedingUnlockS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeFeedingUnlockS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeFeedingUnlockS2C::MergeFrom(const MsgNpcAutoIncomeFeedingUnlockS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_fence_id()) {
      set_fence_id(from.fence_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeFeedingUnlockS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeFeedingUnlockS2C::CopyFrom(const MsgNpcAutoIncomeFeedingUnlockS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeFeedingUnlockS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeFeedingUnlockS2C::Swap(MsgNpcAutoIncomeFeedingUnlockS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(fence_id_, other->fence_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeFeedingUnlockS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeFeedingUnlockS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeFeedingUnlockS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomePlantDataGetC2S::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomePlantDataGetC2S::MsgNpcAutoIncomePlantDataGetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomePlantDataGetC2S)
}

void MsgNpcAutoIncomePlantDataGetC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomePlantDataGetC2S::MsgNpcAutoIncomePlantDataGetC2S(const MsgNpcAutoIncomePlantDataGetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomePlantDataGetC2S)
}

void MsgNpcAutoIncomePlantDataGetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7280;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomePlantDataGetC2S::~MsgNpcAutoIncomePlantDataGetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomePlantDataGetC2S)
  SharedDtor();
}

void MsgNpcAutoIncomePlantDataGetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomePlantDataGetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantDataGetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomePlantDataGetC2S_descriptor_;
}

const MsgNpcAutoIncomePlantDataGetC2S& MsgNpcAutoIncomePlantDataGetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomePlantDataGetC2S* MsgNpcAutoIncomePlantDataGetC2S::default_instance_ = NULL;

MsgNpcAutoIncomePlantDataGetC2S* MsgNpcAutoIncomePlantDataGetC2S::New() const {
  return new MsgNpcAutoIncomePlantDataGetC2S;
}

void MsgNpcAutoIncomePlantDataGetC2S::Clear() {
  msgtype_ = 7280;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomePlantDataGetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomePlantDataGetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_DATA_GET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomePlantDataGetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomePlantDataGetC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomePlantDataGetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomePlantDataGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_DATA_GET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomePlantDataGetC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomePlantDataGetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomePlantDataGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_DATA_GET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomePlantDataGetC2S)
  return target;
}

int MsgNpcAutoIncomePlantDataGetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_DATA_GET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomePlantDataGetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomePlantDataGetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomePlantDataGetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomePlantDataGetC2S::MergeFrom(const MsgNpcAutoIncomePlantDataGetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomePlantDataGetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomePlantDataGetC2S::CopyFrom(const MsgNpcAutoIncomePlantDataGetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomePlantDataGetC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomePlantDataGetC2S::Swap(MsgNpcAutoIncomePlantDataGetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomePlantDataGetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomePlantDataGetC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomePlantDataGetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomePlantDataGetS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomePlantDataGetS2C::kResFieldNumber;
const int MsgNpcAutoIncomePlantDataGetS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomePlantDataGetS2C::MsgNpcAutoIncomePlantDataGetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomePlantDataGetS2C)
}

void MsgNpcAutoIncomePlantDataGetS2C::InitAsDefaultInstance() {
  data_ = const_cast< ::MsgPB::NpcPlantData*>(&::MsgPB::NpcPlantData::default_instance());
}

MsgNpcAutoIncomePlantDataGetS2C::MsgNpcAutoIncomePlantDataGetS2C(const MsgNpcAutoIncomePlantDataGetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomePlantDataGetS2C)
}

void MsgNpcAutoIncomePlantDataGetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7281;
  res_ = 1;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomePlantDataGetS2C::~MsgNpcAutoIncomePlantDataGetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomePlantDataGetS2C)
  SharedDtor();
}

void MsgNpcAutoIncomePlantDataGetS2C::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgNpcAutoIncomePlantDataGetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantDataGetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomePlantDataGetS2C_descriptor_;
}

const MsgNpcAutoIncomePlantDataGetS2C& MsgNpcAutoIncomePlantDataGetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomePlantDataGetS2C* MsgNpcAutoIncomePlantDataGetS2C::default_instance_ = NULL;

MsgNpcAutoIncomePlantDataGetS2C* MsgNpcAutoIncomePlantDataGetS2C::New() const {
  return new MsgNpcAutoIncomePlantDataGetS2C;
}

void MsgNpcAutoIncomePlantDataGetS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 7281;
    res_ = 1;
    if (has_data()) {
      if (data_ != NULL) data_->::MsgPB::NpcPlantData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomePlantDataGetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomePlantDataGetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_DATA_GET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .MsgPB.NpcPlantData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomePlantDataGetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomePlantDataGetS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomePlantDataGetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomePlantDataGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_DATA_GET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional .MsgPB.NpcPlantData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomePlantDataGetS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomePlantDataGetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomePlantDataGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_DATA_GET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional .MsgPB.NpcPlantData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomePlantDataGetS2C)
  return target;
}

int MsgNpcAutoIncomePlantDataGetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_DATA_GET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional .MsgPB.NpcPlantData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomePlantDataGetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomePlantDataGetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomePlantDataGetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomePlantDataGetS2C::MergeFrom(const MsgNpcAutoIncomePlantDataGetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_data()) {
      mutable_data()->::MsgPB::NpcPlantData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomePlantDataGetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomePlantDataGetS2C::CopyFrom(const MsgNpcAutoIncomePlantDataGetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomePlantDataGetS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomePlantDataGetS2C::Swap(MsgNpcAutoIncomePlantDataGetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomePlantDataGetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomePlantDataGetS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomePlantDataGetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomePlantSetC2S::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomePlantSetC2S::kIdxFieldNumber;
const int MsgNpcAutoIncomePlantSetC2S::kProtectorFieldNumber;
const int MsgNpcAutoIncomePlantSetC2S::kItemIdFieldNumber;
const int MsgNpcAutoIncomePlantSetC2S::kItemNumFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomePlantSetC2S::MsgNpcAutoIncomePlantSetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomePlantSetC2S)
}

void MsgNpcAutoIncomePlantSetC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomePlantSetC2S::MsgNpcAutoIncomePlantSetC2S(const MsgNpcAutoIncomePlantSetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomePlantSetC2S)
}

void MsgNpcAutoIncomePlantSetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7274;
  idx_ = 0;
  protector_ = 0;
  item_id_ = 0;
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomePlantSetC2S::~MsgNpcAutoIncomePlantSetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomePlantSetC2S)
  SharedDtor();
}

void MsgNpcAutoIncomePlantSetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomePlantSetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantSetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomePlantSetC2S_descriptor_;
}

const MsgNpcAutoIncomePlantSetC2S& MsgNpcAutoIncomePlantSetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomePlantSetC2S* MsgNpcAutoIncomePlantSetC2S::default_instance_ = NULL;

MsgNpcAutoIncomePlantSetC2S* MsgNpcAutoIncomePlantSetC2S::New() const {
  return new MsgNpcAutoIncomePlantSetC2S;
}

void MsgNpcAutoIncomePlantSetC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcAutoIncomePlantSetC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(idx_, item_num_);
    msgtype_ = 7274;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomePlantSetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomePlantSetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_SET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // optional int32 idx = 2;
      case 2: {
        if (tag == 16) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_protector;
        break;
      }

      // optional int32 protector = 3;
      case 3: {
        if (tag == 24) {
         parse_protector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protector_)));
          set_has_protector();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 4;
      case 4: {
        if (tag == 32) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 5;
      case 5: {
        if (tag == 40) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomePlantSetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomePlantSetC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomePlantSetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomePlantSetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_SET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->idx(), output);
  }

  // optional int32 protector = 3;
  if (has_protector()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->protector(), output);
  }

  // optional int32 item_id = 4;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_id(), output);
  }

  // optional int32 item_num = 5;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomePlantSetC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomePlantSetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomePlantSetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_SET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->idx(), target);
  }

  // optional int32 protector = 3;
  if (has_protector()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->protector(), target);
  }

  // optional int32 item_id = 4;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_id(), target);
  }

  // optional int32 item_num = 5;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomePlantSetC2S)
  return target;
}

int MsgNpcAutoIncomePlantSetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_SET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional int32 protector = 3;
    if (has_protector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protector());
    }

    // optional int32 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_num = 5;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomePlantSetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomePlantSetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomePlantSetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomePlantSetC2S::MergeFrom(const MsgNpcAutoIncomePlantSetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_protector()) {
      set_protector(from.protector());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomePlantSetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomePlantSetC2S::CopyFrom(const MsgNpcAutoIncomePlantSetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomePlantSetC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomePlantSetC2S::Swap(MsgNpcAutoIncomePlantSetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(idx_, other->idx_);
    std::swap(protector_, other->protector_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomePlantSetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomePlantSetC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomePlantSetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomePlantSetS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomePlantSetS2C::kResFieldNumber;
const int MsgNpcAutoIncomePlantSetS2C::kIdxFieldNumber;
const int MsgNpcAutoIncomePlantSetS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomePlantSetS2C::MsgNpcAutoIncomePlantSetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomePlantSetS2C)
}

void MsgNpcAutoIncomePlantSetS2C::InitAsDefaultInstance() {
  data_ = const_cast< ::MsgPB::NpcPlantData_info*>(&::MsgPB::NpcPlantData_info::default_instance());
}

MsgNpcAutoIncomePlantSetS2C::MsgNpcAutoIncomePlantSetS2C(const MsgNpcAutoIncomePlantSetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomePlantSetS2C)
}

void MsgNpcAutoIncomePlantSetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7275;
  res_ = 1;
  idx_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomePlantSetS2C::~MsgNpcAutoIncomePlantSetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomePlantSetS2C)
  SharedDtor();
}

void MsgNpcAutoIncomePlantSetS2C::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgNpcAutoIncomePlantSetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantSetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomePlantSetS2C_descriptor_;
}

const MsgNpcAutoIncomePlantSetS2C& MsgNpcAutoIncomePlantSetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomePlantSetS2C* MsgNpcAutoIncomePlantSetS2C::default_instance_ = NULL;

MsgNpcAutoIncomePlantSetS2C* MsgNpcAutoIncomePlantSetS2C::New() const {
  return new MsgNpcAutoIncomePlantSetS2C;
}

void MsgNpcAutoIncomePlantSetS2C::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 7275;
    res_ = 1;
    idx_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::MsgPB::NpcPlantData_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomePlantSetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomePlantSetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_SET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_idx;
        break;
      }

      // optional int32 idx = 3;
      case 3: {
        if (tag == 24) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .MsgPB.NpcPlantData.info data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomePlantSetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomePlantSetS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomePlantSetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomePlantSetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_SET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional int32 idx = 3;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->idx(), output);
  }

  // optional .MsgPB.NpcPlantData.info data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomePlantSetS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomePlantSetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomePlantSetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_SET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional int32 idx = 3;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->idx(), target);
  }

  // optional .MsgPB.NpcPlantData.info data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomePlantSetS2C)
  return target;
}

int MsgNpcAutoIncomePlantSetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_SET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional int32 idx = 3;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional .MsgPB.NpcPlantData.info data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomePlantSetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomePlantSetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomePlantSetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomePlantSetS2C::MergeFrom(const MsgNpcAutoIncomePlantSetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_data()) {
      mutable_data()->::MsgPB::NpcPlantData_info::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomePlantSetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomePlantSetS2C::CopyFrom(const MsgNpcAutoIncomePlantSetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomePlantSetS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomePlantSetS2C::Swap(MsgNpcAutoIncomePlantSetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(idx_, other->idx_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomePlantSetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomePlantSetS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomePlantSetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomePlantTimeAwardGetC2S::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomePlantTimeAwardGetC2S::MsgNpcAutoIncomePlantTimeAwardGetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetC2S)
}

void MsgNpcAutoIncomePlantTimeAwardGetC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomePlantTimeAwardGetC2S::MsgNpcAutoIncomePlantTimeAwardGetC2S(const MsgNpcAutoIncomePlantTimeAwardGetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetC2S)
}

void MsgNpcAutoIncomePlantTimeAwardGetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7276;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomePlantTimeAwardGetC2S::~MsgNpcAutoIncomePlantTimeAwardGetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetC2S)
  SharedDtor();
}

void MsgNpcAutoIncomePlantTimeAwardGetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomePlantTimeAwardGetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantTimeAwardGetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomePlantTimeAwardGetC2S_descriptor_;
}

const MsgNpcAutoIncomePlantTimeAwardGetC2S& MsgNpcAutoIncomePlantTimeAwardGetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomePlantTimeAwardGetC2S* MsgNpcAutoIncomePlantTimeAwardGetC2S::default_instance_ = NULL;

MsgNpcAutoIncomePlantTimeAwardGetC2S* MsgNpcAutoIncomePlantTimeAwardGetC2S::New() const {
  return new MsgNpcAutoIncomePlantTimeAwardGetC2S;
}

void MsgNpcAutoIncomePlantTimeAwardGetC2S::Clear() {
  msgtype_ = 7276;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomePlantTimeAwardGetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_TIME_AWARD_GET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomePlantTimeAwardGetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_TIME_AWARD_GET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomePlantTimeAwardGetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_TIME_AWARD_GET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetC2S)
  return target;
}

int MsgNpcAutoIncomePlantTimeAwardGetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_TIME_AWARD_GET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomePlantTimeAwardGetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomePlantTimeAwardGetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomePlantTimeAwardGetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomePlantTimeAwardGetC2S::MergeFrom(const MsgNpcAutoIncomePlantTimeAwardGetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomePlantTimeAwardGetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomePlantTimeAwardGetC2S::CopyFrom(const MsgNpcAutoIncomePlantTimeAwardGetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomePlantTimeAwardGetC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomePlantTimeAwardGetC2S::Swap(MsgNpcAutoIncomePlantTimeAwardGetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomePlantTimeAwardGetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomePlantTimeAwardGetC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomePlantTimeAwardGetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomePlantTimeAwardGetS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomePlantTimeAwardGetS2C::kResFieldNumber;
const int MsgNpcAutoIncomePlantTimeAwardGetS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomePlantTimeAwardGetS2C::MsgNpcAutoIncomePlantTimeAwardGetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetS2C)
}

void MsgNpcAutoIncomePlantTimeAwardGetS2C::InitAsDefaultInstance() {
  data_ = const_cast< ::MsgPB::NpcPlantData*>(&::MsgPB::NpcPlantData::default_instance());
}

MsgNpcAutoIncomePlantTimeAwardGetS2C::MsgNpcAutoIncomePlantTimeAwardGetS2C(const MsgNpcAutoIncomePlantTimeAwardGetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetS2C)
}

void MsgNpcAutoIncomePlantTimeAwardGetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7277;
  res_ = 1;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomePlantTimeAwardGetS2C::~MsgNpcAutoIncomePlantTimeAwardGetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetS2C)
  SharedDtor();
}

void MsgNpcAutoIncomePlantTimeAwardGetS2C::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgNpcAutoIncomePlantTimeAwardGetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantTimeAwardGetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomePlantTimeAwardGetS2C_descriptor_;
}

const MsgNpcAutoIncomePlantTimeAwardGetS2C& MsgNpcAutoIncomePlantTimeAwardGetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomePlantTimeAwardGetS2C* MsgNpcAutoIncomePlantTimeAwardGetS2C::default_instance_ = NULL;

MsgNpcAutoIncomePlantTimeAwardGetS2C* MsgNpcAutoIncomePlantTimeAwardGetS2C::New() const {
  return new MsgNpcAutoIncomePlantTimeAwardGetS2C;
}

void MsgNpcAutoIncomePlantTimeAwardGetS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 7277;
    res_ = 1;
    if (has_data()) {
      if (data_ != NULL) data_->::MsgPB::NpcPlantData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomePlantTimeAwardGetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_TIME_AWARD_GET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .MsgPB.NpcPlantData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomePlantTimeAwardGetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_TIME_AWARD_GET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional .MsgPB.NpcPlantData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomePlantTimeAwardGetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_TIME_AWARD_GET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional .MsgPB.NpcPlantData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomePlantTimeAwardGetS2C)
  return target;
}

int MsgNpcAutoIncomePlantTimeAwardGetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_TIME_AWARD_GET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional .MsgPB.NpcPlantData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomePlantTimeAwardGetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomePlantTimeAwardGetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomePlantTimeAwardGetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomePlantTimeAwardGetS2C::MergeFrom(const MsgNpcAutoIncomePlantTimeAwardGetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_data()) {
      mutable_data()->::MsgPB::NpcPlantData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomePlantTimeAwardGetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomePlantTimeAwardGetS2C::CopyFrom(const MsgNpcAutoIncomePlantTimeAwardGetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomePlantTimeAwardGetS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomePlantTimeAwardGetS2C::Swap(MsgNpcAutoIncomePlantTimeAwardGetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomePlantTimeAwardGetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomePlantTimeAwardGetS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomePlantTimeAwardGetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomePlantUnlockC2S::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomePlantUnlockC2S::kIdxFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomePlantUnlockC2S::MsgNpcAutoIncomePlantUnlockC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomePlantUnlockC2S)
}

void MsgNpcAutoIncomePlantUnlockC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomePlantUnlockC2S::MsgNpcAutoIncomePlantUnlockC2S(const MsgNpcAutoIncomePlantUnlockC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomePlantUnlockC2S)
}

void MsgNpcAutoIncomePlantUnlockC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7284;
  idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomePlantUnlockC2S::~MsgNpcAutoIncomePlantUnlockC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomePlantUnlockC2S)
  SharedDtor();
}

void MsgNpcAutoIncomePlantUnlockC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomePlantUnlockC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantUnlockC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomePlantUnlockC2S_descriptor_;
}

const MsgNpcAutoIncomePlantUnlockC2S& MsgNpcAutoIncomePlantUnlockC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomePlantUnlockC2S* MsgNpcAutoIncomePlantUnlockC2S::default_instance_ = NULL;

MsgNpcAutoIncomePlantUnlockC2S* MsgNpcAutoIncomePlantUnlockC2S::New() const {
  return new MsgNpcAutoIncomePlantUnlockC2S;
}

void MsgNpcAutoIncomePlantUnlockC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 7284;
    idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomePlantUnlockC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomePlantUnlockC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_UNLOCK_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // optional int32 idx = 2;
      case 2: {
        if (tag == 16) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomePlantUnlockC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomePlantUnlockC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomePlantUnlockC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomePlantUnlockC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_UNLOCK_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomePlantUnlockC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomePlantUnlockC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomePlantUnlockC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_UNLOCK_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomePlantUnlockC2S)
  return target;
}

int MsgNpcAutoIncomePlantUnlockC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_UNLOCK_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomePlantUnlockC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomePlantUnlockC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomePlantUnlockC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomePlantUnlockC2S::MergeFrom(const MsgNpcAutoIncomePlantUnlockC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomePlantUnlockC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomePlantUnlockC2S::CopyFrom(const MsgNpcAutoIncomePlantUnlockC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomePlantUnlockC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomePlantUnlockC2S::Swap(MsgNpcAutoIncomePlantUnlockC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomePlantUnlockC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomePlantUnlockC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomePlantUnlockC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomePlantUnlockS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomePlantUnlockS2C::kResFieldNumber;
const int MsgNpcAutoIncomePlantUnlockS2C::kIdxFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomePlantUnlockS2C::MsgNpcAutoIncomePlantUnlockS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomePlantUnlockS2C)
}

void MsgNpcAutoIncomePlantUnlockS2C::InitAsDefaultInstance() {
}

MsgNpcAutoIncomePlantUnlockS2C::MsgNpcAutoIncomePlantUnlockS2C(const MsgNpcAutoIncomePlantUnlockS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomePlantUnlockS2C)
}

void MsgNpcAutoIncomePlantUnlockS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7285;
  res_ = 1;
  idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomePlantUnlockS2C::~MsgNpcAutoIncomePlantUnlockS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomePlantUnlockS2C)
  SharedDtor();
}

void MsgNpcAutoIncomePlantUnlockS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomePlantUnlockS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomePlantUnlockS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomePlantUnlockS2C_descriptor_;
}

const MsgNpcAutoIncomePlantUnlockS2C& MsgNpcAutoIncomePlantUnlockS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomePlantUnlockS2C* MsgNpcAutoIncomePlantUnlockS2C::default_instance_ = NULL;

MsgNpcAutoIncomePlantUnlockS2C* MsgNpcAutoIncomePlantUnlockS2C::New() const {
  return new MsgNpcAutoIncomePlantUnlockS2C;
}

void MsgNpcAutoIncomePlantUnlockS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 7285;
    res_ = 1;
    idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomePlantUnlockS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomePlantUnlockS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_UNLOCK_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_idx;
        break;
      }

      // optional int32 idx = 3;
      case 3: {
        if (tag == 24) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomePlantUnlockS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomePlantUnlockS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomePlantUnlockS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomePlantUnlockS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_UNLOCK_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional int32 idx = 3;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomePlantUnlockS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomePlantUnlockS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomePlantUnlockS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_UNLOCK_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional int32 idx = 3;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomePlantUnlockS2C)
  return target;
}

int MsgNpcAutoIncomePlantUnlockS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_PLANT_UNLOCK_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional int32 idx = 3;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomePlantUnlockS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomePlantUnlockS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomePlantUnlockS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomePlantUnlockS2C::MergeFrom(const MsgNpcAutoIncomePlantUnlockS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomePlantUnlockS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomePlantUnlockS2C::CopyFrom(const MsgNpcAutoIncomePlantUnlockS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomePlantUnlockS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomePlantUnlockS2C::Swap(MsgNpcAutoIncomePlantUnlockS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomePlantUnlockS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomePlantUnlockS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomePlantUnlockS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeMineDataGetC2S::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeMineDataGetC2S::MsgNpcAutoIncomeMineDataGetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeMineDataGetC2S)
}

void MsgNpcAutoIncomeMineDataGetC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeMineDataGetC2S::MsgNpcAutoIncomeMineDataGetC2S(const MsgNpcAutoIncomeMineDataGetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeMineDataGetC2S)
}

void MsgNpcAutoIncomeMineDataGetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7260;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeMineDataGetC2S::~MsgNpcAutoIncomeMineDataGetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeMineDataGetC2S)
  SharedDtor();
}

void MsgNpcAutoIncomeMineDataGetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeMineDataGetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeMineDataGetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeMineDataGetC2S_descriptor_;
}

const MsgNpcAutoIncomeMineDataGetC2S& MsgNpcAutoIncomeMineDataGetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeMineDataGetC2S* MsgNpcAutoIncomeMineDataGetC2S::default_instance_ = NULL;

MsgNpcAutoIncomeMineDataGetC2S* MsgNpcAutoIncomeMineDataGetC2S::New() const {
  return new MsgNpcAutoIncomeMineDataGetC2S;
}

void MsgNpcAutoIncomeMineDataGetC2S::Clear() {
  msgtype_ = 7260;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeMineDataGetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeMineDataGetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_DATA_GET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeMineDataGetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeMineDataGetC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeMineDataGetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeMineDataGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_DATA_GET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeMineDataGetC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomeMineDataGetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeMineDataGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_DATA_GET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeMineDataGetC2S)
  return target;
}

int MsgNpcAutoIncomeMineDataGetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_DATA_GET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeMineDataGetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeMineDataGetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeMineDataGetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeMineDataGetC2S::MergeFrom(const MsgNpcAutoIncomeMineDataGetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeMineDataGetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeMineDataGetC2S::CopyFrom(const MsgNpcAutoIncomeMineDataGetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeMineDataGetC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeMineDataGetC2S::Swap(MsgNpcAutoIncomeMineDataGetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeMineDataGetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeMineDataGetC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeMineDataGetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeMineDataGetS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeMineDataGetS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeMineDataGetS2C::MsgNpcAutoIncomeMineDataGetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeMineDataGetS2C)
}

void MsgNpcAutoIncomeMineDataGetS2C::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeMineDataGetS2C::MsgNpcAutoIncomeMineDataGetS2C(const MsgNpcAutoIncomeMineDataGetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeMineDataGetS2C)
}

void MsgNpcAutoIncomeMineDataGetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7261;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeMineDataGetS2C::~MsgNpcAutoIncomeMineDataGetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeMineDataGetS2C)
  SharedDtor();
}

void MsgNpcAutoIncomeMineDataGetS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeMineDataGetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeMineDataGetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeMineDataGetS2C_descriptor_;
}

const MsgNpcAutoIncomeMineDataGetS2C& MsgNpcAutoIncomeMineDataGetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeMineDataGetS2C* MsgNpcAutoIncomeMineDataGetS2C::default_instance_ = NULL;

MsgNpcAutoIncomeMineDataGetS2C* MsgNpcAutoIncomeMineDataGetS2C::New() const {
  return new MsgNpcAutoIncomeMineDataGetS2C;
}

void MsgNpcAutoIncomeMineDataGetS2C::Clear() {
  msgtype_ = 7261;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeMineDataGetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeMineDataGetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_DATA_GET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .MsgPB.NpcMineData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeMineDataGetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeMineDataGetS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeMineDataGetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeMineDataGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_DATA_GET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // repeated .MsgPB.NpcMineData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeMineDataGetS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomeMineDataGetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeMineDataGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_DATA_GET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // repeated .MsgPB.NpcMineData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeMineDataGetS2C)
  return target;
}

int MsgNpcAutoIncomeMineDataGetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_DATA_GET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  // repeated .MsgPB.NpcMineData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeMineDataGetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeMineDataGetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeMineDataGetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeMineDataGetS2C::MergeFrom(const MsgNpcAutoIncomeMineDataGetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeMineDataGetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeMineDataGetS2C::CopyFrom(const MsgNpcAutoIncomeMineDataGetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeMineDataGetS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeMineDataGetS2C::Swap(MsgNpcAutoIncomeMineDataGetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeMineDataGetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeMineDataGetS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeMineDataGetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeMineSetC2S::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeMineSetC2S::kBiomeIdFieldNumber;
const int MsgNpcAutoIncomeMineSetC2S::kProtectorsFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeMineSetC2S::MsgNpcAutoIncomeMineSetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeMineSetC2S)
}

void MsgNpcAutoIncomeMineSetC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeMineSetC2S::MsgNpcAutoIncomeMineSetC2S(const MsgNpcAutoIncomeMineSetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeMineSetC2S)
}

void MsgNpcAutoIncomeMineSetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7262;
  biome_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeMineSetC2S::~MsgNpcAutoIncomeMineSetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeMineSetC2S)
  SharedDtor();
}

void MsgNpcAutoIncomeMineSetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeMineSetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeMineSetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeMineSetC2S_descriptor_;
}

const MsgNpcAutoIncomeMineSetC2S& MsgNpcAutoIncomeMineSetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeMineSetC2S* MsgNpcAutoIncomeMineSetC2S::default_instance_ = NULL;

MsgNpcAutoIncomeMineSetC2S* MsgNpcAutoIncomeMineSetC2S::New() const {
  return new MsgNpcAutoIncomeMineSetC2S;
}

void MsgNpcAutoIncomeMineSetC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 7262;
    biome_id_ = GOOGLE_LONGLONG(0);
  }
  protectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeMineSetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeMineSetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_SET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_biome_id;
        break;
      }

      // optional int64 biome_id = 2;
      case 2: {
        if (tag == 16) {
         parse_biome_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &biome_id_)));
          set_has_biome_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_protectors;
        break;
      }

      // repeated int32 protectors = 3;
      case 3: {
        if (tag == 24) {
         parse_protectors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_protectors())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_protectors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_protectors;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeMineSetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeMineSetC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeMineSetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeMineSetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_SET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->biome_id(), output);
  }

  // repeated int32 protectors = 3;
  for (int i = 0; i < this->protectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->protectors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeMineSetC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomeMineSetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeMineSetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_SET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->biome_id(), target);
  }

  // repeated int32 protectors = 3;
  for (int i = 0; i < this->protectors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->protectors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeMineSetC2S)
  return target;
}

int MsgNpcAutoIncomeMineSetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_SET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 biome_id = 2;
    if (has_biome_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->biome_id());
    }

  }
  // repeated int32 protectors = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->protectors_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->protectors(i));
    }
    total_size += 1 * this->protectors_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeMineSetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeMineSetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeMineSetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeMineSetC2S::MergeFrom(const MsgNpcAutoIncomeMineSetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  protectors_.MergeFrom(from.protectors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_biome_id()) {
      set_biome_id(from.biome_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeMineSetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeMineSetC2S::CopyFrom(const MsgNpcAutoIncomeMineSetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeMineSetC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeMineSetC2S::Swap(MsgNpcAutoIncomeMineSetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(biome_id_, other->biome_id_);
    protectors_.Swap(&other->protectors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeMineSetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeMineSetC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeMineSetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeMineSetS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeMineSetS2C::kResFieldNumber;
const int MsgNpcAutoIncomeMineSetS2C::kDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeMineSetS2C::MsgNpcAutoIncomeMineSetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeMineSetS2C)
}

void MsgNpcAutoIncomeMineSetS2C::InitAsDefaultInstance() {
  data_ = const_cast< ::MsgPB::NpcMineData*>(&::MsgPB::NpcMineData::default_instance());
}

MsgNpcAutoIncomeMineSetS2C::MsgNpcAutoIncomeMineSetS2C(const MsgNpcAutoIncomeMineSetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeMineSetS2C)
}

void MsgNpcAutoIncomeMineSetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7263;
  res_ = 1;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeMineSetS2C::~MsgNpcAutoIncomeMineSetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeMineSetS2C)
  SharedDtor();
}

void MsgNpcAutoIncomeMineSetS2C::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgNpcAutoIncomeMineSetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeMineSetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeMineSetS2C_descriptor_;
}

const MsgNpcAutoIncomeMineSetS2C& MsgNpcAutoIncomeMineSetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeMineSetS2C* MsgNpcAutoIncomeMineSetS2C::default_instance_ = NULL;

MsgNpcAutoIncomeMineSetS2C* MsgNpcAutoIncomeMineSetS2C::New() const {
  return new MsgNpcAutoIncomeMineSetS2C;
}

void MsgNpcAutoIncomeMineSetS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 7263;
    res_ = 1;
    if (has_data()) {
      if (data_ != NULL) data_->::MsgPB::NpcMineData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeMineSetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeMineSetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_SET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .MsgPB.NpcMineData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeMineSetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeMineSetS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeMineSetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeMineSetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_SET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional .MsgPB.NpcMineData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeMineSetS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomeMineSetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeMineSetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_SET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional .MsgPB.NpcMineData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeMineSetS2C)
  return target;
}

int MsgNpcAutoIncomeMineSetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_SET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional .MsgPB.NpcMineData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeMineSetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeMineSetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeMineSetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeMineSetS2C::MergeFrom(const MsgNpcAutoIncomeMineSetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_data()) {
      mutable_data()->::MsgPB::NpcMineData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeMineSetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeMineSetS2C::CopyFrom(const MsgNpcAutoIncomeMineSetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeMineSetS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeMineSetS2C::Swap(MsgNpcAutoIncomeMineSetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeMineSetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeMineSetS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeMineSetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeMineTimeAwardGetC2S::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeMineTimeAwardGetC2S::kBiomeIdFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeMineTimeAwardGetC2S::MsgNpcAutoIncomeMineTimeAwardGetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetC2S)
}

void MsgNpcAutoIncomeMineTimeAwardGetC2S::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeMineTimeAwardGetC2S::MsgNpcAutoIncomeMineTimeAwardGetC2S(const MsgNpcAutoIncomeMineTimeAwardGetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetC2S)
}

void MsgNpcAutoIncomeMineTimeAwardGetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7264;
  biome_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeMineTimeAwardGetC2S::~MsgNpcAutoIncomeMineTimeAwardGetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetC2S)
  SharedDtor();
}

void MsgNpcAutoIncomeMineTimeAwardGetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeMineTimeAwardGetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeMineTimeAwardGetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeMineTimeAwardGetC2S_descriptor_;
}

const MsgNpcAutoIncomeMineTimeAwardGetC2S& MsgNpcAutoIncomeMineTimeAwardGetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeMineTimeAwardGetC2S* MsgNpcAutoIncomeMineTimeAwardGetC2S::default_instance_ = NULL;

MsgNpcAutoIncomeMineTimeAwardGetC2S* MsgNpcAutoIncomeMineTimeAwardGetC2S::New() const {
  return new MsgNpcAutoIncomeMineTimeAwardGetC2S;
}

void MsgNpcAutoIncomeMineTimeAwardGetC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 7264;
    biome_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeMineTimeAwardGetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_TIME_AWARD_GET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_biome_id;
        break;
      }

      // optional int64 biome_id = 2;
      case 2: {
        if (tag == 16) {
         parse_biome_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &biome_id_)));
          set_has_biome_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetC2S)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeMineTimeAwardGetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_TIME_AWARD_GET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->biome_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetC2S)
}

::google::protobuf::uint8* MsgNpcAutoIncomeMineTimeAwardGetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_TIME_AWARD_GET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 biome_id = 2;
  if (has_biome_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->biome_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetC2S)
  return target;
}

int MsgNpcAutoIncomeMineTimeAwardGetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_TIME_AWARD_GET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 biome_id = 2;
    if (has_biome_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->biome_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeMineTimeAwardGetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeMineTimeAwardGetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeMineTimeAwardGetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeMineTimeAwardGetC2S::MergeFrom(const MsgNpcAutoIncomeMineTimeAwardGetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_biome_id()) {
      set_biome_id(from.biome_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeMineTimeAwardGetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeMineTimeAwardGetC2S::CopyFrom(const MsgNpcAutoIncomeMineTimeAwardGetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeMineTimeAwardGetC2S::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeMineTimeAwardGetC2S::Swap(MsgNpcAutoIncomeMineTimeAwardGetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(biome_id_, other->biome_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeMineTimeAwardGetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeMineTimeAwardGetC2S_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeMineTimeAwardGetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcAutoIncomeMineTimeAwardGetS2C::kMsgTypeFieldNumber;
const int MsgNpcAutoIncomeMineTimeAwardGetS2C::kResFieldNumber;
const int MsgNpcAutoIncomeMineTimeAwardGetS2C::kBiomeIdFieldNumber;
const int MsgNpcAutoIncomeMineTimeAwardGetS2C::kTimeStampFieldNumber;
#endif  // !_MSC_VER

MsgNpcAutoIncomeMineTimeAwardGetS2C::MsgNpcAutoIncomeMineTimeAwardGetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetS2C)
}

void MsgNpcAutoIncomeMineTimeAwardGetS2C::InitAsDefaultInstance() {
}

MsgNpcAutoIncomeMineTimeAwardGetS2C::MsgNpcAutoIncomeMineTimeAwardGetS2C(const MsgNpcAutoIncomeMineTimeAwardGetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetS2C)
}

void MsgNpcAutoIncomeMineTimeAwardGetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7265;
  res_ = 1;
  biome_id_ = GOOGLE_LONGLONG(0);
  time_stamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcAutoIncomeMineTimeAwardGetS2C::~MsgNpcAutoIncomeMineTimeAwardGetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetS2C)
  SharedDtor();
}

void MsgNpcAutoIncomeMineTimeAwardGetS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcAutoIncomeMineTimeAwardGetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcAutoIncomeMineTimeAwardGetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcAutoIncomeMineTimeAwardGetS2C_descriptor_;
}

const MsgNpcAutoIncomeMineTimeAwardGetS2C& MsgNpcAutoIncomeMineTimeAwardGetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcAutoIncomeMineTimeAwardGetS2C* MsgNpcAutoIncomeMineTimeAwardGetS2C::default_instance_ = NULL;

MsgNpcAutoIncomeMineTimeAwardGetS2C* MsgNpcAutoIncomeMineTimeAwardGetS2C::New() const {
  return new MsgNpcAutoIncomeMineTimeAwardGetS2C;
}

void MsgNpcAutoIncomeMineTimeAwardGetS2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcAutoIncomeMineTimeAwardGetS2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(biome_id_, time_stamp_);
    msgtype_ = 7265;
    res_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcAutoIncomeMineTimeAwardGetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_TIME_AWARD_GET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_biome_id;
        break;
      }

      // optional int64 biome_id = 3;
      case 3: {
        if (tag == 24) {
         parse_biome_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &biome_id_)));
          set_has_biome_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_stamp;
        break;
      }

      // optional int64 time_stamp = 4;
      case 4: {
        if (tag == 32) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetS2C)
  return false;
#undef DO_
}

void MsgNpcAutoIncomeMineTimeAwardGetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_TIME_AWARD_GET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional int64 biome_id = 3;
  if (has_biome_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->biome_id(), output);
  }

  // optional int64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetS2C)
}

::google::protobuf::uint8* MsgNpcAutoIncomeMineTimeAwardGetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_TIME_AWARD_GET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional int64 biome_id = 3;
  if (has_biome_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->biome_id(), target);
  }

  // optional int64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcAutoIncomeMineTimeAwardGetS2C)
  return target;
}

int MsgNpcAutoIncomeMineTimeAwardGetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_AUTO_INCOME_MINE_TIME_AWARD_GET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional int64 biome_id = 3;
    if (has_biome_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->biome_id());
    }

    // optional int64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcAutoIncomeMineTimeAwardGetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcAutoIncomeMineTimeAwardGetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcAutoIncomeMineTimeAwardGetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcAutoIncomeMineTimeAwardGetS2C::MergeFrom(const MsgNpcAutoIncomeMineTimeAwardGetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_biome_id()) {
      set_biome_id(from.biome_id());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcAutoIncomeMineTimeAwardGetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcAutoIncomeMineTimeAwardGetS2C::CopyFrom(const MsgNpcAutoIncomeMineTimeAwardGetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcAutoIncomeMineTimeAwardGetS2C::IsInitialized() const {

  return true;
}

void MsgNpcAutoIncomeMineTimeAwardGetS2C::Swap(MsgNpcAutoIncomeMineTimeAwardGetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(biome_id_, other->biome_id_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcAutoIncomeMineTimeAwardGetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcAutoIncomeMineTimeAwardGetS2C_descriptor_;
  metadata.reflection = MsgNpcAutoIncomeMineTimeAwardGetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcRefiningMineDataGetC2S::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgNpcRefiningMineDataGetC2S::MsgNpcRefiningMineDataGetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcRefiningMineDataGetC2S)
}

void MsgNpcRefiningMineDataGetC2S::InitAsDefaultInstance() {
}

MsgNpcRefiningMineDataGetC2S::MsgNpcRefiningMineDataGetC2S(const MsgNpcRefiningMineDataGetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcRefiningMineDataGetC2S)
}

void MsgNpcRefiningMineDataGetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7320;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcRefiningMineDataGetC2S::~MsgNpcRefiningMineDataGetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcRefiningMineDataGetC2S)
  SharedDtor();
}

void MsgNpcRefiningMineDataGetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcRefiningMineDataGetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcRefiningMineDataGetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcRefiningMineDataGetC2S_descriptor_;
}

const MsgNpcRefiningMineDataGetC2S& MsgNpcRefiningMineDataGetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcRefiningMineDataGetC2S* MsgNpcRefiningMineDataGetC2S::default_instance_ = NULL;

MsgNpcRefiningMineDataGetC2S* MsgNpcRefiningMineDataGetC2S::New() const {
  return new MsgNpcRefiningMineDataGetC2S;
}

void MsgNpcRefiningMineDataGetC2S::Clear() {
  msgtype_ = 7320;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcRefiningMineDataGetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcRefiningMineDataGetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_DATA_GET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcRefiningMineDataGetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcRefiningMineDataGetC2S)
  return false;
#undef DO_
}

void MsgNpcRefiningMineDataGetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcRefiningMineDataGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_DATA_GET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcRefiningMineDataGetC2S)
}

::google::protobuf::uint8* MsgNpcRefiningMineDataGetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcRefiningMineDataGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_DATA_GET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcRefiningMineDataGetC2S)
  return target;
}

int MsgNpcRefiningMineDataGetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_DATA_GET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcRefiningMineDataGetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcRefiningMineDataGetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcRefiningMineDataGetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcRefiningMineDataGetC2S::MergeFrom(const MsgNpcRefiningMineDataGetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcRefiningMineDataGetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcRefiningMineDataGetC2S::CopyFrom(const MsgNpcRefiningMineDataGetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcRefiningMineDataGetC2S::IsInitialized() const {

  return true;
}

void MsgNpcRefiningMineDataGetC2S::Swap(MsgNpcRefiningMineDataGetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcRefiningMineDataGetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcRefiningMineDataGetC2S_descriptor_;
  metadata.reflection = MsgNpcRefiningMineDataGetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcRefiningMineDataGetS2C::kMsgTypeFieldNumber;
const int MsgNpcRefiningMineDataGetS2C::kResFieldNumber;
const int MsgNpcRefiningMineDataGetS2C::kRefiningMineDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcRefiningMineDataGetS2C::MsgNpcRefiningMineDataGetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcRefiningMineDataGetS2C)
}

void MsgNpcRefiningMineDataGetS2C::InitAsDefaultInstance() {
  refining_mine_data_ = const_cast< ::MsgPB::NpcRefiningMineData*>(&::MsgPB::NpcRefiningMineData::default_instance());
}

MsgNpcRefiningMineDataGetS2C::MsgNpcRefiningMineDataGetS2C(const MsgNpcRefiningMineDataGetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcRefiningMineDataGetS2C)
}

void MsgNpcRefiningMineDataGetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7321;
  res_ = 1;
  refining_mine_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcRefiningMineDataGetS2C::~MsgNpcRefiningMineDataGetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcRefiningMineDataGetS2C)
  SharedDtor();
}

void MsgNpcRefiningMineDataGetS2C::SharedDtor() {
  if (this != default_instance_) {
    delete refining_mine_data_;
  }
}

void MsgNpcRefiningMineDataGetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcRefiningMineDataGetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcRefiningMineDataGetS2C_descriptor_;
}

const MsgNpcRefiningMineDataGetS2C& MsgNpcRefiningMineDataGetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcRefiningMineDataGetS2C* MsgNpcRefiningMineDataGetS2C::default_instance_ = NULL;

MsgNpcRefiningMineDataGetS2C* MsgNpcRefiningMineDataGetS2C::New() const {
  return new MsgNpcRefiningMineDataGetS2C;
}

void MsgNpcRefiningMineDataGetS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 7321;
    res_ = 1;
    if (has_refining_mine_data()) {
      if (refining_mine_data_ != NULL) refining_mine_data_->::MsgPB::NpcRefiningMineData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcRefiningMineDataGetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcRefiningMineDataGetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_DATA_GET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_refining_mine_data;
        break;
      }

      // optional .MsgPB.NpcRefiningMineData refining_mine_data = 3;
      case 3: {
        if (tag == 26) {
         parse_refining_mine_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refining_mine_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcRefiningMineDataGetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcRefiningMineDataGetS2C)
  return false;
#undef DO_
}

void MsgNpcRefiningMineDataGetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcRefiningMineDataGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_DATA_GET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional .MsgPB.NpcRefiningMineData refining_mine_data = 3;
  if (has_refining_mine_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->refining_mine_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcRefiningMineDataGetS2C)
}

::google::protobuf::uint8* MsgNpcRefiningMineDataGetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcRefiningMineDataGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_DATA_GET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional .MsgPB.NpcRefiningMineData refining_mine_data = 3;
  if (has_refining_mine_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->refining_mine_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcRefiningMineDataGetS2C)
  return target;
}

int MsgNpcRefiningMineDataGetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_DATA_GET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional .MsgPB.NpcRefiningMineData refining_mine_data = 3;
    if (has_refining_mine_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refining_mine_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcRefiningMineDataGetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcRefiningMineDataGetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcRefiningMineDataGetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcRefiningMineDataGetS2C::MergeFrom(const MsgNpcRefiningMineDataGetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_refining_mine_data()) {
      mutable_refining_mine_data()->::MsgPB::NpcRefiningMineData::MergeFrom(from.refining_mine_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcRefiningMineDataGetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcRefiningMineDataGetS2C::CopyFrom(const MsgNpcRefiningMineDataGetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcRefiningMineDataGetS2C::IsInitialized() const {

  return true;
}

void MsgNpcRefiningMineDataGetS2C::Swap(MsgNpcRefiningMineDataGetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(refining_mine_data_, other->refining_mine_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcRefiningMineDataGetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcRefiningMineDataGetS2C_descriptor_;
  metadata.reflection = MsgNpcRefiningMineDataGetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcRefiningMineSetC2S::kMsgTypeFieldNumber;
const int MsgNpcRefiningMineSetC2S::kItemIdFieldNumber;
const int MsgNpcRefiningMineSetC2S::kItemNumFieldNumber;
const int MsgNpcRefiningMineSetC2S::kRefiningIndexFieldNumber;
#endif  // !_MSC_VER

MsgNpcRefiningMineSetC2S::MsgNpcRefiningMineSetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcRefiningMineSetC2S)
}

void MsgNpcRefiningMineSetC2S::InitAsDefaultInstance() {
}

MsgNpcRefiningMineSetC2S::MsgNpcRefiningMineSetC2S(const MsgNpcRefiningMineSetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcRefiningMineSetC2S)
}

void MsgNpcRefiningMineSetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7322;
  item_id_ = 0;
  item_num_ = 0;
  refining_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcRefiningMineSetC2S::~MsgNpcRefiningMineSetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcRefiningMineSetC2S)
  SharedDtor();
}

void MsgNpcRefiningMineSetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcRefiningMineSetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcRefiningMineSetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcRefiningMineSetC2S_descriptor_;
}

const MsgNpcRefiningMineSetC2S& MsgNpcRefiningMineSetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcRefiningMineSetC2S* MsgNpcRefiningMineSetC2S::default_instance_ = NULL;

MsgNpcRefiningMineSetC2S* MsgNpcRefiningMineSetC2S::New() const {
  return new MsgNpcRefiningMineSetC2S;
}

void MsgNpcRefiningMineSetC2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcRefiningMineSetC2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(item_id_, refining_index_);
    msgtype_ = 7322;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcRefiningMineSetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcRefiningMineSetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_SET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 3;
      case 3: {
        if (tag == 24) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_refining_index;
        break;
      }

      // optional int32 refining_index = 4;
      case 4: {
        if (tag == 32) {
         parse_refining_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refining_index_)));
          set_has_refining_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcRefiningMineSetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcRefiningMineSetC2S)
  return false;
#undef DO_
}

void MsgNpcRefiningMineSetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcRefiningMineSetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_SET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }

  // optional int32 item_num = 3;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_num(), output);
  }

  // optional int32 refining_index = 4;
  if (has_refining_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->refining_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcRefiningMineSetC2S)
}

::google::protobuf::uint8* MsgNpcRefiningMineSetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcRefiningMineSetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_SET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }

  // optional int32 item_num = 3;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_num(), target);
  }

  // optional int32 refining_index = 4;
  if (has_refining_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->refining_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcRefiningMineSetC2S)
  return target;
}

int MsgNpcRefiningMineSetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_SET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

    // optional int32 refining_index = 4;
    if (has_refining_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refining_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcRefiningMineSetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcRefiningMineSetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcRefiningMineSetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcRefiningMineSetC2S::MergeFrom(const MsgNpcRefiningMineSetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_refining_index()) {
      set_refining_index(from.refining_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcRefiningMineSetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcRefiningMineSetC2S::CopyFrom(const MsgNpcRefiningMineSetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcRefiningMineSetC2S::IsInitialized() const {

  return true;
}

void MsgNpcRefiningMineSetC2S::Swap(MsgNpcRefiningMineSetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(refining_index_, other->refining_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcRefiningMineSetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcRefiningMineSetC2S_descriptor_;
  metadata.reflection = MsgNpcRefiningMineSetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcRefiningMineSetS2C::kMsgTypeFieldNumber;
const int MsgNpcRefiningMineSetS2C::kResFieldNumber;
const int MsgNpcRefiningMineSetS2C::kRefiningMineDataFieldNumber;
#endif  // !_MSC_VER

MsgNpcRefiningMineSetS2C::MsgNpcRefiningMineSetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcRefiningMineSetS2C)
}

void MsgNpcRefiningMineSetS2C::InitAsDefaultInstance() {
  refining_mine_data_ = const_cast< ::MsgPB::NpcRefiningMineData*>(&::MsgPB::NpcRefiningMineData::default_instance());
}

MsgNpcRefiningMineSetS2C::MsgNpcRefiningMineSetS2C(const MsgNpcRefiningMineSetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcRefiningMineSetS2C)
}

void MsgNpcRefiningMineSetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7323;
  res_ = 1;
  refining_mine_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcRefiningMineSetS2C::~MsgNpcRefiningMineSetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcRefiningMineSetS2C)
  SharedDtor();
}

void MsgNpcRefiningMineSetS2C::SharedDtor() {
  if (this != default_instance_) {
    delete refining_mine_data_;
  }
}

void MsgNpcRefiningMineSetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcRefiningMineSetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcRefiningMineSetS2C_descriptor_;
}

const MsgNpcRefiningMineSetS2C& MsgNpcRefiningMineSetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcRefiningMineSetS2C* MsgNpcRefiningMineSetS2C::default_instance_ = NULL;

MsgNpcRefiningMineSetS2C* MsgNpcRefiningMineSetS2C::New() const {
  return new MsgNpcRefiningMineSetS2C;
}

void MsgNpcRefiningMineSetS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 7323;
    res_ = 1;
    if (has_refining_mine_data()) {
      if (refining_mine_data_ != NULL) refining_mine_data_->::MsgPB::NpcRefiningMineData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcRefiningMineSetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcRefiningMineSetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_SET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_refining_mine_data;
        break;
      }

      // optional .MsgPB.NpcRefiningMineData refining_mine_data = 3;
      case 3: {
        if (tag == 26) {
         parse_refining_mine_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refining_mine_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcRefiningMineSetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcRefiningMineSetS2C)
  return false;
#undef DO_
}

void MsgNpcRefiningMineSetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcRefiningMineSetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_SET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // optional .MsgPB.NpcRefiningMineData refining_mine_data = 3;
  if (has_refining_mine_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->refining_mine_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcRefiningMineSetS2C)
}

::google::protobuf::uint8* MsgNpcRefiningMineSetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcRefiningMineSetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_SET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // optional .MsgPB.NpcRefiningMineData refining_mine_data = 3;
  if (has_refining_mine_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->refining_mine_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcRefiningMineSetS2C)
  return target;
}

int MsgNpcRefiningMineSetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_SET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional .MsgPB.NpcRefiningMineData refining_mine_data = 3;
    if (has_refining_mine_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refining_mine_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcRefiningMineSetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcRefiningMineSetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcRefiningMineSetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcRefiningMineSetS2C::MergeFrom(const MsgNpcRefiningMineSetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_refining_mine_data()) {
      mutable_refining_mine_data()->::MsgPB::NpcRefiningMineData::MergeFrom(from.refining_mine_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcRefiningMineSetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcRefiningMineSetS2C::CopyFrom(const MsgNpcRefiningMineSetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcRefiningMineSetS2C::IsInitialized() const {

  return true;
}

void MsgNpcRefiningMineSetS2C::Swap(MsgNpcRefiningMineSetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    std::swap(refining_mine_data_, other->refining_mine_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcRefiningMineSetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcRefiningMineSetS2C_descriptor_;
  metadata.reflection = MsgNpcRefiningMineSetS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcRefiningMineAwardGetC2S::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgNpcRefiningMineAwardGetC2S::MsgNpcRefiningMineAwardGetC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcRefiningMineAwardGetC2S)
}

void MsgNpcRefiningMineAwardGetC2S::InitAsDefaultInstance() {
}

MsgNpcRefiningMineAwardGetC2S::MsgNpcRefiningMineAwardGetC2S(const MsgNpcRefiningMineAwardGetC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcRefiningMineAwardGetC2S)
}

void MsgNpcRefiningMineAwardGetC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7324;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcRefiningMineAwardGetC2S::~MsgNpcRefiningMineAwardGetC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcRefiningMineAwardGetC2S)
  SharedDtor();
}

void MsgNpcRefiningMineAwardGetC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcRefiningMineAwardGetC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcRefiningMineAwardGetC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcRefiningMineAwardGetC2S_descriptor_;
}

const MsgNpcRefiningMineAwardGetC2S& MsgNpcRefiningMineAwardGetC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcRefiningMineAwardGetC2S* MsgNpcRefiningMineAwardGetC2S::default_instance_ = NULL;

MsgNpcRefiningMineAwardGetC2S* MsgNpcRefiningMineAwardGetC2S::New() const {
  return new MsgNpcRefiningMineAwardGetC2S;
}

void MsgNpcRefiningMineAwardGetC2S::Clear() {
  msgtype_ = 7324;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcRefiningMineAwardGetC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcRefiningMineAwardGetC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_AWARD_GET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcRefiningMineAwardGetC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcRefiningMineAwardGetC2S)
  return false;
#undef DO_
}

void MsgNpcRefiningMineAwardGetC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcRefiningMineAwardGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_AWARD_GET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcRefiningMineAwardGetC2S)
}

::google::protobuf::uint8* MsgNpcRefiningMineAwardGetC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcRefiningMineAwardGetC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_AWARD_GET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcRefiningMineAwardGetC2S)
  return target;
}

int MsgNpcRefiningMineAwardGetC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_AWARD_GET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcRefiningMineAwardGetC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcRefiningMineAwardGetC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcRefiningMineAwardGetC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcRefiningMineAwardGetC2S::MergeFrom(const MsgNpcRefiningMineAwardGetC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcRefiningMineAwardGetC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcRefiningMineAwardGetC2S::CopyFrom(const MsgNpcRefiningMineAwardGetC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcRefiningMineAwardGetC2S::IsInitialized() const {

  return true;
}

void MsgNpcRefiningMineAwardGetC2S::Swap(MsgNpcRefiningMineAwardGetC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcRefiningMineAwardGetC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcRefiningMineAwardGetC2S_descriptor_;
  metadata.reflection = MsgNpcRefiningMineAwardGetC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::kItemIdFieldNumber;
const int MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::kItemNumFieldNumber;
#endif  // !_MSC_VER

MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo)
}

void MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::InitAsDefaultInstance() {
}

MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo(const MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo)
}

void MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::~MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo)
  SharedDtor();
}

void MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo_descriptor_;
}

const MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo& MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo* MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::default_instance_ = NULL;

MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo* MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::New() const {
  return new MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo;
}

void MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, item_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 2;
      case 2: {
        if (tag == 16) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo)
  return false;
#undef DO_
}

void MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo)
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional int32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo)
}

::google::protobuf::uint8* MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo)
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo)
  return target;
}

int MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::MergeFrom(const MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::CopyFrom(const MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::IsInitialized() const {

  return true;
}

void MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::Swap(MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo_descriptor_;
  metadata.reflection = MsgNpcRefiningMineAwardGetS2C_RefiningAwardInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgNpcRefiningMineAwardGetS2C::kMsgTypeFieldNumber;
const int MsgNpcRefiningMineAwardGetS2C::kResFieldNumber;
const int MsgNpcRefiningMineAwardGetS2C::kAwardInfoFieldNumber;
#endif  // !_MSC_VER

MsgNpcRefiningMineAwardGetS2C::MsgNpcRefiningMineAwardGetS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNpcRefiningMineAwardGetS2C)
}

void MsgNpcRefiningMineAwardGetS2C::InitAsDefaultInstance() {
}

MsgNpcRefiningMineAwardGetS2C::MsgNpcRefiningMineAwardGetS2C(const MsgNpcRefiningMineAwardGetS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNpcRefiningMineAwardGetS2C)
}

void MsgNpcRefiningMineAwardGetS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 7325;
  res_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNpcRefiningMineAwardGetS2C::~MsgNpcRefiningMineAwardGetS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNpcRefiningMineAwardGetS2C)
  SharedDtor();
}

void MsgNpcRefiningMineAwardGetS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNpcRefiningMineAwardGetS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNpcRefiningMineAwardGetS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNpcRefiningMineAwardGetS2C_descriptor_;
}

const MsgNpcRefiningMineAwardGetS2C& MsgNpcRefiningMineAwardGetS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNpcAutoIncome_2eproto();
  return *default_instance_;
}

MsgNpcRefiningMineAwardGetS2C* MsgNpcRefiningMineAwardGetS2C::default_instance_ = NULL;

MsgNpcRefiningMineAwardGetS2C* MsgNpcRefiningMineAwardGetS2C::New() const {
  return new MsgNpcRefiningMineAwardGetS2C;
}

void MsgNpcRefiningMineAwardGetS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 7325;
    res_ = 1;
  }
  award_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNpcRefiningMineAwardGetS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNpcRefiningMineAwardGetS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_AWARD_GET_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
      case 2: {
        if (tag == 16) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::E_ErrorCode_IsValid(value)) {
            set_res(static_cast< ::MsgPB::E_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_award_info;
        break;
      }

      // repeated .MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo award_info = 3;
      case 3: {
        if (tag == 26) {
         parse_award_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_award_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNpcRefiningMineAwardGetS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNpcRefiningMineAwardGetS2C)
  return false;
#undef DO_
}

void MsgNpcRefiningMineAwardGetS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNpcRefiningMineAwardGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_AWARD_GET_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->res(), output);
  }

  // repeated .MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo award_info = 3;
  for (int i = 0; i < this->award_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->award_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNpcRefiningMineAwardGetS2C)
}

::google::protobuf::uint8* MsgNpcRefiningMineAwardGetS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNpcRefiningMineAwardGetS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_AWARD_GET_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->res(), target);
  }

  // repeated .MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo award_info = 3;
  for (int i = 0; i < this->award_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->award_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNpcRefiningMineAwardGetS2C)
  return target;
}

int MsgNpcRefiningMineAwardGetS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NPC_REFINING_MINE_AWARD_GET_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.E_ErrorCode res = 2 [default = EC_Fail];
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  // repeated .MsgPB.MsgNpcRefiningMineAwardGetS2C.RefiningAwardInfo award_info = 3;
  total_size += 1 * this->award_info_size();
  for (int i = 0; i < this->award_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNpcRefiningMineAwardGetS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNpcRefiningMineAwardGetS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNpcRefiningMineAwardGetS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNpcRefiningMineAwardGetS2C::MergeFrom(const MsgNpcRefiningMineAwardGetS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_info_.MergeFrom(from.award_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNpcRefiningMineAwardGetS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNpcRefiningMineAwardGetS2C::CopyFrom(const MsgNpcRefiningMineAwardGetS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNpcRefiningMineAwardGetS2C::IsInitialized() const {

  return true;
}

void MsgNpcRefiningMineAwardGetS2C::Swap(MsgNpcRefiningMineAwardGetS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(res_, other->res_);
    award_info_.Swap(&other->award_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNpcRefiningMineAwardGetS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNpcRefiningMineAwardGetS2C_descriptor_;
  metadata.reflection = MsgNpcRefiningMineAwardGetS2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
