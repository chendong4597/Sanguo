// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgLogin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgLogin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgPlatformAccountCheckC2LS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlatformAccountCheckC2LS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlatformAccountCheckLS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlatformAccountCheckLS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRegisterAccountC2LS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRegisterAccountC2LS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRegisterAccountLS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRegisterAccountLS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgClientLoginToLS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgClientLoginToLS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginValidate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginValidate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginQueueUpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginQueueUpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryRegionRequeset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryRegionRequeset_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgEncryptorCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgEncryptorCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgEncryptorCodeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgEncryptorCodeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgClientLoginToGS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgClientLoginToGS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGSResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGSResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNotifyFirstLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNotifyFirstLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgServerVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgServerVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUserLoginOtherPlace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUserLoginOtherPlace_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgClientReConnectToGS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgClientReConnectToGS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgServerRecvLastPack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgServerRecvLastPack_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgClientLoginIntra_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgClientLoginIntra_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginQueueUpStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginQueueUpStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginQueueUpInfoIntra_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginQueueUpInfoIntra_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginQueueUpInfoIntra_LoginQueueUpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginQueueUpInfoIntra_LoginQueueUpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNotifyUserDisconnLoginSvr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNotifyUserDisconnLoginSvr_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginServerValidate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginServerValidate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerLoginSuccess_MGRS_TO_OTHER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerLoginSuccess_MGRS_TO_OTHER_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDeleteAccountC2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDeleteAccountC2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDeleteAccountS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDeleteAccountS2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LOGIN_QUEUE_UP_ACTION_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgLogin_2eproto() {
  protobuf_AddDesc_MsgLogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgLogin.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPlatformAccountCheckC2LS_descriptor_ = file->message_type(0);
  static const int MsgPlatformAccountCheckC2LS_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckC2LS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckC2LS, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckC2LS, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckC2LS, client_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckC2LS, pwd_),
  };
  MsgPlatformAccountCheckC2LS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlatformAccountCheckC2LS_descriptor_,
      MsgPlatformAccountCheckC2LS::default_instance_,
      MsgPlatformAccountCheckC2LS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckC2LS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckC2LS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlatformAccountCheckC2LS));
  MsgPlatformAccountCheckLS2C_descriptor_ = file->message_type(1);
  static const int MsgPlatformAccountCheckLS2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckLS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckLS2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckLS2C, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckLS2C, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckLS2C, nvideo_),
  };
  MsgPlatformAccountCheckLS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlatformAccountCheckLS2C_descriptor_,
      MsgPlatformAccountCheckLS2C::default_instance_,
      MsgPlatformAccountCheckLS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckLS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlatformAccountCheckLS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlatformAccountCheckLS2C));
  MsgRegisterAccountC2LS_descriptor_ = file->message_type(2);
  static const int MsgRegisterAccountC2LS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterAccountC2LS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterAccountC2LS, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterAccountC2LS, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterAccountC2LS, pwd_),
  };
  MsgRegisterAccountC2LS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRegisterAccountC2LS_descriptor_,
      MsgRegisterAccountC2LS::default_instance_,
      MsgRegisterAccountC2LS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterAccountC2LS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterAccountC2LS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRegisterAccountC2LS));
  MsgRegisterAccountLS2C_descriptor_ = file->message_type(3);
  static const int MsgRegisterAccountLS2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterAccountLS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterAccountLS2C, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterAccountLS2C, account_),
  };
  MsgRegisterAccountLS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRegisterAccountLS2C_descriptor_,
      MsgRegisterAccountLS2C::default_instance_,
      MsgRegisterAccountLS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterAccountLS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterAccountLS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRegisterAccountLS2C));
  MsgClientLoginToLS_descriptor_ = file->message_type(4);
  static const int MsgClientLoginToLS_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToLS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToLS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToLS, iggkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToLS, sessionkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToLS, versioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToLS, client_svn_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToLS, ignore_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToLS, area_id_),
  };
  MsgClientLoginToLS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgClientLoginToLS_descriptor_,
      MsgClientLoginToLS::default_instance_,
      MsgClientLoginToLS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToLS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToLS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgClientLoginToLS));
  MsgLoginResp_descriptor_ = file->message_type(5);
  static const int MsgLoginResp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginResp, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginResp, loginresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginResp, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginResp, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginResp, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginResp, apple_app_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginResp, android_app_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginResp, s_update_note_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginResp, s_announcement_addr_),
  };
  MsgLoginResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginResp_descriptor_,
      MsgLoginResp::default_instance_,
      MsgLoginResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginResp));
  MsgLoginValidate_descriptor_ = file->message_type(6);
  static const int MsgLoginValidate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginValidate, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginValidate, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginValidate, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginValidate, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginValidate, checktext_),
  };
  MsgLoginValidate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginValidate_descriptor_,
      MsgLoginValidate::default_instance_,
      MsgLoginValidate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginValidate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginValidate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginValidate));
  MsgLoginQueueUpInfo_descriptor_ = file->message_type(7);
  static const int MsgLoginQueueUpInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfo, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfo, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfo, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfo, curpos_),
  };
  MsgLoginQueueUpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginQueueUpInfo_descriptor_,
      MsgLoginQueueUpInfo::default_instance_,
      MsgLoginQueueUpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginQueueUpInfo));
  MsgQueryRegionRequeset_descriptor_ = file->message_type(8);
  static const int MsgQueryRegionRequeset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRegionRequeset, msgtype_),
  };
  MsgQueryRegionRequeset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryRegionRequeset_descriptor_,
      MsgQueryRegionRequeset::default_instance_,
      MsgQueryRegionRequeset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRegionRequeset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRegionRequeset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryRegionRequeset));
  MsgQueryRegionResponse_descriptor_ = file->message_type(9);
  static const int MsgQueryRegionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRegionResponse, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRegionResponse, region_lst_),
  };
  MsgQueryRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryRegionResponse_descriptor_,
      MsgQueryRegionResponse::default_instance_,
      MsgQueryRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryRegionResponse));
  MsgEncryptorCode_descriptor_ = file->message_type(10);
  static const int MsgEncryptorCode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEncryptorCode, msgtype_),
  };
  MsgEncryptorCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgEncryptorCode_descriptor_,
      MsgEncryptorCode::default_instance_,
      MsgEncryptorCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEncryptorCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEncryptorCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgEncryptorCode));
  MsgEncryptorCodeResp_descriptor_ = file->message_type(11);
  static const int MsgEncryptorCodeResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEncryptorCodeResp, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEncryptorCodeResp, code_),
  };
  MsgEncryptorCodeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgEncryptorCodeResp_descriptor_,
      MsgEncryptorCodeResp::default_instance_,
      MsgEncryptorCodeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEncryptorCodeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEncryptorCodeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgEncryptorCodeResp));
  MsgClientLoginToGS_descriptor_ = file->message_type(12);
  static const int MsgClientLoginToGS_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, checktext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, versioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, cliendmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, uploaddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, client_svn_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, is_adult_),
  };
  MsgClientLoginToGS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgClientLoginToGS_descriptor_,
      MsgClientLoginToGS::default_instance_,
      MsgClientLoginToGS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginToGS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgClientLoginToGS));
  MsgGSResp_descriptor_ = file->message_type(13);
  static const int MsgGSResp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGSResp, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGSResp, loginresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGSResp, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGSResp, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGSResp, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGSResp, devicechanged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGSResp, lastclientuploaddataserial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGSResp, client_history_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGSResp, newbiestep_),
  };
  MsgGSResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGSResp_descriptor_,
      MsgGSResp::default_instance_,
      MsgGSResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGSResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGSResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGSResp));
  MsgNotifyFirstLogin_descriptor_ = file->message_type(14);
  static const int MsgNotifyFirstLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyFirstLogin, msgtype_),
  };
  MsgNotifyFirstLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNotifyFirstLogin_descriptor_,
      MsgNotifyFirstLogin::default_instance_,
      MsgNotifyFirstLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyFirstLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyFirstLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNotifyFirstLogin));
  MsgServerVersion_descriptor_ = file->message_type(15);
  static const int MsgServerVersion_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerVersion, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerVersion, versionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerVersion, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerVersion, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerVersion, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerVersion, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerVersion, minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerVersion, second_),
  };
  MsgServerVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgServerVersion_descriptor_,
      MsgServerVersion::default_instance_,
      MsgServerVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgServerVersion));
  MsgUserLoginOtherPlace_descriptor_ = file->message_type(16);
  static const int MsgUserLoginOtherPlace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserLoginOtherPlace, msgtype_),
  };
  MsgUserLoginOtherPlace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUserLoginOtherPlace_descriptor_,
      MsgUserLoginOtherPlace::default_instance_,
      MsgUserLoginOtherPlace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserLoginOtherPlace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserLoginOtherPlace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUserLoginOtherPlace));
  MsgClientReConnectToGS_descriptor_ = file->message_type(17);
  static const int MsgClientReConnectToGS_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientReConnectToGS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientReConnectToGS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientReConnectToGS, checktext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientReConnectToGS, msgmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientReConnectToGS, msglastrecvmsgindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientReConnectToGS, cliendmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientReConnectToGS, uploaddata_),
  };
  MsgClientReConnectToGS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgClientReConnectToGS_descriptor_,
      MsgClientReConnectToGS::default_instance_,
      MsgClientReConnectToGS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientReConnectToGS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientReConnectToGS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgClientReConnectToGS));
  MsgServerRecvLastPack_descriptor_ = file->message_type(18);
  static const int MsgServerRecvLastPack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRecvLastPack, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRecvLastPack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRecvLastPack, msgmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRecvLastPack, msglastrecvmsgindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRecvLastPack, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRecvLastPack, timezone_),
  };
  MsgServerRecvLastPack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgServerRecvLastPack_descriptor_,
      MsgServerRecvLastPack::default_instance_,
      MsgServerRecvLastPack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRecvLastPack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRecvLastPack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgServerRecvLastPack));
  MsgClientLoginIntra_descriptor_ = file->message_type(19);
  static const int MsgClientLoginIntra_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginIntra, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginIntra, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginIntra, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginIntra, plataccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginIntra, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginIntra, country_code_),
  };
  MsgClientLoginIntra_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgClientLoginIntra_descriptor_,
      MsgClientLoginIntra::default_instance_,
      MsgClientLoginIntra_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginIntra, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientLoginIntra, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgClientLoginIntra));
  MsgLoginQueueUpStart_descriptor_ = file->message_type(20);
  static const int MsgLoginQueueUpStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpStart, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpStart, iggid_),
  };
  MsgLoginQueueUpStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginQueueUpStart_descriptor_,
      MsgLoginQueueUpStart::default_instance_,
      MsgLoginQueueUpStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginQueueUpStart));
  MsgLoginQueueUpInfoIntra_descriptor_ = file->message_type(21);
  static const int MsgLoginQueueUpInfoIntra_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfoIntra, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfoIntra, loginqueueinfo_),
  };
  MsgLoginQueueUpInfoIntra_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginQueueUpInfoIntra_descriptor_,
      MsgLoginQueueUpInfoIntra::default_instance_,
      MsgLoginQueueUpInfoIntra_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfoIntra, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfoIntra, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginQueueUpInfoIntra));
  MsgLoginQueueUpInfoIntra_LoginQueueUpInfo_descriptor_ = MsgLoginQueueUpInfoIntra_descriptor_->nested_type(0);
  static const int MsgLoginQueueUpInfoIntra_LoginQueueUpInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfoIntra_LoginQueueUpInfo, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfoIntra_LoginQueueUpInfo, curpos_),
  };
  MsgLoginQueueUpInfoIntra_LoginQueueUpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginQueueUpInfoIntra_LoginQueueUpInfo_descriptor_,
      MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::default_instance_,
      MsgLoginQueueUpInfoIntra_LoginQueueUpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfoIntra_LoginQueueUpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginQueueUpInfoIntra_LoginQueueUpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginQueueUpInfoIntra_LoginQueueUpInfo));
  MsgNotifyUserDisconnLoginSvr_descriptor_ = file->message_type(22);
  static const int MsgNotifyUserDisconnLoginSvr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyUserDisconnLoginSvr, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyUserDisconnLoginSvr, iggid_),
  };
  MsgNotifyUserDisconnLoginSvr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNotifyUserDisconnLoginSvr_descriptor_,
      MsgNotifyUserDisconnLoginSvr::default_instance_,
      MsgNotifyUserDisconnLoginSvr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyUserDisconnLoginSvr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNotifyUserDisconnLoginSvr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNotifyUserDisconnLoginSvr));
  MsgLoginServerValidate_descriptor_ = file->message_type(23);
  static const int MsgLoginServerValidate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginServerValidate, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginServerValidate, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginServerValidate, checktext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginServerValidate, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginServerValidate, plataccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginServerValidate, dbkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginServerValidate, gs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginServerValidate, original_area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginServerValidate, country_code_),
  };
  MsgLoginServerValidate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginServerValidate_descriptor_,
      MsgLoginServerValidate::default_instance_,
      MsgLoginServerValidate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginServerValidate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginServerValidate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginServerValidate));
  MsgPlayerLoginSuccess_MGRS_TO_OTHER_descriptor_ = file->message_type(24);
  static const int MsgPlayerLoginSuccess_MGRS_TO_OTHER_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_MGRS_TO_OTHER, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_MGRS_TO_OTHER, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_MGRS_TO_OTHER, dbkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_MGRS_TO_OTHER, nickname_),
  };
  MsgPlayerLoginSuccess_MGRS_TO_OTHER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerLoginSuccess_MGRS_TO_OTHER_descriptor_,
      MsgPlayerLoginSuccess_MGRS_TO_OTHER::default_instance_,
      MsgPlayerLoginSuccess_MGRS_TO_OTHER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_MGRS_TO_OTHER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_MGRS_TO_OTHER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerLoginSuccess_MGRS_TO_OTHER));
  MsgDeleteAccountC2S_descriptor_ = file->message_type(25);
  static const int MsgDeleteAccountC2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeleteAccountC2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeleteAccountC2S, iggid_),
  };
  MsgDeleteAccountC2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDeleteAccountC2S_descriptor_,
      MsgDeleteAccountC2S::default_instance_,
      MsgDeleteAccountC2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeleteAccountC2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeleteAccountC2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDeleteAccountC2S));
  MsgDeleteAccountS2C_descriptor_ = file->message_type(26);
  static const int MsgDeleteAccountS2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeleteAccountS2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeleteAccountS2C, iggid_),
  };
  MsgDeleteAccountS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDeleteAccountS2C_descriptor_,
      MsgDeleteAccountS2C::default_instance_,
      MsgDeleteAccountS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeleteAccountS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeleteAccountS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDeleteAccountS2C));
  LOGIN_QUEUE_UP_ACTION_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgLogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlatformAccountCheckC2LS_descriptor_, &MsgPlatformAccountCheckC2LS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlatformAccountCheckLS2C_descriptor_, &MsgPlatformAccountCheckLS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRegisterAccountC2LS_descriptor_, &MsgRegisterAccountC2LS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRegisterAccountLS2C_descriptor_, &MsgRegisterAccountLS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgClientLoginToLS_descriptor_, &MsgClientLoginToLS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginResp_descriptor_, &MsgLoginResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginValidate_descriptor_, &MsgLoginValidate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginQueueUpInfo_descriptor_, &MsgLoginQueueUpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryRegionRequeset_descriptor_, &MsgQueryRegionRequeset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryRegionResponse_descriptor_, &MsgQueryRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgEncryptorCode_descriptor_, &MsgEncryptorCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgEncryptorCodeResp_descriptor_, &MsgEncryptorCodeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgClientLoginToGS_descriptor_, &MsgClientLoginToGS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGSResp_descriptor_, &MsgGSResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNotifyFirstLogin_descriptor_, &MsgNotifyFirstLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgServerVersion_descriptor_, &MsgServerVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUserLoginOtherPlace_descriptor_, &MsgUserLoginOtherPlace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgClientReConnectToGS_descriptor_, &MsgClientReConnectToGS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgServerRecvLastPack_descriptor_, &MsgServerRecvLastPack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgClientLoginIntra_descriptor_, &MsgClientLoginIntra::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginQueueUpStart_descriptor_, &MsgLoginQueueUpStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginQueueUpInfoIntra_descriptor_, &MsgLoginQueueUpInfoIntra::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginQueueUpInfoIntra_LoginQueueUpInfo_descriptor_, &MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNotifyUserDisconnLoginSvr_descriptor_, &MsgNotifyUserDisconnLoginSvr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginServerValidate_descriptor_, &MsgLoginServerValidate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerLoginSuccess_MGRS_TO_OTHER_descriptor_, &MsgPlayerLoginSuccess_MGRS_TO_OTHER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDeleteAccountC2S_descriptor_, &MsgDeleteAccountC2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDeleteAccountS2C_descriptor_, &MsgDeleteAccountS2C::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgLogin_2eproto() {
  delete MsgPlatformAccountCheckC2LS::default_instance_;
  delete MsgPlatformAccountCheckC2LS_reflection_;
  delete MsgPlatformAccountCheckLS2C::default_instance_;
  delete MsgPlatformAccountCheckLS2C_reflection_;
  delete MsgRegisterAccountC2LS::default_instance_;
  delete MsgRegisterAccountC2LS_reflection_;
  delete MsgRegisterAccountLS2C::default_instance_;
  delete MsgRegisterAccountLS2C_reflection_;
  delete MsgClientLoginToLS::default_instance_;
  delete MsgClientLoginToLS_reflection_;
  delete MsgLoginResp::default_instance_;
  delete MsgLoginResp_reflection_;
  delete MsgLoginValidate::default_instance_;
  delete MsgLoginValidate_reflection_;
  delete MsgLoginQueueUpInfo::default_instance_;
  delete MsgLoginQueueUpInfo_reflection_;
  delete MsgQueryRegionRequeset::default_instance_;
  delete MsgQueryRegionRequeset_reflection_;
  delete MsgQueryRegionResponse::default_instance_;
  delete MsgQueryRegionResponse_reflection_;
  delete MsgEncryptorCode::default_instance_;
  delete MsgEncryptorCode_reflection_;
  delete MsgEncryptorCodeResp::default_instance_;
  delete MsgEncryptorCodeResp_reflection_;
  delete MsgClientLoginToGS::default_instance_;
  delete MsgClientLoginToGS_reflection_;
  delete MsgGSResp::default_instance_;
  delete MsgGSResp_reflection_;
  delete MsgNotifyFirstLogin::default_instance_;
  delete MsgNotifyFirstLogin_reflection_;
  delete MsgServerVersion::default_instance_;
  delete MsgServerVersion_reflection_;
  delete MsgUserLoginOtherPlace::default_instance_;
  delete MsgUserLoginOtherPlace_reflection_;
  delete MsgClientReConnectToGS::default_instance_;
  delete MsgClientReConnectToGS_reflection_;
  delete MsgServerRecvLastPack::default_instance_;
  delete MsgServerRecvLastPack_reflection_;
  delete MsgClientLoginIntra::default_instance_;
  delete MsgClientLoginIntra_reflection_;
  delete MsgLoginQueueUpStart::default_instance_;
  delete MsgLoginQueueUpStart_reflection_;
  delete MsgLoginQueueUpInfoIntra::default_instance_;
  delete MsgLoginQueueUpInfoIntra_reflection_;
  delete MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::default_instance_;
  delete MsgLoginQueueUpInfoIntra_LoginQueueUpInfo_reflection_;
  delete MsgNotifyUserDisconnLoginSvr::default_instance_;
  delete MsgNotifyUserDisconnLoginSvr_reflection_;
  delete MsgLoginServerValidate::default_instance_;
  delete MsgLoginServerValidate_reflection_;
  delete MsgPlayerLoginSuccess_MGRS_TO_OTHER::default_instance_;
  delete MsgPlayerLoginSuccess_MGRS_TO_OTHER_reflection_;
  delete MsgDeleteAccountC2S::default_instance_;
  delete MsgDeleteAccountC2S_reflection_;
  delete MsgDeleteAccountS2C::default_instance_;
  delete MsgDeleteAccountS2C_reflection_;
}

void protobuf_AddDesc_MsgLogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016MsgLogin.proto\022\005MsgPB\032\rMsgType.proto\"\246"
    "\001\n\033MsgPlatformAccountCheckC2LS\022C\n\007msgTyp"
    "e\030\001 \001(\0162\017.MsgPB.EMsgType:!_MSG_CHECK_PLA"
    "TFORM_ACCOUNTC_C2LS\022\020\n\010platform\030\002 \001(\005\022\017\n"
    "\007account\030\003 \001(\t\022\022\n\nclient_ver\030\004 \001(\005\022\013\n\003pw"
    "d\030\005 \001(\t\"\244\001\n\033MsgPlatformAccountCheckLS2C\022"
    "C\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:!_MSG_"
    "CHECK_PLATFORM_ACCOUNTC_LS2C\022\r\n\005iggid\030\002 "
    "\001(\003\022\020\n\010platform\030\003 \001(\005\022\017\n\007account\030\004 \001(\t\022\016"
    "\n\006nVideo\030\005 \001(\005\"\207\001\n\026MsgRegisterAccountC2L"
    "S\022=\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\033_MS"
    "G_REGISTER_ACCOUNTC_C2LS\022\020\n\010platform\030\002 \001"
    "(\005\022\017\n\007account\030\003 \001(\t\022\013\n\003pwd\030\004 \001(\t\"z\n\026MsgR"
    "egisterAccountLS2C\022=\n\007msgType\030\001 \001(\0162\017.Ms"
    "gPB.EMsgType:\033_MSG_REGISTER_ACCOUNTC_LS2"
    "C\022\020\n\010platform\030\002 \001(\005\022\017\n\007account\030\003 \001(\t\"\327\001\n"
    "\022MsgClientLoginToLS\0229\n\007msgType\030\001 \001(\0162\017.M"
    "sgPB.EMsgType:\027_MSG_CLIENT_LOGIN_TO_LS\022\r"
    "\n\005IggID\030\002 \001(\003\022\016\n\006IggKey\030\003 \001(\t\022\022\n\nSession"
    "Key\030\004 \001(\t\022\023\n\013versionCode\030\005 \001(\005\022\026\n\016client"
    "_svn_ver\030\006 \001(\005\022\025\n\rignore_update\030\007 \001(\005\022\017\n"
    "\007area_id\030\010 \001(\r\"\212\002\n\014MsgLoginResp\0221\n\007msgTy"
    "pe\030\001 \001(\0162\017.MsgPB.EMsgType:\017_MSG_LOGIN_RE"
    "SP\022(\n\013loginResult\030\002 \001(\0162\023.MsgPB.LOGIN_RE"
    "SULT\022\r\n\005IggID\030\003 \001(\003\022\021\n\tLoginTime\030\004 \001(\005\022\020"
    "\n\010TimeZone\030\005 \001(\005\022\026\n\016apple_app_addr\030\006 \001(\t"
    "\022\030\n\020android_app_addr\030\007 \001(\t\022\032\n\022s_update_n"
    "ote_addr\030\010 \001(\t\022\033\n\023s_announcement_addr\030\t "
    "\001(\t\"\205\001\n\020MsgLoginValidate\0225\n\007msgType\030\001 \001("
    "\0162\017.MsgPB.EMsgType:\023_MSG_LOGIN_VALIDATE\022"
    "\r\n\005IggID\030\002 \001(\003\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030\004 \001(\005"
    "\022\021\n\tcheckText\030\005 \001(\t\"\236\001\n\023MsgLoginQueueUpI"
    "nfo\022:\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\030_"
    "MSG_LOGIN_QUEUE_UP_INFO\022,\n\006action\030\002 \001(\0162"
    "\034.MsgPB.LOGIN_QUEUE_UP_ACTION\022\r\n\005IggID\030\003"
    " \001(\003\022\016\n\006curPos\030\004 \001(\005\"M\n\026MsgQueryRegionRe"
    "queset\0223\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType"
    ":\021_MSG_QUERY_REGION\"j\n\026MsgQueryRegionRes"
    "ponse\022<\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:"
    "\032_MSG_QUERY_REGION_RESPONSE\022\022\n\nregion_ls"
    "t\030\002 \003(\t\"I\n\020MsgEncryptorCode\0225\n\007msgType\030\001"
    " \001(\0162\017.MsgPB.EMsgType:\023_MSG_ENCRYPTOR_CO"
    "DE\"`\n\024MsgEncryptorCodeResp\022:\n\007msgType\030\001 "
    "\001(\0162\017.MsgPB.EMsgType:\030_MSG_ENCRYPTOR_COD"
    "E_RESP\022\014\n\004code\030\002 \001(\r\"\261\002\n\022MsgClientLoginT"
    "oGS\0229\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\027_"
    "MSG_CLIENT_LOGIN_TO_GS\022\r\n\005IggID\030\002 \001(\003\022\021\n"
    "\tcheckText\030\003 \001(\t\022\020\n\010nickName\030\004 \001(\014\022\016\n\006Ga"
    "meID\030\005 \001(\005\022\020\n\010deviceID\030\006 \001(\005\022\023\n\013versionC"
    "ode\030\007 \001(\005\022\031\n\nCliendMode\030\010 \001(\010:\005false\022\031\n\n"
    "UploadData\030\t \001(\010:\005false\022\016\n\006Device\030\n \001(\t\022"
    "\026\n\016client_svn_ver\030\013 \001(\005\022\027\n\010is_adult\030\014 \001("
    "\010:\005false\"\216\002\n\tMsgGSResp\022.\n\007msgType\030\001 \001(\0162"
    "\017.MsgPB.EMsgType:\014_MSG_GS_RESP\022(\n\013loginR"
    "esult\030\002 \001(\0162\023.MsgPB.LOGIN_RESULT\022\r\n\005IggI"
    "D\030\003 \001(\003\022\021\n\tLoginTime\030\004 \001(\003\022\020\n\010TimeZone\030\005"
    " \001(\005\022\034\n\rDeviceChanged\030\006 \001(\010:\005false\022%\n\032La"
    "stClientUploadDataSerial\030\007 \001(\003:\0010\022\032\n\022Cli"
    "ent_History_Msg\030\010 \001(\005\022\022\n\nNewbieStep\030\t \001("
    "\005\"P\n\023MsgNotifyFirstLogin\0229\n\007msgType\030\001 \001("
    "\0162\017.MsgPB.EMsgType:\027_MSG_NOTIFY_FIRST_LO"
    "GIN\"\264\001\n\020MsgServerVersion\0225\n\007msgType\030\001 \001("
    "\0162\017.MsgPB.EMsgType:\023_MSG_SERVER_VERSION\022"
    "\021\n\tversionId\030\002 \001(\r\022\014\n\004year\030\003 \001(\r\022\r\n\005mont"
    "h\030\004 \001(\r\022\013\n\003day\030\005 \001(\r\022\014\n\004hour\030\006 \001(\r\022\016\n\006mi"
    "nute\030\007 \001(\r\022\016\n\006second\030\010 \001(\r\"W\n\026MsgUserLog"
    "inOtherPlace\022=\n\007msgType\030\001 \001(\0162\017.MsgPB.EM"
    "sgType:\033_MSG_USER_LOGIN_OTHER_PLACE\"\334\001\n\026"
    "MsgClientReConnectToGS\022=\n\007msgType\030\001 \001(\0162"
    "\017.MsgPB.EMsgType:\033_MSG_CLIENT_RECONNECT_"
    "TO_GS\022\r\n\005IggID\030\002 \001(\003\022\021\n\tcheckText\030\003 \001(\t\022"
    "\016\n\006msgMd5\030\004 \001(\t\022\033\n\023msgLastRecvMsgIndex\030\005"
    " \001(\003\022\031\n\nCliendMode\030\006 \001(\010:\005false\022\031\n\nUploa"
    "dData\030\007 \001(\010:\005false\"\264\001\n\025MsgServerRecvLast"
    "Pack\022<\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\032"
    "_MSG_SERVER_RECV_LAST_PACK\022\013\n\003ret\030\002 \001(\005\022"
    "\016\n\006msgMd5\030\003 \001(\t\022\033\n\023msgLastRecvMsgIndex\030\004"
    " \001(\003\022\021\n\tloginTime\030\005 \001(\005\022\020\n\010timeZone\030\006 \001("
    "\005\"\253\001\n\023MsgClientLoginIntra\0229\n\007msgType\030\001 \001"
    "(\0162\017.MsgPB.EMsgType:\027_MSG_CLIENT_LOGIN_I"
    "NTRA\022\r\n\005IggID\030\002 \001(\003\022\016\n\006platId\030\003 \001(\005\022\023\n\013p"
    "latAccount\030\004 \001(\t\022\017\n\007area_id\030\005 \001(\r\022\024\n\014cou"
    "ntry_code\030\006 \001(\t\"b\n\024MsgLoginQueueUpStart\022"
    ";\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\031_MSG_"
    "LOGIN_QUEUE_UP_START\022\r\n\005IggID\030\002 \001(\003\"\331\001\n\030"
    "MsgLoginQueueUpInfoIntra\022@\n\007msgType\030\001 \001("
    "\0162\017.MsgPB.EMsgType:\036_MSG_LOGIN_QUEUE_UP_"
    "INFO_INTRA\022H\n\016LoginQueueInfo\030\002 \003(\01320.Msg"
    "PB.MsgLoginQueueUpInfoIntra.LoginQueueUp"
    "Info\0321\n\020LoginQueueUpInfo\022\r\n\005IggID\030\001 \001(\003\022"
    "\016\n\006curPos\030\002 \001(\005\"s\n\034MsgNotifyUserDisconnL"
    "oginSvr\022D\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTyp"
    "e:\"_MSG_NOTIFY_USER_DISCONN_LOGIN_SVR\022\r\n"
    "\005IggID\030\002 \003(\003\"\353\001\n\026MsgLoginServerValidate\022"
    "<\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\032_MSG_"
    "LOGIN_SERVER_VALIDATE\022\r\n\005IggID\030\002 \001(\003\022\021\n\t"
    "checkText\030\003 \001(\t\022\016\n\006platId\030\004 \001(\005\022\023\n\013platA"
    "ccount\030\005 \001(\t\022\r\n\005dbkey\030\006 \001(\t\022\r\n\005gs_id\030\007 \001"
    "(\005\022\030\n\020original_area_id\030\010 \001(\005\022\024\n\014country_"
    "code\030\t \001(\t\"\240\001\n#MsgPlayerLoginSuccess_MGR"
    "S_TO_OTHER\022I\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsg"
    "Type:\'_MSG_PLAYER_LOGIN_SUCCESS_MGRS_TO_"
    "OTHER\022\r\n\005iggid\030\002 \001(\003\022\r\n\005dbkey\030\003 \001(\t\022\020\n\010n"
    "ickname\030\004 \001(\t\"_\n\023MsgDeleteAccountC2S\0229\n\007"
    "msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\027_MSG_DEL"
    "ETE_ACCOUNT_C2S\022\r\n\005iggid\030\002 \001(\003\"_\n\023MsgDel"
    "eteAccountS2C\0229\n\007msgType\030\001 \001(\0162\017.MsgPB.E"
    "MsgType:\027_MSG_DELETE_ACCOUNT_S2C\022\r\n\005iggi"
    "d\030\002 \001(\003*0\n\025LOGIN_QUEUE_UP_ACTION\022\027\n\023LOGI"
    "N_QUEUE_UP_INFO\020\001", 4377);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgLogin.proto", &protobuf_RegisterTypes);
  MsgPlatformAccountCheckC2LS::default_instance_ = new MsgPlatformAccountCheckC2LS();
  MsgPlatformAccountCheckLS2C::default_instance_ = new MsgPlatformAccountCheckLS2C();
  MsgRegisterAccountC2LS::default_instance_ = new MsgRegisterAccountC2LS();
  MsgRegisterAccountLS2C::default_instance_ = new MsgRegisterAccountLS2C();
  MsgClientLoginToLS::default_instance_ = new MsgClientLoginToLS();
  MsgLoginResp::default_instance_ = new MsgLoginResp();
  MsgLoginValidate::default_instance_ = new MsgLoginValidate();
  MsgLoginQueueUpInfo::default_instance_ = new MsgLoginQueueUpInfo();
  MsgQueryRegionRequeset::default_instance_ = new MsgQueryRegionRequeset();
  MsgQueryRegionResponse::default_instance_ = new MsgQueryRegionResponse();
  MsgEncryptorCode::default_instance_ = new MsgEncryptorCode();
  MsgEncryptorCodeResp::default_instance_ = new MsgEncryptorCodeResp();
  MsgClientLoginToGS::default_instance_ = new MsgClientLoginToGS();
  MsgGSResp::default_instance_ = new MsgGSResp();
  MsgNotifyFirstLogin::default_instance_ = new MsgNotifyFirstLogin();
  MsgServerVersion::default_instance_ = new MsgServerVersion();
  MsgUserLoginOtherPlace::default_instance_ = new MsgUserLoginOtherPlace();
  MsgClientReConnectToGS::default_instance_ = new MsgClientReConnectToGS();
  MsgServerRecvLastPack::default_instance_ = new MsgServerRecvLastPack();
  MsgClientLoginIntra::default_instance_ = new MsgClientLoginIntra();
  MsgLoginQueueUpStart::default_instance_ = new MsgLoginQueueUpStart();
  MsgLoginQueueUpInfoIntra::default_instance_ = new MsgLoginQueueUpInfoIntra();
  MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::default_instance_ = new MsgLoginQueueUpInfoIntra_LoginQueueUpInfo();
  MsgNotifyUserDisconnLoginSvr::default_instance_ = new MsgNotifyUserDisconnLoginSvr();
  MsgLoginServerValidate::default_instance_ = new MsgLoginServerValidate();
  MsgPlayerLoginSuccess_MGRS_TO_OTHER::default_instance_ = new MsgPlayerLoginSuccess_MGRS_TO_OTHER();
  MsgDeleteAccountC2S::default_instance_ = new MsgDeleteAccountC2S();
  MsgDeleteAccountS2C::default_instance_ = new MsgDeleteAccountS2C();
  MsgPlatformAccountCheckC2LS::default_instance_->InitAsDefaultInstance();
  MsgPlatformAccountCheckLS2C::default_instance_->InitAsDefaultInstance();
  MsgRegisterAccountC2LS::default_instance_->InitAsDefaultInstance();
  MsgRegisterAccountLS2C::default_instance_->InitAsDefaultInstance();
  MsgClientLoginToLS::default_instance_->InitAsDefaultInstance();
  MsgLoginResp::default_instance_->InitAsDefaultInstance();
  MsgLoginValidate::default_instance_->InitAsDefaultInstance();
  MsgLoginQueueUpInfo::default_instance_->InitAsDefaultInstance();
  MsgQueryRegionRequeset::default_instance_->InitAsDefaultInstance();
  MsgQueryRegionResponse::default_instance_->InitAsDefaultInstance();
  MsgEncryptorCode::default_instance_->InitAsDefaultInstance();
  MsgEncryptorCodeResp::default_instance_->InitAsDefaultInstance();
  MsgClientLoginToGS::default_instance_->InitAsDefaultInstance();
  MsgGSResp::default_instance_->InitAsDefaultInstance();
  MsgNotifyFirstLogin::default_instance_->InitAsDefaultInstance();
  MsgServerVersion::default_instance_->InitAsDefaultInstance();
  MsgUserLoginOtherPlace::default_instance_->InitAsDefaultInstance();
  MsgClientReConnectToGS::default_instance_->InitAsDefaultInstance();
  MsgServerRecvLastPack::default_instance_->InitAsDefaultInstance();
  MsgClientLoginIntra::default_instance_->InitAsDefaultInstance();
  MsgLoginQueueUpStart::default_instance_->InitAsDefaultInstance();
  MsgLoginQueueUpInfoIntra::default_instance_->InitAsDefaultInstance();
  MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::default_instance_->InitAsDefaultInstance();
  MsgNotifyUserDisconnLoginSvr::default_instance_->InitAsDefaultInstance();
  MsgLoginServerValidate::default_instance_->InitAsDefaultInstance();
  MsgPlayerLoginSuccess_MGRS_TO_OTHER::default_instance_->InitAsDefaultInstance();
  MsgDeleteAccountC2S::default_instance_->InitAsDefaultInstance();
  MsgDeleteAccountS2C::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgLogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgLogin_2eproto {
  StaticDescriptorInitializer_MsgLogin_2eproto() {
    protobuf_AddDesc_MsgLogin_2eproto();
  }
} static_descriptor_initializer_MsgLogin_2eproto_;
const ::google::protobuf::EnumDescriptor* LOGIN_QUEUE_UP_ACTION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGIN_QUEUE_UP_ACTION_descriptor_;
}
bool LOGIN_QUEUE_UP_ACTION_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlatformAccountCheckC2LS::kMsgTypeFieldNumber;
const int MsgPlatformAccountCheckC2LS::kPlatformFieldNumber;
const int MsgPlatformAccountCheckC2LS::kAccountFieldNumber;
const int MsgPlatformAccountCheckC2LS::kClientVerFieldNumber;
const int MsgPlatformAccountCheckC2LS::kPwdFieldNumber;
#endif  // !_MSC_VER

MsgPlatformAccountCheckC2LS::MsgPlatformAccountCheckC2LS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlatformAccountCheckC2LS)
}

void MsgPlatformAccountCheckC2LS::InitAsDefaultInstance() {
}

MsgPlatformAccountCheckC2LS::MsgPlatformAccountCheckC2LS(const MsgPlatformAccountCheckC2LS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlatformAccountCheckC2LS)
}

void MsgPlatformAccountCheckC2LS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1032;
  platform_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ver_ = 0;
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlatformAccountCheckC2LS::~MsgPlatformAccountCheckC2LS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlatformAccountCheckC2LS)
  SharedDtor();
}

void MsgPlatformAccountCheckC2LS::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlatformAccountCheckC2LS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlatformAccountCheckC2LS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlatformAccountCheckC2LS_descriptor_;
}

const MsgPlatformAccountCheckC2LS& MsgPlatformAccountCheckC2LS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgPlatformAccountCheckC2LS* MsgPlatformAccountCheckC2LS::default_instance_ = NULL;

MsgPlatformAccountCheckC2LS* MsgPlatformAccountCheckC2LS::New() const {
  return new MsgPlatformAccountCheckC2LS;
}

void MsgPlatformAccountCheckC2LS::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    msgtype_ = 1032;
    platform_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    client_ver_ = 0;
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlatformAccountCheckC2LS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlatformAccountCheckC2LS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHECK_PLATFORM_ACCOUNTC_C2LS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_platform;
        break;
      }

      // optional int32 platform = 2;
      case 2: {
        if (tag == 16) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (tag == 26) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_client_ver;
        break;
      }

      // optional int32 client_ver = 4;
      case 4: {
        if (tag == 32) {
         parse_client_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_ver_)));
          set_has_client_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pwd;
        break;
      }

      // optional string pwd = 5;
      case 5: {
        if (tag == 42) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlatformAccountCheckC2LS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlatformAccountCheckC2LS)
  return false;
#undef DO_
}

void MsgPlatformAccountCheckC2LS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlatformAccountCheckC2LS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHECK_PLATFORM_ACCOUNTC_C2LS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->platform(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account(), output);
  }

  // optional int32 client_ver = 4;
  if (has_client_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->client_ver(), output);
  }

  // optional string pwd = 5;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlatformAccountCheckC2LS)
}

::google::protobuf::uint8* MsgPlatformAccountCheckC2LS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlatformAccountCheckC2LS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHECK_PLATFORM_ACCOUNTC_C2LS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 platform = 2;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->platform(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional int32 client_ver = 4;
  if (has_client_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->client_ver(), target);
  }

  // optional string pwd = 5;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlatformAccountCheckC2LS)
  return target;
}

int MsgPlatformAccountCheckC2LS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHECK_PLATFORM_ACCOUNTC_C2LS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 client_ver = 4;
    if (has_client_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_ver());
    }

    // optional string pwd = 5;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlatformAccountCheckC2LS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlatformAccountCheckC2LS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlatformAccountCheckC2LS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlatformAccountCheckC2LS::MergeFrom(const MsgPlatformAccountCheckC2LS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_client_ver()) {
      set_client_ver(from.client_ver());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlatformAccountCheckC2LS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlatformAccountCheckC2LS::CopyFrom(const MsgPlatformAccountCheckC2LS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlatformAccountCheckC2LS::IsInitialized() const {

  return true;
}

void MsgPlatformAccountCheckC2LS::Swap(MsgPlatformAccountCheckC2LS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(platform_, other->platform_);
    std::swap(account_, other->account_);
    std::swap(client_ver_, other->client_ver_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlatformAccountCheckC2LS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlatformAccountCheckC2LS_descriptor_;
  metadata.reflection = MsgPlatformAccountCheckC2LS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlatformAccountCheckLS2C::kMsgTypeFieldNumber;
const int MsgPlatformAccountCheckLS2C::kIggidFieldNumber;
const int MsgPlatformAccountCheckLS2C::kPlatformFieldNumber;
const int MsgPlatformAccountCheckLS2C::kAccountFieldNumber;
const int MsgPlatformAccountCheckLS2C::kNVideoFieldNumber;
#endif  // !_MSC_VER

MsgPlatformAccountCheckLS2C::MsgPlatformAccountCheckLS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlatformAccountCheckLS2C)
}

void MsgPlatformAccountCheckLS2C::InitAsDefaultInstance() {
}

MsgPlatformAccountCheckLS2C::MsgPlatformAccountCheckLS2C(const MsgPlatformAccountCheckLS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlatformAccountCheckLS2C)
}

void MsgPlatformAccountCheckLS2C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1033;
  iggid_ = GOOGLE_LONGLONG(0);
  platform_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nvideo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlatformAccountCheckLS2C::~MsgPlatformAccountCheckLS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlatformAccountCheckLS2C)
  SharedDtor();
}

void MsgPlatformAccountCheckLS2C::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlatformAccountCheckLS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlatformAccountCheckLS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlatformAccountCheckLS2C_descriptor_;
}

const MsgPlatformAccountCheckLS2C& MsgPlatformAccountCheckLS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgPlatformAccountCheckLS2C* MsgPlatformAccountCheckLS2C::default_instance_ = NULL;

MsgPlatformAccountCheckLS2C* MsgPlatformAccountCheckLS2C::New() const {
  return new MsgPlatformAccountCheckLS2C;
}

void MsgPlatformAccountCheckLS2C::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    msgtype_ = 1033;
    iggid_ = GOOGLE_LONGLONG(0);
    platform_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    nvideo_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlatformAccountCheckLS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlatformAccountCheckLS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHECK_PLATFORM_ACCOUNTC_LS2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_platform;
        break;
      }

      // optional int32 platform = 3;
      case 3: {
        if (tag == 24) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (tag == 34) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nVideo;
        break;
      }

      // optional int32 nVideo = 5;
      case 5: {
        if (tag == 40) {
         parse_nVideo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nvideo_)));
          set_has_nvideo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlatformAccountCheckLS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlatformAccountCheckLS2C)
  return false;
#undef DO_
}

void MsgPlatformAccountCheckLS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlatformAccountCheckLS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHECK_PLATFORM_ACCOUNTC_LS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->platform(), output);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->account(), output);
  }

  // optional int32 nVideo = 5;
  if (has_nvideo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nvideo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlatformAccountCheckLS2C)
}

::google::protobuf::uint8* MsgPlatformAccountCheckLS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlatformAccountCheckLS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHECK_PLATFORM_ACCOUNTC_LS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 platform = 3;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->platform(), target);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  // optional int32 nVideo = 5;
  if (has_nvideo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nvideo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlatformAccountCheckLS2C)
  return target;
}

int MsgPlatformAccountCheckLS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CHECK_PLATFORM_ACCOUNTC_LS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // optional string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 nVideo = 5;
    if (has_nvideo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nvideo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlatformAccountCheckLS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlatformAccountCheckLS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlatformAccountCheckLS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlatformAccountCheckLS2C::MergeFrom(const MsgPlatformAccountCheckLS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_nvideo()) {
      set_nvideo(from.nvideo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlatformAccountCheckLS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlatformAccountCheckLS2C::CopyFrom(const MsgPlatformAccountCheckLS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlatformAccountCheckLS2C::IsInitialized() const {

  return true;
}

void MsgPlatformAccountCheckLS2C::Swap(MsgPlatformAccountCheckLS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(platform_, other->platform_);
    std::swap(account_, other->account_);
    std::swap(nvideo_, other->nvideo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlatformAccountCheckLS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlatformAccountCheckLS2C_descriptor_;
  metadata.reflection = MsgPlatformAccountCheckLS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRegisterAccountC2LS::kMsgTypeFieldNumber;
const int MsgRegisterAccountC2LS::kPlatformFieldNumber;
const int MsgRegisterAccountC2LS::kAccountFieldNumber;
const int MsgRegisterAccountC2LS::kPwdFieldNumber;
#endif  // !_MSC_VER

MsgRegisterAccountC2LS::MsgRegisterAccountC2LS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgRegisterAccountC2LS)
}

void MsgRegisterAccountC2LS::InitAsDefaultInstance() {
}

MsgRegisterAccountC2LS::MsgRegisterAccountC2LS(const MsgRegisterAccountC2LS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgRegisterAccountC2LS)
}

void MsgRegisterAccountC2LS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1064;
  platform_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRegisterAccountC2LS::~MsgRegisterAccountC2LS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgRegisterAccountC2LS)
  SharedDtor();
}

void MsgRegisterAccountC2LS::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void MsgRegisterAccountC2LS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRegisterAccountC2LS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRegisterAccountC2LS_descriptor_;
}

const MsgRegisterAccountC2LS& MsgRegisterAccountC2LS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgRegisterAccountC2LS* MsgRegisterAccountC2LS::default_instance_ = NULL;

MsgRegisterAccountC2LS* MsgRegisterAccountC2LS::New() const {
  return new MsgRegisterAccountC2LS;
}

void MsgRegisterAccountC2LS::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 1064;
    platform_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRegisterAccountC2LS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgRegisterAccountC2LS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_ACCOUNTC_C2LS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_platform;
        break;
      }

      // optional int32 platform = 2;
      case 2: {
        if (tag == 16) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (tag == 26) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pwd;
        break;
      }

      // optional string pwd = 4;
      case 4: {
        if (tag == 34) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgRegisterAccountC2LS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgRegisterAccountC2LS)
  return false;
#undef DO_
}

void MsgRegisterAccountC2LS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgRegisterAccountC2LS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_ACCOUNTC_C2LS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->platform(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account(), output);
  }

  // optional string pwd = 4;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgRegisterAccountC2LS)
}

::google::protobuf::uint8* MsgRegisterAccountC2LS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgRegisterAccountC2LS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_ACCOUNTC_C2LS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 platform = 2;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->platform(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional string pwd = 4;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgRegisterAccountC2LS)
  return target;
}

int MsgRegisterAccountC2LS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_ACCOUNTC_C2LS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string pwd = 4;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRegisterAccountC2LS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRegisterAccountC2LS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRegisterAccountC2LS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRegisterAccountC2LS::MergeFrom(const MsgRegisterAccountC2LS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRegisterAccountC2LS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRegisterAccountC2LS::CopyFrom(const MsgRegisterAccountC2LS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRegisterAccountC2LS::IsInitialized() const {

  return true;
}

void MsgRegisterAccountC2LS::Swap(MsgRegisterAccountC2LS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(platform_, other->platform_);
    std::swap(account_, other->account_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRegisterAccountC2LS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRegisterAccountC2LS_descriptor_;
  metadata.reflection = MsgRegisterAccountC2LS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRegisterAccountLS2C::kMsgTypeFieldNumber;
const int MsgRegisterAccountLS2C::kPlatformFieldNumber;
const int MsgRegisterAccountLS2C::kAccountFieldNumber;
#endif  // !_MSC_VER

MsgRegisterAccountLS2C::MsgRegisterAccountLS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgRegisterAccountLS2C)
}

void MsgRegisterAccountLS2C::InitAsDefaultInstance() {
}

MsgRegisterAccountLS2C::MsgRegisterAccountLS2C(const MsgRegisterAccountLS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgRegisterAccountLS2C)
}

void MsgRegisterAccountLS2C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1065;
  platform_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRegisterAccountLS2C::~MsgRegisterAccountLS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgRegisterAccountLS2C)
  SharedDtor();
}

void MsgRegisterAccountLS2C::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void MsgRegisterAccountLS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRegisterAccountLS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRegisterAccountLS2C_descriptor_;
}

const MsgRegisterAccountLS2C& MsgRegisterAccountLS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgRegisterAccountLS2C* MsgRegisterAccountLS2C::default_instance_ = NULL;

MsgRegisterAccountLS2C* MsgRegisterAccountLS2C::New() const {
  return new MsgRegisterAccountLS2C;
}

void MsgRegisterAccountLS2C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgtype_ = 1065;
    platform_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRegisterAccountLS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgRegisterAccountLS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_ACCOUNTC_LS2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_platform;
        break;
      }

      // optional int32 platform = 2;
      case 2: {
        if (tag == 16) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (tag == 26) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgRegisterAccountLS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgRegisterAccountLS2C)
  return false;
#undef DO_
}

void MsgRegisterAccountLS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgRegisterAccountLS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_ACCOUNTC_LS2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->platform(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgRegisterAccountLS2C)
}

::google::protobuf::uint8* MsgRegisterAccountLS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgRegisterAccountLS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_ACCOUNTC_LS2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 platform = 2;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->platform(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgRegisterAccountLS2C)
  return target;
}

int MsgRegisterAccountLS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_REGISTER_ACCOUNTC_LS2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRegisterAccountLS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRegisterAccountLS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRegisterAccountLS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRegisterAccountLS2C::MergeFrom(const MsgRegisterAccountLS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRegisterAccountLS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRegisterAccountLS2C::CopyFrom(const MsgRegisterAccountLS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRegisterAccountLS2C::IsInitialized() const {

  return true;
}

void MsgRegisterAccountLS2C::Swap(MsgRegisterAccountLS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(platform_, other->platform_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRegisterAccountLS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRegisterAccountLS2C_descriptor_;
  metadata.reflection = MsgRegisterAccountLS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgClientLoginToLS::kMsgTypeFieldNumber;
const int MsgClientLoginToLS::kIggIDFieldNumber;
const int MsgClientLoginToLS::kIggKeyFieldNumber;
const int MsgClientLoginToLS::kSessionKeyFieldNumber;
const int MsgClientLoginToLS::kVersionCodeFieldNumber;
const int MsgClientLoginToLS::kClientSvnVerFieldNumber;
const int MsgClientLoginToLS::kIgnoreUpdateFieldNumber;
const int MsgClientLoginToLS::kAreaIdFieldNumber;
#endif  // !_MSC_VER

MsgClientLoginToLS::MsgClientLoginToLS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgClientLoginToLS)
}

void MsgClientLoginToLS::InitAsDefaultInstance() {
}

MsgClientLoginToLS::MsgClientLoginToLS(const MsgClientLoginToLS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgClientLoginToLS)
}

void MsgClientLoginToLS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1000;
  iggid_ = GOOGLE_LONGLONG(0);
  iggkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  versioncode_ = 0;
  client_svn_ver_ = 0;
  ignore_update_ = 0;
  area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgClientLoginToLS::~MsgClientLoginToLS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgClientLoginToLS)
  SharedDtor();
}

void MsgClientLoginToLS::SharedDtor() {
  if (iggkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iggkey_;
  }
  if (sessionkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sessionkey_;
  }
  if (this != default_instance_) {
  }
}

void MsgClientLoginToLS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgClientLoginToLS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgClientLoginToLS_descriptor_;
}

const MsgClientLoginToLS& MsgClientLoginToLS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgClientLoginToLS* MsgClientLoginToLS::default_instance_ = NULL;

MsgClientLoginToLS* MsgClientLoginToLS::New() const {
  return new MsgClientLoginToLS;
}

void MsgClientLoginToLS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgClientLoginToLS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(client_svn_ver_, area_id_);
    msgtype_ = 1000;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_iggkey()) {
      if (iggkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iggkey_->clear();
      }
    }
    if (has_sessionkey()) {
      if (sessionkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sessionkey_->clear();
      }
    }
    versioncode_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgClientLoginToLS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgClientLoginToLS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_LOGIN_TO_LS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IggID;
        break;
      }

      // optional int64 IggID = 2;
      case 2: {
        if (tag == 16) {
         parse_IggID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_IggKey;
        break;
      }

      // optional string IggKey = 3;
      case 3: {
        if (tag == 26) {
         parse_IggKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iggkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iggkey().data(), this->iggkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iggkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SessionKey;
        break;
      }

      // optional string SessionKey = 4;
      case 4: {
        if (tag == 34) {
         parse_SessionKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionkey().data(), this->sessionkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sessionkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_versionCode;
        break;
      }

      // optional int32 versionCode = 5;
      case 5: {
        if (tag == 40) {
         parse_versionCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &versioncode_)));
          set_has_versioncode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_client_svn_ver;
        break;
      }

      // optional int32 client_svn_ver = 6;
      case 6: {
        if (tag == 48) {
         parse_client_svn_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_svn_ver_)));
          set_has_client_svn_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ignore_update;
        break;
      }

      // optional int32 ignore_update = 7;
      case 7: {
        if (tag == 56) {
         parse_ignore_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_update_)));
          set_has_ignore_update();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 8;
      case 8: {
        if (tag == 64) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgClientLoginToLS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgClientLoginToLS)
  return false;
#undef DO_
}

void MsgClientLoginToLS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgClientLoginToLS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_LOGIN_TO_LS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional string IggKey = 3;
  if (has_iggkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iggkey().data(), this->iggkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iggkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->iggkey(), output);
  }

  // optional string SessionKey = 4;
  if (has_sessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sessionkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sessionkey(), output);
  }

  // optional int32 versionCode = 5;
  if (has_versioncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->versioncode(), output);
  }

  // optional int32 client_svn_ver = 6;
  if (has_client_svn_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->client_svn_ver(), output);
  }

  // optional int32 ignore_update = 7;
  if (has_ignore_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ignore_update(), output);
  }

  // optional uint32 area_id = 8;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->area_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgClientLoginToLS)
}

::google::protobuf::uint8* MsgClientLoginToLS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgClientLoginToLS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_LOGIN_TO_LS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional string IggKey = 3;
  if (has_iggkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iggkey().data(), this->iggkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iggkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->iggkey(), target);
  }

  // optional string SessionKey = 4;
  if (has_sessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sessionkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sessionkey(), target);
  }

  // optional int32 versionCode = 5;
  if (has_versioncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->versioncode(), target);
  }

  // optional int32 client_svn_ver = 6;
  if (has_client_svn_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->client_svn_ver(), target);
  }

  // optional int32 ignore_update = 7;
  if (has_ignore_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ignore_update(), target);
  }

  // optional uint32 area_id = 8;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->area_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgClientLoginToLS)
  return target;
}

int MsgClientLoginToLS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_LOGIN_TO_LS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 IggID = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string IggKey = 3;
    if (has_iggkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iggkey());
    }

    // optional string SessionKey = 4;
    if (has_sessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessionkey());
    }

    // optional int32 versionCode = 5;
    if (has_versioncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->versioncode());
    }

    // optional int32 client_svn_ver = 6;
    if (has_client_svn_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_svn_ver());
    }

    // optional int32 ignore_update = 7;
    if (has_ignore_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_update());
    }

    // optional uint32 area_id = 8;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgClientLoginToLS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgClientLoginToLS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgClientLoginToLS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgClientLoginToLS::MergeFrom(const MsgClientLoginToLS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_iggkey()) {
      set_iggkey(from.iggkey());
    }
    if (from.has_sessionkey()) {
      set_sessionkey(from.sessionkey());
    }
    if (from.has_versioncode()) {
      set_versioncode(from.versioncode());
    }
    if (from.has_client_svn_ver()) {
      set_client_svn_ver(from.client_svn_ver());
    }
    if (from.has_ignore_update()) {
      set_ignore_update(from.ignore_update());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgClientLoginToLS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgClientLoginToLS::CopyFrom(const MsgClientLoginToLS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgClientLoginToLS::IsInitialized() const {

  return true;
}

void MsgClientLoginToLS::Swap(MsgClientLoginToLS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(iggkey_, other->iggkey_);
    std::swap(sessionkey_, other->sessionkey_);
    std::swap(versioncode_, other->versioncode_);
    std::swap(client_svn_ver_, other->client_svn_ver_);
    std::swap(ignore_update_, other->ignore_update_);
    std::swap(area_id_, other->area_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgClientLoginToLS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgClientLoginToLS_descriptor_;
  metadata.reflection = MsgClientLoginToLS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoginResp::kMsgTypeFieldNumber;
const int MsgLoginResp::kLoginResultFieldNumber;
const int MsgLoginResp::kIggIDFieldNumber;
const int MsgLoginResp::kLoginTimeFieldNumber;
const int MsgLoginResp::kTimeZoneFieldNumber;
const int MsgLoginResp::kAppleAppAddrFieldNumber;
const int MsgLoginResp::kAndroidAppAddrFieldNumber;
const int MsgLoginResp::kSUpdateNoteAddrFieldNumber;
const int MsgLoginResp::kSAnnouncementAddrFieldNumber;
#endif  // !_MSC_VER

MsgLoginResp::MsgLoginResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgLoginResp)
}

void MsgLoginResp::InitAsDefaultInstance() {
}

MsgLoginResp::MsgLoginResp(const MsgLoginResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgLoginResp)
}

void MsgLoginResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1001;
  loginresult_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  logintime_ = 0;
  timezone_ = 0;
  apple_app_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  android_app_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_update_note_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_announcement_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginResp::~MsgLoginResp() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgLoginResp)
  SharedDtor();
}

void MsgLoginResp::SharedDtor() {
  if (apple_app_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete apple_app_addr_;
  }
  if (android_app_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete android_app_addr_;
  }
  if (s_update_note_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_update_note_addr_;
  }
  if (s_announcement_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_announcement_addr_;
  }
  if (this != default_instance_) {
  }
}

void MsgLoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoginResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginResp_descriptor_;
}

const MsgLoginResp& MsgLoginResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgLoginResp* MsgLoginResp::default_instance_ = NULL;

MsgLoginResp* MsgLoginResp::New() const {
  return new MsgLoginResp;
}

void MsgLoginResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgLoginResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(loginresult_, timezone_);
    msgtype_ = 1001;
    if (has_apple_app_addr()) {
      if (apple_app_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        apple_app_addr_->clear();
      }
    }
    if (has_android_app_addr()) {
      if (android_app_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        android_app_addr_->clear();
      }
    }
    if (has_s_update_note_addr()) {
      if (s_update_note_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_update_note_addr_->clear();
      }
    }
  }
  if (has_s_announcement_addr()) {
    if (s_announcement_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      s_announcement_addr_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgLoginResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_RESP];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_loginResult;
        break;
      }

      // optional .MsgPB.LOGIN_RESULT loginResult = 2;
      case 2: {
        if (tag == 16) {
         parse_loginResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::LOGIN_RESULT_IsValid(value)) {
            set_loginresult(static_cast< ::MsgPB::LOGIN_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IggID;
        break;
      }

      // optional int64 IggID = 3;
      case 3: {
        if (tag == 24) {
         parse_IggID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LoginTime;
        break;
      }

      // optional int32 LoginTime = 4;
      case 4: {
        if (tag == 32) {
         parse_LoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TimeZone;
        break;
      }

      // optional int32 TimeZone = 5;
      case 5: {
        if (tag == 40) {
         parse_TimeZone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_)));
          set_has_timezone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_apple_app_addr;
        break;
      }

      // optional string apple_app_addr = 6;
      case 6: {
        if (tag == 50) {
         parse_apple_app_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apple_app_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->apple_app_addr().data(), this->apple_app_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apple_app_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_android_app_addr;
        break;
      }

      // optional string android_app_addr = 7;
      case 7: {
        if (tag == 58) {
         parse_android_app_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_android_app_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->android_app_addr().data(), this->android_app_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "android_app_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_s_update_note_addr;
        break;
      }

      // optional string s_update_note_addr = 8;
      case 8: {
        if (tag == 66) {
         parse_s_update_note_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s_update_note_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s_update_note_addr().data(), this->s_update_note_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s_update_note_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_s_announcement_addr;
        break;
      }

      // optional string s_announcement_addr = 9;
      case 9: {
        if (tag == 74) {
         parse_s_announcement_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s_announcement_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s_announcement_addr().data(), this->s_announcement_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s_announcement_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgLoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgLoginResp)
  return false;
#undef DO_
}

void MsgLoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgLoginResp)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_RESP];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.LOGIN_RESULT loginResult = 2;
  if (has_loginresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->loginresult(), output);
  }

  // optional int64 IggID = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int32 LoginTime = 4;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->logintime(), output);
  }

  // optional int32 TimeZone = 5;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timezone(), output);
  }

  // optional string apple_app_addr = 6;
  if (has_apple_app_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apple_app_addr().data(), this->apple_app_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apple_app_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->apple_app_addr(), output);
  }

  // optional string android_app_addr = 7;
  if (has_android_app_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->android_app_addr().data(), this->android_app_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "android_app_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->android_app_addr(), output);
  }

  // optional string s_update_note_addr = 8;
  if (has_s_update_note_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s_update_note_addr().data(), this->s_update_note_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s_update_note_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->s_update_note_addr(), output);
  }

  // optional string s_announcement_addr = 9;
  if (has_s_announcement_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s_announcement_addr().data(), this->s_announcement_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s_announcement_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->s_announcement_addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgLoginResp)
}

::google::protobuf::uint8* MsgLoginResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgLoginResp)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_RESP];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.LOGIN_RESULT loginResult = 2;
  if (has_loginresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->loginresult(), target);
  }

  // optional int64 IggID = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int32 LoginTime = 4;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->logintime(), target);
  }

  // optional int32 TimeZone = 5;
  if (has_timezone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timezone(), target);
  }

  // optional string apple_app_addr = 6;
  if (has_apple_app_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apple_app_addr().data(), this->apple_app_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apple_app_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->apple_app_addr(), target);
  }

  // optional string android_app_addr = 7;
  if (has_android_app_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->android_app_addr().data(), this->android_app_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "android_app_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->android_app_addr(), target);
  }

  // optional string s_update_note_addr = 8;
  if (has_s_update_note_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s_update_note_addr().data(), this->s_update_note_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s_update_note_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->s_update_note_addr(), target);
  }

  // optional string s_announcement_addr = 9;
  if (has_s_announcement_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s_announcement_addr().data(), this->s_announcement_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s_announcement_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->s_announcement_addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgLoginResp)
  return target;
}

int MsgLoginResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_RESP];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.LOGIN_RESULT loginResult = 2;
    if (has_loginresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loginresult());
    }

    // optional int64 IggID = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 LoginTime = 4;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logintime());
    }

    // optional int32 TimeZone = 5;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone());
    }

    // optional string apple_app_addr = 6;
    if (has_apple_app_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apple_app_addr());
    }

    // optional string android_app_addr = 7;
    if (has_android_app_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->android_app_addr());
    }

    // optional string s_update_note_addr = 8;
    if (has_s_update_note_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s_update_note_addr());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string s_announcement_addr = 9;
    if (has_s_announcement_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s_announcement_addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoginResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginResp::MergeFrom(const MsgLoginResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_loginresult()) {
      set_loginresult(from.loginresult());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_timezone()) {
      set_timezone(from.timezone());
    }
    if (from.has_apple_app_addr()) {
      set_apple_app_addr(from.apple_app_addr());
    }
    if (from.has_android_app_addr()) {
      set_android_app_addr(from.android_app_addr());
    }
    if (from.has_s_update_note_addr()) {
      set_s_update_note_addr(from.s_update_note_addr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_s_announcement_addr()) {
      set_s_announcement_addr(from.s_announcement_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginResp::CopyFrom(const MsgLoginResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginResp::IsInitialized() const {

  return true;
}

void MsgLoginResp::Swap(MsgLoginResp* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(loginresult_, other->loginresult_);
    std::swap(iggid_, other->iggid_);
    std::swap(logintime_, other->logintime_);
    std::swap(timezone_, other->timezone_);
    std::swap(apple_app_addr_, other->apple_app_addr_);
    std::swap(android_app_addr_, other->android_app_addr_);
    std::swap(s_update_note_addr_, other->s_update_note_addr_);
    std::swap(s_announcement_addr_, other->s_announcement_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginResp_descriptor_;
  metadata.reflection = MsgLoginResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoginValidate::kMsgTypeFieldNumber;
const int MsgLoginValidate::kIggIDFieldNumber;
const int MsgLoginValidate::kIpFieldNumber;
const int MsgLoginValidate::kPortFieldNumber;
const int MsgLoginValidate::kCheckTextFieldNumber;
#endif  // !_MSC_VER

MsgLoginValidate::MsgLoginValidate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgLoginValidate)
}

void MsgLoginValidate::InitAsDefaultInstance() {
}

MsgLoginValidate::MsgLoginValidate(const MsgLoginValidate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgLoginValidate)
}

void MsgLoginValidate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1003;
  iggid_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  checktext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginValidate::~MsgLoginValidate() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgLoginValidate)
  SharedDtor();
}

void MsgLoginValidate::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (checktext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete checktext_;
  }
  if (this != default_instance_) {
  }
}

void MsgLoginValidate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoginValidate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginValidate_descriptor_;
}

const MsgLoginValidate& MsgLoginValidate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgLoginValidate* MsgLoginValidate::default_instance_ = NULL;

MsgLoginValidate* MsgLoginValidate::New() const {
  return new MsgLoginValidate;
}

void MsgLoginValidate::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    msgtype_ = 1003;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (has_checktext()) {
      if (checktext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        checktext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginValidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgLoginValidate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_VALIDATE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IggID;
        break;
      }

      // optional int64 IggID = 2;
      case 2: {
        if (tag == 16) {
         parse_IggID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_checkText;
        break;
      }

      // optional string checkText = 5;
      case 5: {
        if (tag == 42) {
         parse_checkText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checktext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->checktext().data(), this->checktext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "checktext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgLoginValidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgLoginValidate)
  return false;
#undef DO_
}

void MsgLoginValidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgLoginValidate)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_VALIDATE];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional string checkText = 5;
  if (has_checktext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checktext().data(), this->checktext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "checktext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->checktext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgLoginValidate)
}

::google::protobuf::uint8* MsgLoginValidate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgLoginValidate)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_VALIDATE];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // optional string checkText = 5;
  if (has_checktext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checktext().data(), this->checktext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "checktext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->checktext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgLoginValidate)
  return target;
}

int MsgLoginValidate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_VALIDATE];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 IggID = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string checkText = 5;
    if (has_checktext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checktext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoginValidate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginValidate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginValidate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginValidate::MergeFrom(const MsgLoginValidate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_checktext()) {
      set_checktext(from.checktext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginValidate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginValidate::CopyFrom(const MsgLoginValidate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginValidate::IsInitialized() const {

  return true;
}

void MsgLoginValidate::Swap(MsgLoginValidate* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(checktext_, other->checktext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginValidate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginValidate_descriptor_;
  metadata.reflection = MsgLoginValidate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoginQueueUpInfo::kMsgTypeFieldNumber;
const int MsgLoginQueueUpInfo::kActionFieldNumber;
const int MsgLoginQueueUpInfo::kIggIDFieldNumber;
const int MsgLoginQueueUpInfo::kCurPosFieldNumber;
#endif  // !_MSC_VER

MsgLoginQueueUpInfo::MsgLoginQueueUpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgLoginQueueUpInfo)
}

void MsgLoginQueueUpInfo::InitAsDefaultInstance() {
}

MsgLoginQueueUpInfo::MsgLoginQueueUpInfo(const MsgLoginQueueUpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgLoginQueueUpInfo)
}

void MsgLoginQueueUpInfo::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1080;
  action_ = 1;
  iggid_ = GOOGLE_LONGLONG(0);
  curpos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginQueueUpInfo::~MsgLoginQueueUpInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgLoginQueueUpInfo)
  SharedDtor();
}

void MsgLoginQueueUpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLoginQueueUpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoginQueueUpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginQueueUpInfo_descriptor_;
}

const MsgLoginQueueUpInfo& MsgLoginQueueUpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgLoginQueueUpInfo* MsgLoginQueueUpInfo::default_instance_ = NULL;

MsgLoginQueueUpInfo* MsgLoginQueueUpInfo::New() const {
  return new MsgLoginQueueUpInfo;
}

void MsgLoginQueueUpInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgLoginQueueUpInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(iggid_, curpos_);
    msgtype_ = 1080;
    action_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginQueueUpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgLoginQueueUpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_QUEUE_UP_INFO];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional .MsgPB.LOGIN_QUEUE_UP_ACTION action = 2;
      case 2: {
        if (tag == 16) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::LOGIN_QUEUE_UP_ACTION_IsValid(value)) {
            set_action(static_cast< ::MsgPB::LOGIN_QUEUE_UP_ACTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IggID;
        break;
      }

      // optional int64 IggID = 3;
      case 3: {
        if (tag == 24) {
         parse_IggID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curPos;
        break;
      }

      // optional int32 curPos = 4;
      case 4: {
        if (tag == 32) {
         parse_curPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curpos_)));
          set_has_curpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgLoginQueueUpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgLoginQueueUpInfo)
  return false;
#undef DO_
}

void MsgLoginQueueUpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgLoginQueueUpInfo)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_QUEUE_UP_INFO];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.LOGIN_QUEUE_UP_ACTION action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // optional int64 IggID = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int32 curPos = 4;
  if (has_curpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgLoginQueueUpInfo)
}

::google::protobuf::uint8* MsgLoginQueueUpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgLoginQueueUpInfo)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_QUEUE_UP_INFO];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.LOGIN_QUEUE_UP_ACTION action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // optional int64 IggID = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int32 curPos = 4;
  if (has_curpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgLoginQueueUpInfo)
  return target;
}

int MsgLoginQueueUpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_QUEUE_UP_INFO];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.LOGIN_QUEUE_UP_ACTION action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional int64 IggID = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 curPos = 4;
    if (has_curpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoginQueueUpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginQueueUpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginQueueUpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginQueueUpInfo::MergeFrom(const MsgLoginQueueUpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_curpos()) {
      set_curpos(from.curpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginQueueUpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginQueueUpInfo::CopyFrom(const MsgLoginQueueUpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginQueueUpInfo::IsInitialized() const {

  return true;
}

void MsgLoginQueueUpInfo::Swap(MsgLoginQueueUpInfo* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(action_, other->action_);
    std::swap(iggid_, other->iggid_);
    std::swap(curpos_, other->curpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginQueueUpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginQueueUpInfo_descriptor_;
  metadata.reflection = MsgLoginQueueUpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryRegionRequeset::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgQueryRegionRequeset::MsgQueryRegionRequeset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgQueryRegionRequeset)
}

void MsgQueryRegionRequeset::InitAsDefaultInstance() {
}

MsgQueryRegionRequeset::MsgQueryRegionRequeset(const MsgQueryRegionRequeset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgQueryRegionRequeset)
}

void MsgQueryRegionRequeset::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1013;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryRegionRequeset::~MsgQueryRegionRequeset() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgQueryRegionRequeset)
  SharedDtor();
}

void MsgQueryRegionRequeset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryRegionRequeset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryRegionRequeset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryRegionRequeset_descriptor_;
}

const MsgQueryRegionRequeset& MsgQueryRegionRequeset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgQueryRegionRequeset* MsgQueryRegionRequeset::default_instance_ = NULL;

MsgQueryRegionRequeset* MsgQueryRegionRequeset::New() const {
  return new MsgQueryRegionRequeset;
}

void MsgQueryRegionRequeset::Clear() {
  msgtype_ = 1013;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryRegionRequeset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgQueryRegionRequeset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_REGION];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgQueryRegionRequeset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgQueryRegionRequeset)
  return false;
#undef DO_
}

void MsgQueryRegionRequeset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgQueryRegionRequeset)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_REGION];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgQueryRegionRequeset)
}

::google::protobuf::uint8* MsgQueryRegionRequeset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgQueryRegionRequeset)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_REGION];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgQueryRegionRequeset)
  return target;
}

int MsgQueryRegionRequeset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_REGION];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryRegionRequeset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryRegionRequeset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryRegionRequeset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryRegionRequeset::MergeFrom(const MsgQueryRegionRequeset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryRegionRequeset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryRegionRequeset::CopyFrom(const MsgQueryRegionRequeset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryRegionRequeset::IsInitialized() const {

  return true;
}

void MsgQueryRegionRequeset::Swap(MsgQueryRegionRequeset* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryRegionRequeset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryRegionRequeset_descriptor_;
  metadata.reflection = MsgQueryRegionRequeset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryRegionResponse::kMsgTypeFieldNumber;
const int MsgQueryRegionResponse::kRegionLstFieldNumber;
#endif  // !_MSC_VER

MsgQueryRegionResponse::MsgQueryRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgQueryRegionResponse)
}

void MsgQueryRegionResponse::InitAsDefaultInstance() {
}

MsgQueryRegionResponse::MsgQueryRegionResponse(const MsgQueryRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgQueryRegionResponse)
}

void MsgQueryRegionResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1014;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryRegionResponse::~MsgQueryRegionResponse() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgQueryRegionResponse)
  SharedDtor();
}

void MsgQueryRegionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryRegionResponse_descriptor_;
}

const MsgQueryRegionResponse& MsgQueryRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgQueryRegionResponse* MsgQueryRegionResponse::default_instance_ = NULL;

MsgQueryRegionResponse* MsgQueryRegionResponse::New() const {
  return new MsgQueryRegionResponse;
}

void MsgQueryRegionResponse::Clear() {
  msgtype_ = 1014;
  region_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgQueryRegionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_REGION_RESPONSE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_lst;
        break;
      }

      // repeated string region_lst = 2;
      case 2: {
        if (tag == 18) {
         parse_region_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_region_lst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->region_lst(this->region_lst_size() - 1).data(),
            this->region_lst(this->region_lst_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "region_lst");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_lst;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgQueryRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgQueryRegionResponse)
  return false;
#undef DO_
}

void MsgQueryRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgQueryRegionResponse)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_REGION_RESPONSE];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // repeated string region_lst = 2;
  for (int i = 0; i < this->region_lst_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->region_lst(i).data(), this->region_lst(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "region_lst");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->region_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgQueryRegionResponse)
}

::google::protobuf::uint8* MsgQueryRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgQueryRegionResponse)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_REGION_RESPONSE];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // repeated string region_lst = 2;
  for (int i = 0; i < this->region_lst_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region_lst(i).data(), this->region_lst(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "region_lst");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->region_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgQueryRegionResponse)
  return target;
}

int MsgQueryRegionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_QUERY_REGION_RESPONSE];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  // repeated string region_lst = 2;
  total_size += 1 * this->region_lst_size();
  for (int i = 0; i < this->region_lst_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->region_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryRegionResponse::MergeFrom(const MsgQueryRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_lst_.MergeFrom(from.region_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryRegionResponse::CopyFrom(const MsgQueryRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryRegionResponse::IsInitialized() const {

  return true;
}

void MsgQueryRegionResponse::Swap(MsgQueryRegionResponse* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    region_lst_.Swap(&other->region_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryRegionResponse_descriptor_;
  metadata.reflection = MsgQueryRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgEncryptorCode::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgEncryptorCode::MsgEncryptorCode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgEncryptorCode)
}

void MsgEncryptorCode::InitAsDefaultInstance() {
}

MsgEncryptorCode::MsgEncryptorCode(const MsgEncryptorCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgEncryptorCode)
}

void MsgEncryptorCode::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1011;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgEncryptorCode::~MsgEncryptorCode() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgEncryptorCode)
  SharedDtor();
}

void MsgEncryptorCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgEncryptorCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgEncryptorCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgEncryptorCode_descriptor_;
}

const MsgEncryptorCode& MsgEncryptorCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgEncryptorCode* MsgEncryptorCode::default_instance_ = NULL;

MsgEncryptorCode* MsgEncryptorCode::New() const {
  return new MsgEncryptorCode;
}

void MsgEncryptorCode::Clear() {
  msgtype_ = 1011;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgEncryptorCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgEncryptorCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_ENCRYPTOR_CODE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgEncryptorCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgEncryptorCode)
  return false;
#undef DO_
}

void MsgEncryptorCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgEncryptorCode)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_ENCRYPTOR_CODE];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgEncryptorCode)
}

::google::protobuf::uint8* MsgEncryptorCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgEncryptorCode)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_ENCRYPTOR_CODE];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgEncryptorCode)
  return target;
}

int MsgEncryptorCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_ENCRYPTOR_CODE];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgEncryptorCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgEncryptorCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgEncryptorCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgEncryptorCode::MergeFrom(const MsgEncryptorCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgEncryptorCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEncryptorCode::CopyFrom(const MsgEncryptorCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEncryptorCode::IsInitialized() const {

  return true;
}

void MsgEncryptorCode::Swap(MsgEncryptorCode* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgEncryptorCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgEncryptorCode_descriptor_;
  metadata.reflection = MsgEncryptorCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgEncryptorCodeResp::kMsgTypeFieldNumber;
const int MsgEncryptorCodeResp::kCodeFieldNumber;
#endif  // !_MSC_VER

MsgEncryptorCodeResp::MsgEncryptorCodeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgEncryptorCodeResp)
}

void MsgEncryptorCodeResp::InitAsDefaultInstance() {
}

MsgEncryptorCodeResp::MsgEncryptorCodeResp(const MsgEncryptorCodeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgEncryptorCodeResp)
}

void MsgEncryptorCodeResp::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1012;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgEncryptorCodeResp::~MsgEncryptorCodeResp() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgEncryptorCodeResp)
  SharedDtor();
}

void MsgEncryptorCodeResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgEncryptorCodeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgEncryptorCodeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgEncryptorCodeResp_descriptor_;
}

const MsgEncryptorCodeResp& MsgEncryptorCodeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgEncryptorCodeResp* MsgEncryptorCodeResp::default_instance_ = NULL;

MsgEncryptorCodeResp* MsgEncryptorCodeResp::New() const {
  return new MsgEncryptorCodeResp;
}

void MsgEncryptorCodeResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1012;
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgEncryptorCodeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgEncryptorCodeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_ENCRYPTOR_CODE_RESP];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional uint32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgEncryptorCodeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgEncryptorCodeResp)
  return false;
#undef DO_
}

void MsgEncryptorCodeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgEncryptorCodeResp)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_ENCRYPTOR_CODE_RESP];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional uint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgEncryptorCodeResp)
}

::google::protobuf::uint8* MsgEncryptorCodeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgEncryptorCodeResp)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_ENCRYPTOR_CODE_RESP];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional uint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgEncryptorCodeResp)
  return target;
}

int MsgEncryptorCodeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_ENCRYPTOR_CODE_RESP];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional uint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgEncryptorCodeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgEncryptorCodeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgEncryptorCodeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgEncryptorCodeResp::MergeFrom(const MsgEncryptorCodeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgEncryptorCodeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEncryptorCodeResp::CopyFrom(const MsgEncryptorCodeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEncryptorCodeResp::IsInitialized() const {

  return true;
}

void MsgEncryptorCodeResp::Swap(MsgEncryptorCodeResp* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgEncryptorCodeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgEncryptorCodeResp_descriptor_;
  metadata.reflection = MsgEncryptorCodeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgClientLoginToGS::kMsgTypeFieldNumber;
const int MsgClientLoginToGS::kIggIDFieldNumber;
const int MsgClientLoginToGS::kCheckTextFieldNumber;
const int MsgClientLoginToGS::kNickNameFieldNumber;
const int MsgClientLoginToGS::kGameIDFieldNumber;
const int MsgClientLoginToGS::kDeviceIDFieldNumber;
const int MsgClientLoginToGS::kVersionCodeFieldNumber;
const int MsgClientLoginToGS::kCliendModeFieldNumber;
const int MsgClientLoginToGS::kUploadDataFieldNumber;
const int MsgClientLoginToGS::kDeviceFieldNumber;
const int MsgClientLoginToGS::kClientSvnVerFieldNumber;
const int MsgClientLoginToGS::kIsAdultFieldNumber;
#endif  // !_MSC_VER

MsgClientLoginToGS::MsgClientLoginToGS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgClientLoginToGS)
}

void MsgClientLoginToGS::InitAsDefaultInstance() {
}

MsgClientLoginToGS::MsgClientLoginToGS(const MsgClientLoginToGS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgClientLoginToGS)
}

void MsgClientLoginToGS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1006;
  iggid_ = GOOGLE_LONGLONG(0);
  checktext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0;
  deviceid_ = 0;
  versioncode_ = 0;
  cliendmode_ = false;
  uploaddata_ = false;
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_svn_ver_ = 0;
  is_adult_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgClientLoginToGS::~MsgClientLoginToGS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgClientLoginToGS)
  SharedDtor();
}

void MsgClientLoginToGS::SharedDtor() {
  if (checktext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete checktext_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void MsgClientLoginToGS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgClientLoginToGS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgClientLoginToGS_descriptor_;
}

const MsgClientLoginToGS& MsgClientLoginToGS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgClientLoginToGS* MsgClientLoginToGS::default_instance_ = NULL;

MsgClientLoginToGS* MsgClientLoginToGS::New() const {
  return new MsgClientLoginToGS;
}

void MsgClientLoginToGS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgClientLoginToGS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(deviceid_, versioncode_);
    msgtype_ = 1006;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_checktext()) {
      if (checktext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        checktext_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    gameid_ = 0;
    cliendmode_ = false;
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(uploaddata_, client_svn_ver_);
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgClientLoginToGS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgClientLoginToGS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_LOGIN_TO_GS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IggID;
        break;
      }

      // optional int64 IggID = 2;
      case 2: {
        if (tag == 16) {
         parse_IggID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_checkText;
        break;
      }

      // optional string checkText = 3;
      case 3: {
        if (tag == 26) {
         parse_checkText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checktext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->checktext().data(), this->checktext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "checktext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickName;
        break;
      }

      // optional bytes nickName = 4;
      case 4: {
        if (tag == 34) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_GameID;
        break;
      }

      // optional int32 GameID = 5;
      case 5: {
        if (tag == 40) {
         parse_GameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_deviceID;
        break;
      }

      // optional int32 deviceID = 6;
      case 6: {
        if (tag == 48) {
         parse_deviceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_versionCode;
        break;
      }

      // optional int32 versionCode = 7;
      case 7: {
        if (tag == 56) {
         parse_versionCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &versioncode_)));
          set_has_versioncode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_CliendMode;
        break;
      }

      // optional bool CliendMode = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_CliendMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cliendmode_)));
          set_has_cliendmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_UploadData;
        break;
      }

      // optional bool UploadData = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_UploadData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uploaddata_)));
          set_has_uploaddata();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Device;
        break;
      }

      // optional string Device = 10;
      case 10: {
        if (tag == 82) {
         parse_Device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_client_svn_ver;
        break;
      }

      // optional int32 client_svn_ver = 11;
      case 11: {
        if (tag == 88) {
         parse_client_svn_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_svn_ver_)));
          set_has_client_svn_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_adult;
        break;
      }

      // optional bool is_adult = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_is_adult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_adult_)));
          set_has_is_adult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgClientLoginToGS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgClientLoginToGS)
  return false;
#undef DO_
}

void MsgClientLoginToGS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgClientLoginToGS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_LOGIN_TO_GS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional string checkText = 3;
  if (has_checktext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checktext().data(), this->checktext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "checktext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->checktext(), output);
  }

  // optional bytes nickName = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->nickname(), output);
  }

  // optional int32 GameID = 5;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gameid(), output);
  }

  // optional int32 deviceID = 6;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->deviceid(), output);
  }

  // optional int32 versionCode = 7;
  if (has_versioncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->versioncode(), output);
  }

  // optional bool CliendMode = 8 [default = false];
  if (has_cliendmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->cliendmode(), output);
  }

  // optional bool UploadData = 9 [default = false];
  if (has_uploaddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->uploaddata(), output);
  }

  // optional string Device = 10;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->device(), output);
  }

  // optional int32 client_svn_ver = 11;
  if (has_client_svn_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->client_svn_ver(), output);
  }

  // optional bool is_adult = 12 [default = false];
  if (has_is_adult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_adult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgClientLoginToGS)
}

::google::protobuf::uint8* MsgClientLoginToGS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgClientLoginToGS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_LOGIN_TO_GS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional string checkText = 3;
  if (has_checktext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checktext().data(), this->checktext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "checktext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->checktext(), target);
  }

  // optional bytes nickName = 4;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->nickname(), target);
  }

  // optional int32 GameID = 5;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gameid(), target);
  }

  // optional int32 deviceID = 6;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->deviceid(), target);
  }

  // optional int32 versionCode = 7;
  if (has_versioncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->versioncode(), target);
  }

  // optional bool CliendMode = 8 [default = false];
  if (has_cliendmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->cliendmode(), target);
  }

  // optional bool UploadData = 9 [default = false];
  if (has_uploaddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->uploaddata(), target);
  }

  // optional string Device = 10;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->device(), target);
  }

  // optional int32 client_svn_ver = 11;
  if (has_client_svn_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->client_svn_ver(), target);
  }

  // optional bool is_adult = 12 [default = false];
  if (has_is_adult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_adult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgClientLoginToGS)
  return target;
}

int MsgClientLoginToGS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_LOGIN_TO_GS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 IggID = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string checkText = 3;
    if (has_checktext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checktext());
    }

    // optional bytes nickName = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional int32 GameID = 5;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 deviceID = 6;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deviceid());
    }

    // optional int32 versionCode = 7;
    if (has_versioncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->versioncode());
    }

    // optional bool CliendMode = 8 [default = false];
    if (has_cliendmode()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool UploadData = 9 [default = false];
    if (has_uploaddata()) {
      total_size += 1 + 1;
    }

    // optional string Device = 10;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional int32 client_svn_ver = 11;
    if (has_client_svn_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_svn_ver());
    }

    // optional bool is_adult = 12 [default = false];
    if (has_is_adult()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgClientLoginToGS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgClientLoginToGS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgClientLoginToGS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgClientLoginToGS::MergeFrom(const MsgClientLoginToGS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_checktext()) {
      set_checktext(from.checktext());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_versioncode()) {
      set_versioncode(from.versioncode());
    }
    if (from.has_cliendmode()) {
      set_cliendmode(from.cliendmode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uploaddata()) {
      set_uploaddata(from.uploaddata());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_client_svn_ver()) {
      set_client_svn_ver(from.client_svn_ver());
    }
    if (from.has_is_adult()) {
      set_is_adult(from.is_adult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgClientLoginToGS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgClientLoginToGS::CopyFrom(const MsgClientLoginToGS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgClientLoginToGS::IsInitialized() const {

  return true;
}

void MsgClientLoginToGS::Swap(MsgClientLoginToGS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(checktext_, other->checktext_);
    std::swap(nickname_, other->nickname_);
    std::swap(gameid_, other->gameid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(versioncode_, other->versioncode_);
    std::swap(cliendmode_, other->cliendmode_);
    std::swap(uploaddata_, other->uploaddata_);
    std::swap(device_, other->device_);
    std::swap(client_svn_ver_, other->client_svn_ver_);
    std::swap(is_adult_, other->is_adult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgClientLoginToGS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgClientLoginToGS_descriptor_;
  metadata.reflection = MsgClientLoginToGS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGSResp::kMsgTypeFieldNumber;
const int MsgGSResp::kLoginResultFieldNumber;
const int MsgGSResp::kIggIDFieldNumber;
const int MsgGSResp::kLoginTimeFieldNumber;
const int MsgGSResp::kTimeZoneFieldNumber;
const int MsgGSResp::kDeviceChangedFieldNumber;
const int MsgGSResp::kLastClientUploadDataSerialFieldNumber;
const int MsgGSResp::kClientHistoryMsgFieldNumber;
const int MsgGSResp::kNewbieStepFieldNumber;
#endif  // !_MSC_VER

MsgGSResp::MsgGSResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgGSResp)
}

void MsgGSResp::InitAsDefaultInstance() {
}

MsgGSResp::MsgGSResp(const MsgGSResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgGSResp)
}

void MsgGSResp::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1002;
  loginresult_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  logintime_ = GOOGLE_LONGLONG(0);
  timezone_ = 0;
  devicechanged_ = false;
  lastclientuploaddataserial_ = GOOGLE_LONGLONG(0);
  client_history_msg_ = 0;
  newbiestep_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGSResp::~MsgGSResp() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgGSResp)
  SharedDtor();
}

void MsgGSResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGSResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGSResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGSResp_descriptor_;
}

const MsgGSResp& MsgGSResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgGSResp* MsgGSResp::default_instance_ = NULL;

MsgGSResp* MsgGSResp::New() const {
  return new MsgGSResp;
}

void MsgGSResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGSResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(loginresult_, client_history_msg_);
    msgtype_ = 1002;
  }
  newbiestep_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGSResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgGSResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GS_RESP];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_loginResult;
        break;
      }

      // optional .MsgPB.LOGIN_RESULT loginResult = 2;
      case 2: {
        if (tag == 16) {
         parse_loginResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::LOGIN_RESULT_IsValid(value)) {
            set_loginresult(static_cast< ::MsgPB::LOGIN_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IggID;
        break;
      }

      // optional int64 IggID = 3;
      case 3: {
        if (tag == 24) {
         parse_IggID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LoginTime;
        break;
      }

      // optional int64 LoginTime = 4;
      case 4: {
        if (tag == 32) {
         parse_LoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TimeZone;
        break;
      }

      // optional int32 TimeZone = 5;
      case 5: {
        if (tag == 40) {
         parse_TimeZone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_)));
          set_has_timezone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DeviceChanged;
        break;
      }

      // optional bool DeviceChanged = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_DeviceChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &devicechanged_)));
          set_has_devicechanged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_LastClientUploadDataSerial;
        break;
      }

      // optional int64 LastClientUploadDataSerial = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_LastClientUploadDataSerial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastclientuploaddataserial_)));
          set_has_lastclientuploaddataserial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Client_History_Msg;
        break;
      }

      // optional int32 Client_History_Msg = 8;
      case 8: {
        if (tag == 64) {
         parse_Client_History_Msg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_history_msg_)));
          set_has_client_history_msg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_NewbieStep;
        break;
      }

      // optional int32 NewbieStep = 9;
      case 9: {
        if (tag == 72) {
         parse_NewbieStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newbiestep_)));
          set_has_newbiestep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgGSResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgGSResp)
  return false;
#undef DO_
}

void MsgGSResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgGSResp)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GS_RESP];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .MsgPB.LOGIN_RESULT loginResult = 2;
  if (has_loginresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->loginresult(), output);
  }

  // optional int64 IggID = 3;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iggid(), output);
  }

  // optional int64 LoginTime = 4;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->logintime(), output);
  }

  // optional int32 TimeZone = 5;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timezone(), output);
  }

  // optional bool DeviceChanged = 6 [default = false];
  if (has_devicechanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->devicechanged(), output);
  }

  // optional int64 LastClientUploadDataSerial = 7 [default = 0];
  if (has_lastclientuploaddataserial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lastclientuploaddataserial(), output);
  }

  // optional int32 Client_History_Msg = 8;
  if (has_client_history_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->client_history_msg(), output);
  }

  // optional int32 NewbieStep = 9;
  if (has_newbiestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->newbiestep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgGSResp)
}

::google::protobuf::uint8* MsgGSResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgGSResp)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GS_RESP];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .MsgPB.LOGIN_RESULT loginResult = 2;
  if (has_loginresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->loginresult(), target);
  }

  // optional int64 IggID = 3;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iggid(), target);
  }

  // optional int64 LoginTime = 4;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->logintime(), target);
  }

  // optional int32 TimeZone = 5;
  if (has_timezone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timezone(), target);
  }

  // optional bool DeviceChanged = 6 [default = false];
  if (has_devicechanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->devicechanged(), target);
  }

  // optional int64 LastClientUploadDataSerial = 7 [default = 0];
  if (has_lastclientuploaddataserial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lastclientuploaddataserial(), target);
  }

  // optional int32 Client_History_Msg = 8;
  if (has_client_history_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->client_history_msg(), target);
  }

  // optional int32 NewbieStep = 9;
  if (has_newbiestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->newbiestep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgGSResp)
  return target;
}

int MsgGSResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_GS_RESP];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .MsgPB.LOGIN_RESULT loginResult = 2;
    if (has_loginresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loginresult());
    }

    // optional int64 IggID = 3;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 LoginTime = 4;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logintime());
    }

    // optional int32 TimeZone = 5;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone());
    }

    // optional bool DeviceChanged = 6 [default = false];
    if (has_devicechanged()) {
      total_size += 1 + 1;
    }

    // optional int64 LastClientUploadDataSerial = 7 [default = 0];
    if (has_lastclientuploaddataserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastclientuploaddataserial());
    }

    // optional int32 Client_History_Msg = 8;
    if (has_client_history_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_history_msg());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 NewbieStep = 9;
    if (has_newbiestep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newbiestep());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGSResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGSResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGSResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGSResp::MergeFrom(const MsgGSResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_loginresult()) {
      set_loginresult(from.loginresult());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_timezone()) {
      set_timezone(from.timezone());
    }
    if (from.has_devicechanged()) {
      set_devicechanged(from.devicechanged());
    }
    if (from.has_lastclientuploaddataserial()) {
      set_lastclientuploaddataserial(from.lastclientuploaddataserial());
    }
    if (from.has_client_history_msg()) {
      set_client_history_msg(from.client_history_msg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_newbiestep()) {
      set_newbiestep(from.newbiestep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGSResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGSResp::CopyFrom(const MsgGSResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGSResp::IsInitialized() const {

  return true;
}

void MsgGSResp::Swap(MsgGSResp* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(loginresult_, other->loginresult_);
    std::swap(iggid_, other->iggid_);
    std::swap(logintime_, other->logintime_);
    std::swap(timezone_, other->timezone_);
    std::swap(devicechanged_, other->devicechanged_);
    std::swap(lastclientuploaddataserial_, other->lastclientuploaddataserial_);
    std::swap(client_history_msg_, other->client_history_msg_);
    std::swap(newbiestep_, other->newbiestep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGSResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGSResp_descriptor_;
  metadata.reflection = MsgGSResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNotifyFirstLogin::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgNotifyFirstLogin::MsgNotifyFirstLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNotifyFirstLogin)
}

void MsgNotifyFirstLogin::InitAsDefaultInstance() {
}

MsgNotifyFirstLogin::MsgNotifyFirstLogin(const MsgNotifyFirstLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNotifyFirstLogin)
}

void MsgNotifyFirstLogin::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1007;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNotifyFirstLogin::~MsgNotifyFirstLogin() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNotifyFirstLogin)
  SharedDtor();
}

void MsgNotifyFirstLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNotifyFirstLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNotifyFirstLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNotifyFirstLogin_descriptor_;
}

const MsgNotifyFirstLogin& MsgNotifyFirstLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgNotifyFirstLogin* MsgNotifyFirstLogin::default_instance_ = NULL;

MsgNotifyFirstLogin* MsgNotifyFirstLogin::New() const {
  return new MsgNotifyFirstLogin;
}

void MsgNotifyFirstLogin::Clear() {
  msgtype_ = 1007;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNotifyFirstLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNotifyFirstLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_FIRST_LOGIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNotifyFirstLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNotifyFirstLogin)
  return false;
#undef DO_
}

void MsgNotifyFirstLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNotifyFirstLogin)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_FIRST_LOGIN];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNotifyFirstLogin)
}

::google::protobuf::uint8* MsgNotifyFirstLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNotifyFirstLogin)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_FIRST_LOGIN];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNotifyFirstLogin)
  return target;
}

int MsgNotifyFirstLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_FIRST_LOGIN];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNotifyFirstLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNotifyFirstLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNotifyFirstLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNotifyFirstLogin::MergeFrom(const MsgNotifyFirstLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNotifyFirstLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNotifyFirstLogin::CopyFrom(const MsgNotifyFirstLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNotifyFirstLogin::IsInitialized() const {

  return true;
}

void MsgNotifyFirstLogin::Swap(MsgNotifyFirstLogin* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNotifyFirstLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNotifyFirstLogin_descriptor_;
  metadata.reflection = MsgNotifyFirstLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgServerVersion::kMsgTypeFieldNumber;
const int MsgServerVersion::kVersionIdFieldNumber;
const int MsgServerVersion::kYearFieldNumber;
const int MsgServerVersion::kMonthFieldNumber;
const int MsgServerVersion::kDayFieldNumber;
const int MsgServerVersion::kHourFieldNumber;
const int MsgServerVersion::kMinuteFieldNumber;
const int MsgServerVersion::kSecondFieldNumber;
#endif  // !_MSC_VER

MsgServerVersion::MsgServerVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgServerVersion)
}

void MsgServerVersion::InitAsDefaultInstance() {
}

MsgServerVersion::MsgServerVersion(const MsgServerVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgServerVersion)
}

void MsgServerVersion::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1008;
  versionid_ = 0u;
  year_ = 0u;
  month_ = 0u;
  day_ = 0u;
  hour_ = 0u;
  minute_ = 0u;
  second_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgServerVersion::~MsgServerVersion() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgServerVersion)
  SharedDtor();
}

void MsgServerVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgServerVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgServerVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgServerVersion_descriptor_;
}

const MsgServerVersion& MsgServerVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgServerVersion* MsgServerVersion::default_instance_ = NULL;

MsgServerVersion* MsgServerVersion::New() const {
  return new MsgServerVersion;
}

void MsgServerVersion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgServerVersion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(versionid_, second_);
    msgtype_ = 1008;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgServerVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgServerVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_VERSION];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_versionId;
        break;
      }

      // optional uint32 versionId = 2;
      case 2: {
        if (tag == 16) {
         parse_versionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &versionid_)));
          set_has_versionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_year;
        break;
      }

      // optional uint32 year = 3;
      case 3: {
        if (tag == 24) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_month;
        break;
      }

      // optional uint32 month = 4;
      case 4: {
        if (tag == 32) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_day;
        break;
      }

      // optional uint32 day = 5;
      case 5: {
        if (tag == 40) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hour;
        break;
      }

      // optional uint32 hour = 6;
      case 6: {
        if (tag == 48) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_minute;
        break;
      }

      // optional uint32 minute = 7;
      case 7: {
        if (tag == 56) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_second;
        break;
      }

      // optional uint32 second = 8;
      case 8: {
        if (tag == 64) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgServerVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgServerVersion)
  return false;
#undef DO_
}

void MsgServerVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgServerVersion)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_VERSION];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional uint32 versionId = 2;
  if (has_versionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->versionid(), output);
  }

  // optional uint32 year = 3;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->year(), output);
  }

  // optional uint32 month = 4;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->month(), output);
  }

  // optional uint32 day = 5;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->day(), output);
  }

  // optional uint32 hour = 6;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hour(), output);
  }

  // optional uint32 minute = 7;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->minute(), output);
  }

  // optional uint32 second = 8;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgServerVersion)
}

::google::protobuf::uint8* MsgServerVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgServerVersion)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_VERSION];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional uint32 versionId = 2;
  if (has_versionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->versionid(), target);
  }

  // optional uint32 year = 3;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->year(), target);
  }

  // optional uint32 month = 4;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->month(), target);
  }

  // optional uint32 day = 5;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->day(), target);
  }

  // optional uint32 hour = 6;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hour(), target);
  }

  // optional uint32 minute = 7;
  if (has_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->minute(), target);
  }

  // optional uint32 second = 8;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgServerVersion)
  return target;
}

int MsgServerVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_VERSION];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional uint32 versionId = 2;
    if (has_versionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->versionid());
    }

    // optional uint32 year = 3;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // optional uint32 month = 4;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 day = 5;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 hour = 6;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

    // optional uint32 minute = 7;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minute());
    }

    // optional uint32 second = 8;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgServerVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgServerVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgServerVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgServerVersion::MergeFrom(const MsgServerVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_versionid()) {
      set_versionid(from.versionid());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_minute()) {
      set_minute(from.minute());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgServerVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgServerVersion::CopyFrom(const MsgServerVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgServerVersion::IsInitialized() const {

  return true;
}

void MsgServerVersion::Swap(MsgServerVersion* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(versionid_, other->versionid_);
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(hour_, other->hour_);
    std::swap(minute_, other->minute_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgServerVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgServerVersion_descriptor_;
  metadata.reflection = MsgServerVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUserLoginOtherPlace::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

MsgUserLoginOtherPlace::MsgUserLoginOtherPlace()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgUserLoginOtherPlace)
}

void MsgUserLoginOtherPlace::InitAsDefaultInstance() {
}

MsgUserLoginOtherPlace::MsgUserLoginOtherPlace(const MsgUserLoginOtherPlace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgUserLoginOtherPlace)
}

void MsgUserLoginOtherPlace::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1018;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserLoginOtherPlace::~MsgUserLoginOtherPlace() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgUserLoginOtherPlace)
  SharedDtor();
}

void MsgUserLoginOtherPlace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUserLoginOtherPlace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUserLoginOtherPlace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUserLoginOtherPlace_descriptor_;
}

const MsgUserLoginOtherPlace& MsgUserLoginOtherPlace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgUserLoginOtherPlace* MsgUserLoginOtherPlace::default_instance_ = NULL;

MsgUserLoginOtherPlace* MsgUserLoginOtherPlace::New() const {
  return new MsgUserLoginOtherPlace;
}

void MsgUserLoginOtherPlace::Clear() {
  msgtype_ = 1018;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUserLoginOtherPlace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgUserLoginOtherPlace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_USER_LOGIN_OTHER_PLACE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgUserLoginOtherPlace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgUserLoginOtherPlace)
  return false;
#undef DO_
}

void MsgUserLoginOtherPlace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgUserLoginOtherPlace)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_USER_LOGIN_OTHER_PLACE];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgUserLoginOtherPlace)
}

::google::protobuf::uint8* MsgUserLoginOtherPlace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgUserLoginOtherPlace)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_USER_LOGIN_OTHER_PLACE];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgUserLoginOtherPlace)
  return target;
}

int MsgUserLoginOtherPlace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_USER_LOGIN_OTHER_PLACE];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserLoginOtherPlace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUserLoginOtherPlace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUserLoginOtherPlace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUserLoginOtherPlace::MergeFrom(const MsgUserLoginOtherPlace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUserLoginOtherPlace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUserLoginOtherPlace::CopyFrom(const MsgUserLoginOtherPlace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserLoginOtherPlace::IsInitialized() const {

  return true;
}

void MsgUserLoginOtherPlace::Swap(MsgUserLoginOtherPlace* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUserLoginOtherPlace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUserLoginOtherPlace_descriptor_;
  metadata.reflection = MsgUserLoginOtherPlace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgClientReConnectToGS::kMsgTypeFieldNumber;
const int MsgClientReConnectToGS::kIggIDFieldNumber;
const int MsgClientReConnectToGS::kCheckTextFieldNumber;
const int MsgClientReConnectToGS::kMsgMd5FieldNumber;
const int MsgClientReConnectToGS::kMsgLastRecvMsgIndexFieldNumber;
const int MsgClientReConnectToGS::kCliendModeFieldNumber;
const int MsgClientReConnectToGS::kUploadDataFieldNumber;
#endif  // !_MSC_VER

MsgClientReConnectToGS::MsgClientReConnectToGS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgClientReConnectToGS)
}

void MsgClientReConnectToGS::InitAsDefaultInstance() {
}

MsgClientReConnectToGS::MsgClientReConnectToGS(const MsgClientReConnectToGS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgClientReConnectToGS)
}

void MsgClientReConnectToGS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1017;
  iggid_ = GOOGLE_LONGLONG(0);
  checktext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msglastrecvmsgindex_ = GOOGLE_LONGLONG(0);
  cliendmode_ = false;
  uploaddata_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgClientReConnectToGS::~MsgClientReConnectToGS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgClientReConnectToGS)
  SharedDtor();
}

void MsgClientReConnectToGS::SharedDtor() {
  if (checktext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete checktext_;
  }
  if (msgmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgmd5_;
  }
  if (this != default_instance_) {
  }
}

void MsgClientReConnectToGS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgClientReConnectToGS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgClientReConnectToGS_descriptor_;
}

const MsgClientReConnectToGS& MsgClientReConnectToGS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgClientReConnectToGS* MsgClientReConnectToGS::default_instance_ = NULL;

MsgClientReConnectToGS* MsgClientReConnectToGS::New() const {
  return new MsgClientReConnectToGS;
}

void MsgClientReConnectToGS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgClientReConnectToGS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(cliendmode_, msglastrecvmsgindex_);
    msgtype_ = 1017;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_checktext()) {
      if (checktext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        checktext_->clear();
      }
    }
    if (has_msgmd5()) {
      if (msgmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgmd5_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgClientReConnectToGS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgClientReConnectToGS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_RECONNECT_TO_GS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IggID;
        break;
      }

      // optional int64 IggID = 2;
      case 2: {
        if (tag == 16) {
         parse_IggID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_checkText;
        break;
      }

      // optional string checkText = 3;
      case 3: {
        if (tag == 26) {
         parse_checkText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checktext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->checktext().data(), this->checktext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "checktext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgMd5;
        break;
      }

      // optional string msgMd5 = 4;
      case 4: {
        if (tag == 34) {
         parse_msgMd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgmd5().data(), this->msgmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgmd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msgLastRecvMsgIndex;
        break;
      }

      // optional int64 msgLastRecvMsgIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_msgLastRecvMsgIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msglastrecvmsgindex_)));
          set_has_msglastrecvmsgindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CliendMode;
        break;
      }

      // optional bool CliendMode = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_CliendMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cliendmode_)));
          set_has_cliendmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_UploadData;
        break;
      }

      // optional bool UploadData = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_UploadData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uploaddata_)));
          set_has_uploaddata();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgClientReConnectToGS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgClientReConnectToGS)
  return false;
#undef DO_
}

void MsgClientReConnectToGS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgClientReConnectToGS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_RECONNECT_TO_GS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional string checkText = 3;
  if (has_checktext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checktext().data(), this->checktext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "checktext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->checktext(), output);
  }

  // optional string msgMd5 = 4;
  if (has_msgmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgmd5().data(), this->msgmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgmd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msgmd5(), output);
  }

  // optional int64 msgLastRecvMsgIndex = 5;
  if (has_msglastrecvmsgindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->msglastrecvmsgindex(), output);
  }

  // optional bool CliendMode = 6 [default = false];
  if (has_cliendmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cliendmode(), output);
  }

  // optional bool UploadData = 7 [default = false];
  if (has_uploaddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->uploaddata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgClientReConnectToGS)
}

::google::protobuf::uint8* MsgClientReConnectToGS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgClientReConnectToGS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_RECONNECT_TO_GS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional string checkText = 3;
  if (has_checktext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checktext().data(), this->checktext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "checktext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->checktext(), target);
  }

  // optional string msgMd5 = 4;
  if (has_msgmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgmd5().data(), this->msgmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgmd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msgmd5(), target);
  }

  // optional int64 msgLastRecvMsgIndex = 5;
  if (has_msglastrecvmsgindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->msglastrecvmsgindex(), target);
  }

  // optional bool CliendMode = 6 [default = false];
  if (has_cliendmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cliendmode(), target);
  }

  // optional bool UploadData = 7 [default = false];
  if (has_uploaddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->uploaddata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgClientReConnectToGS)
  return target;
}

int MsgClientReConnectToGS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_RECONNECT_TO_GS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 IggID = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string checkText = 3;
    if (has_checktext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checktext());
    }

    // optional string msgMd5 = 4;
    if (has_msgmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgmd5());
    }

    // optional int64 msgLastRecvMsgIndex = 5;
    if (has_msglastrecvmsgindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msglastrecvmsgindex());
    }

    // optional bool CliendMode = 6 [default = false];
    if (has_cliendmode()) {
      total_size += 1 + 1;
    }

    // optional bool UploadData = 7 [default = false];
    if (has_uploaddata()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgClientReConnectToGS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgClientReConnectToGS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgClientReConnectToGS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgClientReConnectToGS::MergeFrom(const MsgClientReConnectToGS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_checktext()) {
      set_checktext(from.checktext());
    }
    if (from.has_msgmd5()) {
      set_msgmd5(from.msgmd5());
    }
    if (from.has_msglastrecvmsgindex()) {
      set_msglastrecvmsgindex(from.msglastrecvmsgindex());
    }
    if (from.has_cliendmode()) {
      set_cliendmode(from.cliendmode());
    }
    if (from.has_uploaddata()) {
      set_uploaddata(from.uploaddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgClientReConnectToGS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgClientReConnectToGS::CopyFrom(const MsgClientReConnectToGS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgClientReConnectToGS::IsInitialized() const {

  return true;
}

void MsgClientReConnectToGS::Swap(MsgClientReConnectToGS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(checktext_, other->checktext_);
    std::swap(msgmd5_, other->msgmd5_);
    std::swap(msglastrecvmsgindex_, other->msglastrecvmsgindex_);
    std::swap(cliendmode_, other->cliendmode_);
    std::swap(uploaddata_, other->uploaddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgClientReConnectToGS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgClientReConnectToGS_descriptor_;
  metadata.reflection = MsgClientReConnectToGS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgServerRecvLastPack::kMsgTypeFieldNumber;
const int MsgServerRecvLastPack::kRetFieldNumber;
const int MsgServerRecvLastPack::kMsgMd5FieldNumber;
const int MsgServerRecvLastPack::kMsgLastRecvMsgIndexFieldNumber;
const int MsgServerRecvLastPack::kLoginTimeFieldNumber;
const int MsgServerRecvLastPack::kTimeZoneFieldNumber;
#endif  // !_MSC_VER

MsgServerRecvLastPack::MsgServerRecvLastPack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgServerRecvLastPack)
}

void MsgServerRecvLastPack::InitAsDefaultInstance() {
}

MsgServerRecvLastPack::MsgServerRecvLastPack(const MsgServerRecvLastPack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgServerRecvLastPack)
}

void MsgServerRecvLastPack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1021;
  ret_ = 0;
  msgmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msglastrecvmsgindex_ = GOOGLE_LONGLONG(0);
  logintime_ = 0;
  timezone_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgServerRecvLastPack::~MsgServerRecvLastPack() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgServerRecvLastPack)
  SharedDtor();
}

void MsgServerRecvLastPack::SharedDtor() {
  if (msgmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgmd5_;
  }
  if (this != default_instance_) {
  }
}

void MsgServerRecvLastPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgServerRecvLastPack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgServerRecvLastPack_descriptor_;
}

const MsgServerRecvLastPack& MsgServerRecvLastPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgServerRecvLastPack* MsgServerRecvLastPack::default_instance_ = NULL;

MsgServerRecvLastPack* MsgServerRecvLastPack::New() const {
  return new MsgServerRecvLastPack;
}

void MsgServerRecvLastPack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgServerRecvLastPack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(msglastrecvmsgindex_, timezone_);
    msgtype_ = 1021;
    ret_ = 0;
    if (has_msgmd5()) {
      if (msgmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgmd5_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgServerRecvLastPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgServerRecvLastPack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_RECV_LAST_PACK];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msgMd5;
        break;
      }

      // optional string msgMd5 = 3;
      case 3: {
        if (tag == 26) {
         parse_msgMd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgmd5().data(), this->msgmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgmd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msgLastRecvMsgIndex;
        break;
      }

      // optional int64 msgLastRecvMsgIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_msgLastRecvMsgIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msglastrecvmsgindex_)));
          set_has_msglastrecvmsgindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_loginTime;
        break;
      }

      // optional int32 loginTime = 5;
      case 5: {
        if (tag == 40) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_timeZone;
        break;
      }

      // optional int32 timeZone = 6;
      case 6: {
        if (tag == 48) {
         parse_timeZone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_)));
          set_has_timezone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgServerRecvLastPack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgServerRecvLastPack)
  return false;
#undef DO_
}

void MsgServerRecvLastPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgServerRecvLastPack)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_RECV_LAST_PACK];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional string msgMd5 = 3;
  if (has_msgmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgmd5().data(), this->msgmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgmd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msgmd5(), output);
  }

  // optional int64 msgLastRecvMsgIndex = 4;
  if (has_msglastrecvmsgindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->msglastrecvmsgindex(), output);
  }

  // optional int32 loginTime = 5;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->logintime(), output);
  }

  // optional int32 timeZone = 6;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timezone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgServerRecvLastPack)
}

::google::protobuf::uint8* MsgServerRecvLastPack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgServerRecvLastPack)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_RECV_LAST_PACK];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional string msgMd5 = 3;
  if (has_msgmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgmd5().data(), this->msgmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgmd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgmd5(), target);
  }

  // optional int64 msgLastRecvMsgIndex = 4;
  if (has_msglastrecvmsgindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->msglastrecvmsgindex(), target);
  }

  // optional int32 loginTime = 5;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->logintime(), target);
  }

  // optional int32 timeZone = 6;
  if (has_timezone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->timezone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgServerRecvLastPack)
  return target;
}

int MsgServerRecvLastPack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_RECV_LAST_PACK];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional string msgMd5 = 3;
    if (has_msgmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgmd5());
    }

    // optional int64 msgLastRecvMsgIndex = 4;
    if (has_msglastrecvmsgindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msglastrecvmsgindex());
    }

    // optional int32 loginTime = 5;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logintime());
    }

    // optional int32 timeZone = 6;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgServerRecvLastPack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgServerRecvLastPack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgServerRecvLastPack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgServerRecvLastPack::MergeFrom(const MsgServerRecvLastPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_msgmd5()) {
      set_msgmd5(from.msgmd5());
    }
    if (from.has_msglastrecvmsgindex()) {
      set_msglastrecvmsgindex(from.msglastrecvmsgindex());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_timezone()) {
      set_timezone(from.timezone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgServerRecvLastPack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgServerRecvLastPack::CopyFrom(const MsgServerRecvLastPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgServerRecvLastPack::IsInitialized() const {

  return true;
}

void MsgServerRecvLastPack::Swap(MsgServerRecvLastPack* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(ret_, other->ret_);
    std::swap(msgmd5_, other->msgmd5_);
    std::swap(msglastrecvmsgindex_, other->msglastrecvmsgindex_);
    std::swap(logintime_, other->logintime_);
    std::swap(timezone_, other->timezone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgServerRecvLastPack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgServerRecvLastPack_descriptor_;
  metadata.reflection = MsgServerRecvLastPack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgClientLoginIntra::kMsgTypeFieldNumber;
const int MsgClientLoginIntra::kIggIDFieldNumber;
const int MsgClientLoginIntra::kPlatIdFieldNumber;
const int MsgClientLoginIntra::kPlatAccountFieldNumber;
const int MsgClientLoginIntra::kAreaIdFieldNumber;
const int MsgClientLoginIntra::kCountryCodeFieldNumber;
#endif  // !_MSC_VER

MsgClientLoginIntra::MsgClientLoginIntra()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgClientLoginIntra)
}

void MsgClientLoginIntra::InitAsDefaultInstance() {
}

MsgClientLoginIntra::MsgClientLoginIntra(const MsgClientLoginIntra& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgClientLoginIntra)
}

void MsgClientLoginIntra::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1019;
  iggid_ = GOOGLE_LONGLONG(0);
  platid_ = 0;
  plataccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_id_ = 0u;
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgClientLoginIntra::~MsgClientLoginIntra() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgClientLoginIntra)
  SharedDtor();
}

void MsgClientLoginIntra::SharedDtor() {
  if (plataccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete plataccount_;
  }
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_code_;
  }
  if (this != default_instance_) {
  }
}

void MsgClientLoginIntra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgClientLoginIntra::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgClientLoginIntra_descriptor_;
}

const MsgClientLoginIntra& MsgClientLoginIntra::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgClientLoginIntra* MsgClientLoginIntra::default_instance_ = NULL;

MsgClientLoginIntra* MsgClientLoginIntra::New() const {
  return new MsgClientLoginIntra;
}

void MsgClientLoginIntra::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    msgtype_ = 1019;
    iggid_ = GOOGLE_LONGLONG(0);
    platid_ = 0;
    if (has_plataccount()) {
      if (plataccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        plataccount_->clear();
      }
    }
    area_id_ = 0u;
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgClientLoginIntra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgClientLoginIntra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_LOGIN_INTRA];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IggID;
        break;
      }

      // optional int64 IggID = 2;
      case 2: {
        if (tag == 16) {
         parse_IggID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_platId;
        break;
      }

      // optional int32 platId = 3;
      case 3: {
        if (tag == 24) {
         parse_platId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_platAccount;
        break;
      }

      // optional string platAccount = 4;
      case 4: {
        if (tag == 34) {
         parse_platAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plataccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plataccount().data(), this->plataccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plataccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 5;
      case 5: {
        if (tag == 40) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_country_code;
        break;
      }

      // optional string country_code = 6;
      case 6: {
        if (tag == 50) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgClientLoginIntra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgClientLoginIntra)
  return false;
#undef DO_
}

void MsgClientLoginIntra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgClientLoginIntra)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_LOGIN_INTRA];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 platId = 3;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->platid(), output);
  }

  // optional string platAccount = 4;
  if (has_plataccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plataccount().data(), this->plataccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plataccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->plataccount(), output);
  }

  // optional uint32 area_id = 5;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->area_id(), output);
  }

  // optional string country_code = 6;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->country_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgClientLoginIntra)
}

::google::protobuf::uint8* MsgClientLoginIntra::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgClientLoginIntra)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_LOGIN_INTRA];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 platId = 3;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->platid(), target);
  }

  // optional string platAccount = 4;
  if (has_plataccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plataccount().data(), this->plataccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plataccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->plataccount(), target);
  }

  // optional uint32 area_id = 5;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->area_id(), target);
  }

  // optional string country_code = 6;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->country_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgClientLoginIntra)
  return target;
}

int MsgClientLoginIntra::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_CLIENT_LOGIN_INTRA];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 IggID = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 platId = 3;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platid());
    }

    // optional string platAccount = 4;
    if (has_plataccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plataccount());
    }

    // optional uint32 area_id = 5;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional string country_code = 6;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgClientLoginIntra::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgClientLoginIntra* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgClientLoginIntra*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgClientLoginIntra::MergeFrom(const MsgClientLoginIntra& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_plataccount()) {
      set_plataccount(from.plataccount());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgClientLoginIntra::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgClientLoginIntra::CopyFrom(const MsgClientLoginIntra& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgClientLoginIntra::IsInitialized() const {

  return true;
}

void MsgClientLoginIntra::Swap(MsgClientLoginIntra* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(platid_, other->platid_);
    std::swap(plataccount_, other->plataccount_);
    std::swap(area_id_, other->area_id_);
    std::swap(country_code_, other->country_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgClientLoginIntra::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgClientLoginIntra_descriptor_;
  metadata.reflection = MsgClientLoginIntra_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoginQueueUpStart::kMsgTypeFieldNumber;
const int MsgLoginQueueUpStart::kIggIDFieldNumber;
#endif  // !_MSC_VER

MsgLoginQueueUpStart::MsgLoginQueueUpStart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgLoginQueueUpStart)
}

void MsgLoginQueueUpStart::InitAsDefaultInstance() {
}

MsgLoginQueueUpStart::MsgLoginQueueUpStart(const MsgLoginQueueUpStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgLoginQueueUpStart)
}

void MsgLoginQueueUpStart::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1081;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginQueueUpStart::~MsgLoginQueueUpStart() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgLoginQueueUpStart)
  SharedDtor();
}

void MsgLoginQueueUpStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLoginQueueUpStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoginQueueUpStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginQueueUpStart_descriptor_;
}

const MsgLoginQueueUpStart& MsgLoginQueueUpStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgLoginQueueUpStart* MsgLoginQueueUpStart::default_instance_ = NULL;

MsgLoginQueueUpStart* MsgLoginQueueUpStart::New() const {
  return new MsgLoginQueueUpStart;
}

void MsgLoginQueueUpStart::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1081;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginQueueUpStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgLoginQueueUpStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_QUEUE_UP_START];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IggID;
        break;
      }

      // optional int64 IggID = 2;
      case 2: {
        if (tag == 16) {
         parse_IggID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgLoginQueueUpStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgLoginQueueUpStart)
  return false;
#undef DO_
}

void MsgLoginQueueUpStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgLoginQueueUpStart)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_QUEUE_UP_START];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgLoginQueueUpStart)
}

::google::protobuf::uint8* MsgLoginQueueUpStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgLoginQueueUpStart)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_QUEUE_UP_START];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgLoginQueueUpStart)
  return target;
}

int MsgLoginQueueUpStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_QUEUE_UP_START];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 IggID = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoginQueueUpStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginQueueUpStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginQueueUpStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginQueueUpStart::MergeFrom(const MsgLoginQueueUpStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginQueueUpStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginQueueUpStart::CopyFrom(const MsgLoginQueueUpStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginQueueUpStart::IsInitialized() const {

  return true;
}

void MsgLoginQueueUpStart::Swap(MsgLoginQueueUpStart* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginQueueUpStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginQueueUpStart_descriptor_;
  metadata.reflection = MsgLoginQueueUpStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::kIggIDFieldNumber;
const int MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::kCurPosFieldNumber;
#endif  // !_MSC_VER

MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::MsgLoginQueueUpInfoIntra_LoginQueueUpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo)
}

void MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::InitAsDefaultInstance() {
}

MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::MsgLoginQueueUpInfoIntra_LoginQueueUpInfo(const MsgLoginQueueUpInfoIntra_LoginQueueUpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo)
}

void MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::SharedCtor() {
  _cached_size_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  curpos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::~MsgLoginQueueUpInfoIntra_LoginQueueUpInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo)
  SharedDtor();
}

void MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginQueueUpInfoIntra_LoginQueueUpInfo_descriptor_;
}

const MsgLoginQueueUpInfoIntra_LoginQueueUpInfo& MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgLoginQueueUpInfoIntra_LoginQueueUpInfo* MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::default_instance_ = NULL;

MsgLoginQueueUpInfoIntra_LoginQueueUpInfo* MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::New() const {
  return new MsgLoginQueueUpInfoIntra_LoginQueueUpInfo;
}

void MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgLoginQueueUpInfoIntra_LoginQueueUpInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(iggid_, curpos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 IggID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curPos;
        break;
      }

      // optional int32 curPos = 2;
      case 2: {
        if (tag == 16) {
         parse_curPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curpos_)));
          set_has_curpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo)
  return false;
#undef DO_
}

void MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo)
  // optional int64 IggID = 1;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iggid(), output);
  }

  // optional int32 curPos = 2;
  if (has_curpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo)
}

::google::protobuf::uint8* MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo)
  // optional int64 IggID = 1;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iggid(), target);
  }

  // optional int32 curPos = 2;
  if (has_curpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo)
  return target;
}

int MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 IggID = 1;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 curPos = 2;
    if (has_curpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginQueueUpInfoIntra_LoginQueueUpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginQueueUpInfoIntra_LoginQueueUpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::MergeFrom(const MsgLoginQueueUpInfoIntra_LoginQueueUpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_curpos()) {
      set_curpos(from.curpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::CopyFrom(const MsgLoginQueueUpInfoIntra_LoginQueueUpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::IsInitialized() const {

  return true;
}

void MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::Swap(MsgLoginQueueUpInfoIntra_LoginQueueUpInfo* other) {
  if (other != this) {
    std::swap(iggid_, other->iggid_);
    std::swap(curpos_, other->curpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginQueueUpInfoIntra_LoginQueueUpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginQueueUpInfoIntra_LoginQueueUpInfo_descriptor_;
  metadata.reflection = MsgLoginQueueUpInfoIntra_LoginQueueUpInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgLoginQueueUpInfoIntra::kMsgTypeFieldNumber;
const int MsgLoginQueueUpInfoIntra::kLoginQueueInfoFieldNumber;
#endif  // !_MSC_VER

MsgLoginQueueUpInfoIntra::MsgLoginQueueUpInfoIntra()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgLoginQueueUpInfoIntra)
}

void MsgLoginQueueUpInfoIntra::InitAsDefaultInstance() {
}

MsgLoginQueueUpInfoIntra::MsgLoginQueueUpInfoIntra(const MsgLoginQueueUpInfoIntra& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgLoginQueueUpInfoIntra)
}

void MsgLoginQueueUpInfoIntra::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1083;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginQueueUpInfoIntra::~MsgLoginQueueUpInfoIntra() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgLoginQueueUpInfoIntra)
  SharedDtor();
}

void MsgLoginQueueUpInfoIntra::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLoginQueueUpInfoIntra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoginQueueUpInfoIntra::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginQueueUpInfoIntra_descriptor_;
}

const MsgLoginQueueUpInfoIntra& MsgLoginQueueUpInfoIntra::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgLoginQueueUpInfoIntra* MsgLoginQueueUpInfoIntra::default_instance_ = NULL;

MsgLoginQueueUpInfoIntra* MsgLoginQueueUpInfoIntra::New() const {
  return new MsgLoginQueueUpInfoIntra;
}

void MsgLoginQueueUpInfoIntra::Clear() {
  msgtype_ = 1083;
  loginqueueinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginQueueUpInfoIntra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgLoginQueueUpInfoIntra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_QUEUE_UP_INFO_INTRA];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LoginQueueInfo;
        break;
      }

      // repeated .MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo LoginQueueInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_LoginQueueInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loginqueueinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LoginQueueInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgLoginQueueUpInfoIntra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgLoginQueueUpInfoIntra)
  return false;
#undef DO_
}

void MsgLoginQueueUpInfoIntra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgLoginQueueUpInfoIntra)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_QUEUE_UP_INFO_INTRA];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // repeated .MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo LoginQueueInfo = 2;
  for (int i = 0; i < this->loginqueueinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loginqueueinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgLoginQueueUpInfoIntra)
}

::google::protobuf::uint8* MsgLoginQueueUpInfoIntra::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgLoginQueueUpInfoIntra)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_QUEUE_UP_INFO_INTRA];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // repeated .MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo LoginQueueInfo = 2;
  for (int i = 0; i < this->loginqueueinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loginqueueinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgLoginQueueUpInfoIntra)
  return target;
}

int MsgLoginQueueUpInfoIntra::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_QUEUE_UP_INFO_INTRA];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  // repeated .MsgPB.MsgLoginQueueUpInfoIntra.LoginQueueUpInfo LoginQueueInfo = 2;
  total_size += 1 * this->loginqueueinfo_size();
  for (int i = 0; i < this->loginqueueinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loginqueueinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoginQueueUpInfoIntra::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginQueueUpInfoIntra* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginQueueUpInfoIntra*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginQueueUpInfoIntra::MergeFrom(const MsgLoginQueueUpInfoIntra& from) {
  GOOGLE_CHECK_NE(&from, this);
  loginqueueinfo_.MergeFrom(from.loginqueueinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginQueueUpInfoIntra::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginQueueUpInfoIntra::CopyFrom(const MsgLoginQueueUpInfoIntra& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginQueueUpInfoIntra::IsInitialized() const {

  return true;
}

void MsgLoginQueueUpInfoIntra::Swap(MsgLoginQueueUpInfoIntra* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    loginqueueinfo_.Swap(&other->loginqueueinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginQueueUpInfoIntra::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginQueueUpInfoIntra_descriptor_;
  metadata.reflection = MsgLoginQueueUpInfoIntra_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNotifyUserDisconnLoginSvr::kMsgTypeFieldNumber;
const int MsgNotifyUserDisconnLoginSvr::kIggIDFieldNumber;
#endif  // !_MSC_VER

MsgNotifyUserDisconnLoginSvr::MsgNotifyUserDisconnLoginSvr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgNotifyUserDisconnLoginSvr)
}

void MsgNotifyUserDisconnLoginSvr::InitAsDefaultInstance() {
}

MsgNotifyUserDisconnLoginSvr::MsgNotifyUserDisconnLoginSvr(const MsgNotifyUserDisconnLoginSvr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgNotifyUserDisconnLoginSvr)
}

void MsgNotifyUserDisconnLoginSvr::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1082;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNotifyUserDisconnLoginSvr::~MsgNotifyUserDisconnLoginSvr() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgNotifyUserDisconnLoginSvr)
  SharedDtor();
}

void MsgNotifyUserDisconnLoginSvr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNotifyUserDisconnLoginSvr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNotifyUserDisconnLoginSvr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNotifyUserDisconnLoginSvr_descriptor_;
}

const MsgNotifyUserDisconnLoginSvr& MsgNotifyUserDisconnLoginSvr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgNotifyUserDisconnLoginSvr* MsgNotifyUserDisconnLoginSvr::default_instance_ = NULL;

MsgNotifyUserDisconnLoginSvr* MsgNotifyUserDisconnLoginSvr::New() const {
  return new MsgNotifyUserDisconnLoginSvr;
}

void MsgNotifyUserDisconnLoginSvr::Clear() {
  msgtype_ = 1082;
  iggid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNotifyUserDisconnLoginSvr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgNotifyUserDisconnLoginSvr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_USER_DISCONN_LOGIN_SVR];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IggID;
        break;
      }

      // repeated int64 IggID = 2;
      case 2: {
        if (tag == 16) {
         parse_IggID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_iggid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_iggid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IggID;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgNotifyUserDisconnLoginSvr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgNotifyUserDisconnLoginSvr)
  return false;
#undef DO_
}

void MsgNotifyUserDisconnLoginSvr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgNotifyUserDisconnLoginSvr)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_USER_DISCONN_LOGIN_SVR];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // repeated int64 IggID = 2;
  for (int i = 0; i < this->iggid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->iggid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgNotifyUserDisconnLoginSvr)
}

::google::protobuf::uint8* MsgNotifyUserDisconnLoginSvr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgNotifyUserDisconnLoginSvr)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_USER_DISCONN_LOGIN_SVR];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // repeated int64 IggID = 2;
  for (int i = 0; i < this->iggid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->iggid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgNotifyUserDisconnLoginSvr)
  return target;
}

int MsgNotifyUserDisconnLoginSvr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_NOTIFY_USER_DISCONN_LOGIN_SVR];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  // repeated int64 IggID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->iggid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->iggid(i));
    }
    total_size += 1 * this->iggid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNotifyUserDisconnLoginSvr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNotifyUserDisconnLoginSvr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNotifyUserDisconnLoginSvr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNotifyUserDisconnLoginSvr::MergeFrom(const MsgNotifyUserDisconnLoginSvr& from) {
  GOOGLE_CHECK_NE(&from, this);
  iggid_.MergeFrom(from.iggid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNotifyUserDisconnLoginSvr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNotifyUserDisconnLoginSvr::CopyFrom(const MsgNotifyUserDisconnLoginSvr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNotifyUserDisconnLoginSvr::IsInitialized() const {

  return true;
}

void MsgNotifyUserDisconnLoginSvr::Swap(MsgNotifyUserDisconnLoginSvr* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    iggid_.Swap(&other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNotifyUserDisconnLoginSvr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNotifyUserDisconnLoginSvr_descriptor_;
  metadata.reflection = MsgNotifyUserDisconnLoginSvr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoginServerValidate::kMsgTypeFieldNumber;
const int MsgLoginServerValidate::kIggIDFieldNumber;
const int MsgLoginServerValidate::kCheckTextFieldNumber;
const int MsgLoginServerValidate::kPlatIdFieldNumber;
const int MsgLoginServerValidate::kPlatAccountFieldNumber;
const int MsgLoginServerValidate::kDbkeyFieldNumber;
const int MsgLoginServerValidate::kGsIdFieldNumber;
const int MsgLoginServerValidate::kOriginalAreaIdFieldNumber;
const int MsgLoginServerValidate::kCountryCodeFieldNumber;
#endif  // !_MSC_VER

MsgLoginServerValidate::MsgLoginServerValidate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgLoginServerValidate)
}

void MsgLoginServerValidate::InitAsDefaultInstance() {
}

MsgLoginServerValidate::MsgLoginServerValidate(const MsgLoginServerValidate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgLoginServerValidate)
}

void MsgLoginServerValidate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1020;
  iggid_ = GOOGLE_LONGLONG(0);
  checktext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platid_ = 0;
  plataccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gs_id_ = 0;
  original_area_id_ = 0;
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginServerValidate::~MsgLoginServerValidate() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgLoginServerValidate)
  SharedDtor();
}

void MsgLoginServerValidate::SharedDtor() {
  if (checktext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete checktext_;
  }
  if (plataccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete plataccount_;
  }
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbkey_;
  }
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_code_;
  }
  if (this != default_instance_) {
  }
}

void MsgLoginServerValidate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoginServerValidate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginServerValidate_descriptor_;
}

const MsgLoginServerValidate& MsgLoginServerValidate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgLoginServerValidate* MsgLoginServerValidate::default_instance_ = NULL;

MsgLoginServerValidate* MsgLoginServerValidate::New() const {
  return new MsgLoginServerValidate;
}

void MsgLoginServerValidate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgLoginServerValidate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gs_id_, original_area_id_);
    msgtype_ = 1020;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_checktext()) {
      if (checktext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        checktext_->clear();
      }
    }
    platid_ = 0;
    if (has_plataccount()) {
      if (plataccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        plataccount_->clear();
      }
    }
    if (has_dbkey()) {
      if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbkey_->clear();
      }
    }
  }
  if (has_country_code()) {
    if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      country_code_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginServerValidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgLoginServerValidate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_SERVER_VALIDATE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IggID;
        break;
      }

      // optional int64 IggID = 2;
      case 2: {
        if (tag == 16) {
         parse_IggID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_checkText;
        break;
      }

      // optional string checkText = 3;
      case 3: {
        if (tag == 26) {
         parse_checkText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checktext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->checktext().data(), this->checktext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "checktext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_platId;
        break;
      }

      // optional int32 platId = 4;
      case 4: {
        if (tag == 32) {
         parse_platId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_platAccount;
        break;
      }

      // optional string platAccount = 5;
      case 5: {
        if (tag == 42) {
         parse_platAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plataccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plataccount().data(), this->plataccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plataccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dbkey;
        break;
      }

      // optional string dbkey = 6;
      case 6: {
        if (tag == 50) {
         parse_dbkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbkey().data(), this->dbkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gs_id;
        break;
      }

      // optional int32 gs_id = 7;
      case 7: {
        if (tag == 56) {
         parse_gs_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gs_id_)));
          set_has_gs_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_original_area_id;
        break;
      }

      // optional int32 original_area_id = 8;
      case 8: {
        if (tag == 64) {
         parse_original_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_area_id_)));
          set_has_original_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_country_code;
        break;
      }

      // optional string country_code = 9;
      case 9: {
        if (tag == 74) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgLoginServerValidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgLoginServerValidate)
  return false;
#undef DO_
}

void MsgLoginServerValidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgLoginServerValidate)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_SERVER_VALIDATE];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional string checkText = 3;
  if (has_checktext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checktext().data(), this->checktext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "checktext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->checktext(), output);
  }

  // optional int32 platId = 4;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->platid(), output);
  }

  // optional string platAccount = 5;
  if (has_plataccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plataccount().data(), this->plataccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plataccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->plataccount(), output);
  }

  // optional string dbkey = 6;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dbkey(), output);
  }

  // optional int32 gs_id = 7;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gs_id(), output);
  }

  // optional int32 original_area_id = 8;
  if (has_original_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->original_area_id(), output);
  }

  // optional string country_code = 9;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->country_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgLoginServerValidate)
}

::google::protobuf::uint8* MsgLoginServerValidate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgLoginServerValidate)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_SERVER_VALIDATE];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 IggID = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional string checkText = 3;
  if (has_checktext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checktext().data(), this->checktext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "checktext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->checktext(), target);
  }

  // optional int32 platId = 4;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->platid(), target);
  }

  // optional string platAccount = 5;
  if (has_plataccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plataccount().data(), this->plataccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plataccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->plataccount(), target);
  }

  // optional string dbkey = 6;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dbkey(), target);
  }

  // optional int32 gs_id = 7;
  if (has_gs_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gs_id(), target);
  }

  // optional int32 original_area_id = 8;
  if (has_original_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->original_area_id(), target);
  }

  // optional string country_code = 9;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->country_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgLoginServerValidate)
  return target;
}

int MsgLoginServerValidate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_LOGIN_SERVER_VALIDATE];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 IggID = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string checkText = 3;
    if (has_checktext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checktext());
    }

    // optional int32 platId = 4;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platid());
    }

    // optional string platAccount = 5;
    if (has_plataccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plataccount());
    }

    // optional string dbkey = 6;
    if (has_dbkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbkey());
    }

    // optional int32 gs_id = 7;
    if (has_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gs_id());
    }

    // optional int32 original_area_id = 8;
    if (has_original_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->original_area_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string country_code = 9;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoginServerValidate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginServerValidate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginServerValidate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginServerValidate::MergeFrom(const MsgLoginServerValidate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_checktext()) {
      set_checktext(from.checktext());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_plataccount()) {
      set_plataccount(from.plataccount());
    }
    if (from.has_dbkey()) {
      set_dbkey(from.dbkey());
    }
    if (from.has_gs_id()) {
      set_gs_id(from.gs_id());
    }
    if (from.has_original_area_id()) {
      set_original_area_id(from.original_area_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginServerValidate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginServerValidate::CopyFrom(const MsgLoginServerValidate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginServerValidate::IsInitialized() const {

  return true;
}

void MsgLoginServerValidate::Swap(MsgLoginServerValidate* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(checktext_, other->checktext_);
    std::swap(platid_, other->platid_);
    std::swap(plataccount_, other->plataccount_);
    std::swap(dbkey_, other->dbkey_);
    std::swap(gs_id_, other->gs_id_);
    std::swap(original_area_id_, other->original_area_id_);
    std::swap(country_code_, other->country_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginServerValidate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginServerValidate_descriptor_;
  metadata.reflection = MsgLoginServerValidate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerLoginSuccess_MGRS_TO_OTHER::kMsgTypeFieldNumber;
const int MsgPlayerLoginSuccess_MGRS_TO_OTHER::kIggidFieldNumber;
const int MsgPlayerLoginSuccess_MGRS_TO_OTHER::kDbkeyFieldNumber;
const int MsgPlayerLoginSuccess_MGRS_TO_OTHER::kNicknameFieldNumber;
#endif  // !_MSC_VER

MsgPlayerLoginSuccess_MGRS_TO_OTHER::MsgPlayerLoginSuccess_MGRS_TO_OTHER()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerLoginSuccess_MGRS_TO_OTHER)
}

void MsgPlayerLoginSuccess_MGRS_TO_OTHER::InitAsDefaultInstance() {
}

MsgPlayerLoginSuccess_MGRS_TO_OTHER::MsgPlayerLoginSuccess_MGRS_TO_OTHER(const MsgPlayerLoginSuccess_MGRS_TO_OTHER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerLoginSuccess_MGRS_TO_OTHER)
}

void MsgPlayerLoginSuccess_MGRS_TO_OTHER::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1158;
  iggid_ = GOOGLE_LONGLONG(0);
  dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerLoginSuccess_MGRS_TO_OTHER::~MsgPlayerLoginSuccess_MGRS_TO_OTHER() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerLoginSuccess_MGRS_TO_OTHER)
  SharedDtor();
}

void MsgPlayerLoginSuccess_MGRS_TO_OTHER::SharedDtor() {
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbkey_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlayerLoginSuccess_MGRS_TO_OTHER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerLoginSuccess_MGRS_TO_OTHER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerLoginSuccess_MGRS_TO_OTHER_descriptor_;
}

const MsgPlayerLoginSuccess_MGRS_TO_OTHER& MsgPlayerLoginSuccess_MGRS_TO_OTHER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgPlayerLoginSuccess_MGRS_TO_OTHER* MsgPlayerLoginSuccess_MGRS_TO_OTHER::default_instance_ = NULL;

MsgPlayerLoginSuccess_MGRS_TO_OTHER* MsgPlayerLoginSuccess_MGRS_TO_OTHER::New() const {
  return new MsgPlayerLoginSuccess_MGRS_TO_OTHER;
}

void MsgPlayerLoginSuccess_MGRS_TO_OTHER::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgtype_ = 1158;
    iggid_ = GOOGLE_LONGLONG(0);
    if (has_dbkey()) {
      if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbkey_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerLoginSuccess_MGRS_TO_OTHER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerLoginSuccess_MGRS_TO_OTHER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_LOGIN_SUCCESS_MGRS_TO_OTHER];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dbkey;
        break;
      }

      // optional string dbkey = 3;
      case 3: {
        if (tag == 26) {
         parse_dbkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbkey().data(), this->dbkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerLoginSuccess_MGRS_TO_OTHER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerLoginSuccess_MGRS_TO_OTHER)
  return false;
#undef DO_
}

void MsgPlayerLoginSuccess_MGRS_TO_OTHER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerLoginSuccess_MGRS_TO_OTHER)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_LOGIN_SUCCESS_MGRS_TO_OTHER];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional string dbkey = 3;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dbkey(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerLoginSuccess_MGRS_TO_OTHER)
}

::google::protobuf::uint8* MsgPlayerLoginSuccess_MGRS_TO_OTHER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerLoginSuccess_MGRS_TO_OTHER)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_LOGIN_SUCCESS_MGRS_TO_OTHER];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional string dbkey = 3;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbkey(), target);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerLoginSuccess_MGRS_TO_OTHER)
  return target;
}

int MsgPlayerLoginSuccess_MGRS_TO_OTHER::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_LOGIN_SUCCESS_MGRS_TO_OTHER];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional string dbkey = 3;
    if (has_dbkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbkey());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerLoginSuccess_MGRS_TO_OTHER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerLoginSuccess_MGRS_TO_OTHER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerLoginSuccess_MGRS_TO_OTHER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerLoginSuccess_MGRS_TO_OTHER::MergeFrom(const MsgPlayerLoginSuccess_MGRS_TO_OTHER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_dbkey()) {
      set_dbkey(from.dbkey());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerLoginSuccess_MGRS_TO_OTHER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerLoginSuccess_MGRS_TO_OTHER::CopyFrom(const MsgPlayerLoginSuccess_MGRS_TO_OTHER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerLoginSuccess_MGRS_TO_OTHER::IsInitialized() const {

  return true;
}

void MsgPlayerLoginSuccess_MGRS_TO_OTHER::Swap(MsgPlayerLoginSuccess_MGRS_TO_OTHER* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(dbkey_, other->dbkey_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerLoginSuccess_MGRS_TO_OTHER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerLoginSuccess_MGRS_TO_OTHER_descriptor_;
  metadata.reflection = MsgPlayerLoginSuccess_MGRS_TO_OTHER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDeleteAccountC2S::kMsgTypeFieldNumber;
const int MsgDeleteAccountC2S::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgDeleteAccountC2S::MsgDeleteAccountC2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDeleteAccountC2S)
}

void MsgDeleteAccountC2S::InitAsDefaultInstance() {
}

MsgDeleteAccountC2S::MsgDeleteAccountC2S(const MsgDeleteAccountC2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDeleteAccountC2S)
}

void MsgDeleteAccountC2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1142;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDeleteAccountC2S::~MsgDeleteAccountC2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDeleteAccountC2S)
  SharedDtor();
}

void MsgDeleteAccountC2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDeleteAccountC2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDeleteAccountC2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDeleteAccountC2S_descriptor_;
}

const MsgDeleteAccountC2S& MsgDeleteAccountC2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgDeleteAccountC2S* MsgDeleteAccountC2S::default_instance_ = NULL;

MsgDeleteAccountC2S* MsgDeleteAccountC2S::New() const {
  return new MsgDeleteAccountC2S;
}

void MsgDeleteAccountC2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1142;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDeleteAccountC2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDeleteAccountC2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DELETE_ACCOUNT_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDeleteAccountC2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDeleteAccountC2S)
  return false;
#undef DO_
}

void MsgDeleteAccountC2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDeleteAccountC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DELETE_ACCOUNT_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDeleteAccountC2S)
}

::google::protobuf::uint8* MsgDeleteAccountC2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDeleteAccountC2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DELETE_ACCOUNT_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDeleteAccountC2S)
  return target;
}

int MsgDeleteAccountC2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DELETE_ACCOUNT_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDeleteAccountC2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDeleteAccountC2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDeleteAccountC2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDeleteAccountC2S::MergeFrom(const MsgDeleteAccountC2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDeleteAccountC2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDeleteAccountC2S::CopyFrom(const MsgDeleteAccountC2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDeleteAccountC2S::IsInitialized() const {

  return true;
}

void MsgDeleteAccountC2S::Swap(MsgDeleteAccountC2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDeleteAccountC2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDeleteAccountC2S_descriptor_;
  metadata.reflection = MsgDeleteAccountC2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDeleteAccountS2C::kMsgTypeFieldNumber;
const int MsgDeleteAccountS2C::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgDeleteAccountS2C::MsgDeleteAccountS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDeleteAccountS2C)
}

void MsgDeleteAccountS2C::InitAsDefaultInstance() {
}

MsgDeleteAccountS2C::MsgDeleteAccountS2C(const MsgDeleteAccountS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDeleteAccountS2C)
}

void MsgDeleteAccountS2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1143;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDeleteAccountS2C::~MsgDeleteAccountS2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDeleteAccountS2C)
  SharedDtor();
}

void MsgDeleteAccountS2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDeleteAccountS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDeleteAccountS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDeleteAccountS2C_descriptor_;
}

const MsgDeleteAccountS2C& MsgDeleteAccountS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgLogin_2eproto();
  return *default_instance_;
}

MsgDeleteAccountS2C* MsgDeleteAccountS2C::default_instance_ = NULL;

MsgDeleteAccountS2C* MsgDeleteAccountS2C::New() const {
  return new MsgDeleteAccountS2C;
}

void MsgDeleteAccountS2C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1143;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDeleteAccountS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDeleteAccountS2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DELETE_ACCOUNT_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDeleteAccountS2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDeleteAccountS2C)
  return false;
#undef DO_
}

void MsgDeleteAccountS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDeleteAccountS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DELETE_ACCOUNT_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDeleteAccountS2C)
}

::google::protobuf::uint8* MsgDeleteAccountS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDeleteAccountS2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DELETE_ACCOUNT_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDeleteAccountS2C)
  return target;
}

int MsgDeleteAccountS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DELETE_ACCOUNT_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDeleteAccountS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDeleteAccountS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDeleteAccountS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDeleteAccountS2C::MergeFrom(const MsgDeleteAccountS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDeleteAccountS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDeleteAccountS2C::CopyFrom(const MsgDeleteAccountS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDeleteAccountS2C::IsInitialized() const {

  return true;
}

void MsgDeleteAccountS2C::Swap(MsgDeleteAccountS2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDeleteAccountS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDeleteAccountS2C_descriptor_;
  metadata.reflection = MsgDeleteAccountS2C_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
