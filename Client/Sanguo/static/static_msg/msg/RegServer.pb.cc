// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RegServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgServerRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgServerRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgServerRegisterResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgServerRegisterResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RegServer_2eproto() {
  protobuf_AddDesc_RegServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RegServer.proto");
  GOOGLE_CHECK(file != NULL);
  MsgServerRegister_descriptor_ = file->message_type(0);
  static const int MsgServerRegister_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, registerauthcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, listenip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, listenport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, domainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, totalmapcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, publicmapcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, dungeonmapcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, start_time_),
  };
  MsgServerRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgServerRegister_descriptor_,
      MsgServerRegister::default_instance_,
      MsgServerRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgServerRegister));
  MsgServerRegisterResult_descriptor_ = file->message_type(1);
  static const int MsgServerRegisterResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegisterResult, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegisterResult, bok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegisterResult, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegisterResult, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegisterResult, start_time_),
  };
  MsgServerRegisterResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgServerRegisterResult_descriptor_,
      MsgServerRegisterResult::default_instance_,
      MsgServerRegisterResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegisterResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServerRegisterResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgServerRegisterResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RegServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgServerRegister_descriptor_, &MsgServerRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgServerRegisterResult_descriptor_, &MsgServerRegisterResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RegServer_2eproto() {
  delete MsgServerRegister::default_instance_;
  delete MsgServerRegister_reflection_;
  delete MsgServerRegisterResult::default_instance_;
  delete MsgServerRegisterResult_reflection_;
}

void protobuf_AddDesc_RegServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017RegServer.proto\022\005MsgPB\032\rMsgType.proto\""
    "\273\002\n\021MsgServerRegister\0226\n\007msgType\030\001 \001(\0162\017"
    ".MsgPB.EMsgType:\024_MSG_SERVER_REGISTER\022\020\n"
    "\010ServerID\030\002 \001(\005\022\022\n\nServerType\030\003 \001(\005\022\030\n\020R"
    "egisterAuthCode\030\004 \001(\t\022\020\n\010ListenIP\030\005 \001(\t\022"
    "\022\n\nListenPort\030\006 \001(\005\022\022\n\nDomainName\030\007 \001(\t\022"
    "\030\n\rTotalMapCount\030\010 \001(\005:\0010\022\031\n\016PublicMapCo"
    "unt\030\t \001(\005:\0010\022\032\n\017DungeonMapCount\030\n \001(\005:\0010"
    "\022\017\n\007area_id\030\013 \001(\r\022\022\n\nstart_time\030\r \001(\r\"\240\001"
    "\n\027MsgServerRegisterResult\022=\n\007msgType\030\001 \001"
    "(\0162\017.MsgPB.EMsgType:\033_MSG_SERVER_REGISTE"
    "R_RESULT\022\013\n\003bOK\030\002 \001(\010\022\022\n\nserverType\030\003 \001("
    "\005\022\021\n\tserver_id\030\004 \001(\005\022\022\n\nstart_time\030\005 \001(\r", 520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RegServer.proto", &protobuf_RegisterTypes);
  MsgServerRegister::default_instance_ = new MsgServerRegister();
  MsgServerRegisterResult::default_instance_ = new MsgServerRegisterResult();
  MsgServerRegister::default_instance_->InitAsDefaultInstance();
  MsgServerRegisterResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RegServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RegServer_2eproto {
  StaticDescriptorInitializer_RegServer_2eproto() {
    protobuf_AddDesc_RegServer_2eproto();
  }
} static_descriptor_initializer_RegServer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgServerRegister::kMsgTypeFieldNumber;
const int MsgServerRegister::kServerIDFieldNumber;
const int MsgServerRegister::kServerTypeFieldNumber;
const int MsgServerRegister::kRegisterAuthCodeFieldNumber;
const int MsgServerRegister::kListenIPFieldNumber;
const int MsgServerRegister::kListenPortFieldNumber;
const int MsgServerRegister::kDomainNameFieldNumber;
const int MsgServerRegister::kTotalMapCountFieldNumber;
const int MsgServerRegister::kPublicMapCountFieldNumber;
const int MsgServerRegister::kDungeonMapCountFieldNumber;
const int MsgServerRegister::kAreaIdFieldNumber;
const int MsgServerRegister::kStartTimeFieldNumber;
#endif  // !_MSC_VER

MsgServerRegister::MsgServerRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgServerRegister)
}

void MsgServerRegister::InitAsDefaultInstance() {
}

MsgServerRegister::MsgServerRegister(const MsgServerRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgServerRegister)
}

void MsgServerRegister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1009;
  serverid_ = 0;
  servertype_ = 0;
  registerauthcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listenip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listenport_ = 0;
  domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totalmapcount_ = 0;
  publicmapcount_ = 0;
  dungeonmapcount_ = 0;
  area_id_ = 0u;
  start_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgServerRegister::~MsgServerRegister() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgServerRegister)
  SharedDtor();
}

void MsgServerRegister::SharedDtor() {
  if (registerauthcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete registerauthcode_;
  }
  if (listenip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete listenip_;
  }
  if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domainname_;
  }
  if (this != default_instance_) {
  }
}

void MsgServerRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgServerRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgServerRegister_descriptor_;
}

const MsgServerRegister& MsgServerRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegServer_2eproto();
  return *default_instance_;
}

MsgServerRegister* MsgServerRegister::default_instance_ = NULL;

MsgServerRegister* MsgServerRegister::New() const {
  return new MsgServerRegister;
}

void MsgServerRegister::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgServerRegister*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(servertype_, listenport_);
    msgtype_ = 1009;
    serverid_ = 0;
    if (has_registerauthcode()) {
      if (registerauthcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        registerauthcode_->clear();
      }
    }
    if (has_listenip()) {
      if (listenip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        listenip_->clear();
      }
    }
    if (has_domainname()) {
      if (domainname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domainname_->clear();
      }
    }
    totalmapcount_ = 0;
  }
  ZR_(publicmapcount_, start_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgServerRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgServerRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_REGISTER];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ServerID;
        break;
      }

      // optional int32 ServerID = 2;
      case 2: {
        if (tag == 16) {
         parse_ServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ServerType;
        break;
      }

      // optional int32 ServerType = 3;
      case 3: {
        if (tag == 24) {
         parse_ServerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RegisterAuthCode;
        break;
      }

      // optional string RegisterAuthCode = 4;
      case 4: {
        if (tag == 34) {
         parse_RegisterAuthCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registerauthcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->registerauthcode().data(), this->registerauthcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "registerauthcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ListenIP;
        break;
      }

      // optional string ListenIP = 5;
      case 5: {
        if (tag == 42) {
         parse_ListenIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listenip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->listenip().data(), this->listenip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "listenip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ListenPort;
        break;
      }

      // optional int32 ListenPort = 6;
      case 6: {
        if (tag == 48) {
         parse_ListenPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listenport_)));
          set_has_listenport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_DomainName;
        break;
      }

      // optional string DomainName = 7;
      case 7: {
        if (tag == 58) {
         parse_DomainName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domainname().data(), this->domainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domainname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_TotalMapCount;
        break;
      }

      // optional int32 TotalMapCount = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_TotalMapCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalmapcount_)));
          set_has_totalmapcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_PublicMapCount;
        break;
      }

      // optional int32 PublicMapCount = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_PublicMapCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publicmapcount_)));
          set_has_publicmapcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_DungeonMapCount;
        break;
      }

      // optional int32 DungeonMapCount = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_DungeonMapCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonmapcount_)));
          set_has_dungeonmapcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 11;
      case 11: {
        if (tag == 88) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 13;
      case 13: {
        if (tag == 104) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgServerRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgServerRegister)
  return false;
#undef DO_
}

void MsgServerRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgServerRegister)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_REGISTER];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 ServerID = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  // optional int32 ServerType = 3;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->servertype(), output);
  }

  // optional string RegisterAuthCode = 4;
  if (has_registerauthcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->registerauthcode().data(), this->registerauthcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "registerauthcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->registerauthcode(), output);
  }

  // optional string ListenIP = 5;
  if (has_listenip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listenip().data(), this->listenip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "listenip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->listenip(), output);
  }

  // optional int32 ListenPort = 6;
  if (has_listenport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->listenport(), output);
  }

  // optional string DomainName = 7;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->domainname(), output);
  }

  // optional int32 TotalMapCount = 8 [default = 0];
  if (has_totalmapcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->totalmapcount(), output);
  }

  // optional int32 PublicMapCount = 9 [default = 0];
  if (has_publicmapcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->publicmapcount(), output);
  }

  // optional int32 DungeonMapCount = 10 [default = 0];
  if (has_dungeonmapcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dungeonmapcount(), output);
  }

  // optional uint32 area_id = 11;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->area_id(), output);
  }

  // optional uint32 start_time = 13;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgServerRegister)
}

::google::protobuf::uint8* MsgServerRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgServerRegister)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_REGISTER];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 ServerID = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  // optional int32 ServerType = 3;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->servertype(), target);
  }

  // optional string RegisterAuthCode = 4;
  if (has_registerauthcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->registerauthcode().data(), this->registerauthcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "registerauthcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->registerauthcode(), target);
  }

  // optional string ListenIP = 5;
  if (has_listenip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listenip().data(), this->listenip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "listenip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->listenip(), target);
  }

  // optional int32 ListenPort = 6;
  if (has_listenport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->listenport(), target);
  }

  // optional string DomainName = 7;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domainname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->domainname(), target);
  }

  // optional int32 TotalMapCount = 8 [default = 0];
  if (has_totalmapcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totalmapcount(), target);
  }

  // optional int32 PublicMapCount = 9 [default = 0];
  if (has_publicmapcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->publicmapcount(), target);
  }

  // optional int32 DungeonMapCount = 10 [default = 0];
  if (has_dungeonmapcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dungeonmapcount(), target);
  }

  // optional uint32 area_id = 11;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->area_id(), target);
  }

  // optional uint32 start_time = 13;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgServerRegister)
  return target;
}

int MsgServerRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_REGISTER];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 ServerID = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional int32 ServerType = 3;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

    // optional string RegisterAuthCode = 4;
    if (has_registerauthcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registerauthcode());
    }

    // optional string ListenIP = 5;
    if (has_listenip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->listenip());
    }

    // optional int32 ListenPort = 6;
    if (has_listenport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listenport());
    }

    // optional string DomainName = 7;
    if (has_domainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainname());
    }

    // optional int32 TotalMapCount = 8 [default = 0];
    if (has_totalmapcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalmapcount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 PublicMapCount = 9 [default = 0];
    if (has_publicmapcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publicmapcount());
    }

    // optional int32 DungeonMapCount = 10 [default = 0];
    if (has_dungeonmapcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonmapcount());
    }

    // optional uint32 area_id = 11;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional uint32 start_time = 13;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgServerRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgServerRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgServerRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgServerRegister::MergeFrom(const MsgServerRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_registerauthcode()) {
      set_registerauthcode(from.registerauthcode());
    }
    if (from.has_listenip()) {
      set_listenip(from.listenip());
    }
    if (from.has_listenport()) {
      set_listenport(from.listenport());
    }
    if (from.has_domainname()) {
      set_domainname(from.domainname());
    }
    if (from.has_totalmapcount()) {
      set_totalmapcount(from.totalmapcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_publicmapcount()) {
      set_publicmapcount(from.publicmapcount());
    }
    if (from.has_dungeonmapcount()) {
      set_dungeonmapcount(from.dungeonmapcount());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgServerRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgServerRegister::CopyFrom(const MsgServerRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgServerRegister::IsInitialized() const {

  return true;
}

void MsgServerRegister::Swap(MsgServerRegister* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(serverid_, other->serverid_);
    std::swap(servertype_, other->servertype_);
    std::swap(registerauthcode_, other->registerauthcode_);
    std::swap(listenip_, other->listenip_);
    std::swap(listenport_, other->listenport_);
    std::swap(domainname_, other->domainname_);
    std::swap(totalmapcount_, other->totalmapcount_);
    std::swap(publicmapcount_, other->publicmapcount_);
    std::swap(dungeonmapcount_, other->dungeonmapcount_);
    std::swap(area_id_, other->area_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgServerRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgServerRegister_descriptor_;
  metadata.reflection = MsgServerRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgServerRegisterResult::kMsgTypeFieldNumber;
const int MsgServerRegisterResult::kBOKFieldNumber;
const int MsgServerRegisterResult::kServerTypeFieldNumber;
const int MsgServerRegisterResult::kServerIdFieldNumber;
const int MsgServerRegisterResult::kStartTimeFieldNumber;
#endif  // !_MSC_VER

MsgServerRegisterResult::MsgServerRegisterResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgServerRegisterResult)
}

void MsgServerRegisterResult::InitAsDefaultInstance() {
}

MsgServerRegisterResult::MsgServerRegisterResult(const MsgServerRegisterResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgServerRegisterResult)
}

void MsgServerRegisterResult::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1010;
  bok_ = false;
  servertype_ = 0;
  server_id_ = 0;
  start_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgServerRegisterResult::~MsgServerRegisterResult() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgServerRegisterResult)
  SharedDtor();
}

void MsgServerRegisterResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgServerRegisterResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgServerRegisterResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgServerRegisterResult_descriptor_;
}

const MsgServerRegisterResult& MsgServerRegisterResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegServer_2eproto();
  return *default_instance_;
}

MsgServerRegisterResult* MsgServerRegisterResult::default_instance_ = NULL;

MsgServerRegisterResult* MsgServerRegisterResult::New() const {
  return new MsgServerRegisterResult;
}

void MsgServerRegisterResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgServerRegisterResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(bok_, start_time_);
    msgtype_ = 1010;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgServerRegisterResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgServerRegisterResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_REGISTER_RESULT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bOK;
        break;
      }

      // optional bool bOK = 2;
      case 2: {
        if (tag == 16) {
         parse_bOK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bok_)));
          set_has_bok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverType;
        break;
      }

      // optional int32 serverType = 3;
      case 3: {
        if (tag == 24) {
         parse_serverType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }

      // optional int32 server_id = 4;
      case 4: {
        if (tag == 32) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 5;
      case 5: {
        if (tag == 40) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgServerRegisterResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgServerRegisterResult)
  return false;
#undef DO_
}

void MsgServerRegisterResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgServerRegisterResult)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_REGISTER_RESULT];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional bool bOK = 2;
  if (has_bok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bok(), output);
  }

  // optional int32 serverType = 3;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->servertype(), output);
  }

  // optional int32 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server_id(), output);
  }

  // optional uint32 start_time = 5;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgServerRegisterResult)
}

::google::protobuf::uint8* MsgServerRegisterResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgServerRegisterResult)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_REGISTER_RESULT];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional bool bOK = 2;
  if (has_bok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bok(), target);
  }

  // optional int32 serverType = 3;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->servertype(), target);
  }

  // optional int32 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->server_id(), target);
  }

  // optional uint32 start_time = 5;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgServerRegisterResult)
  return target;
}

int MsgServerRegisterResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SERVER_REGISTER_RESULT];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional bool bOK = 2;
    if (has_bok()) {
      total_size += 1 + 1;
    }

    // optional int32 serverType = 3;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

    // optional int32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // optional uint32 start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgServerRegisterResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgServerRegisterResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgServerRegisterResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgServerRegisterResult::MergeFrom(const MsgServerRegisterResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_bok()) {
      set_bok(from.bok());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgServerRegisterResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgServerRegisterResult::CopyFrom(const MsgServerRegisterResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgServerRegisterResult::IsInitialized() const {

  return true;
}

void MsgServerRegisterResult::Swap(MsgServerRegisterResult* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(bok_, other->bok_);
    std::swap(servertype_, other->servertype_);
    std::swap(server_id_, other->server_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgServerRegisterResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgServerRegisterResult_descriptor_;
  metadata.reflection = MsgServerRegisterResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
