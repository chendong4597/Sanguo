// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgPlant.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgPlant.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* PlantDropInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlantDropInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantSetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantSetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantCutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantCutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantCut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantCut_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantInfo_PlantInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantInfo_PlantInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantGrowSpeedUp_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantGrowSpeedUp_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantGrowSpeedUp_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantGrowSpeedUp_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPlantInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPlantInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantUserInitData_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantUserInitData_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantNpcManger_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantNpcManger_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantNpcManger_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantNpcManger_S2C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgPlantNpcManger_S2C_PLANT_MAN_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantReportRareSet_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantReportRareSet_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlantReportRareCut_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlantReportRareCut_C2S_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PLANT_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PLANT_OPERATE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PLANT_INFO_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgPlant_2eproto() {
  protobuf_AddDesc_MsgPlant_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgPlant.proto");
  GOOGLE_CHECK(file != NULL);
  PlantDropInfo_descriptor_ = file->message_type(0);
  static const int PlantDropInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantDropInfo, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantDropInfo, item_count_),
  };
  PlantDropInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlantDropInfo_descriptor_,
      PlantDropInfo::default_instance_,
      PlantDropInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantDropInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantDropInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlantDropInfo));
  MsgPlantCfg_descriptor_ = file->message_type(1);
  static const int MsgPlantCfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCfg, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCfg, count_),
  };
  MsgPlantCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantCfg_descriptor_,
      MsgPlantCfg::default_instance_,
      MsgPlantCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantCfg));
  MsgPlantSetReq_descriptor_ = file->message_type(2);
  static const int MsgPlantSetReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSetReq, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSetReq, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSetReq, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSetReq, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSetReq, plant_seed_type_),
  };
  MsgPlantSetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantSetReq_descriptor_,
      MsgPlantSetReq::default_instance_,
      MsgPlantSetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantSetReq));
  MsgPlantSet_descriptor_ = file->message_type(3);
  static const int MsgPlantSet_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSet, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSet, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSet, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSet, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSet, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSet, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSet, plant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSet, grow_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSet, grow_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSet, grow_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSet, protectorid_),
  };
  MsgPlantSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantSet_descriptor_,
      MsgPlantSet::default_instance_,
      MsgPlantSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantSet));
  MsgPlantCutReq_descriptor_ = file->message_type(4);
  static const int MsgPlantCutReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCutReq, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCutReq, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCutReq, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCutReq, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCutReq, tool_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCutReq, dig_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCutReq, dig_pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCutReq, dig_id_),
  };
  MsgPlantCutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantCutReq_descriptor_,
      MsgPlantCutReq::default_instance_,
      MsgPlantCutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantCutReq));
  MsgPlantCut_descriptor_ = file->message_type(5);
  static const int MsgPlantCut_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCut, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCut, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCut, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCut, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCut, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCut, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCut, curr_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCut, reduce_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCut, dig_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCut, dig_pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCut, dig_id_),
  };
  MsgPlantCut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantCut_descriptor_,
      MsgPlantCut::default_instance_,
      MsgPlantCut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantCut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantCut));
  MsgPlantInfo_descriptor_ = file->message_type(6);
  static const int MsgPlantInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo, info_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo, plant_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo, binit_),
  };
  MsgPlantInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantInfo_descriptor_,
      MsgPlantInfo::default_instance_,
      MsgPlantInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantInfo));
  MsgPlantInfo_PlantInfo_descriptor_ = MsgPlantInfo_descriptor_->nested_type(0);
  static const int MsgPlantInfo_PlantInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo_PlantInfo, plant_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo_PlantInfo, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo_PlantInfo, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo_PlantInfo, grow_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo_PlantInfo, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo_PlantInfo, plant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo_PlantInfo, grow_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo_PlantInfo, grow_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo_PlantInfo, protectorid_),
  };
  MsgPlantInfo_PlantInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantInfo_PlantInfo_descriptor_,
      MsgPlantInfo_PlantInfo::default_instance_,
      MsgPlantInfo_PlantInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo_PlantInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantInfo_PlantInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantInfo_PlantInfo));
  MsgPlantGrowSpeedUp_C2S_descriptor_ = file->message_type(7);
  static const int MsgPlantGrowSpeedUp_C2S_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_C2S, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_C2S, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_C2S, badge_build_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_C2S, badge_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_C2S, badge_pos_y_),
  };
  MsgPlantGrowSpeedUp_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantGrowSpeedUp_C2S_descriptor_,
      MsgPlantGrowSpeedUp_C2S::default_instance_,
      MsgPlantGrowSpeedUp_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantGrowSpeedUp_C2S));
  MsgPlantGrowSpeedUp_S2C_descriptor_ = file->message_type(8);
  static const int MsgPlantGrowSpeedUp_S2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_S2C, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_S2C, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_S2C, res_),
  };
  MsgPlantGrowSpeedUp_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantGrowSpeedUp_S2C_descriptor_,
      MsgPlantGrowSpeedUp_S2C::default_instance_,
      MsgPlantGrowSpeedUp_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantGrowSpeedUp_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantGrowSpeedUp_S2C));
  UserPlantInfo_descriptor_ = file->message_type(9);
  static const int UserPlantInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPlantInfo, plant_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPlantInfo, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPlantInfo, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPlantInfo, grow_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPlantInfo, plant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPlantInfo, grow_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPlantInfo, grow_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPlantInfo, protectorid_),
  };
  UserPlantInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPlantInfo_descriptor_,
      UserPlantInfo::default_instance_,
      UserPlantInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPlantInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPlantInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPlantInfo));
  MsgPlantUserInitData_S2C_descriptor_ = file->message_type(10);
  static const int MsgPlantUserInitData_S2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserInitData_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserInitData_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserInitData_S2C, plant_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserInitData_S2C, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserInitData_S2C, tail_),
  };
  MsgPlantUserInitData_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantUserInitData_S2C_descriptor_,
      MsgPlantUserInitData_S2C::default_instance_,
      MsgPlantUserInitData_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserInitData_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantUserInitData_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantUserInitData_S2C));
  MsgPlantNpcManger_C2S_descriptor_ = file->message_type(11);
  static const int MsgPlantNpcManger_C2S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_C2S, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_C2S, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_C2S, protector_id_),
  };
  MsgPlantNpcManger_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantNpcManger_C2S_descriptor_,
      MsgPlantNpcManger_C2S::default_instance_,
      MsgPlantNpcManger_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantNpcManger_C2S));
  MsgPlantNpcManger_S2C_descriptor_ = file->message_type(12);
  static const int MsgPlantNpcManger_S2C_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_S2C, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_S2C, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_S2C, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_S2C, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_S2C, protector_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_S2C, res_),
  };
  MsgPlantNpcManger_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantNpcManger_S2C_descriptor_,
      MsgPlantNpcManger_S2C::default_instance_,
      MsgPlantNpcManger_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantNpcManger_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantNpcManger_S2C));
  MsgPlantNpcManger_S2C_PLANT_MAN_RESULT_descriptor_ = MsgPlantNpcManger_S2C_descriptor_->enum_type(0);
  MsgPlantReportRareSet_C2S_descriptor_ = file->message_type(13);
  static const int MsgPlantReportRareSet_C2S_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareSet_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareSet_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareSet_C2S, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareSet_C2S, plant_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareSet_C2S, plant_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareSet_C2S, plant_type_),
  };
  MsgPlantReportRareSet_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantReportRareSet_C2S_descriptor_,
      MsgPlantReportRareSet_C2S::default_instance_,
      MsgPlantReportRareSet_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareSet_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareSet_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantReportRareSet_C2S));
  MsgPlantReportRareCut_C2S_descriptor_ = file->message_type(14);
  static const int MsgPlantReportRareCut_C2S_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareCut_C2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareCut_C2S, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareCut_C2S, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareCut_C2S, plant_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareCut_C2S, plant_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareCut_C2S, plant_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareCut_C2S, drop_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareCut_C2S, drop_id_),
  };
  MsgPlantReportRareCut_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlantReportRareCut_C2S_descriptor_,
      MsgPlantReportRareCut_C2S::default_instance_,
      MsgPlantReportRareCut_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareCut_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlantReportRareCut_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlantReportRareCut_C2S));
  PLANT_RESULT_descriptor_ = file->enum_type(0);
  PLANT_OPERATE_TYPE_descriptor_ = file->enum_type(1);
  PLANT_INFO_TYPE_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgPlant_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlantDropInfo_descriptor_, &PlantDropInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantCfg_descriptor_, &MsgPlantCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantSetReq_descriptor_, &MsgPlantSetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantSet_descriptor_, &MsgPlantSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantCutReq_descriptor_, &MsgPlantCutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantCut_descriptor_, &MsgPlantCut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantInfo_descriptor_, &MsgPlantInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantInfo_PlantInfo_descriptor_, &MsgPlantInfo_PlantInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantGrowSpeedUp_C2S_descriptor_, &MsgPlantGrowSpeedUp_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantGrowSpeedUp_S2C_descriptor_, &MsgPlantGrowSpeedUp_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPlantInfo_descriptor_, &UserPlantInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantUserInitData_S2C_descriptor_, &MsgPlantUserInitData_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantNpcManger_C2S_descriptor_, &MsgPlantNpcManger_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantNpcManger_S2C_descriptor_, &MsgPlantNpcManger_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantReportRareSet_C2S_descriptor_, &MsgPlantReportRareSet_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlantReportRareCut_C2S_descriptor_, &MsgPlantReportRareCut_C2S::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgPlant_2eproto() {
  delete PlantDropInfo::default_instance_;
  delete PlantDropInfo_reflection_;
  delete MsgPlantCfg::default_instance_;
  delete MsgPlantCfg_reflection_;
  delete MsgPlantSetReq::default_instance_;
  delete MsgPlantSetReq_reflection_;
  delete MsgPlantSet::default_instance_;
  delete MsgPlantSet_reflection_;
  delete MsgPlantCutReq::default_instance_;
  delete MsgPlantCutReq_reflection_;
  delete MsgPlantCut::default_instance_;
  delete MsgPlantCut_reflection_;
  delete MsgPlantInfo::default_instance_;
  delete MsgPlantInfo_reflection_;
  delete MsgPlantInfo_PlantInfo::default_instance_;
  delete MsgPlantInfo_PlantInfo_reflection_;
  delete MsgPlantGrowSpeedUp_C2S::default_instance_;
  delete MsgPlantGrowSpeedUp_C2S_reflection_;
  delete MsgPlantGrowSpeedUp_S2C::default_instance_;
  delete MsgPlantGrowSpeedUp_S2C_reflection_;
  delete UserPlantInfo::default_instance_;
  delete UserPlantInfo_reflection_;
  delete MsgPlantUserInitData_S2C::default_instance_;
  delete MsgPlantUserInitData_S2C_reflection_;
  delete MsgPlantNpcManger_C2S::default_instance_;
  delete MsgPlantNpcManger_C2S_reflection_;
  delete MsgPlantNpcManger_S2C::default_instance_;
  delete MsgPlantNpcManger_S2C_reflection_;
  delete MsgPlantReportRareSet_C2S::default_instance_;
  delete MsgPlantReportRareSet_C2S_reflection_;
  delete MsgPlantReportRareCut_C2S::default_instance_;
  delete MsgPlantReportRareCut_C2S_reflection_;
}

void protobuf_AddDesc_MsgPlant_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgPacketDrop_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016MsgPlant.proto\022\005MsgPB\032\rMsgType.proto\032\023"
    "MsgPacketDrop.proto\"6\n\rPlantDropInfo\022\021\n\t"
    "item_type\030\001 \001(\005\022\022\n\nitem_count\030\003 \001(\005\"-\n\013M"
    "sgPlantCfg\022\017\n\007type_id\030\001 \001(\005\022\r\n\005count\030\002 \001"
    "(\005\"\214\001\n\016MsgPlantSetReq\0224\n\007msgType\030\001 \001(\0162\017"
    ".MsgPB.EMsgType:\022_MSG_PLANT_SET_REQ\022\r\n\005i"
    "ggid\030\002 \001(\003\022\r\n\005pos_x\030\003 \001(\005\022\r\n\005pos_y\030\004 \001(\005"
    "\022\027\n\017plant_seed_type\030\005 \001(\005\"\204\002\n\013MsgPlantSe"
    "t\0220\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\016_MS"
    "G_PLANT_SET\022\r\n\005iggid\030\002 \001(\003\022 \n\003res\030\003 \001(\0162"
    "\023.MsgPB.PLANT_RESULT\022\r\n\005pos_x\030\005 \001(\005\022\r\n\005p"
    "os_y\030\006 \001(\005\022\022\n\ntemplateid\030\007 \001(\005\022\020\n\010plant_"
    "id\030\010 \001(\003\022\022\n\ngrow_begin\030\t \001(\003\022\021\n\tgrow_tim"
    "e\030\n \001(\005\022\022\n\ngrow_stage\030\013 \001(\005\022\023\n\013protector"
    "Id\030\014 \001(\003\"\274\001\n\016MsgPlantCutReq\0224\n\007msgType\030\001"
    " \001(\0162\017.MsgPB.EMsgType:\022_MSG_PLANT_CUT_RE"
    "Q\022\r\n\005iggid\030\002 \001(\003\022\r\n\005pos_x\030\003 \001(\005\022\r\n\005pos_y"
    "\030\004 \001(\005\022\021\n\ttool_uuid\030\005 \001(\003\022\021\n\tdig_pos_x\030\006"
    " \001(\005\022\021\n\tdig_pos_y\030\007 \001(\005\022\016\n\006dig_id\030\010 \001(\003\""
    "\370\001\n\013MsgPlantCut\0220\n\007msgType\030\001 \001(\0162\017.MsgPB"
    ".EMsgType:\016_MSG_PLANT_CUT\022\r\n\005iggid\030\002 \001(\003"
    "\022 \n\003res\030\003 \001(\0162\023.MsgPB.PLANT_RESULT\022\r\n\005po"
    "s_x\030\004 \001(\005\022\r\n\005pos_y\030\005 \001(\005\022\016\n\006max_hp\030\007 \001(\005"
    "\022\017\n\007curr_hp\030\010 \001(\005\022\021\n\treduce_hp\030\t \001(\005\022\021\n\t"
    "dig_pos_x\030\n \001(\005\022\021\n\tdig_pos_y\030\013 \001(\005\022\016\n\006di"
    "g_id\030\014 \001(\003\"\205\003\n\014MsgPlantInfo\0221\n\007msgType\030\001"
    " \001(\0162\017.MsgPB.EMsgType:\017_MSG_PLANT_INFO\022\r"
    "\n\005iggid\030\002 \001(\003\022)\n\tinfo_type\030\003 \001(\0162\026.MsgPB"
    ".PLANT_INFO_TYPE\0221\n\nplant_info\030\004 \003(\0132\035.M"
    "sgPB.MsgPlantInfo.PlantInfo\022\r\n\005mapid\030\005 \001"
    "(\005\022\020\n\005binit\030\006 \001(\005:\0010\032\263\001\n\tPlantInfo\022\022\n\npl"
    "ant_type\030\001 \001(\005\022\r\n\005pos_x\030\002 \001(\005\022\r\n\005pos_y\030\003"
    " \001(\005\022\022\n\ngrow_stage\030\004 \001(\005\022\022\n\ntemplateid\030\005"
    " \001(\005\022\020\n\010plant_id\030\006 \001(\003\022\022\n\ngrow_begin\030\007 \001"
    "(\003\022\021\n\tgrow_time\030\010 \001(\005\022\023\n\013protectorId\030\t \001"
    "(\003\"\272\001\n\027MsgPlantGrowSpeedUp_C2S\022=\n\007msgTyp"
    "e\030\001 \001(\0162\017.MsgPB.EMsgType:\033_MSG_PLANT_GRO"
    "W_SPEEDUP_C2S\022\r\n\005pos_x\030\002 \001(\005\022\r\n\005pos_y\030\003 "
    "\001(\005\022\030\n\020badge_build_type\030\004 \001(\005\022\023\n\013badge_p"
    "os_x\030\005 \001(\005\022\023\n\013badge_pos_y\030\006 \001(\005\"\230\001\n\027MsgP"
    "lantGrowSpeedUp_S2C\022=\n\007msgType\030\001 \001(\0162\017.M"
    "sgPB.EMsgType:\033_MSG_PLANT_GROW_SPEEDUP_S"
    "2C\022\r\n\005pos_x\030\004 \001(\005\022\r\n\005pos_y\030\005 \001(\005\022 \n\003res\030"
    "\006 \001(\0162\023.MsgPB.PLANT_RESULT\"\243\001\n\rUserPlant"
    "Info\022\022\n\nplant_type\030\001 \001(\005\022\r\n\005pos_x\030\002 \001(\005\022"
    "\r\n\005pos_y\030\003 \001(\005\022\022\n\ngrow_stage\030\004 \001(\005\022\020\n\010pl"
    "ant_id\030\006 \001(\003\022\022\n\ngrow_begin\030\007 \001(\003\022\021\n\tgrow"
    "_time\030\010 \001(\005\022\023\n\013protectorId\030\t \001(\003\"\264\001\n\030Msg"
    "PlantUserInitData_S2C\022\?\n\007msgType\030\001 \001(\0162\017"
    ".MsgPB.EMsgType:\035_MSG_PLANT_USER_INIT_DA"
    "TA_S2C\022\r\n\005iggid\030\002 \001(\003\022(\n\nplant_info\030\003 \003("
    "\0132\024.MsgPB.UserPlantInfo\022\r\n\005mapid\030\004 \001(\005\022\017"
    "\n\004tail\030\005 \001(\005:\0010\"\230\001\n\025MsgPlantNpcManger_C2"
    "S\022<\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\032_MS"
    "G_PLANT_NPC_MANAGER_C2S\022\r\n\005iggid\030\002 \001(\003\022\r"
    "\n\005pos_x\030\003 \001(\005\022\r\n\005pos_y\030\004 \001(\005\022\024\n\014protecto"
    "r_id\030\005 \001(\003\"\373\001\n\025MsgPlantNpcManger_S2C\022<\n\007"
    "msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\032_MSG_PLA"
    "NT_NPC_MANAGER_S2C\022\r\n\005iggid\030\002 \001(\003\022\r\n\005pos"
    "_x\030\003 \001(\005\022\r\n\005pos_y\030\004 \001(\005\022\024\n\014protector_id\030"
    "\005 \001(\003\022:\n\003res\030\006 \001(\0162-.MsgPB.MsgPlantNpcMa"
    "nger_S2C.PLANT_MAN_RESULT\"%\n\020PLANT_MAN_R"
    "ESULT\022\007\n\003ERR\020\000\022\010\n\004SUCC\020\001\"\261\001\n\031MsgPlantRep"
    "ortRareSet_C2S\022@\n\007msgType\030\001 \001(\0162\017.MsgPB."
    "EMsgType:\036_MSG_PLANT_REPORT_RARE_SET_C2S"
    "\022\r\n\005iggid\030\002 \001(\003\022\r\n\005mapid\030\003 \001(\005\022\017\n\007plant_"
    "x\030\004 \001(\005\022\017\n\007plant_y\030\005 \001(\005\022\022\n\nplant_type\030\006"
    " \001(\005\"\350\001\n\031MsgPlantReportRareCut_C2S\022@\n\007ms"
    "gType\030\001 \001(\0162\017.MsgPB.EMsgType:\036_MSG_PLANT"
    "_REPORT_RARE_CUT_C2S\022\r\n\005iggid\030\002 \001(\003\022\r\n\005m"
    "apid\030\003 \001(\005\022\017\n\007plant_x\030\004 \001(\005\022\017\n\007plant_y\030\005"
    " \001(\005\022\022\n\nplant_type\030\006 \001(\005\022$\n\tdrop_info\030\007 "
    "\003(\0132\021.MsgPB.PBDropInfo\022\017\n\007drop_id\030\010 \001(\005*"
    "\304\004\n\014PLANT_RESULT\022\023\n\017PLANT_RESULT_OK\020\000\022\026\n"
    "\022PLANT_RESULT_ERROR\020\001\022\031\n\025PLANT_RESULT_ER"
    "R_SEED\020\002\022\036\n\032PLANT_RESULT_ERR_DROP_TYPE\020\003"
    "\022\"\n\036PLANT_REULST_ERR_TOO_MUCH_RATE\020\004\022#\n\037"
    "PLANT_REULST_ERR_TOO_MUCH_COUNT\020\005\022*\n&PLA"
    "NT_REULST_ERR_TOO_MUCH_SINGLE_COUNT\020\006\022\035\n"
    "\031PLANT_RESULT_ERR_PLANT_ID\020\007\022\032\n\026PLANT_RE"
    "SULT_ERR_STAGE\020\010\022\031\n\025PLANT_RESULT_NO_PLAN"
    "T\020\t\022\035\n\031PLANT_RESULT_ERR_DIG_TOOL\020\n\022\033\n\027PL"
    "ANT_RESULT_WRONG_TYPE\020\013\022\034\n\030PLANT_RESULT_"
    "USER_CANCEL\020\014\022\034\n\030PLANT_RESULT_ERR_OPERAT"
    "E\020\r\022\034\n\030PLANT_RESULT_ERR_NO_SEED\020\016\022%\n!PLA"
    "NT_RESULT_ERR_CFG_ERR_PLANT_ID\020\017\022(\n$PLAN"
    "T_RESULT_ERR_CFG_ERR_PLANT_STAGE\020\020\022\032\n\026PL"
    "ANT_RESULT_ERR_BADGE\020\021*O\n\022PLANT_OPERATE_"
    "TYPE\022\032\n\026PLANT_OPERATE_TYPE_CUT\020\001\022\035\n\031PLAN"
    "T_OPERATE_TYPE_GATHER\020\002*G\n\017PLANT_INFO_TY"
    "PE\022\032\n\026PLANT_INFO_TYPE_NATURE\020\000\022\030\n\024PLANT_"
    "INFO_TYPE_USER\020\001", 3656);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgPlant.proto", &protobuf_RegisterTypes);
  PlantDropInfo::default_instance_ = new PlantDropInfo();
  MsgPlantCfg::default_instance_ = new MsgPlantCfg();
  MsgPlantSetReq::default_instance_ = new MsgPlantSetReq();
  MsgPlantSet::default_instance_ = new MsgPlantSet();
  MsgPlantCutReq::default_instance_ = new MsgPlantCutReq();
  MsgPlantCut::default_instance_ = new MsgPlantCut();
  MsgPlantInfo::default_instance_ = new MsgPlantInfo();
  MsgPlantInfo_PlantInfo::default_instance_ = new MsgPlantInfo_PlantInfo();
  MsgPlantGrowSpeedUp_C2S::default_instance_ = new MsgPlantGrowSpeedUp_C2S();
  MsgPlantGrowSpeedUp_S2C::default_instance_ = new MsgPlantGrowSpeedUp_S2C();
  UserPlantInfo::default_instance_ = new UserPlantInfo();
  MsgPlantUserInitData_S2C::default_instance_ = new MsgPlantUserInitData_S2C();
  MsgPlantNpcManger_C2S::default_instance_ = new MsgPlantNpcManger_C2S();
  MsgPlantNpcManger_S2C::default_instance_ = new MsgPlantNpcManger_S2C();
  MsgPlantReportRareSet_C2S::default_instance_ = new MsgPlantReportRareSet_C2S();
  MsgPlantReportRareCut_C2S::default_instance_ = new MsgPlantReportRareCut_C2S();
  PlantDropInfo::default_instance_->InitAsDefaultInstance();
  MsgPlantCfg::default_instance_->InitAsDefaultInstance();
  MsgPlantSetReq::default_instance_->InitAsDefaultInstance();
  MsgPlantSet::default_instance_->InitAsDefaultInstance();
  MsgPlantCutReq::default_instance_->InitAsDefaultInstance();
  MsgPlantCut::default_instance_->InitAsDefaultInstance();
  MsgPlantInfo::default_instance_->InitAsDefaultInstance();
  MsgPlantInfo_PlantInfo::default_instance_->InitAsDefaultInstance();
  MsgPlantGrowSpeedUp_C2S::default_instance_->InitAsDefaultInstance();
  MsgPlantGrowSpeedUp_S2C::default_instance_->InitAsDefaultInstance();
  UserPlantInfo::default_instance_->InitAsDefaultInstance();
  MsgPlantUserInitData_S2C::default_instance_->InitAsDefaultInstance();
  MsgPlantNpcManger_C2S::default_instance_->InitAsDefaultInstance();
  MsgPlantNpcManger_S2C::default_instance_->InitAsDefaultInstance();
  MsgPlantReportRareSet_C2S::default_instance_->InitAsDefaultInstance();
  MsgPlantReportRareCut_C2S::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgPlant_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgPlant_2eproto {
  StaticDescriptorInitializer_MsgPlant_2eproto() {
    protobuf_AddDesc_MsgPlant_2eproto();
  }
} static_descriptor_initializer_MsgPlant_2eproto_;
const ::google::protobuf::EnumDescriptor* PLANT_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLANT_RESULT_descriptor_;
}
bool PLANT_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PLANT_OPERATE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLANT_OPERATE_TYPE_descriptor_;
}
bool PLANT_OPERATE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PLANT_INFO_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLANT_INFO_TYPE_descriptor_;
}
bool PLANT_INFO_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PlantDropInfo::kItemTypeFieldNumber;
const int PlantDropInfo::kItemCountFieldNumber;
#endif  // !_MSC_VER

PlantDropInfo::PlantDropInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.PlantDropInfo)
}

void PlantDropInfo::InitAsDefaultInstance() {
}

PlantDropInfo::PlantDropInfo(const PlantDropInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.PlantDropInfo)
}

void PlantDropInfo::SharedCtor() {
  _cached_size_ = 0;
  item_type_ = 0;
  item_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlantDropInfo::~PlantDropInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.PlantDropInfo)
  SharedDtor();
}

void PlantDropInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlantDropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlantDropInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlantDropInfo_descriptor_;
}

const PlantDropInfo& PlantDropInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

PlantDropInfo* PlantDropInfo::default_instance_ = NULL;

PlantDropInfo* PlantDropInfo::New() const {
  return new PlantDropInfo;
}

void PlantDropInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlantDropInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_type_, item_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlantDropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.PlantDropInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }

      // optional int32 item_count = 3;
      case 3: {
        if (tag == 24) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.PlantDropInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.PlantDropInfo)
  return false;
#undef DO_
}

void PlantDropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.PlantDropInfo)
  // optional int32 item_type = 1;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_type(), output);
  }

  // optional int32 item_count = 3;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.PlantDropInfo)
}

::google::protobuf::uint8* PlantDropInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.PlantDropInfo)
  // optional int32 item_type = 1;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_type(), target);
  }

  // optional int32 item_count = 3;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.PlantDropInfo)
  return target;
}

int PlantDropInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_type = 1;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_type());
    }

    // optional int32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlantDropInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlantDropInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlantDropInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlantDropInfo::MergeFrom(const PlantDropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlantDropInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlantDropInfo::CopyFrom(const PlantDropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlantDropInfo::IsInitialized() const {

  return true;
}

void PlantDropInfo::Swap(PlantDropInfo* other) {
  if (other != this) {
    std::swap(item_type_, other->item_type_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlantDropInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlantDropInfo_descriptor_;
  metadata.reflection = PlantDropInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlantCfg::kTypeIdFieldNumber;
const int MsgPlantCfg::kCountFieldNumber;
#endif  // !_MSC_VER

MsgPlantCfg::MsgPlantCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantCfg)
}

void MsgPlantCfg::InitAsDefaultInstance() {
}

MsgPlantCfg::MsgPlantCfg(const MsgPlantCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantCfg)
}

void MsgPlantCfg::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantCfg::~MsgPlantCfg() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantCfg)
  SharedDtor();
}

void MsgPlantCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantCfg_descriptor_;
}

const MsgPlantCfg& MsgPlantCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantCfg* MsgPlantCfg::default_instance_ = NULL;

MsgPlantCfg* MsgPlantCfg::New() const {
  return new MsgPlantCfg;
}

void MsgPlantCfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantCfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantCfg)
  return false;
#undef DO_
}

void MsgPlantCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantCfg)
  // optional int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantCfg)
}

::google::protobuf::uint8* MsgPlantCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantCfg)
  // optional int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantCfg)
  return target;
}

int MsgPlantCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantCfg::MergeFrom(const MsgPlantCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantCfg::CopyFrom(const MsgPlantCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantCfg::IsInitialized() const {

  return true;
}

void MsgPlantCfg::Swap(MsgPlantCfg* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantCfg_descriptor_;
  metadata.reflection = MsgPlantCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlantSetReq::kMsgTypeFieldNumber;
const int MsgPlantSetReq::kIggidFieldNumber;
const int MsgPlantSetReq::kPosXFieldNumber;
const int MsgPlantSetReq::kPosYFieldNumber;
const int MsgPlantSetReq::kPlantSeedTypeFieldNumber;
#endif  // !_MSC_VER

MsgPlantSetReq::MsgPlantSetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantSetReq)
}

void MsgPlantSetReq::InitAsDefaultInstance() {
}

MsgPlantSetReq::MsgPlantSetReq(const MsgPlantSetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantSetReq)
}

void MsgPlantSetReq::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1302;
  iggid_ = GOOGLE_LONGLONG(0);
  pos_x_ = 0;
  pos_y_ = 0;
  plant_seed_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantSetReq::~MsgPlantSetReq() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantSetReq)
  SharedDtor();
}

void MsgPlantSetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantSetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantSetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantSetReq_descriptor_;
}

const MsgPlantSetReq& MsgPlantSetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantSetReq* MsgPlantSetReq::default_instance_ = NULL;

MsgPlantSetReq* MsgPlantSetReq::New() const {
  return new MsgPlantSetReq;
}

void MsgPlantSetReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantSetReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(pos_x_, plant_seed_type_);
    msgtype_ = 1302;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantSetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantSetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_SET_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 3;
      case 3: {
        if (tag == 24) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 4;
      case 4: {
        if (tag == 32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_plant_seed_type;
        break;
      }

      // optional int32 plant_seed_type = 5;
      case 5: {
        if (tag == 40) {
         parse_plant_seed_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plant_seed_type_)));
          set_has_plant_seed_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantSetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantSetReq)
  return false;
#undef DO_
}

void MsgPlantSetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantSetReq)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_SET_REQ];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_x(), output);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_y(), output);
  }

  // optional int32 plant_seed_type = 5;
  if (has_plant_seed_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->plant_seed_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantSetReq)
}

::google::protobuf::uint8* MsgPlantSetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantSetReq)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_SET_REQ];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_x(), target);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_y(), target);
  }

  // optional int32 plant_seed_type = 5;
  if (has_plant_seed_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->plant_seed_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantSetReq)
  return target;
}

int MsgPlantSetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_SET_REQ];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 pos_x = 3;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 4;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int32 plant_seed_type = 5;
    if (has_plant_seed_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plant_seed_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantSetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantSetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantSetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantSetReq::MergeFrom(const MsgPlantSetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_plant_seed_type()) {
      set_plant_seed_type(from.plant_seed_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantSetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantSetReq::CopyFrom(const MsgPlantSetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantSetReq::IsInitialized() const {

  return true;
}

void MsgPlantSetReq::Swap(MsgPlantSetReq* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(plant_seed_type_, other->plant_seed_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantSetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantSetReq_descriptor_;
  metadata.reflection = MsgPlantSetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlantSet::kMsgTypeFieldNumber;
const int MsgPlantSet::kIggidFieldNumber;
const int MsgPlantSet::kResFieldNumber;
const int MsgPlantSet::kPosXFieldNumber;
const int MsgPlantSet::kPosYFieldNumber;
const int MsgPlantSet::kTemplateidFieldNumber;
const int MsgPlantSet::kPlantIdFieldNumber;
const int MsgPlantSet::kGrowBeginFieldNumber;
const int MsgPlantSet::kGrowTimeFieldNumber;
const int MsgPlantSet::kGrowStageFieldNumber;
const int MsgPlantSet::kProtectorIdFieldNumber;
#endif  // !_MSC_VER

MsgPlantSet::MsgPlantSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantSet)
}

void MsgPlantSet::InitAsDefaultInstance() {
}

MsgPlantSet::MsgPlantSet(const MsgPlantSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantSet)
}

void MsgPlantSet::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1303;
  iggid_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  templateid_ = 0;
  plant_id_ = GOOGLE_LONGLONG(0);
  grow_begin_ = GOOGLE_LONGLONG(0);
  grow_time_ = 0;
  grow_stage_ = 0;
  protectorid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantSet::~MsgPlantSet() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantSet)
  SharedDtor();
}

void MsgPlantSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantSet_descriptor_;
}

const MsgPlantSet& MsgPlantSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantSet* MsgPlantSet::default_instance_ = NULL;

MsgPlantSet* MsgPlantSet::New() const {
  return new MsgPlantSet;
}

void MsgPlantSet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantSet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(res_, templateid_);
    msgtype_ = 1303;
    iggid_ = GOOGLE_LONGLONG(0);
    grow_begin_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(protectorid_, grow_stage_);
    grow_time_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_SET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }

      // optional .MsgPB.PLANT_RESULT res = 3;
      case 3: {
        if (tag == 24) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::PLANT_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::PLANT_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 5;
      case 5: {
        if (tag == 40) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 6;
      case 6: {
        if (tag == 48) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_templateid;
        break;
      }

      // optional int32 templateid = 7;
      case 7: {
        if (tag == 56) {
         parse_templateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_plant_id;
        break;
      }

      // optional int64 plant_id = 8;
      case 8: {
        if (tag == 64) {
         parse_plant_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &plant_id_)));
          set_has_plant_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_grow_begin;
        break;
      }

      // optional int64 grow_begin = 9;
      case 9: {
        if (tag == 72) {
         parse_grow_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &grow_begin_)));
          set_has_grow_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_grow_time;
        break;
      }

      // optional int32 grow_time = 10;
      case 10: {
        if (tag == 80) {
         parse_grow_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grow_time_)));
          set_has_grow_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_grow_stage;
        break;
      }

      // optional int32 grow_stage = 11;
      case 11: {
        if (tag == 88) {
         parse_grow_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grow_stage_)));
          set_has_grow_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_protectorId;
        break;
      }

      // optional int64 protectorId = 12;
      case 12: {
        if (tag == 96) {
         parse_protectorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &protectorid_)));
          set_has_protectorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantSet)
  return false;
#undef DO_
}

void MsgPlantSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantSet)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_SET];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.PLANT_RESULT res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->res(), output);
  }

  // optional int32 pos_x = 5;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_x(), output);
  }

  // optional int32 pos_y = 6;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pos_y(), output);
  }

  // optional int32 templateid = 7;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->templateid(), output);
  }

  // optional int64 plant_id = 8;
  if (has_plant_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->plant_id(), output);
  }

  // optional int64 grow_begin = 9;
  if (has_grow_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->grow_begin(), output);
  }

  // optional int32 grow_time = 10;
  if (has_grow_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->grow_time(), output);
  }

  // optional int32 grow_stage = 11;
  if (has_grow_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->grow_stage(), output);
  }

  // optional int64 protectorId = 12;
  if (has_protectorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->protectorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantSet)
}

::google::protobuf::uint8* MsgPlantSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantSet)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_SET];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.PLANT_RESULT res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->res(), target);
  }

  // optional int32 pos_x = 5;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_x(), target);
  }

  // optional int32 pos_y = 6;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pos_y(), target);
  }

  // optional int32 templateid = 7;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->templateid(), target);
  }

  // optional int64 plant_id = 8;
  if (has_plant_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->plant_id(), target);
  }

  // optional int64 grow_begin = 9;
  if (has_grow_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->grow_begin(), target);
  }

  // optional int32 grow_time = 10;
  if (has_grow_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->grow_time(), target);
  }

  // optional int32 grow_stage = 11;
  if (has_grow_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->grow_stage(), target);
  }

  // optional int64 protectorId = 12;
  if (has_protectorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->protectorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantSet)
  return target;
}

int MsgPlantSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_SET];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.PLANT_RESULT res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional int32 pos_x = 5;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 6;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int32 templateid = 7;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templateid());
    }

    // optional int64 plant_id = 8;
    if (has_plant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->plant_id());
    }

    // optional int64 grow_begin = 9;
    if (has_grow_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->grow_begin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 grow_time = 10;
    if (has_grow_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grow_time());
    }

    // optional int32 grow_stage = 11;
    if (has_grow_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grow_stage());
    }

    // optional int64 protectorId = 12;
    if (has_protectorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->protectorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantSet::MergeFrom(const MsgPlantSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_plant_id()) {
      set_plant_id(from.plant_id());
    }
    if (from.has_grow_begin()) {
      set_grow_begin(from.grow_begin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_grow_time()) {
      set_grow_time(from.grow_time());
    }
    if (from.has_grow_stage()) {
      set_grow_stage(from.grow_stage());
    }
    if (from.has_protectorid()) {
      set_protectorid(from.protectorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantSet::CopyFrom(const MsgPlantSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantSet::IsInitialized() const {

  return true;
}

void MsgPlantSet::Swap(MsgPlantSet* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(res_, other->res_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(templateid_, other->templateid_);
    std::swap(plant_id_, other->plant_id_);
    std::swap(grow_begin_, other->grow_begin_);
    std::swap(grow_time_, other->grow_time_);
    std::swap(grow_stage_, other->grow_stage_);
    std::swap(protectorid_, other->protectorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantSet_descriptor_;
  metadata.reflection = MsgPlantSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlantCutReq::kMsgTypeFieldNumber;
const int MsgPlantCutReq::kIggidFieldNumber;
const int MsgPlantCutReq::kPosXFieldNumber;
const int MsgPlantCutReq::kPosYFieldNumber;
const int MsgPlantCutReq::kToolUuidFieldNumber;
const int MsgPlantCutReq::kDigPosXFieldNumber;
const int MsgPlantCutReq::kDigPosYFieldNumber;
const int MsgPlantCutReq::kDigIdFieldNumber;
#endif  // !_MSC_VER

MsgPlantCutReq::MsgPlantCutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantCutReq)
}

void MsgPlantCutReq::InitAsDefaultInstance() {
}

MsgPlantCutReq::MsgPlantCutReq(const MsgPlantCutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantCutReq)
}

void MsgPlantCutReq::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1309;
  iggid_ = GOOGLE_LONGLONG(0);
  pos_x_ = 0;
  pos_y_ = 0;
  tool_uuid_ = GOOGLE_LONGLONG(0);
  dig_pos_x_ = 0;
  dig_pos_y_ = 0;
  dig_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantCutReq::~MsgPlantCutReq() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantCutReq)
  SharedDtor();
}

void MsgPlantCutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantCutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantCutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantCutReq_descriptor_;
}

const MsgPlantCutReq& MsgPlantCutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantCutReq* MsgPlantCutReq::default_instance_ = NULL;

MsgPlantCutReq* MsgPlantCutReq::New() const {
  return new MsgPlantCutReq;
}

void MsgPlantCutReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantCutReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(pos_x_, dig_pos_y_);
    msgtype_ = 1309;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantCutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantCutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_CUT_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 3;
      case 3: {
        if (tag == 24) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 4;
      case 4: {
        if (tag == 32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tool_uuid;
        break;
      }

      // optional int64 tool_uuid = 5;
      case 5: {
        if (tag == 40) {
         parse_tool_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tool_uuid_)));
          set_has_tool_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dig_pos_x;
        break;
      }

      // optional int32 dig_pos_x = 6;
      case 6: {
        if (tag == 48) {
         parse_dig_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dig_pos_x_)));
          set_has_dig_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dig_pos_y;
        break;
      }

      // optional int32 dig_pos_y = 7;
      case 7: {
        if (tag == 56) {
         parse_dig_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dig_pos_y_)));
          set_has_dig_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dig_id;
        break;
      }

      // optional int64 dig_id = 8;
      case 8: {
        if (tag == 64) {
         parse_dig_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dig_id_)));
          set_has_dig_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantCutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantCutReq)
  return false;
#undef DO_
}

void MsgPlantCutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantCutReq)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_CUT_REQ];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_x(), output);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_y(), output);
  }

  // optional int64 tool_uuid = 5;
  if (has_tool_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->tool_uuid(), output);
  }

  // optional int32 dig_pos_x = 6;
  if (has_dig_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dig_pos_x(), output);
  }

  // optional int32 dig_pos_y = 7;
  if (has_dig_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dig_pos_y(), output);
  }

  // optional int64 dig_id = 8;
  if (has_dig_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->dig_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantCutReq)
}

::google::protobuf::uint8* MsgPlantCutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantCutReq)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_CUT_REQ];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_x(), target);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_y(), target);
  }

  // optional int64 tool_uuid = 5;
  if (has_tool_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->tool_uuid(), target);
  }

  // optional int32 dig_pos_x = 6;
  if (has_dig_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dig_pos_x(), target);
  }

  // optional int32 dig_pos_y = 7;
  if (has_dig_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dig_pos_y(), target);
  }

  // optional int64 dig_id = 8;
  if (has_dig_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->dig_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantCutReq)
  return target;
}

int MsgPlantCutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_CUT_REQ];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 pos_x = 3;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 4;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int64 tool_uuid = 5;
    if (has_tool_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tool_uuid());
    }

    // optional int32 dig_pos_x = 6;
    if (has_dig_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dig_pos_x());
    }

    // optional int32 dig_pos_y = 7;
    if (has_dig_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dig_pos_y());
    }

    // optional int64 dig_id = 8;
    if (has_dig_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dig_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantCutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantCutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantCutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantCutReq::MergeFrom(const MsgPlantCutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_tool_uuid()) {
      set_tool_uuid(from.tool_uuid());
    }
    if (from.has_dig_pos_x()) {
      set_dig_pos_x(from.dig_pos_x());
    }
    if (from.has_dig_pos_y()) {
      set_dig_pos_y(from.dig_pos_y());
    }
    if (from.has_dig_id()) {
      set_dig_id(from.dig_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantCutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantCutReq::CopyFrom(const MsgPlantCutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantCutReq::IsInitialized() const {

  return true;
}

void MsgPlantCutReq::Swap(MsgPlantCutReq* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(tool_uuid_, other->tool_uuid_);
    std::swap(dig_pos_x_, other->dig_pos_x_);
    std::swap(dig_pos_y_, other->dig_pos_y_);
    std::swap(dig_id_, other->dig_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantCutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantCutReq_descriptor_;
  metadata.reflection = MsgPlantCutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlantCut::kMsgTypeFieldNumber;
const int MsgPlantCut::kIggidFieldNumber;
const int MsgPlantCut::kResFieldNumber;
const int MsgPlantCut::kPosXFieldNumber;
const int MsgPlantCut::kPosYFieldNumber;
const int MsgPlantCut::kMaxHpFieldNumber;
const int MsgPlantCut::kCurrHpFieldNumber;
const int MsgPlantCut::kReduceHpFieldNumber;
const int MsgPlantCut::kDigPosXFieldNumber;
const int MsgPlantCut::kDigPosYFieldNumber;
const int MsgPlantCut::kDigIdFieldNumber;
#endif  // !_MSC_VER

MsgPlantCut::MsgPlantCut()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantCut)
}

void MsgPlantCut::InitAsDefaultInstance() {
}

MsgPlantCut::MsgPlantCut(const MsgPlantCut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantCut)
}

void MsgPlantCut::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1310;
  iggid_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  max_hp_ = 0;
  curr_hp_ = 0;
  reduce_hp_ = 0;
  dig_pos_x_ = 0;
  dig_pos_y_ = 0;
  dig_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantCut::~MsgPlantCut() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantCut)
  SharedDtor();
}

void MsgPlantCut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantCut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantCut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantCut_descriptor_;
}

const MsgPlantCut& MsgPlantCut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantCut* MsgPlantCut::default_instance_ = NULL;

MsgPlantCut* MsgPlantCut::New() const {
  return new MsgPlantCut;
}

void MsgPlantCut::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantCut*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(res_, reduce_hp_);
    msgtype_ = 1310;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ZR_(dig_pos_x_, dig_pos_y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantCut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantCut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_CUT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }

      // optional .MsgPB.PLANT_RESULT res = 3;
      case 3: {
        if (tag == 24) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::PLANT_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::PLANT_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 4;
      case 4: {
        if (tag == 32) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 5;
      case 5: {
        if (tag == 40) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_hp;
        break;
      }

      // optional int32 max_hp = 7;
      case 7: {
        if (tag == 56) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_curr_hp;
        break;
      }

      // optional int32 curr_hp = 8;
      case 8: {
        if (tag == 64) {
         parse_curr_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curr_hp_)));
          set_has_curr_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reduce_hp;
        break;
      }

      // optional int32 reduce_hp = 9;
      case 9: {
        if (tag == 72) {
         parse_reduce_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reduce_hp_)));
          set_has_reduce_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_dig_pos_x;
        break;
      }

      // optional int32 dig_pos_x = 10;
      case 10: {
        if (tag == 80) {
         parse_dig_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dig_pos_x_)));
          set_has_dig_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_dig_pos_y;
        break;
      }

      // optional int32 dig_pos_y = 11;
      case 11: {
        if (tag == 88) {
         parse_dig_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dig_pos_y_)));
          set_has_dig_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_dig_id;
        break;
      }

      // optional int64 dig_id = 12;
      case 12: {
        if (tag == 96) {
         parse_dig_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dig_id_)));
          set_has_dig_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantCut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantCut)
  return false;
#undef DO_
}

void MsgPlantCut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantCut)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_CUT];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.PLANT_RESULT res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->res(), output);
  }

  // optional int32 pos_x = 4;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_x(), output);
  }

  // optional int32 pos_y = 5;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_y(), output);
  }

  // optional int32 max_hp = 7;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_hp(), output);
  }

  // optional int32 curr_hp = 8;
  if (has_curr_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->curr_hp(), output);
  }

  // optional int32 reduce_hp = 9;
  if (has_reduce_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reduce_hp(), output);
  }

  // optional int32 dig_pos_x = 10;
  if (has_dig_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dig_pos_x(), output);
  }

  // optional int32 dig_pos_y = 11;
  if (has_dig_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dig_pos_y(), output);
  }

  // optional int64 dig_id = 12;
  if (has_dig_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->dig_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantCut)
}

::google::protobuf::uint8* MsgPlantCut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantCut)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_CUT];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.PLANT_RESULT res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->res(), target);
  }

  // optional int32 pos_x = 4;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_x(), target);
  }

  // optional int32 pos_y = 5;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_y(), target);
  }

  // optional int32 max_hp = 7;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_hp(), target);
  }

  // optional int32 curr_hp = 8;
  if (has_curr_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->curr_hp(), target);
  }

  // optional int32 reduce_hp = 9;
  if (has_reduce_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reduce_hp(), target);
  }

  // optional int32 dig_pos_x = 10;
  if (has_dig_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dig_pos_x(), target);
  }

  // optional int32 dig_pos_y = 11;
  if (has_dig_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dig_pos_y(), target);
  }

  // optional int64 dig_id = 12;
  if (has_dig_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->dig_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantCut)
  return target;
}

int MsgPlantCut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_CUT];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.PLANT_RESULT res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional int32 pos_x = 4;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 5;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int32 max_hp = 7;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hp());
    }

    // optional int32 curr_hp = 8;
    if (has_curr_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curr_hp());
    }

    // optional int32 reduce_hp = 9;
    if (has_reduce_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reduce_hp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 dig_pos_x = 10;
    if (has_dig_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dig_pos_x());
    }

    // optional int32 dig_pos_y = 11;
    if (has_dig_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dig_pos_y());
    }

    // optional int64 dig_id = 12;
    if (has_dig_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dig_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantCut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantCut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantCut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantCut::MergeFrom(const MsgPlantCut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_curr_hp()) {
      set_curr_hp(from.curr_hp());
    }
    if (from.has_reduce_hp()) {
      set_reduce_hp(from.reduce_hp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dig_pos_x()) {
      set_dig_pos_x(from.dig_pos_x());
    }
    if (from.has_dig_pos_y()) {
      set_dig_pos_y(from.dig_pos_y());
    }
    if (from.has_dig_id()) {
      set_dig_id(from.dig_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantCut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantCut::CopyFrom(const MsgPlantCut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantCut::IsInitialized() const {

  return true;
}

void MsgPlantCut::Swap(MsgPlantCut* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(res_, other->res_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(curr_hp_, other->curr_hp_);
    std::swap(reduce_hp_, other->reduce_hp_);
    std::swap(dig_pos_x_, other->dig_pos_x_);
    std::swap(dig_pos_y_, other->dig_pos_y_);
    std::swap(dig_id_, other->dig_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantCut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantCut_descriptor_;
  metadata.reflection = MsgPlantCut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlantInfo_PlantInfo::kPlantTypeFieldNumber;
const int MsgPlantInfo_PlantInfo::kPosXFieldNumber;
const int MsgPlantInfo_PlantInfo::kPosYFieldNumber;
const int MsgPlantInfo_PlantInfo::kGrowStageFieldNumber;
const int MsgPlantInfo_PlantInfo::kTemplateidFieldNumber;
const int MsgPlantInfo_PlantInfo::kPlantIdFieldNumber;
const int MsgPlantInfo_PlantInfo::kGrowBeginFieldNumber;
const int MsgPlantInfo_PlantInfo::kGrowTimeFieldNumber;
const int MsgPlantInfo_PlantInfo::kProtectorIdFieldNumber;
#endif  // !_MSC_VER

MsgPlantInfo_PlantInfo::MsgPlantInfo_PlantInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantInfo.PlantInfo)
}

void MsgPlantInfo_PlantInfo::InitAsDefaultInstance() {
}

MsgPlantInfo_PlantInfo::MsgPlantInfo_PlantInfo(const MsgPlantInfo_PlantInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantInfo.PlantInfo)
}

void MsgPlantInfo_PlantInfo::SharedCtor() {
  _cached_size_ = 0;
  plant_type_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  grow_stage_ = 0;
  templateid_ = 0;
  plant_id_ = GOOGLE_LONGLONG(0);
  grow_begin_ = GOOGLE_LONGLONG(0);
  grow_time_ = 0;
  protectorid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantInfo_PlantInfo::~MsgPlantInfo_PlantInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantInfo.PlantInfo)
  SharedDtor();
}

void MsgPlantInfo_PlantInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantInfo_PlantInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantInfo_PlantInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantInfo_PlantInfo_descriptor_;
}

const MsgPlantInfo_PlantInfo& MsgPlantInfo_PlantInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantInfo_PlantInfo* MsgPlantInfo_PlantInfo::default_instance_ = NULL;

MsgPlantInfo_PlantInfo* MsgPlantInfo_PlantInfo::New() const {
  return new MsgPlantInfo_PlantInfo;
}

void MsgPlantInfo_PlantInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantInfo_PlantInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(plant_type_, grow_begin_);
  }
  protectorid_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantInfo_PlantInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantInfo.PlantInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 plant_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plant_type_)));
          set_has_plant_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 2;
      case 2: {
        if (tag == 16) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 3;
      case 3: {
        if (tag == 24) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_grow_stage;
        break;
      }

      // optional int32 grow_stage = 4;
      case 4: {
        if (tag == 32) {
         parse_grow_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grow_stage_)));
          set_has_grow_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_templateid;
        break;
      }

      // optional int32 templateid = 5;
      case 5: {
        if (tag == 40) {
         parse_templateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_plant_id;
        break;
      }

      // optional int64 plant_id = 6;
      case 6: {
        if (tag == 48) {
         parse_plant_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &plant_id_)));
          set_has_plant_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_grow_begin;
        break;
      }

      // optional int64 grow_begin = 7;
      case 7: {
        if (tag == 56) {
         parse_grow_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &grow_begin_)));
          set_has_grow_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_grow_time;
        break;
      }

      // optional int32 grow_time = 8;
      case 8: {
        if (tag == 64) {
         parse_grow_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grow_time_)));
          set_has_grow_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_protectorId;
        break;
      }

      // optional int64 protectorId = 9;
      case 9: {
        if (tag == 72) {
         parse_protectorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &protectorid_)));
          set_has_protectorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantInfo.PlantInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantInfo.PlantInfo)
  return false;
#undef DO_
}

void MsgPlantInfo_PlantInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantInfo.PlantInfo)
  // optional int32 plant_type = 1;
  if (has_plant_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plant_type(), output);
  }

  // optional int32 pos_x = 2;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_x(), output);
  }

  // optional int32 pos_y = 3;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_y(), output);
  }

  // optional int32 grow_stage = 4;
  if (has_grow_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->grow_stage(), output);
  }

  // optional int32 templateid = 5;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->templateid(), output);
  }

  // optional int64 plant_id = 6;
  if (has_plant_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->plant_id(), output);
  }

  // optional int64 grow_begin = 7;
  if (has_grow_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->grow_begin(), output);
  }

  // optional int32 grow_time = 8;
  if (has_grow_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->grow_time(), output);
  }

  // optional int64 protectorId = 9;
  if (has_protectorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->protectorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantInfo.PlantInfo)
}

::google::protobuf::uint8* MsgPlantInfo_PlantInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantInfo.PlantInfo)
  // optional int32 plant_type = 1;
  if (has_plant_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plant_type(), target);
  }

  // optional int32 pos_x = 2;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_x(), target);
  }

  // optional int32 pos_y = 3;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_y(), target);
  }

  // optional int32 grow_stage = 4;
  if (has_grow_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->grow_stage(), target);
  }

  // optional int32 templateid = 5;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->templateid(), target);
  }

  // optional int64 plant_id = 6;
  if (has_plant_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->plant_id(), target);
  }

  // optional int64 grow_begin = 7;
  if (has_grow_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->grow_begin(), target);
  }

  // optional int32 grow_time = 8;
  if (has_grow_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->grow_time(), target);
  }

  // optional int64 protectorId = 9;
  if (has_protectorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->protectorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantInfo.PlantInfo)
  return target;
}

int MsgPlantInfo_PlantInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 plant_type = 1;
    if (has_plant_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plant_type());
    }

    // optional int32 pos_x = 2;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 3;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int32 grow_stage = 4;
    if (has_grow_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grow_stage());
    }

    // optional int32 templateid = 5;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templateid());
    }

    // optional int64 plant_id = 6;
    if (has_plant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->plant_id());
    }

    // optional int64 grow_begin = 7;
    if (has_grow_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->grow_begin());
    }

    // optional int32 grow_time = 8;
    if (has_grow_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grow_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 protectorId = 9;
    if (has_protectorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->protectorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantInfo_PlantInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantInfo_PlantInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantInfo_PlantInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantInfo_PlantInfo::MergeFrom(const MsgPlantInfo_PlantInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plant_type()) {
      set_plant_type(from.plant_type());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_grow_stage()) {
      set_grow_stage(from.grow_stage());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_plant_id()) {
      set_plant_id(from.plant_id());
    }
    if (from.has_grow_begin()) {
      set_grow_begin(from.grow_begin());
    }
    if (from.has_grow_time()) {
      set_grow_time(from.grow_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_protectorid()) {
      set_protectorid(from.protectorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantInfo_PlantInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantInfo_PlantInfo::CopyFrom(const MsgPlantInfo_PlantInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantInfo_PlantInfo::IsInitialized() const {

  return true;
}

void MsgPlantInfo_PlantInfo::Swap(MsgPlantInfo_PlantInfo* other) {
  if (other != this) {
    std::swap(plant_type_, other->plant_type_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(grow_stage_, other->grow_stage_);
    std::swap(templateid_, other->templateid_);
    std::swap(plant_id_, other->plant_id_);
    std::swap(grow_begin_, other->grow_begin_);
    std::swap(grow_time_, other->grow_time_);
    std::swap(protectorid_, other->protectorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantInfo_PlantInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantInfo_PlantInfo_descriptor_;
  metadata.reflection = MsgPlantInfo_PlantInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgPlantInfo::kMsgTypeFieldNumber;
const int MsgPlantInfo::kIggidFieldNumber;
const int MsgPlantInfo::kInfoTypeFieldNumber;
const int MsgPlantInfo::kPlantInfoFieldNumber;
const int MsgPlantInfo::kMapidFieldNumber;
const int MsgPlantInfo::kBinitFieldNumber;
#endif  // !_MSC_VER

MsgPlantInfo::MsgPlantInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantInfo)
}

void MsgPlantInfo::InitAsDefaultInstance() {
}

MsgPlantInfo::MsgPlantInfo(const MsgPlantInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantInfo)
}

void MsgPlantInfo::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1306;
  iggid_ = GOOGLE_LONGLONG(0);
  info_type_ = 0;
  mapid_ = 0;
  binit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantInfo::~MsgPlantInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantInfo)
  SharedDtor();
}

void MsgPlantInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantInfo_descriptor_;
}

const MsgPlantInfo& MsgPlantInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantInfo* MsgPlantInfo::default_instance_ = NULL;

MsgPlantInfo* MsgPlantInfo::New() const {
  return new MsgPlantInfo;
}

void MsgPlantInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(mapid_, binit_);
    msgtype_ = 1306;
    iggid_ = GOOGLE_LONGLONG(0);
    info_type_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  plant_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_INFO];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_info_type;
        break;
      }

      // optional .MsgPB.PLANT_INFO_TYPE info_type = 3;
      case 3: {
        if (tag == 24) {
         parse_info_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::PLANT_INFO_TYPE_IsValid(value)) {
            set_info_type(static_cast< ::MsgPB::PLANT_INFO_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_plant_info;
        break;
      }

      // repeated .MsgPB.MsgPlantInfo.PlantInfo plant_info = 4;
      case 4: {
        if (tag == 34) {
         parse_plant_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plant_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_plant_info;
        if (input->ExpectTag(40)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 5;
      case 5: {
        if (tag == 40) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_binit;
        break;
      }

      // optional int32 binit = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_binit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &binit_)));
          set_has_binit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantInfo)
  return false;
#undef DO_
}

void MsgPlantInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantInfo)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_INFO];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional .MsgPB.PLANT_INFO_TYPE info_type = 3;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->info_type(), output);
  }

  // repeated .MsgPB.MsgPlantInfo.PlantInfo plant_info = 4;
  for (int i = 0; i < this->plant_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->plant_info(i), output);
  }

  // optional int32 mapid = 5;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapid(), output);
  }

  // optional int32 binit = 6 [default = 0];
  if (has_binit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->binit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantInfo)
}

::google::protobuf::uint8* MsgPlantInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantInfo)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_INFO];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional .MsgPB.PLANT_INFO_TYPE info_type = 3;
  if (has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->info_type(), target);
  }

  // repeated .MsgPB.MsgPlantInfo.PlantInfo plant_info = 4;
  for (int i = 0; i < this->plant_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->plant_info(i), target);
  }

  // optional int32 mapid = 5;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapid(), target);
  }

  // optional int32 binit = 6 [default = 0];
  if (has_binit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->binit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantInfo)
  return target;
}

int MsgPlantInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_INFO];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional .MsgPB.PLANT_INFO_TYPE info_type = 3;
    if (has_info_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->info_type());
    }

    // optional int32 mapid = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 binit = 6 [default = 0];
    if (has_binit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->binit());
    }

  }
  // repeated .MsgPB.MsgPlantInfo.PlantInfo plant_info = 4;
  total_size += 1 * this->plant_info_size();
  for (int i = 0; i < this->plant_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plant_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantInfo::MergeFrom(const MsgPlantInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  plant_info_.MergeFrom(from.plant_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_info_type()) {
      set_info_type(from.info_type());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_binit()) {
      set_binit(from.binit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantInfo::CopyFrom(const MsgPlantInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantInfo::IsInitialized() const {

  return true;
}

void MsgPlantInfo::Swap(MsgPlantInfo* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(info_type_, other->info_type_);
    plant_info_.Swap(&other->plant_info_);
    std::swap(mapid_, other->mapid_);
    std::swap(binit_, other->binit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantInfo_descriptor_;
  metadata.reflection = MsgPlantInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlantGrowSpeedUp_C2S::kMsgTypeFieldNumber;
const int MsgPlantGrowSpeedUp_C2S::kPosXFieldNumber;
const int MsgPlantGrowSpeedUp_C2S::kPosYFieldNumber;
const int MsgPlantGrowSpeedUp_C2S::kBadgeBuildTypeFieldNumber;
const int MsgPlantGrowSpeedUp_C2S::kBadgePosXFieldNumber;
const int MsgPlantGrowSpeedUp_C2S::kBadgePosYFieldNumber;
#endif  // !_MSC_VER

MsgPlantGrowSpeedUp_C2S::MsgPlantGrowSpeedUp_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantGrowSpeedUp_C2S)
}

void MsgPlantGrowSpeedUp_C2S::InitAsDefaultInstance() {
}

MsgPlantGrowSpeedUp_C2S::MsgPlantGrowSpeedUp_C2S(const MsgPlantGrowSpeedUp_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantGrowSpeedUp_C2S)
}

void MsgPlantGrowSpeedUp_C2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1311;
  pos_x_ = 0;
  pos_y_ = 0;
  badge_build_type_ = 0;
  badge_pos_x_ = 0;
  badge_pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantGrowSpeedUp_C2S::~MsgPlantGrowSpeedUp_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantGrowSpeedUp_C2S)
  SharedDtor();
}

void MsgPlantGrowSpeedUp_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantGrowSpeedUp_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantGrowSpeedUp_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantGrowSpeedUp_C2S_descriptor_;
}

const MsgPlantGrowSpeedUp_C2S& MsgPlantGrowSpeedUp_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantGrowSpeedUp_C2S* MsgPlantGrowSpeedUp_C2S::default_instance_ = NULL;

MsgPlantGrowSpeedUp_C2S* MsgPlantGrowSpeedUp_C2S::New() const {
  return new MsgPlantGrowSpeedUp_C2S;
}

void MsgPlantGrowSpeedUp_C2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantGrowSpeedUp_C2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(pos_x_, badge_pos_y_);
    msgtype_ = 1311;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantGrowSpeedUp_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantGrowSpeedUp_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_GROW_SPEEDUP_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 2;
      case 2: {
        if (tag == 16) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 3;
      case 3: {
        if (tag == 24) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_badge_build_type;
        break;
      }

      // optional int32 badge_build_type = 4;
      case 4: {
        if (tag == 32) {
         parse_badge_build_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badge_build_type_)));
          set_has_badge_build_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_badge_pos_x;
        break;
      }

      // optional int32 badge_pos_x = 5;
      case 5: {
        if (tag == 40) {
         parse_badge_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badge_pos_x_)));
          set_has_badge_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_badge_pos_y;
        break;
      }

      // optional int32 badge_pos_y = 6;
      case 6: {
        if (tag == 48) {
         parse_badge_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badge_pos_y_)));
          set_has_badge_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantGrowSpeedUp_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantGrowSpeedUp_C2S)
  return false;
#undef DO_
}

void MsgPlantGrowSpeedUp_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantGrowSpeedUp_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_GROW_SPEEDUP_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 pos_x = 2;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_x(), output);
  }

  // optional int32 pos_y = 3;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_y(), output);
  }

  // optional int32 badge_build_type = 4;
  if (has_badge_build_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->badge_build_type(), output);
  }

  // optional int32 badge_pos_x = 5;
  if (has_badge_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->badge_pos_x(), output);
  }

  // optional int32 badge_pos_y = 6;
  if (has_badge_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->badge_pos_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantGrowSpeedUp_C2S)
}

::google::protobuf::uint8* MsgPlantGrowSpeedUp_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantGrowSpeedUp_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_GROW_SPEEDUP_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 pos_x = 2;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_x(), target);
  }

  // optional int32 pos_y = 3;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_y(), target);
  }

  // optional int32 badge_build_type = 4;
  if (has_badge_build_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->badge_build_type(), target);
  }

  // optional int32 badge_pos_x = 5;
  if (has_badge_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->badge_pos_x(), target);
  }

  // optional int32 badge_pos_y = 6;
  if (has_badge_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->badge_pos_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantGrowSpeedUp_C2S)
  return target;
}

int MsgPlantGrowSpeedUp_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_GROW_SPEEDUP_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 pos_x = 2;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 3;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int32 badge_build_type = 4;
    if (has_badge_build_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badge_build_type());
    }

    // optional int32 badge_pos_x = 5;
    if (has_badge_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badge_pos_x());
    }

    // optional int32 badge_pos_y = 6;
    if (has_badge_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badge_pos_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantGrowSpeedUp_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantGrowSpeedUp_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantGrowSpeedUp_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantGrowSpeedUp_C2S::MergeFrom(const MsgPlantGrowSpeedUp_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_badge_build_type()) {
      set_badge_build_type(from.badge_build_type());
    }
    if (from.has_badge_pos_x()) {
      set_badge_pos_x(from.badge_pos_x());
    }
    if (from.has_badge_pos_y()) {
      set_badge_pos_y(from.badge_pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantGrowSpeedUp_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantGrowSpeedUp_C2S::CopyFrom(const MsgPlantGrowSpeedUp_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantGrowSpeedUp_C2S::IsInitialized() const {

  return true;
}

void MsgPlantGrowSpeedUp_C2S::Swap(MsgPlantGrowSpeedUp_C2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(badge_build_type_, other->badge_build_type_);
    std::swap(badge_pos_x_, other->badge_pos_x_);
    std::swap(badge_pos_y_, other->badge_pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantGrowSpeedUp_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantGrowSpeedUp_C2S_descriptor_;
  metadata.reflection = MsgPlantGrowSpeedUp_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlantGrowSpeedUp_S2C::kMsgTypeFieldNumber;
const int MsgPlantGrowSpeedUp_S2C::kPosXFieldNumber;
const int MsgPlantGrowSpeedUp_S2C::kPosYFieldNumber;
const int MsgPlantGrowSpeedUp_S2C::kResFieldNumber;
#endif  // !_MSC_VER

MsgPlantGrowSpeedUp_S2C::MsgPlantGrowSpeedUp_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantGrowSpeedUp_S2C)
}

void MsgPlantGrowSpeedUp_S2C::InitAsDefaultInstance() {
}

MsgPlantGrowSpeedUp_S2C::MsgPlantGrowSpeedUp_S2C(const MsgPlantGrowSpeedUp_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantGrowSpeedUp_S2C)
}

void MsgPlantGrowSpeedUp_S2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1312;
  pos_x_ = 0;
  pos_y_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantGrowSpeedUp_S2C::~MsgPlantGrowSpeedUp_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantGrowSpeedUp_S2C)
  SharedDtor();
}

void MsgPlantGrowSpeedUp_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantGrowSpeedUp_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantGrowSpeedUp_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantGrowSpeedUp_S2C_descriptor_;
}

const MsgPlantGrowSpeedUp_S2C& MsgPlantGrowSpeedUp_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantGrowSpeedUp_S2C* MsgPlantGrowSpeedUp_S2C::default_instance_ = NULL;

MsgPlantGrowSpeedUp_S2C* MsgPlantGrowSpeedUp_S2C::New() const {
  return new MsgPlantGrowSpeedUp_S2C;
}

void MsgPlantGrowSpeedUp_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantGrowSpeedUp_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(pos_x_, res_);
    msgtype_ = 1312;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantGrowSpeedUp_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantGrowSpeedUp_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_GROW_SPEEDUP_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 4;
      case 4: {
        if (tag == 32) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 5;
      case 5: {
        if (tag == 40) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_res;
        break;
      }

      // optional .MsgPB.PLANT_RESULT res = 6;
      case 6: {
        if (tag == 48) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::PLANT_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::PLANT_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantGrowSpeedUp_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantGrowSpeedUp_S2C)
  return false;
#undef DO_
}

void MsgPlantGrowSpeedUp_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantGrowSpeedUp_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_GROW_SPEEDUP_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int32 pos_x = 4;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_x(), output);
  }

  // optional int32 pos_y = 5;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_y(), output);
  }

  // optional .MsgPB.PLANT_RESULT res = 6;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantGrowSpeedUp_S2C)
}

::google::protobuf::uint8* MsgPlantGrowSpeedUp_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantGrowSpeedUp_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_GROW_SPEEDUP_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int32 pos_x = 4;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_x(), target);
  }

  // optional int32 pos_y = 5;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_y(), target);
  }

  // optional .MsgPB.PLANT_RESULT res = 6;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantGrowSpeedUp_S2C)
  return target;
}

int MsgPlantGrowSpeedUp_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_GROW_SPEEDUP_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int32 pos_x = 4;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 5;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional .MsgPB.PLANT_RESULT res = 6;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantGrowSpeedUp_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantGrowSpeedUp_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantGrowSpeedUp_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantGrowSpeedUp_S2C::MergeFrom(const MsgPlantGrowSpeedUp_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantGrowSpeedUp_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantGrowSpeedUp_S2C::CopyFrom(const MsgPlantGrowSpeedUp_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantGrowSpeedUp_S2C::IsInitialized() const {

  return true;
}

void MsgPlantGrowSpeedUp_S2C::Swap(MsgPlantGrowSpeedUp_S2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantGrowSpeedUp_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantGrowSpeedUp_S2C_descriptor_;
  metadata.reflection = MsgPlantGrowSpeedUp_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserPlantInfo::kPlantTypeFieldNumber;
const int UserPlantInfo::kPosXFieldNumber;
const int UserPlantInfo::kPosYFieldNumber;
const int UserPlantInfo::kGrowStageFieldNumber;
const int UserPlantInfo::kPlantIdFieldNumber;
const int UserPlantInfo::kGrowBeginFieldNumber;
const int UserPlantInfo::kGrowTimeFieldNumber;
const int UserPlantInfo::kProtectorIdFieldNumber;
#endif  // !_MSC_VER

UserPlantInfo::UserPlantInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.UserPlantInfo)
}

void UserPlantInfo::InitAsDefaultInstance() {
}

UserPlantInfo::UserPlantInfo(const UserPlantInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.UserPlantInfo)
}

void UserPlantInfo::SharedCtor() {
  _cached_size_ = 0;
  plant_type_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  grow_stage_ = 0;
  plant_id_ = GOOGLE_LONGLONG(0);
  grow_begin_ = GOOGLE_LONGLONG(0);
  grow_time_ = 0;
  protectorid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPlantInfo::~UserPlantInfo() {
  // @@protoc_insertion_point(destructor:MsgPB.UserPlantInfo)
  SharedDtor();
}

void UserPlantInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserPlantInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPlantInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPlantInfo_descriptor_;
}

const UserPlantInfo& UserPlantInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

UserPlantInfo* UserPlantInfo::default_instance_ = NULL;

UserPlantInfo* UserPlantInfo::New() const {
  return new UserPlantInfo;
}

void UserPlantInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserPlantInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(plant_type_, grow_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPlantInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.UserPlantInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 plant_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plant_type_)));
          set_has_plant_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 2;
      case 2: {
        if (tag == 16) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 3;
      case 3: {
        if (tag == 24) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_grow_stage;
        break;
      }

      // optional int32 grow_stage = 4;
      case 4: {
        if (tag == 32) {
         parse_grow_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grow_stage_)));
          set_has_grow_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_plant_id;
        break;
      }

      // optional int64 plant_id = 6;
      case 6: {
        if (tag == 48) {
         parse_plant_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &plant_id_)));
          set_has_plant_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_grow_begin;
        break;
      }

      // optional int64 grow_begin = 7;
      case 7: {
        if (tag == 56) {
         parse_grow_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &grow_begin_)));
          set_has_grow_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_grow_time;
        break;
      }

      // optional int32 grow_time = 8;
      case 8: {
        if (tag == 64) {
         parse_grow_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grow_time_)));
          set_has_grow_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_protectorId;
        break;
      }

      // optional int64 protectorId = 9;
      case 9: {
        if (tag == 72) {
         parse_protectorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &protectorid_)));
          set_has_protectorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.UserPlantInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.UserPlantInfo)
  return false;
#undef DO_
}

void UserPlantInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.UserPlantInfo)
  // optional int32 plant_type = 1;
  if (has_plant_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plant_type(), output);
  }

  // optional int32 pos_x = 2;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_x(), output);
  }

  // optional int32 pos_y = 3;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_y(), output);
  }

  // optional int32 grow_stage = 4;
  if (has_grow_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->grow_stage(), output);
  }

  // optional int64 plant_id = 6;
  if (has_plant_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->plant_id(), output);
  }

  // optional int64 grow_begin = 7;
  if (has_grow_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->grow_begin(), output);
  }

  // optional int32 grow_time = 8;
  if (has_grow_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->grow_time(), output);
  }

  // optional int64 protectorId = 9;
  if (has_protectorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->protectorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.UserPlantInfo)
}

::google::protobuf::uint8* UserPlantInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.UserPlantInfo)
  // optional int32 plant_type = 1;
  if (has_plant_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plant_type(), target);
  }

  // optional int32 pos_x = 2;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_x(), target);
  }

  // optional int32 pos_y = 3;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_y(), target);
  }

  // optional int32 grow_stage = 4;
  if (has_grow_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->grow_stage(), target);
  }

  // optional int64 plant_id = 6;
  if (has_plant_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->plant_id(), target);
  }

  // optional int64 grow_begin = 7;
  if (has_grow_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->grow_begin(), target);
  }

  // optional int32 grow_time = 8;
  if (has_grow_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->grow_time(), target);
  }

  // optional int64 protectorId = 9;
  if (has_protectorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->protectorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.UserPlantInfo)
  return target;
}

int UserPlantInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 plant_type = 1;
    if (has_plant_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plant_type());
    }

    // optional int32 pos_x = 2;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 3;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int32 grow_stage = 4;
    if (has_grow_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grow_stage());
    }

    // optional int64 plant_id = 6;
    if (has_plant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->plant_id());
    }

    // optional int64 grow_begin = 7;
    if (has_grow_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->grow_begin());
    }

    // optional int32 grow_time = 8;
    if (has_grow_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grow_time());
    }

    // optional int64 protectorId = 9;
    if (has_protectorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->protectorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPlantInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPlantInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPlantInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPlantInfo::MergeFrom(const UserPlantInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plant_type()) {
      set_plant_type(from.plant_type());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_grow_stage()) {
      set_grow_stage(from.grow_stage());
    }
    if (from.has_plant_id()) {
      set_plant_id(from.plant_id());
    }
    if (from.has_grow_begin()) {
      set_grow_begin(from.grow_begin());
    }
    if (from.has_grow_time()) {
      set_grow_time(from.grow_time());
    }
    if (from.has_protectorid()) {
      set_protectorid(from.protectorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPlantInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPlantInfo::CopyFrom(const UserPlantInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPlantInfo::IsInitialized() const {

  return true;
}

void UserPlantInfo::Swap(UserPlantInfo* other) {
  if (other != this) {
    std::swap(plant_type_, other->plant_type_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(grow_stage_, other->grow_stage_);
    std::swap(plant_id_, other->plant_id_);
    std::swap(grow_begin_, other->grow_begin_);
    std::swap(grow_time_, other->grow_time_);
    std::swap(protectorid_, other->protectorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPlantInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPlantInfo_descriptor_;
  metadata.reflection = UserPlantInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlantUserInitData_S2C::kMsgTypeFieldNumber;
const int MsgPlantUserInitData_S2C::kIggidFieldNumber;
const int MsgPlantUserInitData_S2C::kPlantInfoFieldNumber;
const int MsgPlantUserInitData_S2C::kMapidFieldNumber;
const int MsgPlantUserInitData_S2C::kTailFieldNumber;
#endif  // !_MSC_VER

MsgPlantUserInitData_S2C::MsgPlantUserInitData_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantUserInitData_S2C)
}

void MsgPlantUserInitData_S2C::InitAsDefaultInstance() {
}

MsgPlantUserInitData_S2C::MsgPlantUserInitData_S2C(const MsgPlantUserInitData_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantUserInitData_S2C)
}

void MsgPlantUserInitData_S2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1313;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  tail_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantUserInitData_S2C::~MsgPlantUserInitData_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantUserInitData_S2C)
  SharedDtor();
}

void MsgPlantUserInitData_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantUserInitData_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantUserInitData_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantUserInitData_S2C_descriptor_;
}

const MsgPlantUserInitData_S2C& MsgPlantUserInitData_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantUserInitData_S2C* MsgPlantUserInitData_S2C::default_instance_ = NULL;

MsgPlantUserInitData_S2C* MsgPlantUserInitData_S2C::New() const {
  return new MsgPlantUserInitData_S2C;
}

void MsgPlantUserInitData_S2C::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    msgtype_ = 1313;
    iggid_ = GOOGLE_LONGLONG(0);
    mapid_ = 0;
    tail_ = 0;
  }
  plant_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantUserInitData_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantUserInitData_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_USER_INIT_DATA_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_plant_info;
        break;
      }

      // repeated .MsgPB.UserPlantInfo plant_info = 3;
      case 3: {
        if (tag == 26) {
         parse_plant_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plant_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_plant_info;
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tail;
        break;
      }

      // optional int32 tail = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_tail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tail_)));
          set_has_tail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantUserInitData_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantUserInitData_S2C)
  return false;
#undef DO_
}

void MsgPlantUserInitData_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantUserInitData_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_USER_INIT_DATA_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // repeated .MsgPB.UserPlantInfo plant_info = 3;
  for (int i = 0; i < this->plant_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->plant_info(i), output);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapid(), output);
  }

  // optional int32 tail = 5 [default = 0];
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantUserInitData_S2C)
}

::google::protobuf::uint8* MsgPlantUserInitData_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantUserInitData_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_USER_INIT_DATA_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // repeated .MsgPB.UserPlantInfo plant_info = 3;
  for (int i = 0; i < this->plant_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->plant_info(i), target);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapid(), target);
  }

  // optional int32 tail = 5 [default = 0];
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantUserInitData_S2C)
  return target;
}

int MsgPlantUserInitData_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_USER_INIT_DATA_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 tail = 5 [default = 0];
    if (has_tail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tail());
    }

  }
  // repeated .MsgPB.UserPlantInfo plant_info = 3;
  total_size += 1 * this->plant_info_size();
  for (int i = 0; i < this->plant_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plant_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantUserInitData_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantUserInitData_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantUserInitData_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantUserInitData_S2C::MergeFrom(const MsgPlantUserInitData_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  plant_info_.MergeFrom(from.plant_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_tail()) {
      set_tail(from.tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantUserInitData_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantUserInitData_S2C::CopyFrom(const MsgPlantUserInitData_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantUserInitData_S2C::IsInitialized() const {

  return true;
}

void MsgPlantUserInitData_S2C::Swap(MsgPlantUserInitData_S2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    plant_info_.Swap(&other->plant_info_);
    std::swap(mapid_, other->mapid_);
    std::swap(tail_, other->tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantUserInitData_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantUserInitData_S2C_descriptor_;
  metadata.reflection = MsgPlantUserInitData_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlantNpcManger_C2S::kMsgTypeFieldNumber;
const int MsgPlantNpcManger_C2S::kIggidFieldNumber;
const int MsgPlantNpcManger_C2S::kPosXFieldNumber;
const int MsgPlantNpcManger_C2S::kPosYFieldNumber;
const int MsgPlantNpcManger_C2S::kProtectorIdFieldNumber;
#endif  // !_MSC_VER

MsgPlantNpcManger_C2S::MsgPlantNpcManger_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantNpcManger_C2S)
}

void MsgPlantNpcManger_C2S::InitAsDefaultInstance() {
}

MsgPlantNpcManger_C2S::MsgPlantNpcManger_C2S(const MsgPlantNpcManger_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantNpcManger_C2S)
}

void MsgPlantNpcManger_C2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1316;
  iggid_ = GOOGLE_LONGLONG(0);
  pos_x_ = 0;
  pos_y_ = 0;
  protector_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantNpcManger_C2S::~MsgPlantNpcManger_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantNpcManger_C2S)
  SharedDtor();
}

void MsgPlantNpcManger_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantNpcManger_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantNpcManger_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantNpcManger_C2S_descriptor_;
}

const MsgPlantNpcManger_C2S& MsgPlantNpcManger_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantNpcManger_C2S* MsgPlantNpcManger_C2S::default_instance_ = NULL;

MsgPlantNpcManger_C2S* MsgPlantNpcManger_C2S::New() const {
  return new MsgPlantNpcManger_C2S;
}

void MsgPlantNpcManger_C2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantNpcManger_C2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(pos_x_, pos_y_);
    msgtype_ = 1316;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantNpcManger_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantNpcManger_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_NPC_MANAGER_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 3;
      case 3: {
        if (tag == 24) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 4;
      case 4: {
        if (tag == 32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_protector_id;
        break;
      }

      // optional int64 protector_id = 5;
      case 5: {
        if (tag == 40) {
         parse_protector_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &protector_id_)));
          set_has_protector_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantNpcManger_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantNpcManger_C2S)
  return false;
#undef DO_
}

void MsgPlantNpcManger_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantNpcManger_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_NPC_MANAGER_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_x(), output);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_y(), output);
  }

  // optional int64 protector_id = 5;
  if (has_protector_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->protector_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantNpcManger_C2S)
}

::google::protobuf::uint8* MsgPlantNpcManger_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantNpcManger_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_NPC_MANAGER_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_x(), target);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_y(), target);
  }

  // optional int64 protector_id = 5;
  if (has_protector_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->protector_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantNpcManger_C2S)
  return target;
}

int MsgPlantNpcManger_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_NPC_MANAGER_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 pos_x = 3;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 4;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int64 protector_id = 5;
    if (has_protector_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->protector_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantNpcManger_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantNpcManger_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantNpcManger_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantNpcManger_C2S::MergeFrom(const MsgPlantNpcManger_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_protector_id()) {
      set_protector_id(from.protector_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantNpcManger_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantNpcManger_C2S::CopyFrom(const MsgPlantNpcManger_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantNpcManger_C2S::IsInitialized() const {

  return true;
}

void MsgPlantNpcManger_C2S::Swap(MsgPlantNpcManger_C2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(protector_id_, other->protector_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantNpcManger_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantNpcManger_C2S_descriptor_;
  metadata.reflection = MsgPlantNpcManger_C2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgPlantNpcManger_S2C_PLANT_MAN_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantNpcManger_S2C_PLANT_MAN_RESULT_descriptor_;
}
bool MsgPlantNpcManger_S2C_PLANT_MAN_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgPlantNpcManger_S2C_PLANT_MAN_RESULT MsgPlantNpcManger_S2C::ERR;
const MsgPlantNpcManger_S2C_PLANT_MAN_RESULT MsgPlantNpcManger_S2C::SUCC;
const MsgPlantNpcManger_S2C_PLANT_MAN_RESULT MsgPlantNpcManger_S2C::PLANT_MAN_RESULT_MIN;
const MsgPlantNpcManger_S2C_PLANT_MAN_RESULT MsgPlantNpcManger_S2C::PLANT_MAN_RESULT_MAX;
const int MsgPlantNpcManger_S2C::PLANT_MAN_RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgPlantNpcManger_S2C::kMsgTypeFieldNumber;
const int MsgPlantNpcManger_S2C::kIggidFieldNumber;
const int MsgPlantNpcManger_S2C::kPosXFieldNumber;
const int MsgPlantNpcManger_S2C::kPosYFieldNumber;
const int MsgPlantNpcManger_S2C::kProtectorIdFieldNumber;
const int MsgPlantNpcManger_S2C::kResFieldNumber;
#endif  // !_MSC_VER

MsgPlantNpcManger_S2C::MsgPlantNpcManger_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantNpcManger_S2C)
}

void MsgPlantNpcManger_S2C::InitAsDefaultInstance() {
}

MsgPlantNpcManger_S2C::MsgPlantNpcManger_S2C(const MsgPlantNpcManger_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantNpcManger_S2C)
}

void MsgPlantNpcManger_S2C::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1317;
  iggid_ = GOOGLE_LONGLONG(0);
  pos_x_ = 0;
  pos_y_ = 0;
  protector_id_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantNpcManger_S2C::~MsgPlantNpcManger_S2C() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantNpcManger_S2C)
  SharedDtor();
}

void MsgPlantNpcManger_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantNpcManger_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantNpcManger_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantNpcManger_S2C_descriptor_;
}

const MsgPlantNpcManger_S2C& MsgPlantNpcManger_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantNpcManger_S2C* MsgPlantNpcManger_S2C::default_instance_ = NULL;

MsgPlantNpcManger_S2C* MsgPlantNpcManger_S2C::New() const {
  return new MsgPlantNpcManger_S2C;
}

void MsgPlantNpcManger_S2C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantNpcManger_S2C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(pos_x_, res_);
    msgtype_ = 1317;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantNpcManger_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantNpcManger_S2C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_NPC_MANAGER_S2C];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 3;
      case 3: {
        if (tag == 24) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 4;
      case 4: {
        if (tag == 32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_protector_id;
        break;
      }

      // optional int64 protector_id = 5;
      case 5: {
        if (tag == 40) {
         parse_protector_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &protector_id_)));
          set_has_protector_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_res;
        break;
      }

      // optional .MsgPB.MsgPlantNpcManger_S2C.PLANT_MAN_RESULT res = 6;
      case 6: {
        if (tag == 48) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::MsgPlantNpcManger_S2C_PLANT_MAN_RESULT_IsValid(value)) {
            set_res(static_cast< ::MsgPB::MsgPlantNpcManger_S2C_PLANT_MAN_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantNpcManger_S2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantNpcManger_S2C)
  return false;
#undef DO_
}

void MsgPlantNpcManger_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantNpcManger_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_NPC_MANAGER_S2C];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_x(), output);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_y(), output);
  }

  // optional int64 protector_id = 5;
  if (has_protector_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->protector_id(), output);
  }

  // optional .MsgPB.MsgPlantNpcManger_S2C.PLANT_MAN_RESULT res = 6;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantNpcManger_S2C)
}

::google::protobuf::uint8* MsgPlantNpcManger_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantNpcManger_S2C)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_NPC_MANAGER_S2C];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_x(), target);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_y(), target);
  }

  // optional int64 protector_id = 5;
  if (has_protector_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->protector_id(), target);
  }

  // optional .MsgPB.MsgPlantNpcManger_S2C.PLANT_MAN_RESULT res = 6;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantNpcManger_S2C)
  return target;
}

int MsgPlantNpcManger_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_NPC_MANAGER_S2C];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 pos_x = 3;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 4;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int64 protector_id = 5;
    if (has_protector_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->protector_id());
    }

    // optional .MsgPB.MsgPlantNpcManger_S2C.PLANT_MAN_RESULT res = 6;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantNpcManger_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantNpcManger_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantNpcManger_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantNpcManger_S2C::MergeFrom(const MsgPlantNpcManger_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_protector_id()) {
      set_protector_id(from.protector_id());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantNpcManger_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantNpcManger_S2C::CopyFrom(const MsgPlantNpcManger_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantNpcManger_S2C::IsInitialized() const {

  return true;
}

void MsgPlantNpcManger_S2C::Swap(MsgPlantNpcManger_S2C* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(protector_id_, other->protector_id_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantNpcManger_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantNpcManger_S2C_descriptor_;
  metadata.reflection = MsgPlantNpcManger_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlantReportRareSet_C2S::kMsgTypeFieldNumber;
const int MsgPlantReportRareSet_C2S::kIggidFieldNumber;
const int MsgPlantReportRareSet_C2S::kMapidFieldNumber;
const int MsgPlantReportRareSet_C2S::kPlantXFieldNumber;
const int MsgPlantReportRareSet_C2S::kPlantYFieldNumber;
const int MsgPlantReportRareSet_C2S::kPlantTypeFieldNumber;
#endif  // !_MSC_VER

MsgPlantReportRareSet_C2S::MsgPlantReportRareSet_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantReportRareSet_C2S)
}

void MsgPlantReportRareSet_C2S::InitAsDefaultInstance() {
}

MsgPlantReportRareSet_C2S::MsgPlantReportRareSet_C2S(const MsgPlantReportRareSet_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantReportRareSet_C2S)
}

void MsgPlantReportRareSet_C2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1314;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  plant_x_ = 0;
  plant_y_ = 0;
  plant_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantReportRareSet_C2S::~MsgPlantReportRareSet_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantReportRareSet_C2S)
  SharedDtor();
}

void MsgPlantReportRareSet_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantReportRareSet_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantReportRareSet_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantReportRareSet_C2S_descriptor_;
}

const MsgPlantReportRareSet_C2S& MsgPlantReportRareSet_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantReportRareSet_C2S* MsgPlantReportRareSet_C2S::default_instance_ = NULL;

MsgPlantReportRareSet_C2S* MsgPlantReportRareSet_C2S::New() const {
  return new MsgPlantReportRareSet_C2S;
}

void MsgPlantReportRareSet_C2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantReportRareSet_C2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(mapid_, plant_type_);
    msgtype_ = 1314;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantReportRareSet_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantReportRareSet_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_REPORT_RARE_SET_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_plant_x;
        break;
      }

      // optional int32 plant_x = 4;
      case 4: {
        if (tag == 32) {
         parse_plant_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plant_x_)));
          set_has_plant_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_plant_y;
        break;
      }

      // optional int32 plant_y = 5;
      case 5: {
        if (tag == 40) {
         parse_plant_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plant_y_)));
          set_has_plant_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_plant_type;
        break;
      }

      // optional int32 plant_type = 6;
      case 6: {
        if (tag == 48) {
         parse_plant_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plant_type_)));
          set_has_plant_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantReportRareSet_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantReportRareSet_C2S)
  return false;
#undef DO_
}

void MsgPlantReportRareSet_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantReportRareSet_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_REPORT_RARE_SET_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  // optional int32 plant_x = 4;
  if (has_plant_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->plant_x(), output);
  }

  // optional int32 plant_y = 5;
  if (has_plant_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->plant_y(), output);
  }

  // optional int32 plant_type = 6;
  if (has_plant_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->plant_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantReportRareSet_C2S)
}

::google::protobuf::uint8* MsgPlantReportRareSet_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantReportRareSet_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_REPORT_RARE_SET_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  // optional int32 plant_x = 4;
  if (has_plant_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->plant_x(), target);
  }

  // optional int32 plant_y = 5;
  if (has_plant_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->plant_y(), target);
  }

  // optional int32 plant_type = 6;
  if (has_plant_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->plant_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantReportRareSet_C2S)
  return target;
}

int MsgPlantReportRareSet_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_REPORT_RARE_SET_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 plant_x = 4;
    if (has_plant_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plant_x());
    }

    // optional int32 plant_y = 5;
    if (has_plant_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plant_y());
    }

    // optional int32 plant_type = 6;
    if (has_plant_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plant_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantReportRareSet_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantReportRareSet_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantReportRareSet_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantReportRareSet_C2S::MergeFrom(const MsgPlantReportRareSet_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_plant_x()) {
      set_plant_x(from.plant_x());
    }
    if (from.has_plant_y()) {
      set_plant_y(from.plant_y());
    }
    if (from.has_plant_type()) {
      set_plant_type(from.plant_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantReportRareSet_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantReportRareSet_C2S::CopyFrom(const MsgPlantReportRareSet_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantReportRareSet_C2S::IsInitialized() const {

  return true;
}

void MsgPlantReportRareSet_C2S::Swap(MsgPlantReportRareSet_C2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    std::swap(plant_x_, other->plant_x_);
    std::swap(plant_y_, other->plant_y_);
    std::swap(plant_type_, other->plant_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantReportRareSet_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantReportRareSet_C2S_descriptor_;
  metadata.reflection = MsgPlantReportRareSet_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlantReportRareCut_C2S::kMsgTypeFieldNumber;
const int MsgPlantReportRareCut_C2S::kIggidFieldNumber;
const int MsgPlantReportRareCut_C2S::kMapidFieldNumber;
const int MsgPlantReportRareCut_C2S::kPlantXFieldNumber;
const int MsgPlantReportRareCut_C2S::kPlantYFieldNumber;
const int MsgPlantReportRareCut_C2S::kPlantTypeFieldNumber;
const int MsgPlantReportRareCut_C2S::kDropInfoFieldNumber;
const int MsgPlantReportRareCut_C2S::kDropIdFieldNumber;
#endif  // !_MSC_VER

MsgPlantReportRareCut_C2S::MsgPlantReportRareCut_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlantReportRareCut_C2S)
}

void MsgPlantReportRareCut_C2S::InitAsDefaultInstance() {
}

MsgPlantReportRareCut_C2S::MsgPlantReportRareCut_C2S(const MsgPlantReportRareCut_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlantReportRareCut_C2S)
}

void MsgPlantReportRareCut_C2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1315;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  plant_x_ = 0;
  plant_y_ = 0;
  plant_type_ = 0;
  drop_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlantReportRareCut_C2S::~MsgPlantReportRareCut_C2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlantReportRareCut_C2S)
  SharedDtor();
}

void MsgPlantReportRareCut_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlantReportRareCut_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlantReportRareCut_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlantReportRareCut_C2S_descriptor_;
}

const MsgPlantReportRareCut_C2S& MsgPlantReportRareCut_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPlant_2eproto();
  return *default_instance_;
}

MsgPlantReportRareCut_C2S* MsgPlantReportRareCut_C2S::default_instance_ = NULL;

MsgPlantReportRareCut_C2S* MsgPlantReportRareCut_C2S::New() const {
  return new MsgPlantReportRareCut_C2S;
}

void MsgPlantReportRareCut_C2S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlantReportRareCut_C2S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(mapid_, plant_y_);
    ZR_(plant_type_, drop_id_);
    msgtype_ = 1315;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  drop_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlantReportRareCut_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlantReportRareCut_C2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_REPORT_RARE_CUT_C2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_plant_x;
        break;
      }

      // optional int32 plant_x = 4;
      case 4: {
        if (tag == 32) {
         parse_plant_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plant_x_)));
          set_has_plant_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_plant_y;
        break;
      }

      // optional int32 plant_y = 5;
      case 5: {
        if (tag == 40) {
         parse_plant_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plant_y_)));
          set_has_plant_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_plant_type;
        break;
      }

      // optional int32 plant_type = 6;
      case 6: {
        if (tag == 48) {
         parse_plant_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plant_type_)));
          set_has_plant_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_drop_info;
        break;
      }

      // repeated .MsgPB.PBDropInfo drop_info = 7;
      case 7: {
        if (tag == 58) {
         parse_drop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drop_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_drop_info;
        if (input->ExpectTag(64)) goto parse_drop_id;
        break;
      }

      // optional int32 drop_id = 8;
      case 8: {
        if (tag == 64) {
         parse_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_id_)));
          set_has_drop_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlantReportRareCut_C2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlantReportRareCut_C2S)
  return false;
#undef DO_
}

void MsgPlantReportRareCut_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlantReportRareCut_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_REPORT_RARE_CUT_C2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  // optional int32 plant_x = 4;
  if (has_plant_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->plant_x(), output);
  }

  // optional int32 plant_y = 5;
  if (has_plant_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->plant_y(), output);
  }

  // optional int32 plant_type = 6;
  if (has_plant_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->plant_type(), output);
  }

  // repeated .MsgPB.PBDropInfo drop_info = 7;
  for (int i = 0; i < this->drop_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->drop_info(i), output);
  }

  // optional int32 drop_id = 8;
  if (has_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->drop_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlantReportRareCut_C2S)
}

::google::protobuf::uint8* MsgPlantReportRareCut_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlantReportRareCut_C2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_REPORT_RARE_CUT_C2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  // optional int32 plant_x = 4;
  if (has_plant_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->plant_x(), target);
  }

  // optional int32 plant_y = 5;
  if (has_plant_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->plant_y(), target);
  }

  // optional int32 plant_type = 6;
  if (has_plant_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->plant_type(), target);
  }

  // repeated .MsgPB.PBDropInfo drop_info = 7;
  for (int i = 0; i < this->drop_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->drop_info(i), target);
  }

  // optional int32 drop_id = 8;
  if (has_drop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->drop_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlantReportRareCut_C2S)
  return target;
}

int MsgPlantReportRareCut_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLANT_REPORT_RARE_CUT_C2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 plant_x = 4;
    if (has_plant_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plant_x());
    }

    // optional int32 plant_y = 5;
    if (has_plant_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plant_y());
    }

    // optional int32 plant_type = 6;
    if (has_plant_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plant_type());
    }

    // optional int32 drop_id = 8;
    if (has_drop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_id());
    }

  }
  // repeated .MsgPB.PBDropInfo drop_info = 7;
  total_size += 1 * this->drop_info_size();
  for (int i = 0; i < this->drop_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drop_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlantReportRareCut_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlantReportRareCut_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlantReportRareCut_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlantReportRareCut_C2S::MergeFrom(const MsgPlantReportRareCut_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  drop_info_.MergeFrom(from.drop_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_plant_x()) {
      set_plant_x(from.plant_x());
    }
    if (from.has_plant_y()) {
      set_plant_y(from.plant_y());
    }
    if (from.has_plant_type()) {
      set_plant_type(from.plant_type());
    }
    if (from.has_drop_id()) {
      set_drop_id(from.drop_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlantReportRareCut_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlantReportRareCut_C2S::CopyFrom(const MsgPlantReportRareCut_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlantReportRareCut_C2S::IsInitialized() const {

  return true;
}

void MsgPlantReportRareCut_C2S::Swap(MsgPlantReportRareCut_C2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    std::swap(plant_x_, other->plant_x_);
    std::swap(plant_y_, other->plant_y_);
    std::swap(plant_type_, other->plant_type_);
    drop_info_.Swap(&other->drop_info_);
    std::swap(drop_id_, other->drop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlantReportRareCut_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlantReportRareCut_C2S_descriptor_;
  metadata.reflection = MsgPlantReportRareCut_C2S_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
