// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgDBAction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgDBAction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* DBAction_GetItemRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAction_GetItemRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAction_GetItemRes_tbl_item_packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAction_GetItemRes_tbl_item_packet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAction_GetUserPlantRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAction_GetUserPlantRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAction_GetUserPlantRes_tbl_map_user_plant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAction_GetUserPlantRes_tbl_map_user_plant_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAction_GetUserAchieveRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAction_GetUserAchieveRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAction_GetUserAchieveRes_tbl_user_achieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAction_GetUserAchieveRes_tbl_user_achieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBAction_reflection_ = NULL;
struct MsgDBActionOneofInstance {
  ::google::protobuf::int64 get_item_req_;
  const ::MsgPB::DBAction_GetItemRes* get_item_res_;
  ::google::protobuf::int64 get_plant_req_;
  const ::MsgPB::DBAction_GetUserPlantRes* get_user_plant_res_;
  ::google::protobuf::int64 get_achieve_req_;
  const ::MsgPB::DBAction_GetUserAchieveRes* get_user_achieve_res_;
}* MsgDBAction_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgDBAction_2eproto() {
  protobuf_AddDesc_MsgDBAction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgDBAction.proto");
  GOOGLE_CHECK(file != NULL);
  DBAction_GetItemRes_descriptor_ = file->message_type(0);
  static const int DBAction_GetItemRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes, data_),
  };
  DBAction_GetItemRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAction_GetItemRes_descriptor_,
      DBAction_GetItemRes::default_instance_,
      DBAction_GetItemRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAction_GetItemRes));
  DBAction_GetItemRes_tbl_item_packet_descriptor_ = DBAction_GetItemRes_descriptor_->nested_type(0);
  static const int DBAction_GetItemRes_tbl_item_packet_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, auto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, item_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, packettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, durable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, expired_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, countdown_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, equip_randval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, build_tower_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, durablemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, auction_cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, identified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, item_counter_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, antique_info_),
  };
  DBAction_GetItemRes_tbl_item_packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAction_GetItemRes_tbl_item_packet_descriptor_,
      DBAction_GetItemRes_tbl_item_packet::default_instance_,
      DBAction_GetItemRes_tbl_item_packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetItemRes_tbl_item_packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAction_GetItemRes_tbl_item_packet));
  DBAction_GetUserPlantRes_descriptor_ = file->message_type(1);
  static const int DBAction_GetUserPlantRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes, plant_),
  };
  DBAction_GetUserPlantRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAction_GetUserPlantRes_descriptor_,
      DBAction_GetUserPlantRes::default_instance_,
      DBAction_GetUserPlantRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAction_GetUserPlantRes));
  DBAction_GetUserPlantRes_tbl_map_user_plant_descriptor_ = DBAction_GetUserPlantRes_descriptor_->nested_type(0);
  static const int DBAction_GetUserPlantRes_tbl_map_user_plant_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes_tbl_map_user_plant, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes_tbl_map_user_plant, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes_tbl_map_user_plant, plant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes_tbl_map_user_plant, plant_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes_tbl_map_user_plant, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes_tbl_map_user_plant, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes_tbl_map_user_plant, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes_tbl_map_user_plant, grow_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes_tbl_map_user_plant, grow_time_),
  };
  DBAction_GetUserPlantRes_tbl_map_user_plant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAction_GetUserPlantRes_tbl_map_user_plant_descriptor_,
      DBAction_GetUserPlantRes_tbl_map_user_plant::default_instance_,
      DBAction_GetUserPlantRes_tbl_map_user_plant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes_tbl_map_user_plant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserPlantRes_tbl_map_user_plant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAction_GetUserPlantRes_tbl_map_user_plant));
  DBAction_GetUserAchieveRes_descriptor_ = file->message_type(2);
  static const int DBAction_GetUserAchieveRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes, data_),
  };
  DBAction_GetUserAchieveRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAction_GetUserAchieveRes_descriptor_,
      DBAction_GetUserAchieveRes::default_instance_,
      DBAction_GetUserAchieveRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAction_GetUserAchieveRes));
  DBAction_GetUserAchieveRes_tbl_user_achieve_descriptor_ = DBAction_GetUserAchieveRes_descriptor_->nested_type(0);
  static const int DBAction_GetUserAchieveRes_tbl_user_achieve_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes_tbl_user_achieve, auto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes_tbl_user_achieve, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes_tbl_user_achieve, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes_tbl_user_achieve, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes_tbl_user_achieve, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes_tbl_user_achieve, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes_tbl_user_achieve, complete_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes_tbl_user_achieve, currently_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes_tbl_user_achieve, source_),
  };
  DBAction_GetUserAchieveRes_tbl_user_achieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAction_GetUserAchieveRes_tbl_user_achieve_descriptor_,
      DBAction_GetUserAchieveRes_tbl_user_achieve::default_instance_,
      DBAction_GetUserAchieveRes_tbl_user_achieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes_tbl_user_achieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAction_GetUserAchieveRes_tbl_user_achieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAction_GetUserAchieveRes_tbl_user_achieve));
  MsgDBAction_descriptor_ = file->message_type(3);
  static const int MsgDBAction_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBAction, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBAction, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBAction, istail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBAction, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBAction, context_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MsgDBAction_default_oneof_instance_, get_item_req_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MsgDBAction_default_oneof_instance_, get_item_res_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MsgDBAction_default_oneof_instance_, get_plant_req_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MsgDBAction_default_oneof_instance_, get_user_plant_res_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MsgDBAction_default_oneof_instance_, get_achieve_req_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MsgDBAction_default_oneof_instance_, get_user_achieve_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBAction, action_),
  };
  MsgDBAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBAction_descriptor_,
      MsgDBAction::default_instance_,
      MsgDBAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBAction, _unknown_fields_),
      -1,
      MsgDBAction_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBAction, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBAction));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgDBAction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAction_GetItemRes_descriptor_, &DBAction_GetItemRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAction_GetItemRes_tbl_item_packet_descriptor_, &DBAction_GetItemRes_tbl_item_packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAction_GetUserPlantRes_descriptor_, &DBAction_GetUserPlantRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAction_GetUserPlantRes_tbl_map_user_plant_descriptor_, &DBAction_GetUserPlantRes_tbl_map_user_plant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAction_GetUserAchieveRes_descriptor_, &DBAction_GetUserAchieveRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAction_GetUserAchieveRes_tbl_user_achieve_descriptor_, &DBAction_GetUserAchieveRes_tbl_user_achieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBAction_descriptor_, &MsgDBAction::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgDBAction_2eproto() {
  delete DBAction_GetItemRes::default_instance_;
  delete DBAction_GetItemRes_reflection_;
  delete DBAction_GetItemRes_tbl_item_packet::default_instance_;
  delete DBAction_GetItemRes_tbl_item_packet_reflection_;
  delete DBAction_GetUserPlantRes::default_instance_;
  delete DBAction_GetUserPlantRes_reflection_;
  delete DBAction_GetUserPlantRes_tbl_map_user_plant::default_instance_;
  delete DBAction_GetUserPlantRes_tbl_map_user_plant_reflection_;
  delete DBAction_GetUserAchieveRes::default_instance_;
  delete DBAction_GetUserAchieveRes_reflection_;
  delete DBAction_GetUserAchieveRes_tbl_user_achieve::default_instance_;
  delete DBAction_GetUserAchieveRes_tbl_user_achieve_reflection_;
  delete MsgDBAction::default_instance_;
  delete MsgDBAction_default_oneof_instance_;
  delete MsgDBAction_reflection_;
}

void protobuf_AddDesc_MsgDBAction_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021MsgDBAction.proto\022\005MsgPB\032\rMsgType.prot"
    "o\"\331\003\n\023DBAction_GetItemRes\0228\n\004data\030\001 \003(\0132"
    "*.MsgPB.DBAction_GetItemRes.tbl_item_pac"
    "ket\032\207\003\n\017tbl_item_packet\022\017\n\007auto_id\030\001 \001(\003"
    "\022\r\n\005iggid\030\002 \001(\003\022\021\n\titem_uuid\030\003 \001(\003\022\016\n\006da"
    "taid\030\004 \001(\005\022\014\n\004name\030\005 \001(\t\022\013\n\003pos\030\006 \001(\005\022\r\n"
    "\005count\030\007 \001(\005\022\022\n\npackettype\030\010 \001(\005\022\017\n\007dura"
    "ble\030\t \001(\005\022\020\n\010cooldown\030\n \001(\t\022\024\n\014expired_t"
    "ime\030\013 \001(\t\022\026\n\016countdown_time\030\014 \001(\t\022\025\n\requ"
    "ip_randval\030\r \001(\t\022\030\n\020build_tower_data\030\016 \001"
    "(\t\022\022\n\ndurablemax\030\017 \001(\005\022\030\n\020auction_cooldo"
    "wn\030\020 \001(\003\022\022\n\nidentified\030\021 \001(\005\022\031\n\021item_cou"
    "nter_info\030\022 \001(\t\022\024\n\014antique_info\030\023 \001(\t\"\221\002"
    "\n\030DBAction_GetUserPlantRes\022A\n\005plant\030\001 \003("
    "\01322.MsgPB.DBAction_GetUserPlantRes.tbl_m"
    "ap_user_plant\032\261\001\n\022tbl_map_user_plant\022\r\n\005"
    "iggid\030\001 \001(\003\022\r\n\005mapid\030\002 \001(\005\022\020\n\010plant_id\030\003"
    " \001(\003\022\022\n\nplant_type\030\004 \001(\005\022\r\n\005pos_x\030\005 \001(\005\022"
    "\r\n\005pos_y\030\006 \001(\005\022\022\n\nbegin_time\030\007 \001(\003\022\022\n\ngr"
    "ow_stage\030\010 \001(\005\022\021\n\tgrow_time\030\t \001(\005\"\217\002\n\032DB"
    "Action_GetUserAchieveRes\022@\n\004data\030\001 \003(\01322"
    ".MsgPB.DBAction_GetUserAchieveRes.tbl_us"
    "er_achieve\032\256\001\n\020tbl_user_achieve\022\017\n\007auto_"
    "id\030\001 \001(\003\022\r\n\005iggid\030\002 \001(\003\022\014\n\004uuid\030\003 \001(\003\022\016\n"
    "\006status\030\004 \001(\005\022\r\n\005value\030\005 \001(\005\022\023\n\013update_t"
    "ime\030\006 \001(\003\022\025\n\rcomplete_time\030\007 \001(\003\022\021\n\tcurr"
    "ently\030\010 \001(\005\022\016\n\006source\030\t \001(\t\"\217\003\n\013MsgDBAct"
    "ion\0220\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType:\016_"
    "MSG_DB_ACTION\022\r\n\005iggid\030\002 \001(\003\022\016\n\006IsTail\030\003"
    " \001(\010\022\r\n\005mapid\030\004 \001(\005\022\024\n\014context_data\030\005 \001("
    "\003\022\026\n\014get_item_req\030d \001(\003H\000\0222\n\014get_item_re"
    "s\030e \001(\0132\032.MsgPB.DBAction_GetItemResH\000\022\027\n"
    "\rget_plant_req\030f \001(\003H\000\022=\n\022get_user_plant"
    "_res\030g \001(\0132\037.MsgPB.DBAction_GetUserPlant"
    "ResH\000\022\031\n\017get_achieve_req\030h \001(\003H\000\022A\n\024get_"
    "user_achieve_res\030i \001(\0132!.MsgPB.DBAction_"
    "GetUserAchieveResH\000B\010\n\006action", 1469);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgDBAction.proto", &protobuf_RegisterTypes);
  DBAction_GetItemRes::default_instance_ = new DBAction_GetItemRes();
  DBAction_GetItemRes_tbl_item_packet::default_instance_ = new DBAction_GetItemRes_tbl_item_packet();
  DBAction_GetUserPlantRes::default_instance_ = new DBAction_GetUserPlantRes();
  DBAction_GetUserPlantRes_tbl_map_user_plant::default_instance_ = new DBAction_GetUserPlantRes_tbl_map_user_plant();
  DBAction_GetUserAchieveRes::default_instance_ = new DBAction_GetUserAchieveRes();
  DBAction_GetUserAchieveRes_tbl_user_achieve::default_instance_ = new DBAction_GetUserAchieveRes_tbl_user_achieve();
  MsgDBAction::default_instance_ = new MsgDBAction();
  MsgDBAction_default_oneof_instance_ = new MsgDBActionOneofInstance;
  DBAction_GetItemRes::default_instance_->InitAsDefaultInstance();
  DBAction_GetItemRes_tbl_item_packet::default_instance_->InitAsDefaultInstance();
  DBAction_GetUserPlantRes::default_instance_->InitAsDefaultInstance();
  DBAction_GetUserPlantRes_tbl_map_user_plant::default_instance_->InitAsDefaultInstance();
  DBAction_GetUserAchieveRes::default_instance_->InitAsDefaultInstance();
  DBAction_GetUserAchieveRes_tbl_user_achieve::default_instance_->InitAsDefaultInstance();
  MsgDBAction::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgDBAction_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgDBAction_2eproto {
  StaticDescriptorInitializer_MsgDBAction_2eproto() {
    protobuf_AddDesc_MsgDBAction_2eproto();
  }
} static_descriptor_initializer_MsgDBAction_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DBAction_GetItemRes_tbl_item_packet::kAutoIdFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kIggidFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kItemUuidFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kDataidFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kNameFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kPosFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kCountFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kPackettypeFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kDurableFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kCooldownFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kExpiredTimeFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kCountdownTimeFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kEquipRandvalFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kBuildTowerDataFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kDurablemaxFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kAuctionCooldownFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kIdentifiedFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kItemCounterInfoFieldNumber;
const int DBAction_GetItemRes_tbl_item_packet::kAntiqueInfoFieldNumber;
#endif  // !_MSC_VER

DBAction_GetItemRes_tbl_item_packet::DBAction_GetItemRes_tbl_item_packet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.DBAction_GetItemRes.tbl_item_packet)
}

void DBAction_GetItemRes_tbl_item_packet::InitAsDefaultInstance() {
}

DBAction_GetItemRes_tbl_item_packet::DBAction_GetItemRes_tbl_item_packet(const DBAction_GetItemRes_tbl_item_packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.DBAction_GetItemRes.tbl_item_packet)
}

void DBAction_GetItemRes_tbl_item_packet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  auto_id_ = GOOGLE_LONGLONG(0);
  iggid_ = GOOGLE_LONGLONG(0);
  item_uuid_ = GOOGLE_LONGLONG(0);
  dataid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = 0;
  count_ = 0;
  packettype_ = 0;
  durable_ = 0;
  cooldown_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expired_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countdown_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  equip_randval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_tower_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  durablemax_ = 0;
  auction_cooldown_ = GOOGLE_LONGLONG(0);
  identified_ = 0;
  item_counter_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  antique_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAction_GetItemRes_tbl_item_packet::~DBAction_GetItemRes_tbl_item_packet() {
  // @@protoc_insertion_point(destructor:MsgPB.DBAction_GetItemRes.tbl_item_packet)
  SharedDtor();
}

void DBAction_GetItemRes_tbl_item_packet::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (cooldown_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cooldown_;
  }
  if (expired_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete expired_time_;
  }
  if (countdown_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete countdown_time_;
  }
  if (equip_randval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equip_randval_;
  }
  if (build_tower_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete build_tower_data_;
  }
  if (item_counter_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_counter_info_;
  }
  if (antique_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete antique_info_;
  }
  if (this != default_instance_) {
  }
}

void DBAction_GetItemRes_tbl_item_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAction_GetItemRes_tbl_item_packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAction_GetItemRes_tbl_item_packet_descriptor_;
}

const DBAction_GetItemRes_tbl_item_packet& DBAction_GetItemRes_tbl_item_packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDBAction_2eproto();
  return *default_instance_;
}

DBAction_GetItemRes_tbl_item_packet* DBAction_GetItemRes_tbl_item_packet::default_instance_ = NULL;

DBAction_GetItemRes_tbl_item_packet* DBAction_GetItemRes_tbl_item_packet::New() const {
  return new DBAction_GetItemRes_tbl_item_packet;
}

void DBAction_GetItemRes_tbl_item_packet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBAction_GetItemRes_tbl_item_packet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(auto_id_, item_uuid_);
    ZR_(dataid_, packettype_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(durable_, durablemax_);
    if (has_cooldown()) {
      if (cooldown_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cooldown_->clear();
      }
    }
    if (has_expired_time()) {
      if (expired_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        expired_time_->clear();
      }
    }
    if (has_countdown_time()) {
      if (countdown_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        countdown_time_->clear();
      }
    }
    if (has_equip_randval()) {
      if (equip_randval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        equip_randval_->clear();
      }
    }
    if (has_build_tower_data()) {
      if (build_tower_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        build_tower_data_->clear();
      }
    }
    auction_cooldown_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & 458752) {
    identified_ = 0;
    if (has_item_counter_info()) {
      if (item_counter_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_counter_info_->clear();
      }
    }
    if (has_antique_info()) {
      if (antique_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        antique_info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAction_GetItemRes_tbl_item_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.DBAction_GetItemRes.tbl_item_packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 auto_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &auto_id_)));
          set_has_auto_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_uuid;
        break;
      }

      // optional int64 item_uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_item_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_uuid_)));
          set_has_item_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dataid;
        break;
      }

      // optional int32 dataid = 4;
      case 4: {
        if (tag == 32) {
         parse_dataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pos;
        break;
      }

      // optional int32 pos = 6;
      case 6: {
        if (tag == 48) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }

      // optional int32 count = 7;
      case 7: {
        if (tag == 56) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_packettype;
        break;
      }

      // optional int32 packettype = 8;
      case 8: {
        if (tag == 64) {
         parse_packettype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packettype_)));
          set_has_packettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_durable;
        break;
      }

      // optional int32 durable = 9;
      case 9: {
        if (tag == 72) {
         parse_durable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &durable_)));
          set_has_durable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cooldown;
        break;
      }

      // optional string cooldown = 10;
      case 10: {
        if (tag == 82) {
         parse_cooldown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cooldown()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cooldown().data(), this->cooldown().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cooldown");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_expired_time;
        break;
      }

      // optional string expired_time = 11;
      case 11: {
        if (tag == 90) {
         parse_expired_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expired_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->expired_time().data(), this->expired_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "expired_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_countdown_time;
        break;
      }

      // optional string countdown_time = 12;
      case 12: {
        if (tag == 98) {
         parse_countdown_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countdown_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->countdown_time().data(), this->countdown_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "countdown_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_equip_randval;
        break;
      }

      // optional string equip_randval = 13;
      case 13: {
        if (tag == 106) {
         parse_equip_randval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_randval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->equip_randval().data(), this->equip_randval().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "equip_randval");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_build_tower_data;
        break;
      }

      // optional string build_tower_data = 14;
      case 14: {
        if (tag == 114) {
         parse_build_tower_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_tower_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->build_tower_data().data(), this->build_tower_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "build_tower_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_durablemax;
        break;
      }

      // optional int32 durablemax = 15;
      case 15: {
        if (tag == 120) {
         parse_durablemax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &durablemax_)));
          set_has_durablemax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_auction_cooldown;
        break;
      }

      // optional int64 auction_cooldown = 16;
      case 16: {
        if (tag == 128) {
         parse_auction_cooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &auction_cooldown_)));
          set_has_auction_cooldown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_identified;
        break;
      }

      // optional int32 identified = 17;
      case 17: {
        if (tag == 136) {
         parse_identified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identified_)));
          set_has_identified();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_item_counter_info;
        break;
      }

      // optional string item_counter_info = 18;
      case 18: {
        if (tag == 146) {
         parse_item_counter_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_counter_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_counter_info().data(), this->item_counter_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "item_counter_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_antique_info;
        break;
      }

      // optional string antique_info = 19;
      case 19: {
        if (tag == 154) {
         parse_antique_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_antique_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->antique_info().data(), this->antique_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "antique_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.DBAction_GetItemRes.tbl_item_packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.DBAction_GetItemRes.tbl_item_packet)
  return false;
#undef DO_
}

void DBAction_GetItemRes_tbl_item_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.DBAction_GetItemRes.tbl_item_packet)
  // optional int64 auto_id = 1;
  if (has_auto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->auto_id(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int64 item_uuid = 3;
  if (has_item_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->item_uuid(), output);
  }

  // optional int32 dataid = 4;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dataid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional int32 pos = 6;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pos(), output);
  }

  // optional int32 count = 7;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->count(), output);
  }

  // optional int32 packettype = 8;
  if (has_packettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->packettype(), output);
  }

  // optional int32 durable = 9;
  if (has_durable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->durable(), output);
  }

  // optional string cooldown = 10;
  if (has_cooldown()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooldown().data(), this->cooldown().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cooldown");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->cooldown(), output);
  }

  // optional string expired_time = 11;
  if (has_expired_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->expired_time().data(), this->expired_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "expired_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->expired_time(), output);
  }

  // optional string countdown_time = 12;
  if (has_countdown_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countdown_time().data(), this->countdown_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countdown_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->countdown_time(), output);
  }

  // optional string equip_randval = 13;
  if (has_equip_randval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equip_randval().data(), this->equip_randval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equip_randval");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->equip_randval(), output);
  }

  // optional string build_tower_data = 14;
  if (has_build_tower_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->build_tower_data().data(), this->build_tower_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "build_tower_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->build_tower_data(), output);
  }

  // optional int32 durablemax = 15;
  if (has_durablemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->durablemax(), output);
  }

  // optional int64 auction_cooldown = 16;
  if (has_auction_cooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->auction_cooldown(), output);
  }

  // optional int32 identified = 17;
  if (has_identified()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->identified(), output);
  }

  // optional string item_counter_info = 18;
  if (has_item_counter_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_counter_info().data(), this->item_counter_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item_counter_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->item_counter_info(), output);
  }

  // optional string antique_info = 19;
  if (has_antique_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->antique_info().data(), this->antique_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "antique_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->antique_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.DBAction_GetItemRes.tbl_item_packet)
}

::google::protobuf::uint8* DBAction_GetItemRes_tbl_item_packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.DBAction_GetItemRes.tbl_item_packet)
  // optional int64 auto_id = 1;
  if (has_auto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->auto_id(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int64 item_uuid = 3;
  if (has_item_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->item_uuid(), target);
  }

  // optional int32 dataid = 4;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dataid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int32 pos = 6;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pos(), target);
  }

  // optional int32 count = 7;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->count(), target);
  }

  // optional int32 packettype = 8;
  if (has_packettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->packettype(), target);
  }

  // optional int32 durable = 9;
  if (has_durable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->durable(), target);
  }

  // optional string cooldown = 10;
  if (has_cooldown()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooldown().data(), this->cooldown().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cooldown");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->cooldown(), target);
  }

  // optional string expired_time = 11;
  if (has_expired_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->expired_time().data(), this->expired_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "expired_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->expired_time(), target);
  }

  // optional string countdown_time = 12;
  if (has_countdown_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countdown_time().data(), this->countdown_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countdown_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->countdown_time(), target);
  }

  // optional string equip_randval = 13;
  if (has_equip_randval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equip_randval().data(), this->equip_randval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equip_randval");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->equip_randval(), target);
  }

  // optional string build_tower_data = 14;
  if (has_build_tower_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->build_tower_data().data(), this->build_tower_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "build_tower_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->build_tower_data(), target);
  }

  // optional int32 durablemax = 15;
  if (has_durablemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->durablemax(), target);
  }

  // optional int64 auction_cooldown = 16;
  if (has_auction_cooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->auction_cooldown(), target);
  }

  // optional int32 identified = 17;
  if (has_identified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->identified(), target);
  }

  // optional string item_counter_info = 18;
  if (has_item_counter_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_counter_info().data(), this->item_counter_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item_counter_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->item_counter_info(), target);
  }

  // optional string antique_info = 19;
  if (has_antique_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->antique_info().data(), this->antique_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "antique_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->antique_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.DBAction_GetItemRes.tbl_item_packet)
  return target;
}

int DBAction_GetItemRes_tbl_item_packet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 auto_id = 1;
    if (has_auto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->auto_id());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 item_uuid = 3;
    if (has_item_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_uuid());
    }

    // optional int32 dataid = 4;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 pos = 6;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 count = 7;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 packettype = 8;
    if (has_packettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packettype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 durable = 9;
    if (has_durable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->durable());
    }

    // optional string cooldown = 10;
    if (has_cooldown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cooldown());
    }

    // optional string expired_time = 11;
    if (has_expired_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expired_time());
    }

    // optional string countdown_time = 12;
    if (has_countdown_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countdown_time());
    }

    // optional string equip_randval = 13;
    if (has_equip_randval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_randval());
    }

    // optional string build_tower_data = 14;
    if (has_build_tower_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_tower_data());
    }

    // optional int32 durablemax = 15;
    if (has_durablemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->durablemax());
    }

    // optional int64 auction_cooldown = 16;
    if (has_auction_cooldown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->auction_cooldown());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 identified = 17;
    if (has_identified()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->identified());
    }

    // optional string item_counter_info = 18;
    if (has_item_counter_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_counter_info());
    }

    // optional string antique_info = 19;
    if (has_antique_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->antique_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAction_GetItemRes_tbl_item_packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAction_GetItemRes_tbl_item_packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAction_GetItemRes_tbl_item_packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAction_GetItemRes_tbl_item_packet::MergeFrom(const DBAction_GetItemRes_tbl_item_packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auto_id()) {
      set_auto_id(from.auto_id());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_item_uuid()) {
      set_item_uuid(from.item_uuid());
    }
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_packettype()) {
      set_packettype(from.packettype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_durable()) {
      set_durable(from.durable());
    }
    if (from.has_cooldown()) {
      set_cooldown(from.cooldown());
    }
    if (from.has_expired_time()) {
      set_expired_time(from.expired_time());
    }
    if (from.has_countdown_time()) {
      set_countdown_time(from.countdown_time());
    }
    if (from.has_equip_randval()) {
      set_equip_randval(from.equip_randval());
    }
    if (from.has_build_tower_data()) {
      set_build_tower_data(from.build_tower_data());
    }
    if (from.has_durablemax()) {
      set_durablemax(from.durablemax());
    }
    if (from.has_auction_cooldown()) {
      set_auction_cooldown(from.auction_cooldown());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_identified()) {
      set_identified(from.identified());
    }
    if (from.has_item_counter_info()) {
      set_item_counter_info(from.item_counter_info());
    }
    if (from.has_antique_info()) {
      set_antique_info(from.antique_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAction_GetItemRes_tbl_item_packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAction_GetItemRes_tbl_item_packet::CopyFrom(const DBAction_GetItemRes_tbl_item_packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAction_GetItemRes_tbl_item_packet::IsInitialized() const {

  return true;
}

void DBAction_GetItemRes_tbl_item_packet::Swap(DBAction_GetItemRes_tbl_item_packet* other) {
  if (other != this) {
    std::swap(auto_id_, other->auto_id_);
    std::swap(iggid_, other->iggid_);
    std::swap(item_uuid_, other->item_uuid_);
    std::swap(dataid_, other->dataid_);
    std::swap(name_, other->name_);
    std::swap(pos_, other->pos_);
    std::swap(count_, other->count_);
    std::swap(packettype_, other->packettype_);
    std::swap(durable_, other->durable_);
    std::swap(cooldown_, other->cooldown_);
    std::swap(expired_time_, other->expired_time_);
    std::swap(countdown_time_, other->countdown_time_);
    std::swap(equip_randval_, other->equip_randval_);
    std::swap(build_tower_data_, other->build_tower_data_);
    std::swap(durablemax_, other->durablemax_);
    std::swap(auction_cooldown_, other->auction_cooldown_);
    std::swap(identified_, other->identified_);
    std::swap(item_counter_info_, other->item_counter_info_);
    std::swap(antique_info_, other->antique_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAction_GetItemRes_tbl_item_packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAction_GetItemRes_tbl_item_packet_descriptor_;
  metadata.reflection = DBAction_GetItemRes_tbl_item_packet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DBAction_GetItemRes::kDataFieldNumber;
#endif  // !_MSC_VER

DBAction_GetItemRes::DBAction_GetItemRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.DBAction_GetItemRes)
}

void DBAction_GetItemRes::InitAsDefaultInstance() {
}

DBAction_GetItemRes::DBAction_GetItemRes(const DBAction_GetItemRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.DBAction_GetItemRes)
}

void DBAction_GetItemRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAction_GetItemRes::~DBAction_GetItemRes() {
  // @@protoc_insertion_point(destructor:MsgPB.DBAction_GetItemRes)
  SharedDtor();
}

void DBAction_GetItemRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAction_GetItemRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAction_GetItemRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAction_GetItemRes_descriptor_;
}

const DBAction_GetItemRes& DBAction_GetItemRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDBAction_2eproto();
  return *default_instance_;
}

DBAction_GetItemRes* DBAction_GetItemRes::default_instance_ = NULL;

DBAction_GetItemRes* DBAction_GetItemRes::New() const {
  return new DBAction_GetItemRes;
}

void DBAction_GetItemRes::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAction_GetItemRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.DBAction_GetItemRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgPB.DBAction_GetItemRes.tbl_item_packet data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.DBAction_GetItemRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.DBAction_GetItemRes)
  return false;
#undef DO_
}

void DBAction_GetItemRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.DBAction_GetItemRes)
  // repeated .MsgPB.DBAction_GetItemRes.tbl_item_packet data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.DBAction_GetItemRes)
}

::google::protobuf::uint8* DBAction_GetItemRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.DBAction_GetItemRes)
  // repeated .MsgPB.DBAction_GetItemRes.tbl_item_packet data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.DBAction_GetItemRes)
  return target;
}

int DBAction_GetItemRes::ByteSize() const {
  int total_size = 0;

  // repeated .MsgPB.DBAction_GetItemRes.tbl_item_packet data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAction_GetItemRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAction_GetItemRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAction_GetItemRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAction_GetItemRes::MergeFrom(const DBAction_GetItemRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAction_GetItemRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAction_GetItemRes::CopyFrom(const DBAction_GetItemRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAction_GetItemRes::IsInitialized() const {

  return true;
}

void DBAction_GetItemRes::Swap(DBAction_GetItemRes* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAction_GetItemRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAction_GetItemRes_descriptor_;
  metadata.reflection = DBAction_GetItemRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBAction_GetUserPlantRes_tbl_map_user_plant::kIggidFieldNumber;
const int DBAction_GetUserPlantRes_tbl_map_user_plant::kMapidFieldNumber;
const int DBAction_GetUserPlantRes_tbl_map_user_plant::kPlantIdFieldNumber;
const int DBAction_GetUserPlantRes_tbl_map_user_plant::kPlantTypeFieldNumber;
const int DBAction_GetUserPlantRes_tbl_map_user_plant::kPosXFieldNumber;
const int DBAction_GetUserPlantRes_tbl_map_user_plant::kPosYFieldNumber;
const int DBAction_GetUserPlantRes_tbl_map_user_plant::kBeginTimeFieldNumber;
const int DBAction_GetUserPlantRes_tbl_map_user_plant::kGrowStageFieldNumber;
const int DBAction_GetUserPlantRes_tbl_map_user_plant::kGrowTimeFieldNumber;
#endif  // !_MSC_VER

DBAction_GetUserPlantRes_tbl_map_user_plant::DBAction_GetUserPlantRes_tbl_map_user_plant()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant)
}

void DBAction_GetUserPlantRes_tbl_map_user_plant::InitAsDefaultInstance() {
}

DBAction_GetUserPlantRes_tbl_map_user_plant::DBAction_GetUserPlantRes_tbl_map_user_plant(const DBAction_GetUserPlantRes_tbl_map_user_plant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant)
}

void DBAction_GetUserPlantRes_tbl_map_user_plant::SharedCtor() {
  _cached_size_ = 0;
  iggid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  plant_id_ = GOOGLE_LONGLONG(0);
  plant_type_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  begin_time_ = GOOGLE_LONGLONG(0);
  grow_stage_ = 0;
  grow_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAction_GetUserPlantRes_tbl_map_user_plant::~DBAction_GetUserPlantRes_tbl_map_user_plant() {
  // @@protoc_insertion_point(destructor:MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant)
  SharedDtor();
}

void DBAction_GetUserPlantRes_tbl_map_user_plant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAction_GetUserPlantRes_tbl_map_user_plant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAction_GetUserPlantRes_tbl_map_user_plant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAction_GetUserPlantRes_tbl_map_user_plant_descriptor_;
}

const DBAction_GetUserPlantRes_tbl_map_user_plant& DBAction_GetUserPlantRes_tbl_map_user_plant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDBAction_2eproto();
  return *default_instance_;
}

DBAction_GetUserPlantRes_tbl_map_user_plant* DBAction_GetUserPlantRes_tbl_map_user_plant::default_instance_ = NULL;

DBAction_GetUserPlantRes_tbl_map_user_plant* DBAction_GetUserPlantRes_tbl_map_user_plant::New() const {
  return new DBAction_GetUserPlantRes_tbl_map_user_plant;
}

void DBAction_GetUserPlantRes_tbl_map_user_plant::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBAction_GetUserPlantRes_tbl_map_user_plant*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(iggid_, grow_stage_);
  }
  grow_time_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAction_GetUserPlantRes_tbl_map_user_plant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iggid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_plant_id;
        break;
      }

      // optional int64 plant_id = 3;
      case 3: {
        if (tag == 24) {
         parse_plant_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &plant_id_)));
          set_has_plant_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_plant_type;
        break;
      }

      // optional int32 plant_type = 4;
      case 4: {
        if (tag == 32) {
         parse_plant_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plant_type_)));
          set_has_plant_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 5;
      case 5: {
        if (tag == 40) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 6;
      case 6: {
        if (tag == 48) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_begin_time;
        break;
      }

      // optional int64 begin_time = 7;
      case 7: {
        if (tag == 56) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_grow_stage;
        break;
      }

      // optional int32 grow_stage = 8;
      case 8: {
        if (tag == 64) {
         parse_grow_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grow_stage_)));
          set_has_grow_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_grow_time;
        break;
      }

      // optional int32 grow_time = 9;
      case 9: {
        if (tag == 72) {
         parse_grow_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grow_time_)));
          set_has_grow_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant)
  return false;
#undef DO_
}

void DBAction_GetUserPlantRes_tbl_map_user_plant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->iggid(), output);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  // optional int64 plant_id = 3;
  if (has_plant_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->plant_id(), output);
  }

  // optional int32 plant_type = 4;
  if (has_plant_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->plant_type(), output);
  }

  // optional int32 pos_x = 5;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_x(), output);
  }

  // optional int32 pos_y = 6;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pos_y(), output);
  }

  // optional int64 begin_time = 7;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->begin_time(), output);
  }

  // optional int32 grow_stage = 8;
  if (has_grow_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->grow_stage(), output);
  }

  // optional int32 grow_time = 9;
  if (has_grow_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->grow_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant)
}

::google::protobuf::uint8* DBAction_GetUserPlantRes_tbl_map_user_plant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant)
  // optional int64 iggid = 1;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->iggid(), target);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  // optional int64 plant_id = 3;
  if (has_plant_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->plant_id(), target);
  }

  // optional int32 plant_type = 4;
  if (has_plant_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->plant_type(), target);
  }

  // optional int32 pos_x = 5;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_x(), target);
  }

  // optional int32 pos_y = 6;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pos_y(), target);
  }

  // optional int64 begin_time = 7;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->begin_time(), target);
  }

  // optional int32 grow_stage = 8;
  if (has_grow_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->grow_stage(), target);
  }

  // optional int32 grow_time = 9;
  if (has_grow_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->grow_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant)
  return target;
}

int DBAction_GetUserPlantRes_tbl_map_user_plant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iggid = 1;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int64 plant_id = 3;
    if (has_plant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->plant_id());
    }

    // optional int32 plant_type = 4;
    if (has_plant_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plant_type());
    }

    // optional int32 pos_x = 5;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 6;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int64 begin_time = 7;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // optional int32 grow_stage = 8;
    if (has_grow_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grow_stage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 grow_time = 9;
    if (has_grow_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grow_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAction_GetUserPlantRes_tbl_map_user_plant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAction_GetUserPlantRes_tbl_map_user_plant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAction_GetUserPlantRes_tbl_map_user_plant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAction_GetUserPlantRes_tbl_map_user_plant::MergeFrom(const DBAction_GetUserPlantRes_tbl_map_user_plant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_plant_id()) {
      set_plant_id(from.plant_id());
    }
    if (from.has_plant_type()) {
      set_plant_type(from.plant_type());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_grow_stage()) {
      set_grow_stage(from.grow_stage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_grow_time()) {
      set_grow_time(from.grow_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAction_GetUserPlantRes_tbl_map_user_plant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAction_GetUserPlantRes_tbl_map_user_plant::CopyFrom(const DBAction_GetUserPlantRes_tbl_map_user_plant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAction_GetUserPlantRes_tbl_map_user_plant::IsInitialized() const {

  return true;
}

void DBAction_GetUserPlantRes_tbl_map_user_plant::Swap(DBAction_GetUserPlantRes_tbl_map_user_plant* other) {
  if (other != this) {
    std::swap(iggid_, other->iggid_);
    std::swap(mapid_, other->mapid_);
    std::swap(plant_id_, other->plant_id_);
    std::swap(plant_type_, other->plant_type_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(grow_stage_, other->grow_stage_);
    std::swap(grow_time_, other->grow_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAction_GetUserPlantRes_tbl_map_user_plant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAction_GetUserPlantRes_tbl_map_user_plant_descriptor_;
  metadata.reflection = DBAction_GetUserPlantRes_tbl_map_user_plant_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DBAction_GetUserPlantRes::kPlantFieldNumber;
#endif  // !_MSC_VER

DBAction_GetUserPlantRes::DBAction_GetUserPlantRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.DBAction_GetUserPlantRes)
}

void DBAction_GetUserPlantRes::InitAsDefaultInstance() {
}

DBAction_GetUserPlantRes::DBAction_GetUserPlantRes(const DBAction_GetUserPlantRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.DBAction_GetUserPlantRes)
}

void DBAction_GetUserPlantRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAction_GetUserPlantRes::~DBAction_GetUserPlantRes() {
  // @@protoc_insertion_point(destructor:MsgPB.DBAction_GetUserPlantRes)
  SharedDtor();
}

void DBAction_GetUserPlantRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAction_GetUserPlantRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAction_GetUserPlantRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAction_GetUserPlantRes_descriptor_;
}

const DBAction_GetUserPlantRes& DBAction_GetUserPlantRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDBAction_2eproto();
  return *default_instance_;
}

DBAction_GetUserPlantRes* DBAction_GetUserPlantRes::default_instance_ = NULL;

DBAction_GetUserPlantRes* DBAction_GetUserPlantRes::New() const {
  return new DBAction_GetUserPlantRes;
}

void DBAction_GetUserPlantRes::Clear() {
  plant_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAction_GetUserPlantRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.DBAction_GetUserPlantRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant plant = 1;
      case 1: {
        if (tag == 10) {
         parse_plant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_plant;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.DBAction_GetUserPlantRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.DBAction_GetUserPlantRes)
  return false;
#undef DO_
}

void DBAction_GetUserPlantRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.DBAction_GetUserPlantRes)
  // repeated .MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant plant = 1;
  for (int i = 0; i < this->plant_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plant(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.DBAction_GetUserPlantRes)
}

::google::protobuf::uint8* DBAction_GetUserPlantRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.DBAction_GetUserPlantRes)
  // repeated .MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant plant = 1;
  for (int i = 0; i < this->plant_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plant(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.DBAction_GetUserPlantRes)
  return target;
}

int DBAction_GetUserPlantRes::ByteSize() const {
  int total_size = 0;

  // repeated .MsgPB.DBAction_GetUserPlantRes.tbl_map_user_plant plant = 1;
  total_size += 1 * this->plant_size();
  for (int i = 0; i < this->plant_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plant(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAction_GetUserPlantRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAction_GetUserPlantRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAction_GetUserPlantRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAction_GetUserPlantRes::MergeFrom(const DBAction_GetUserPlantRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  plant_.MergeFrom(from.plant_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAction_GetUserPlantRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAction_GetUserPlantRes::CopyFrom(const DBAction_GetUserPlantRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAction_GetUserPlantRes::IsInitialized() const {

  return true;
}

void DBAction_GetUserPlantRes::Swap(DBAction_GetUserPlantRes* other) {
  if (other != this) {
    plant_.Swap(&other->plant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAction_GetUserPlantRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAction_GetUserPlantRes_descriptor_;
  metadata.reflection = DBAction_GetUserPlantRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBAction_GetUserAchieveRes_tbl_user_achieve::kAutoIdFieldNumber;
const int DBAction_GetUserAchieveRes_tbl_user_achieve::kIggidFieldNumber;
const int DBAction_GetUserAchieveRes_tbl_user_achieve::kUuidFieldNumber;
const int DBAction_GetUserAchieveRes_tbl_user_achieve::kStatusFieldNumber;
const int DBAction_GetUserAchieveRes_tbl_user_achieve::kValueFieldNumber;
const int DBAction_GetUserAchieveRes_tbl_user_achieve::kUpdateTimeFieldNumber;
const int DBAction_GetUserAchieveRes_tbl_user_achieve::kCompleteTimeFieldNumber;
const int DBAction_GetUserAchieveRes_tbl_user_achieve::kCurrentlyFieldNumber;
const int DBAction_GetUserAchieveRes_tbl_user_achieve::kSourceFieldNumber;
#endif  // !_MSC_VER

DBAction_GetUserAchieveRes_tbl_user_achieve::DBAction_GetUserAchieveRes_tbl_user_achieve()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve)
}

void DBAction_GetUserAchieveRes_tbl_user_achieve::InitAsDefaultInstance() {
}

DBAction_GetUserAchieveRes_tbl_user_achieve::DBAction_GetUserAchieveRes_tbl_user_achieve(const DBAction_GetUserAchieveRes_tbl_user_achieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve)
}

void DBAction_GetUserAchieveRes_tbl_user_achieve::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  auto_id_ = GOOGLE_LONGLONG(0);
  iggid_ = GOOGLE_LONGLONG(0);
  uuid_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  value_ = 0;
  update_time_ = GOOGLE_LONGLONG(0);
  complete_time_ = GOOGLE_LONGLONG(0);
  currently_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAction_GetUserAchieveRes_tbl_user_achieve::~DBAction_GetUserAchieveRes_tbl_user_achieve() {
  // @@protoc_insertion_point(destructor:MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve)
  SharedDtor();
}

void DBAction_GetUserAchieveRes_tbl_user_achieve::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void DBAction_GetUserAchieveRes_tbl_user_achieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAction_GetUserAchieveRes_tbl_user_achieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAction_GetUserAchieveRes_tbl_user_achieve_descriptor_;
}

const DBAction_GetUserAchieveRes_tbl_user_achieve& DBAction_GetUserAchieveRes_tbl_user_achieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDBAction_2eproto();
  return *default_instance_;
}

DBAction_GetUserAchieveRes_tbl_user_achieve* DBAction_GetUserAchieveRes_tbl_user_achieve::default_instance_ = NULL;

DBAction_GetUserAchieveRes_tbl_user_achieve* DBAction_GetUserAchieveRes_tbl_user_achieve::New() const {
  return new DBAction_GetUserAchieveRes_tbl_user_achieve;
}

void DBAction_GetUserAchieveRes_tbl_user_achieve::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBAction_GetUserAchieveRes_tbl_user_achieve*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(auto_id_, complete_time_);
    currently_ = 0;
  }
  if (has_source()) {
    if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      source_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAction_GetUserAchieveRes_tbl_user_achieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 auto_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &auto_id_)));
          set_has_auto_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional int32 value = 5;
      case 5: {
        if (tag == 40) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }

      // optional int64 update_time = 6;
      case 6: {
        if (tag == 48) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_complete_time;
        break;
      }

      // optional int64 complete_time = 7;
      case 7: {
        if (tag == 56) {
         parse_complete_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &complete_time_)));
          set_has_complete_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_currently;
        break;
      }

      // optional int32 currently = 8;
      case 8: {
        if (tag == 64) {
         parse_currently:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currently_)));
          set_has_currently();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_source;
        break;
      }

      // optional string source = 9;
      case 9: {
        if (tag == 74) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve)
  return false;
#undef DO_
}

void DBAction_GetUserAchieveRes_tbl_user_achieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve)
  // optional int64 auto_id = 1;
  if (has_auto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->auto_id(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uuid(), output);
  }

  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // optional int32 value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value(), output);
  }

  // optional int64 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->update_time(), output);
  }

  // optional int64 complete_time = 7;
  if (has_complete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->complete_time(), output);
  }

  // optional int32 currently = 8;
  if (has_currently()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->currently(), output);
  }

  // optional string source = 9;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve)
}

::google::protobuf::uint8* DBAction_GetUserAchieveRes_tbl_user_achieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve)
  // optional int64 auto_id = 1;
  if (has_auto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->auto_id(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uuid(), target);
  }

  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // optional int32 value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value(), target);
  }

  // optional int64 update_time = 6;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->update_time(), target);
  }

  // optional int64 complete_time = 7;
  if (has_complete_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->complete_time(), target);
  }

  // optional int32 currently = 8;
  if (has_currently()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->currently(), target);
  }

  // optional string source = 9;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve)
  return target;
}

int DBAction_GetUserAchieveRes_tbl_user_achieve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 auto_id = 1;
    if (has_auto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->auto_id());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int64 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_time());
    }

    // optional int64 complete_time = 7;
    if (has_complete_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->complete_time());
    }

    // optional int32 currently = 8;
    if (has_currently()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currently());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string source = 9;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAction_GetUserAchieveRes_tbl_user_achieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAction_GetUserAchieveRes_tbl_user_achieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAction_GetUserAchieveRes_tbl_user_achieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAction_GetUserAchieveRes_tbl_user_achieve::MergeFrom(const DBAction_GetUserAchieveRes_tbl_user_achieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auto_id()) {
      set_auto_id(from.auto_id());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_complete_time()) {
      set_complete_time(from.complete_time());
    }
    if (from.has_currently()) {
      set_currently(from.currently());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAction_GetUserAchieveRes_tbl_user_achieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAction_GetUserAchieveRes_tbl_user_achieve::CopyFrom(const DBAction_GetUserAchieveRes_tbl_user_achieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAction_GetUserAchieveRes_tbl_user_achieve::IsInitialized() const {

  return true;
}

void DBAction_GetUserAchieveRes_tbl_user_achieve::Swap(DBAction_GetUserAchieveRes_tbl_user_achieve* other) {
  if (other != this) {
    std::swap(auto_id_, other->auto_id_);
    std::swap(iggid_, other->iggid_);
    std::swap(uuid_, other->uuid_);
    std::swap(status_, other->status_);
    std::swap(value_, other->value_);
    std::swap(update_time_, other->update_time_);
    std::swap(complete_time_, other->complete_time_);
    std::swap(currently_, other->currently_);
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAction_GetUserAchieveRes_tbl_user_achieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAction_GetUserAchieveRes_tbl_user_achieve_descriptor_;
  metadata.reflection = DBAction_GetUserAchieveRes_tbl_user_achieve_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DBAction_GetUserAchieveRes::kDataFieldNumber;
#endif  // !_MSC_VER

DBAction_GetUserAchieveRes::DBAction_GetUserAchieveRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.DBAction_GetUserAchieveRes)
}

void DBAction_GetUserAchieveRes::InitAsDefaultInstance() {
}

DBAction_GetUserAchieveRes::DBAction_GetUserAchieveRes(const DBAction_GetUserAchieveRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.DBAction_GetUserAchieveRes)
}

void DBAction_GetUserAchieveRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAction_GetUserAchieveRes::~DBAction_GetUserAchieveRes() {
  // @@protoc_insertion_point(destructor:MsgPB.DBAction_GetUserAchieveRes)
  SharedDtor();
}

void DBAction_GetUserAchieveRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAction_GetUserAchieveRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAction_GetUserAchieveRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAction_GetUserAchieveRes_descriptor_;
}

const DBAction_GetUserAchieveRes& DBAction_GetUserAchieveRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDBAction_2eproto();
  return *default_instance_;
}

DBAction_GetUserAchieveRes* DBAction_GetUserAchieveRes::default_instance_ = NULL;

DBAction_GetUserAchieveRes* DBAction_GetUserAchieveRes::New() const {
  return new DBAction_GetUserAchieveRes;
}

void DBAction_GetUserAchieveRes::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAction_GetUserAchieveRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.DBAction_GetUserAchieveRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.DBAction_GetUserAchieveRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.DBAction_GetUserAchieveRes)
  return false;
#undef DO_
}

void DBAction_GetUserAchieveRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.DBAction_GetUserAchieveRes)
  // repeated .MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.DBAction_GetUserAchieveRes)
}

::google::protobuf::uint8* DBAction_GetUserAchieveRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.DBAction_GetUserAchieveRes)
  // repeated .MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.DBAction_GetUserAchieveRes)
  return target;
}

int DBAction_GetUserAchieveRes::ByteSize() const {
  int total_size = 0;

  // repeated .MsgPB.DBAction_GetUserAchieveRes.tbl_user_achieve data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAction_GetUserAchieveRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAction_GetUserAchieveRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAction_GetUserAchieveRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAction_GetUserAchieveRes::MergeFrom(const DBAction_GetUserAchieveRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAction_GetUserAchieveRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAction_GetUserAchieveRes::CopyFrom(const DBAction_GetUserAchieveRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAction_GetUserAchieveRes::IsInitialized() const {

  return true;
}

void DBAction_GetUserAchieveRes::Swap(DBAction_GetUserAchieveRes* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAction_GetUserAchieveRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAction_GetUserAchieveRes_descriptor_;
  metadata.reflection = DBAction_GetUserAchieveRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBAction::kMsgTypeFieldNumber;
const int MsgDBAction::kIggidFieldNumber;
const int MsgDBAction::kIsTailFieldNumber;
const int MsgDBAction::kMapidFieldNumber;
const int MsgDBAction::kContextDataFieldNumber;
const int MsgDBAction::kGetItemReqFieldNumber;
const int MsgDBAction::kGetItemResFieldNumber;
const int MsgDBAction::kGetPlantReqFieldNumber;
const int MsgDBAction::kGetUserPlantResFieldNumber;
const int MsgDBAction::kGetAchieveReqFieldNumber;
const int MsgDBAction::kGetUserAchieveResFieldNumber;
#endif  // !_MSC_VER

MsgDBAction::MsgDBAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgDBAction)
}

void MsgDBAction::InitAsDefaultInstance() {
  MsgDBAction_default_oneof_instance_->get_item_req_ = GOOGLE_LONGLONG(0);
  MsgDBAction_default_oneof_instance_->get_item_res_ = const_cast< ::MsgPB::DBAction_GetItemRes*>(&::MsgPB::DBAction_GetItemRes::default_instance());
  MsgDBAction_default_oneof_instance_->get_plant_req_ = GOOGLE_LONGLONG(0);
  MsgDBAction_default_oneof_instance_->get_user_plant_res_ = const_cast< ::MsgPB::DBAction_GetUserPlantRes*>(&::MsgPB::DBAction_GetUserPlantRes::default_instance());
  MsgDBAction_default_oneof_instance_->get_achieve_req_ = GOOGLE_LONGLONG(0);
  MsgDBAction_default_oneof_instance_->get_user_achieve_res_ = const_cast< ::MsgPB::DBAction_GetUserAchieveRes*>(&::MsgPB::DBAction_GetUserAchieveRes::default_instance());
}

MsgDBAction::MsgDBAction(const MsgDBAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgDBAction)
}

void MsgDBAction::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 9207;
  iggid_ = GOOGLE_LONGLONG(0);
  istail_ = false;
  mapid_ = 0;
  context_data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_action();
}

MsgDBAction::~MsgDBAction() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgDBAction)
  SharedDtor();
}

void MsgDBAction::SharedDtor() {
  if (has_action()) {
    clear_action();
  }
  if (this != default_instance_) {
  }
}

void MsgDBAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBAction_descriptor_;
}

const MsgDBAction& MsgDBAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgDBAction_2eproto();
  return *default_instance_;
}

MsgDBAction* MsgDBAction::default_instance_ = NULL;

MsgDBAction* MsgDBAction::New() const {
  return new MsgDBAction;
}

void MsgDBAction::clear_action() {
  switch(action_case()) {
    case kGetItemReq: {
      // No need to clear
      break;
    }
    case kGetItemRes: {
      delete action_.get_item_res_;
      break;
    }
    case kGetPlantReq: {
      // No need to clear
      break;
    }
    case kGetUserPlantRes: {
      delete action_.get_user_plant_res_;
      break;
    }
    case kGetAchieveReq: {
      // No need to clear
      break;
    }
    case kGetUserAchieveRes: {
      delete action_.get_user_achieve_res_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void MsgDBAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDBAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(istail_, mapid_);
    msgtype_ = 9207;
    iggid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_action();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgDBAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_ACTION];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsTail;
        break;
      }

      // optional bool IsTail = 3;
      case 3: {
        if (tag == 24) {
         parse_IsTail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istail_)));
          set_has_istail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_context_data;
        break;
      }

      // optional int64 context_data = 5;
      case 5: {
        if (tag == 40) {
         parse_context_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &context_data_)));
          set_has_context_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800)) goto parse_get_item_req;
        break;
      }

      // optional int64 get_item_req = 100;
      case 100: {
        if (tag == 800) {
         parse_get_item_req:
          clear_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &action_.get_item_req_)));
          set_has_get_item_req();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_get_item_res;
        break;
      }

      // optional .MsgPB.DBAction_GetItemRes get_item_res = 101;
      case 101: {
        if (tag == 810) {
         parse_get_item_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_item_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_get_plant_req;
        break;
      }

      // optional int64 get_plant_req = 102;
      case 102: {
        if (tag == 816) {
         parse_get_plant_req:
          clear_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &action_.get_plant_req_)));
          set_has_get_plant_req();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_get_user_plant_res;
        break;
      }

      // optional .MsgPB.DBAction_GetUserPlantRes get_user_plant_res = 103;
      case 103: {
        if (tag == 826) {
         parse_get_user_plant_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_user_plant_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(832)) goto parse_get_achieve_req;
        break;
      }

      // optional int64 get_achieve_req = 104;
      case 104: {
        if (tag == 832) {
         parse_get_achieve_req:
          clear_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &action_.get_achieve_req_)));
          set_has_get_achieve_req();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_get_user_achieve_res;
        break;
      }

      // optional .MsgPB.DBAction_GetUserAchieveRes get_user_achieve_res = 105;
      case 105: {
        if (tag == 842) {
         parse_get_user_achieve_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_user_achieve_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgDBAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgDBAction)
  return false;
#undef DO_
}

void MsgDBAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgDBAction)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_ACTION];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional bool IsTail = 3;
  if (has_istail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->istail(), output);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapid(), output);
  }

  // optional int64 context_data = 5;
  if (has_context_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->context_data(), output);
  }

  // optional int64 get_item_req = 100;
  if (has_get_item_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(100, this->get_item_req(), output);
  }

  // optional .MsgPB.DBAction_GetItemRes get_item_res = 101;
  if (has_get_item_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->get_item_res(), output);
  }

  // optional int64 get_plant_req = 102;
  if (has_get_plant_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(102, this->get_plant_req(), output);
  }

  // optional .MsgPB.DBAction_GetUserPlantRes get_user_plant_res = 103;
  if (has_get_user_plant_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->get_user_plant_res(), output);
  }

  // optional int64 get_achieve_req = 104;
  if (has_get_achieve_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(104, this->get_achieve_req(), output);
  }

  // optional .MsgPB.DBAction_GetUserAchieveRes get_user_achieve_res = 105;
  if (has_get_user_achieve_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->get_user_achieve_res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgDBAction)
}

::google::protobuf::uint8* MsgDBAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgDBAction)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_ACTION];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional bool IsTail = 3;
  if (has_istail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istail(), target);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapid(), target);
  }

  // optional int64 context_data = 5;
  if (has_context_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->context_data(), target);
  }

  // optional int64 get_item_req = 100;
  if (has_get_item_req()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(100, this->get_item_req(), target);
  }

  // optional .MsgPB.DBAction_GetItemRes get_item_res = 101;
  if (has_get_item_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->get_item_res(), target);
  }

  // optional int64 get_plant_req = 102;
  if (has_get_plant_req()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(102, this->get_plant_req(), target);
  }

  // optional .MsgPB.DBAction_GetUserPlantRes get_user_plant_res = 103;
  if (has_get_user_plant_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->get_user_plant_res(), target);
  }

  // optional int64 get_achieve_req = 104;
  if (has_get_achieve_req()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(104, this->get_achieve_req(), target);
  }

  // optional .MsgPB.DBAction_GetUserAchieveRes get_user_achieve_res = 105;
  if (has_get_user_achieve_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->get_user_achieve_res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgDBAction)
  return target;
}

int MsgDBAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_DB_ACTION];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional bool IsTail = 3;
    if (has_istail()) {
      total_size += 1 + 1;
    }

    // optional int32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int64 context_data = 5;
    if (has_context_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->context_data());
    }

  }
  switch (action_case()) {
    // optional int64 get_item_req = 100;
    case kGetItemReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->get_item_req());
      break;
    }
    // optional .MsgPB.DBAction_GetItemRes get_item_res = 101;
    case kGetItemRes: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_item_res());
      break;
    }
    // optional int64 get_plant_req = 102;
    case kGetPlantReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->get_plant_req());
      break;
    }
    // optional .MsgPB.DBAction_GetUserPlantRes get_user_plant_res = 103;
    case kGetUserPlantRes: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_user_plant_res());
      break;
    }
    // optional int64 get_achieve_req = 104;
    case kGetAchieveReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->get_achieve_req());
      break;
    }
    // optional .MsgPB.DBAction_GetUserAchieveRes get_user_achieve_res = 105;
    case kGetUserAchieveRes: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_user_achieve_res());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBAction::MergeFrom(const MsgDBAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.action_case()) {
    case kGetItemReq: {
      set_get_item_req(from.get_item_req());
      break;
    }
    case kGetItemRes: {
      mutable_get_item_res()->::MsgPB::DBAction_GetItemRes::MergeFrom(from.get_item_res());
      break;
    }
    case kGetPlantReq: {
      set_get_plant_req(from.get_plant_req());
      break;
    }
    case kGetUserPlantRes: {
      mutable_get_user_plant_res()->::MsgPB::DBAction_GetUserPlantRes::MergeFrom(from.get_user_plant_res());
      break;
    }
    case kGetAchieveReq: {
      set_get_achieve_req(from.get_achieve_req());
      break;
    }
    case kGetUserAchieveRes: {
      mutable_get_user_achieve_res()->::MsgPB::DBAction_GetUserAchieveRes::MergeFrom(from.get_user_achieve_res());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_istail()) {
      set_istail(from.istail());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_context_data()) {
      set_context_data(from.context_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBAction::CopyFrom(const MsgDBAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBAction::IsInitialized() const {

  return true;
}

void MsgDBAction::Swap(MsgDBAction* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(istail_, other->istail_);
    std::swap(mapid_, other->mapid_);
    std::swap(context_data_, other->context_data_);
    std::swap(action_, other->action_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBAction_descriptor_;
  metadata.reflection = MsgDBAction_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
