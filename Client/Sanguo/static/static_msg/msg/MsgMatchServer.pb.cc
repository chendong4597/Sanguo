// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgMatchServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgMatchServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgPlayerLoginSuccess_GS2MS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerLoginSuccess_GS2MS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerDisconnect_GS2MS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerDisconnect_GS2MS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMatchSrvPlayerJoin_MapMgr2MatchSrv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMatchSrvPlayerJoin_MapMgr2MatchSrv_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMatchSrvPlayerQuit_MapMgr2MatchSrv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMatchSrvPlayerQuit_MapMgr2MatchSrv_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerNetworkDisconnect_GS2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerNetworkDisconnect_GS2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerOfflineopSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerOfflineopSync_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgPlayerOfflineopSync_OP_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerOfflineOpGet_MS2MAS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerOfflineOpGet_MS2MAS_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgMatchServer_2eproto() {
  protobuf_AddDesc_MsgMatchServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgMatchServer.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPlayerLoginSuccess_GS2MS_descriptor_ = file->message_type(0);
  static const int MsgPlayerLoginSuccess_GS2MS_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_GS2MS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_GS2MS, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_GS2MS, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_GS2MS, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_GS2MS, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_GS2MS, skincolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_GS2MS, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_GS2MS, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_GS2MS, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_GS2MS, dbkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_GS2MS, idarea_),
  };
  MsgPlayerLoginSuccess_GS2MS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerLoginSuccess_GS2MS_descriptor_,
      MsgPlayerLoginSuccess_GS2MS::default_instance_,
      MsgPlayerLoginSuccess_GS2MS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_GS2MS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerLoginSuccess_GS2MS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerLoginSuccess_GS2MS));
  MsgPlayerDisconnect_GS2MS_descriptor_ = file->message_type(1);
  static const int MsgPlayerDisconnect_GS2MS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDisconnect_GS2MS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDisconnect_GS2MS, iggid_),
  };
  MsgPlayerDisconnect_GS2MS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerDisconnect_GS2MS_descriptor_,
      MsgPlayerDisconnect_GS2MS::default_instance_,
      MsgPlayerDisconnect_GS2MS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDisconnect_GS2MS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerDisconnect_GS2MS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerDisconnect_GS2MS));
  MsgMatchSrvPlayerJoin_MapMgr2MatchSrv_descriptor_ = file->message_type(2);
  static const int MsgMatchSrvPlayerJoin_MapMgr2MatchSrv_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv, iggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv, skincolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv, dbkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv, idarea_),
  };
  MsgMatchSrvPlayerJoin_MapMgr2MatchSrv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMatchSrvPlayerJoin_MapMgr2MatchSrv_descriptor_,
      MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::default_instance_,
      MsgMatchSrvPlayerJoin_MapMgr2MatchSrv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv));
  MsgMatchSrvPlayerQuit_MapMgr2MatchSrv_descriptor_ = file->message_type(3);
  static const int MsgMatchSrvPlayerQuit_MapMgr2MatchSrv_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerQuit_MapMgr2MatchSrv, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerQuit_MapMgr2MatchSrv, iggid_),
  };
  MsgMatchSrvPlayerQuit_MapMgr2MatchSrv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMatchSrvPlayerQuit_MapMgr2MatchSrv_descriptor_,
      MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::default_instance_,
      MsgMatchSrvPlayerQuit_MapMgr2MatchSrv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerQuit_MapMgr2MatchSrv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchSrvPlayerQuit_MapMgr2MatchSrv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMatchSrvPlayerQuit_MapMgr2MatchSrv));
  MsgPlayerNetworkDisconnect_GS2S_descriptor_ = file->message_type(4);
  static const int MsgPlayerNetworkDisconnect_GS2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNetworkDisconnect_GS2S, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNetworkDisconnect_GS2S, iggid_),
  };
  MsgPlayerNetworkDisconnect_GS2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerNetworkDisconnect_GS2S_descriptor_,
      MsgPlayerNetworkDisconnect_GS2S::default_instance_,
      MsgPlayerNetworkDisconnect_GS2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNetworkDisconnect_GS2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerNetworkDisconnect_GS2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerNetworkDisconnect_GS2S));
  MsgPlayerOfflineopSync_descriptor_ = file->message_type(5);
  static const int MsgPlayerOfflineopSync_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerOfflineopSync, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerOfflineopSync, iggid_),
  };
  MsgPlayerOfflineopSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerOfflineopSync_descriptor_,
      MsgPlayerOfflineopSync::default_instance_,
      MsgPlayerOfflineopSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerOfflineopSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerOfflineopSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerOfflineopSync));
  MsgPlayerOfflineopSync_OP_TYPE_descriptor_ = MsgPlayerOfflineopSync_descriptor_->enum_type(0);
  MsgPlayerOfflineOpGet_MS2MAS_descriptor_ = file->message_type(6);
  static const int MsgPlayerOfflineOpGet_MS2MAS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerOfflineOpGet_MS2MAS, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerOfflineOpGet_MS2MAS, iggid_),
  };
  MsgPlayerOfflineOpGet_MS2MAS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerOfflineOpGet_MS2MAS_descriptor_,
      MsgPlayerOfflineOpGet_MS2MAS::default_instance_,
      MsgPlayerOfflineOpGet_MS2MAS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerOfflineOpGet_MS2MAS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerOfflineOpGet_MS2MAS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerOfflineOpGet_MS2MAS));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgMatchServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerLoginSuccess_GS2MS_descriptor_, &MsgPlayerLoginSuccess_GS2MS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerDisconnect_GS2MS_descriptor_, &MsgPlayerDisconnect_GS2MS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMatchSrvPlayerJoin_MapMgr2MatchSrv_descriptor_, &MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMatchSrvPlayerQuit_MapMgr2MatchSrv_descriptor_, &MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerNetworkDisconnect_GS2S_descriptor_, &MsgPlayerNetworkDisconnect_GS2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerOfflineopSync_descriptor_, &MsgPlayerOfflineopSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerOfflineOpGet_MS2MAS_descriptor_, &MsgPlayerOfflineOpGet_MS2MAS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgMatchServer_2eproto() {
  delete MsgPlayerLoginSuccess_GS2MS::default_instance_;
  delete MsgPlayerLoginSuccess_GS2MS_reflection_;
  delete MsgPlayerDisconnect_GS2MS::default_instance_;
  delete MsgPlayerDisconnect_GS2MS_reflection_;
  delete MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::default_instance_;
  delete MsgMatchSrvPlayerJoin_MapMgr2MatchSrv_reflection_;
  delete MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::default_instance_;
  delete MsgMatchSrvPlayerQuit_MapMgr2MatchSrv_reflection_;
  delete MsgPlayerNetworkDisconnect_GS2S::default_instance_;
  delete MsgPlayerNetworkDisconnect_GS2S_reflection_;
  delete MsgPlayerOfflineopSync::default_instance_;
  delete MsgPlayerOfflineopSync_reflection_;
  delete MsgPlayerOfflineOpGet_MS2MAS::default_instance_;
  delete MsgPlayerOfflineOpGet_MS2MAS_reflection_;
}

void protobuf_AddDesc_MsgMatchServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::MsgPB::protobuf_AddDesc_MsgItem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024MsgMatchServer.proto\022\005MsgPB\032\rMsgType.p"
    "roto\032\rMsgItem.proto\"\235\002\n\033MsgPlayerLoginSu"
    "ccess_GS2MS\022B\n\007msgType\030\001 \001(\0162\017.MsgPB.EMs"
    "gType: _MSG_PLAYER_LOGIN_SUCCESS_GS2MGS\022"
    "\r\n\005iggId\030\002 \001(\003\022\n\n\002lv\030\003 \001(\005\022\020\n\010nickname\030\004"
    " \001(\t\022\016\n\006gender\030\005 \001(\005\022\021\n\tskincolor\030\006 \001(\005\022"
    "\014\n\004hair\030\007 \001(\005\022\021\n\thaircolor\030\010 \001(\005\022*\n\010item"
    "data\030\t \003(\0132\030.MsgPB.MsgItemCommonData\022\r\n\005"
    "dbkey\030\n \001(\t\022\016\n\006idArea\030\013 \001(\r\"k\n\031MsgPlayer"
    "Disconnect_GS2MS\022\?\n\007msgType\030\001 \001(\0162\017.MsgP"
    "B.EMsgType:\035_MSG_PLAYER_DISCONNECT_GS2MG"
    "S\022\r\n\005iggId\030\002 \001(\003\"\241\002\n%MsgMatchSrvPlayerJo"
    "in_MapMgr2MatchSrv\022<\n\007msgType\030\001 \001(\0162\017.Ms"
    "gPB.EMsgType:\032_MSG_MATCH_SRV_PLAYER_JOIN"
    "\022\r\n\005iggId\030\002 \001(\003\022\n\n\002lv\030\003 \001(\005\022\020\n\010nickname\030"
    "\004 \001(\t\022\016\n\006gender\030\005 \001(\005\022\021\n\tskincolor\030\006 \001(\005"
    "\022\014\n\004hair\030\007 \001(\005\022\021\n\thaircolor\030\010 \001(\005\022*\n\010ite"
    "mdata\030\t \003(\0132\030.MsgPB.MsgItemCommonData\022\r\n"
    "\005dbkey\030\n \001(\t\022\016\n\006idArea\030\013 \001(\r\"t\n%MsgMatch"
    "SrvPlayerQuit_MapMgr2MatchSrv\022<\n\007msgType"
    "\030\001 \001(\0162\017.MsgPB.EMsgType:\032_MSG_MATCH_SRV_"
    "PLAYER_QUIT\022\r\n\005iggId\030\002 \001(\003\"w\n\037MsgPlayerN"
    "etworkDisconnect_GS2S\022E\n\007msgType\030\001 \001(\0162\017"
    ".MsgPB.EMsgType:#_MSG_PLAYER_NETWORK_DIS"
    "CONNECT_GS2S\022\r\n\005iggid\030\002 \001(\003\"\226\001\n\026MsgPlaye"
    "rOfflineopSync\022;\n\007msgType\030\001 \001(\0162\017.MsgPB."
    "EMsgType:\031MSG_PLAYER_OFFLINEOP_SYNC\022\r\n\005i"
    "ggid\030\002 \001(\003\"0\n\007OP_TYPE\022\017\n\013NpcrepoHelp\020\001\022\024"
    "\n\020TowerpvpPairData\020\002\"q\n\034MsgPlayerOffline"
    "OpGet_MS2MAS\022B\n\007msgType\030\001 \001(\0162\017.MsgPB.EM"
    "sgType: _MSG_PLAYER_OFFLINEOP_GET_MS2MAS"
    "\022\r\n\005iggid\030\002 \001(\003", 1255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgMatchServer.proto", &protobuf_RegisterTypes);
  MsgPlayerLoginSuccess_GS2MS::default_instance_ = new MsgPlayerLoginSuccess_GS2MS();
  MsgPlayerDisconnect_GS2MS::default_instance_ = new MsgPlayerDisconnect_GS2MS();
  MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::default_instance_ = new MsgMatchSrvPlayerJoin_MapMgr2MatchSrv();
  MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::default_instance_ = new MsgMatchSrvPlayerQuit_MapMgr2MatchSrv();
  MsgPlayerNetworkDisconnect_GS2S::default_instance_ = new MsgPlayerNetworkDisconnect_GS2S();
  MsgPlayerOfflineopSync::default_instance_ = new MsgPlayerOfflineopSync();
  MsgPlayerOfflineOpGet_MS2MAS::default_instance_ = new MsgPlayerOfflineOpGet_MS2MAS();
  MsgPlayerLoginSuccess_GS2MS::default_instance_->InitAsDefaultInstance();
  MsgPlayerDisconnect_GS2MS::default_instance_->InitAsDefaultInstance();
  MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::default_instance_->InitAsDefaultInstance();
  MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::default_instance_->InitAsDefaultInstance();
  MsgPlayerNetworkDisconnect_GS2S::default_instance_->InitAsDefaultInstance();
  MsgPlayerOfflineopSync::default_instance_->InitAsDefaultInstance();
  MsgPlayerOfflineOpGet_MS2MAS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgMatchServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgMatchServer_2eproto {
  StaticDescriptorInitializer_MsgMatchServer_2eproto() {
    protobuf_AddDesc_MsgMatchServer_2eproto();
  }
} static_descriptor_initializer_MsgMatchServer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerLoginSuccess_GS2MS::kMsgTypeFieldNumber;
const int MsgPlayerLoginSuccess_GS2MS::kIggIdFieldNumber;
const int MsgPlayerLoginSuccess_GS2MS::kLvFieldNumber;
const int MsgPlayerLoginSuccess_GS2MS::kNicknameFieldNumber;
const int MsgPlayerLoginSuccess_GS2MS::kGenderFieldNumber;
const int MsgPlayerLoginSuccess_GS2MS::kSkincolorFieldNumber;
const int MsgPlayerLoginSuccess_GS2MS::kHairFieldNumber;
const int MsgPlayerLoginSuccess_GS2MS::kHaircolorFieldNumber;
const int MsgPlayerLoginSuccess_GS2MS::kItemdataFieldNumber;
const int MsgPlayerLoginSuccess_GS2MS::kDbkeyFieldNumber;
const int MsgPlayerLoginSuccess_GS2MS::kIdAreaFieldNumber;
#endif  // !_MSC_VER

MsgPlayerLoginSuccess_GS2MS::MsgPlayerLoginSuccess_GS2MS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerLoginSuccess_GS2MS)
}

void MsgPlayerLoginSuccess_GS2MS::InitAsDefaultInstance() {
}

MsgPlayerLoginSuccess_GS2MS::MsgPlayerLoginSuccess_GS2MS(const MsgPlayerLoginSuccess_GS2MS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerLoginSuccess_GS2MS)
}

void MsgPlayerLoginSuccess_GS2MS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1150;
  iggid_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  skincolor_ = 0;
  hair_ = 0;
  haircolor_ = 0;
  dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idarea_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerLoginSuccess_GS2MS::~MsgPlayerLoginSuccess_GS2MS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerLoginSuccess_GS2MS)
  SharedDtor();
}

void MsgPlayerLoginSuccess_GS2MS::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbkey_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlayerLoginSuccess_GS2MS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerLoginSuccess_GS2MS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerLoginSuccess_GS2MS_descriptor_;
}

const MsgPlayerLoginSuccess_GS2MS& MsgPlayerLoginSuccess_GS2MS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatchServer_2eproto();
  return *default_instance_;
}

MsgPlayerLoginSuccess_GS2MS* MsgPlayerLoginSuccess_GS2MS::default_instance_ = NULL;

MsgPlayerLoginSuccess_GS2MS* MsgPlayerLoginSuccess_GS2MS::New() const {
  return new MsgPlayerLoginSuccess_GS2MS;
}

void MsgPlayerLoginSuccess_GS2MS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerLoginSuccess_GS2MS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gender_, haircolor_);
    msgtype_ = 1150;
    iggid_ = GOOGLE_LONGLONG(0);
    lv_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1536) {
    if (has_dbkey()) {
      if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbkey_->clear();
      }
    }
    idarea_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerLoginSuccess_GS2MS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerLoginSuccess_GS2MS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_LOGIN_SUCCESS_GS2MGS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggId;
        break;
      }

      // optional int64 iggId = 2;
      case 2: {
        if (tag == 16) {
         parse_iggId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional int32 lv = 3;
      case 3: {
        if (tag == 24) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional int32 gender = 5;
      case 5: {
        if (tag == 40) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_skincolor;
        break;
      }

      // optional int32 skincolor = 6;
      case 6: {
        if (tag == 48) {
         parse_skincolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skincolor_)));
          set_has_skincolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hair;
        break;
      }

      // optional int32 hair = 7;
      case 7: {
        if (tag == 56) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_haircolor;
        break;
      }

      // optional int32 haircolor = 8;
      case 8: {
        if (tag == 64) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_itemdata;
        break;
      }

      // repeated .MsgPB.MsgItemCommonData itemdata = 9;
      case 9: {
        if (tag == 74) {
         parse_itemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_itemdata;
        if (input->ExpectTag(82)) goto parse_dbkey;
        break;
      }

      // optional string dbkey = 10;
      case 10: {
        if (tag == 82) {
         parse_dbkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbkey().data(), this->dbkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_idArea;
        break;
      }

      // optional uint32 idArea = 11;
      case 11: {
        if (tag == 88) {
         parse_idArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idarea_)));
          set_has_idarea();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerLoginSuccess_GS2MS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerLoginSuccess_GS2MS)
  return false;
#undef DO_
}

void MsgPlayerLoginSuccess_GS2MS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerLoginSuccess_GS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_LOGIN_SUCCESS_GS2MGS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional int32 gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gender(), output);
  }

  // optional int32 skincolor = 6;
  if (has_skincolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skincolor(), output);
  }

  // optional int32 hair = 7;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hair(), output);
  }

  // optional int32 haircolor = 8;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->haircolor(), output);
  }

  // repeated .MsgPB.MsgItemCommonData itemdata = 9;
  for (int i = 0; i < this->itemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->itemdata(i), output);
  }

  // optional string dbkey = 10;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->dbkey(), output);
  }

  // optional uint32 idArea = 11;
  if (has_idarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->idarea(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerLoginSuccess_GS2MS)
}

::google::protobuf::uint8* MsgPlayerLoginSuccess_GS2MS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerLoginSuccess_GS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_LOGIN_SUCCESS_GS2MGS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional int32 gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gender(), target);
  }

  // optional int32 skincolor = 6;
  if (has_skincolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skincolor(), target);
  }

  // optional int32 hair = 7;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hair(), target);
  }

  // optional int32 haircolor = 8;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->haircolor(), target);
  }

  // repeated .MsgPB.MsgItemCommonData itemdata = 9;
  for (int i = 0; i < this->itemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->itemdata(i), target);
  }

  // optional string dbkey = 10;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->dbkey(), target);
  }

  // optional uint32 idArea = 11;
  if (has_idarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->idarea(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerLoginSuccess_GS2MS)
  return target;
}

int MsgPlayerLoginSuccess_GS2MS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_LOGIN_SUCCESS_GS2MGS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggId = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 skincolor = 6;
    if (has_skincolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skincolor());
    }

    // optional int32 hair = 7;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // optional int32 haircolor = 8;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haircolor());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string dbkey = 10;
    if (has_dbkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbkey());
    }

    // optional uint32 idArea = 11;
    if (has_idarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idarea());
    }

  }
  // repeated .MsgPB.MsgItemCommonData itemdata = 9;
  total_size += 1 * this->itemdata_size();
  for (int i = 0; i < this->itemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerLoginSuccess_GS2MS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerLoginSuccess_GS2MS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerLoginSuccess_GS2MS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerLoginSuccess_GS2MS::MergeFrom(const MsgPlayerLoginSuccess_GS2MS& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdata_.MergeFrom(from.itemdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_skincolor()) {
      set_skincolor(from.skincolor());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_dbkey()) {
      set_dbkey(from.dbkey());
    }
    if (from.has_idarea()) {
      set_idarea(from.idarea());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerLoginSuccess_GS2MS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerLoginSuccess_GS2MS::CopyFrom(const MsgPlayerLoginSuccess_GS2MS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerLoginSuccess_GS2MS::IsInitialized() const {

  return true;
}

void MsgPlayerLoginSuccess_GS2MS::Swap(MsgPlayerLoginSuccess_GS2MS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(lv_, other->lv_);
    std::swap(nickname_, other->nickname_);
    std::swap(gender_, other->gender_);
    std::swap(skincolor_, other->skincolor_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    itemdata_.Swap(&other->itemdata_);
    std::swap(dbkey_, other->dbkey_);
    std::swap(idarea_, other->idarea_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerLoginSuccess_GS2MS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerLoginSuccess_GS2MS_descriptor_;
  metadata.reflection = MsgPlayerLoginSuccess_GS2MS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerDisconnect_GS2MS::kMsgTypeFieldNumber;
const int MsgPlayerDisconnect_GS2MS::kIggIdFieldNumber;
#endif  // !_MSC_VER

MsgPlayerDisconnect_GS2MS::MsgPlayerDisconnect_GS2MS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerDisconnect_GS2MS)
}

void MsgPlayerDisconnect_GS2MS::InitAsDefaultInstance() {
}

MsgPlayerDisconnect_GS2MS::MsgPlayerDisconnect_GS2MS(const MsgPlayerDisconnect_GS2MS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerDisconnect_GS2MS)
}

void MsgPlayerDisconnect_GS2MS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1151;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerDisconnect_GS2MS::~MsgPlayerDisconnect_GS2MS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerDisconnect_GS2MS)
  SharedDtor();
}

void MsgPlayerDisconnect_GS2MS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerDisconnect_GS2MS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerDisconnect_GS2MS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerDisconnect_GS2MS_descriptor_;
}

const MsgPlayerDisconnect_GS2MS& MsgPlayerDisconnect_GS2MS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatchServer_2eproto();
  return *default_instance_;
}

MsgPlayerDisconnect_GS2MS* MsgPlayerDisconnect_GS2MS::default_instance_ = NULL;

MsgPlayerDisconnect_GS2MS* MsgPlayerDisconnect_GS2MS::New() const {
  return new MsgPlayerDisconnect_GS2MS;
}

void MsgPlayerDisconnect_GS2MS::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1151;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerDisconnect_GS2MS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerDisconnect_GS2MS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DISCONNECT_GS2MGS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggId;
        break;
      }

      // optional int64 iggId = 2;
      case 2: {
        if (tag == 16) {
         parse_iggId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerDisconnect_GS2MS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerDisconnect_GS2MS)
  return false;
#undef DO_
}

void MsgPlayerDisconnect_GS2MS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerDisconnect_GS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DISCONNECT_GS2MGS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerDisconnect_GS2MS)
}

::google::protobuf::uint8* MsgPlayerDisconnect_GS2MS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerDisconnect_GS2MS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DISCONNECT_GS2MGS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerDisconnect_GS2MS)
  return target;
}

int MsgPlayerDisconnect_GS2MS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_DISCONNECT_GS2MGS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggId = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerDisconnect_GS2MS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerDisconnect_GS2MS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerDisconnect_GS2MS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerDisconnect_GS2MS::MergeFrom(const MsgPlayerDisconnect_GS2MS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerDisconnect_GS2MS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerDisconnect_GS2MS::CopyFrom(const MsgPlayerDisconnect_GS2MS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerDisconnect_GS2MS::IsInitialized() const {

  return true;
}

void MsgPlayerDisconnect_GS2MS::Swap(MsgPlayerDisconnect_GS2MS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerDisconnect_GS2MS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerDisconnect_GS2MS_descriptor_;
  metadata.reflection = MsgPlayerDisconnect_GS2MS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::kMsgTypeFieldNumber;
const int MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::kIggIdFieldNumber;
const int MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::kLvFieldNumber;
const int MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::kNicknameFieldNumber;
const int MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::kGenderFieldNumber;
const int MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::kSkincolorFieldNumber;
const int MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::kHairFieldNumber;
const int MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::kHaircolorFieldNumber;
const int MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::kItemdataFieldNumber;
const int MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::kDbkeyFieldNumber;
const int MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::kIdAreaFieldNumber;
#endif  // !_MSC_VER

MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::MsgMatchSrvPlayerJoin_MapMgr2MatchSrv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMatchSrvPlayerJoin_MapMgr2MatchSrv)
}

void MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::InitAsDefaultInstance() {
}

MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::MsgMatchSrvPlayerJoin_MapMgr2MatchSrv(const MsgMatchSrvPlayerJoin_MapMgr2MatchSrv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMatchSrvPlayerJoin_MapMgr2MatchSrv)
}

void MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1152;
  iggid_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  skincolor_ = 0;
  hair_ = 0;
  haircolor_ = 0;
  dbkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idarea_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::~MsgMatchSrvPlayerJoin_MapMgr2MatchSrv() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMatchSrvPlayerJoin_MapMgr2MatchSrv)
  SharedDtor();
}

void MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbkey_;
  }
  if (this != default_instance_) {
  }
}

void MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMatchSrvPlayerJoin_MapMgr2MatchSrv_descriptor_;
}

const MsgMatchSrvPlayerJoin_MapMgr2MatchSrv& MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatchServer_2eproto();
  return *default_instance_;
}

MsgMatchSrvPlayerJoin_MapMgr2MatchSrv* MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::default_instance_ = NULL;

MsgMatchSrvPlayerJoin_MapMgr2MatchSrv* MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::New() const {
  return new MsgMatchSrvPlayerJoin_MapMgr2MatchSrv;
}

void MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMatchSrvPlayerJoin_MapMgr2MatchSrv*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gender_, haircolor_);
    msgtype_ = 1152;
    iggid_ = GOOGLE_LONGLONG(0);
    lv_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1536) {
    if (has_dbkey()) {
      if (dbkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbkey_->clear();
      }
    }
    idarea_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMatchSrvPlayerJoin_MapMgr2MatchSrv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MATCH_SRV_PLAYER_JOIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggId;
        break;
      }

      // optional int64 iggId = 2;
      case 2: {
        if (tag == 16) {
         parse_iggId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional int32 lv = 3;
      case 3: {
        if (tag == 24) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional int32 gender = 5;
      case 5: {
        if (tag == 40) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_skincolor;
        break;
      }

      // optional int32 skincolor = 6;
      case 6: {
        if (tag == 48) {
         parse_skincolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skincolor_)));
          set_has_skincolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hair;
        break;
      }

      // optional int32 hair = 7;
      case 7: {
        if (tag == 56) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_haircolor;
        break;
      }

      // optional int32 haircolor = 8;
      case 8: {
        if (tag == 64) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_itemdata;
        break;
      }

      // repeated .MsgPB.MsgItemCommonData itemdata = 9;
      case 9: {
        if (tag == 74) {
         parse_itemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_itemdata;
        if (input->ExpectTag(82)) goto parse_dbkey;
        break;
      }

      // optional string dbkey = 10;
      case 10: {
        if (tag == 82) {
         parse_dbkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbkey().data(), this->dbkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_idArea;
        break;
      }

      // optional uint32 idArea = 11;
      case 11: {
        if (tag == 88) {
         parse_idArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idarea_)));
          set_has_idarea();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMatchSrvPlayerJoin_MapMgr2MatchSrv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMatchSrvPlayerJoin_MapMgr2MatchSrv)
  return false;
#undef DO_
}

void MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMatchSrvPlayerJoin_MapMgr2MatchSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MATCH_SRV_PLAYER_JOIN];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional int32 gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gender(), output);
  }

  // optional int32 skincolor = 6;
  if (has_skincolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skincolor(), output);
  }

  // optional int32 hair = 7;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hair(), output);
  }

  // optional int32 haircolor = 8;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->haircolor(), output);
  }

  // repeated .MsgPB.MsgItemCommonData itemdata = 9;
  for (int i = 0; i < this->itemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->itemdata(i), output);
  }

  // optional string dbkey = 10;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->dbkey(), output);
  }

  // optional uint32 idArea = 11;
  if (has_idarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->idarea(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMatchSrvPlayerJoin_MapMgr2MatchSrv)
}

::google::protobuf::uint8* MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMatchSrvPlayerJoin_MapMgr2MatchSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MATCH_SRV_PLAYER_JOIN];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional int32 gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gender(), target);
  }

  // optional int32 skincolor = 6;
  if (has_skincolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skincolor(), target);
  }

  // optional int32 hair = 7;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hair(), target);
  }

  // optional int32 haircolor = 8;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->haircolor(), target);
  }

  // repeated .MsgPB.MsgItemCommonData itemdata = 9;
  for (int i = 0; i < this->itemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->itemdata(i), target);
  }

  // optional string dbkey = 10;
  if (has_dbkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbkey().data(), this->dbkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->dbkey(), target);
  }

  // optional uint32 idArea = 11;
  if (has_idarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->idarea(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMatchSrvPlayerJoin_MapMgr2MatchSrv)
  return target;
}

int MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MATCH_SRV_PLAYER_JOIN];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggId = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 skincolor = 6;
    if (has_skincolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skincolor());
    }

    // optional int32 hair = 7;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // optional int32 haircolor = 8;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haircolor());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string dbkey = 10;
    if (has_dbkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbkey());
    }

    // optional uint32 idArea = 11;
    if (has_idarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idarea());
    }

  }
  // repeated .MsgPB.MsgItemCommonData itemdata = 9;
  total_size += 1 * this->itemdata_size();
  for (int i = 0; i < this->itemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMatchSrvPlayerJoin_MapMgr2MatchSrv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMatchSrvPlayerJoin_MapMgr2MatchSrv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::MergeFrom(const MsgMatchSrvPlayerJoin_MapMgr2MatchSrv& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdata_.MergeFrom(from.itemdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_skincolor()) {
      set_skincolor(from.skincolor());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_dbkey()) {
      set_dbkey(from.dbkey());
    }
    if (from.has_idarea()) {
      set_idarea(from.idarea());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::CopyFrom(const MsgMatchSrvPlayerJoin_MapMgr2MatchSrv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::IsInitialized() const {

  return true;
}

void MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::Swap(MsgMatchSrvPlayerJoin_MapMgr2MatchSrv* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(lv_, other->lv_);
    std::swap(nickname_, other->nickname_);
    std::swap(gender_, other->gender_);
    std::swap(skincolor_, other->skincolor_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    itemdata_.Swap(&other->itemdata_);
    std::swap(dbkey_, other->dbkey_);
    std::swap(idarea_, other->idarea_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMatchSrvPlayerJoin_MapMgr2MatchSrv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMatchSrvPlayerJoin_MapMgr2MatchSrv_descriptor_;
  metadata.reflection = MsgMatchSrvPlayerJoin_MapMgr2MatchSrv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::kMsgTypeFieldNumber;
const int MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::kIggIdFieldNumber;
#endif  // !_MSC_VER

MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::MsgMatchSrvPlayerQuit_MapMgr2MatchSrv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgMatchSrvPlayerQuit_MapMgr2MatchSrv)
}

void MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::InitAsDefaultInstance() {
}

MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::MsgMatchSrvPlayerQuit_MapMgr2MatchSrv(const MsgMatchSrvPlayerQuit_MapMgr2MatchSrv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgMatchSrvPlayerQuit_MapMgr2MatchSrv)
}

void MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1153;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::~MsgMatchSrvPlayerQuit_MapMgr2MatchSrv() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgMatchSrvPlayerQuit_MapMgr2MatchSrv)
  SharedDtor();
}

void MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMatchSrvPlayerQuit_MapMgr2MatchSrv_descriptor_;
}

const MsgMatchSrvPlayerQuit_MapMgr2MatchSrv& MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatchServer_2eproto();
  return *default_instance_;
}

MsgMatchSrvPlayerQuit_MapMgr2MatchSrv* MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::default_instance_ = NULL;

MsgMatchSrvPlayerQuit_MapMgr2MatchSrv* MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::New() const {
  return new MsgMatchSrvPlayerQuit_MapMgr2MatchSrv;
}

void MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1153;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgMatchSrvPlayerQuit_MapMgr2MatchSrv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MATCH_SRV_PLAYER_QUIT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggId;
        break;
      }

      // optional int64 iggId = 2;
      case 2: {
        if (tag == 16) {
         parse_iggId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgMatchSrvPlayerQuit_MapMgr2MatchSrv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgMatchSrvPlayerQuit_MapMgr2MatchSrv)
  return false;
#undef DO_
}

void MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgMatchSrvPlayerQuit_MapMgr2MatchSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MATCH_SRV_PLAYER_QUIT];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgMatchSrvPlayerQuit_MapMgr2MatchSrv)
}

::google::protobuf::uint8* MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgMatchSrvPlayerQuit_MapMgr2MatchSrv)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MATCH_SRV_PLAYER_QUIT];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggId = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgMatchSrvPlayerQuit_MapMgr2MatchSrv)
  return target;
}

int MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_MATCH_SRV_PLAYER_QUIT];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggId = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMatchSrvPlayerQuit_MapMgr2MatchSrv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMatchSrvPlayerQuit_MapMgr2MatchSrv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::MergeFrom(const MsgMatchSrvPlayerQuit_MapMgr2MatchSrv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::CopyFrom(const MsgMatchSrvPlayerQuit_MapMgr2MatchSrv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::IsInitialized() const {

  return true;
}

void MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::Swap(MsgMatchSrvPlayerQuit_MapMgr2MatchSrv* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMatchSrvPlayerQuit_MapMgr2MatchSrv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMatchSrvPlayerQuit_MapMgr2MatchSrv_descriptor_;
  metadata.reflection = MsgMatchSrvPlayerQuit_MapMgr2MatchSrv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerNetworkDisconnect_GS2S::kMsgTypeFieldNumber;
const int MsgPlayerNetworkDisconnect_GS2S::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgPlayerNetworkDisconnect_GS2S::MsgPlayerNetworkDisconnect_GS2S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerNetworkDisconnect_GS2S)
}

void MsgPlayerNetworkDisconnect_GS2S::InitAsDefaultInstance() {
}

MsgPlayerNetworkDisconnect_GS2S::MsgPlayerNetworkDisconnect_GS2S(const MsgPlayerNetworkDisconnect_GS2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerNetworkDisconnect_GS2S)
}

void MsgPlayerNetworkDisconnect_GS2S::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1155;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerNetworkDisconnect_GS2S::~MsgPlayerNetworkDisconnect_GS2S() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerNetworkDisconnect_GS2S)
  SharedDtor();
}

void MsgPlayerNetworkDisconnect_GS2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerNetworkDisconnect_GS2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerNetworkDisconnect_GS2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerNetworkDisconnect_GS2S_descriptor_;
}

const MsgPlayerNetworkDisconnect_GS2S& MsgPlayerNetworkDisconnect_GS2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatchServer_2eproto();
  return *default_instance_;
}

MsgPlayerNetworkDisconnect_GS2S* MsgPlayerNetworkDisconnect_GS2S::default_instance_ = NULL;

MsgPlayerNetworkDisconnect_GS2S* MsgPlayerNetworkDisconnect_GS2S::New() const {
  return new MsgPlayerNetworkDisconnect_GS2S;
}

void MsgPlayerNetworkDisconnect_GS2S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1155;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerNetworkDisconnect_GS2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerNetworkDisconnect_GS2S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_NETWORK_DISCONNECT_GS2S];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerNetworkDisconnect_GS2S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerNetworkDisconnect_GS2S)
  return false;
#undef DO_
}

void MsgPlayerNetworkDisconnect_GS2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerNetworkDisconnect_GS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_NETWORK_DISCONNECT_GS2S];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerNetworkDisconnect_GS2S)
}

::google::protobuf::uint8* MsgPlayerNetworkDisconnect_GS2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerNetworkDisconnect_GS2S)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_NETWORK_DISCONNECT_GS2S];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerNetworkDisconnect_GS2S)
  return target;
}

int MsgPlayerNetworkDisconnect_GS2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_NETWORK_DISCONNECT_GS2S];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerNetworkDisconnect_GS2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerNetworkDisconnect_GS2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerNetworkDisconnect_GS2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerNetworkDisconnect_GS2S::MergeFrom(const MsgPlayerNetworkDisconnect_GS2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerNetworkDisconnect_GS2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerNetworkDisconnect_GS2S::CopyFrom(const MsgPlayerNetworkDisconnect_GS2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerNetworkDisconnect_GS2S::IsInitialized() const {

  return true;
}

void MsgPlayerNetworkDisconnect_GS2S::Swap(MsgPlayerNetworkDisconnect_GS2S* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerNetworkDisconnect_GS2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerNetworkDisconnect_GS2S_descriptor_;
  metadata.reflection = MsgPlayerNetworkDisconnect_GS2S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgPlayerOfflineopSync_OP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerOfflineopSync_OP_TYPE_descriptor_;
}
bool MsgPlayerOfflineopSync_OP_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgPlayerOfflineopSync_OP_TYPE MsgPlayerOfflineopSync::NpcrepoHelp;
const MsgPlayerOfflineopSync_OP_TYPE MsgPlayerOfflineopSync::TowerpvpPairData;
const MsgPlayerOfflineopSync_OP_TYPE MsgPlayerOfflineopSync::OP_TYPE_MIN;
const MsgPlayerOfflineopSync_OP_TYPE MsgPlayerOfflineopSync::OP_TYPE_MAX;
const int MsgPlayerOfflineopSync::OP_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgPlayerOfflineopSync::kMsgTypeFieldNumber;
const int MsgPlayerOfflineopSync::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgPlayerOfflineopSync::MsgPlayerOfflineopSync()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerOfflineopSync)
}

void MsgPlayerOfflineopSync::InitAsDefaultInstance() {
}

MsgPlayerOfflineopSync::MsgPlayerOfflineopSync(const MsgPlayerOfflineopSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerOfflineopSync)
}

void MsgPlayerOfflineopSync::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1156;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerOfflineopSync::~MsgPlayerOfflineopSync() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerOfflineopSync)
  SharedDtor();
}

void MsgPlayerOfflineopSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerOfflineopSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerOfflineopSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerOfflineopSync_descriptor_;
}

const MsgPlayerOfflineopSync& MsgPlayerOfflineopSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatchServer_2eproto();
  return *default_instance_;
}

MsgPlayerOfflineopSync* MsgPlayerOfflineopSync::default_instance_ = NULL;

MsgPlayerOfflineopSync* MsgPlayerOfflineopSync::New() const {
  return new MsgPlayerOfflineopSync;
}

void MsgPlayerOfflineopSync::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1156;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerOfflineopSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerOfflineopSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = MSG_PLAYER_OFFLINEOP_SYNC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerOfflineopSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerOfflineopSync)
  return false;
#undef DO_
}

void MsgPlayerOfflineopSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerOfflineopSync)
  // optional .MsgPB.EMsgType msgType = 1 [default = MSG_PLAYER_OFFLINEOP_SYNC];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerOfflineopSync)
}

::google::protobuf::uint8* MsgPlayerOfflineopSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerOfflineopSync)
  // optional .MsgPB.EMsgType msgType = 1 [default = MSG_PLAYER_OFFLINEOP_SYNC];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerOfflineopSync)
  return target;
}

int MsgPlayerOfflineopSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = MSG_PLAYER_OFFLINEOP_SYNC];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerOfflineopSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerOfflineopSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerOfflineopSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerOfflineopSync::MergeFrom(const MsgPlayerOfflineopSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerOfflineopSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerOfflineopSync::CopyFrom(const MsgPlayerOfflineopSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerOfflineopSync::IsInitialized() const {

  return true;
}

void MsgPlayerOfflineopSync::Swap(MsgPlayerOfflineopSync* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerOfflineopSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerOfflineopSync_descriptor_;
  metadata.reflection = MsgPlayerOfflineopSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerOfflineOpGet_MS2MAS::kMsgTypeFieldNumber;
const int MsgPlayerOfflineOpGet_MS2MAS::kIggidFieldNumber;
#endif  // !_MSC_VER

MsgPlayerOfflineOpGet_MS2MAS::MsgPlayerOfflineOpGet_MS2MAS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPlayerOfflineOpGet_MS2MAS)
}

void MsgPlayerOfflineOpGet_MS2MAS::InitAsDefaultInstance() {
}

MsgPlayerOfflineOpGet_MS2MAS::MsgPlayerOfflineOpGet_MS2MAS(const MsgPlayerOfflineOpGet_MS2MAS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPlayerOfflineOpGet_MS2MAS)
}

void MsgPlayerOfflineOpGet_MS2MAS::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1157;
  iggid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerOfflineOpGet_MS2MAS::~MsgPlayerOfflineOpGet_MS2MAS() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPlayerOfflineOpGet_MS2MAS)
  SharedDtor();
}

void MsgPlayerOfflineOpGet_MS2MAS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerOfflineOpGet_MS2MAS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerOfflineOpGet_MS2MAS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerOfflineOpGet_MS2MAS_descriptor_;
}

const MsgPlayerOfflineOpGet_MS2MAS& MsgPlayerOfflineOpGet_MS2MAS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatchServer_2eproto();
  return *default_instance_;
}

MsgPlayerOfflineOpGet_MS2MAS* MsgPlayerOfflineOpGet_MS2MAS::default_instance_ = NULL;

MsgPlayerOfflineOpGet_MS2MAS* MsgPlayerOfflineOpGet_MS2MAS::New() const {
  return new MsgPlayerOfflineOpGet_MS2MAS;
}

void MsgPlayerOfflineOpGet_MS2MAS::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1157;
    iggid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerOfflineOpGet_MS2MAS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPlayerOfflineOpGet_MS2MAS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_OFFLINEOP_GET_MS2MAS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iggid;
        break;
      }

      // optional int64 iggid = 2;
      case 2: {
        if (tag == 16) {
         parse_iggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iggid_)));
          set_has_iggid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPlayerOfflineOpGet_MS2MAS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPlayerOfflineOpGet_MS2MAS)
  return false;
#undef DO_
}

void MsgPlayerOfflineOpGet_MS2MAS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPlayerOfflineOpGet_MS2MAS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_OFFLINEOP_GET_MS2MAS];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iggid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPlayerOfflineOpGet_MS2MAS)
}

::google::protobuf::uint8* MsgPlayerOfflineOpGet_MS2MAS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPlayerOfflineOpGet_MS2MAS)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_OFFLINEOP_GET_MS2MAS];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 iggid = 2;
  if (has_iggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iggid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPlayerOfflineOpGet_MS2MAS)
  return target;
}

int MsgPlayerOfflineOpGet_MS2MAS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PLAYER_OFFLINEOP_GET_MS2MAS];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 iggid = 2;
    if (has_iggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iggid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerOfflineOpGet_MS2MAS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerOfflineOpGet_MS2MAS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerOfflineOpGet_MS2MAS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerOfflineOpGet_MS2MAS::MergeFrom(const MsgPlayerOfflineOpGet_MS2MAS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_iggid()) {
      set_iggid(from.iggid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerOfflineOpGet_MS2MAS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerOfflineOpGet_MS2MAS::CopyFrom(const MsgPlayerOfflineOpGet_MS2MAS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerOfflineOpGet_MS2MAS::IsInitialized() const {

  return true;
}

void MsgPlayerOfflineOpGet_MS2MAS::Swap(MsgPlayerOfflineOpGet_MS2MAS* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(iggid_, other->iggid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerOfflineOpGet_MS2MAS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerOfflineOpGet_MS2MAS_descriptor_;
  metadata.reflection = MsgPlayerOfflineOpGet_MS2MAS_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
