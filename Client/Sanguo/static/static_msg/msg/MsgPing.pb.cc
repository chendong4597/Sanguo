// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgPing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgPing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

namespace {

const ::google::protobuf::Descriptor* MsgPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPong_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSystemPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSystemPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSystemPong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSystemPong_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgPing_2eproto() {
  protobuf_AddDesc_MsgPing_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgPing.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPing_descriptor_ = file->message_type(0);
  static const int MsgPing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPing, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPing, clienttimeinms_),
  };
  MsgPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPing_descriptor_,
      MsgPing::default_instance_,
      MsgPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPing));
  MsgPong_descriptor_ = file->message_type(1);
  static const int MsgPong_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPong, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPong, clienttimeinms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPong, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPong, servertimems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPong, client_history_msg_),
  };
  MsgPong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPong_descriptor_,
      MsgPong::default_instance_,
      MsgPong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPong));
  MsgSystemPing_descriptor_ = file->message_type(2);
  static const int MsgSystemPing_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemPing, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemPing, servertimeinms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemPing, servertickettimeinms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemPing, seq_),
  };
  MsgSystemPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSystemPing_descriptor_,
      MsgSystemPing::default_instance_,
      MsgSystemPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSystemPing));
  MsgSystemPong_descriptor_ = file->message_type(3);
  static const int MsgSystemPong_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemPong, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemPong, servertimeinms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemPong, clienttimeinms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemPong, seq_),
  };
  MsgSystemPong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSystemPong_descriptor_,
      MsgSystemPong::default_instance_,
      MsgSystemPong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemPong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystemPong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSystemPong));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgPing_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPing_descriptor_, &MsgPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPong_descriptor_, &MsgPong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSystemPing_descriptor_, &MsgSystemPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSystemPong_descriptor_, &MsgSystemPong::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgPing_2eproto() {
  delete MsgPing::default_instance_;
  delete MsgPing_reflection_;
  delete MsgPong::default_instance_;
  delete MsgPong_reflection_;
  delete MsgSystemPing::default_instance_;
  delete MsgSystemPing_reflection_;
  delete MsgSystemPong::default_instance_;
  delete MsgSystemPong_reflection_;
}

void protobuf_AddDesc_MsgPing_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgPB::protobuf_AddDesc_MsgType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMsgPing.proto\022\005MsgPB\032\rMsgType.proto\"N\n"
    "\007MsgPing\022+\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgTy"
    "pe:\t_MSG_PING\022\026\n\016clientTimeInMs\030\002 \001(\003\"\224\001"
    "\n\007MsgPong\022+\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgT"
    "ype:\t_MSG_PONG\022\026\n\016clientTimeInMs\030\002 \001(\003\022\022"
    "\n\nserverTime\030\003 \001(\003\022\024\n\014serverTimeMs\030\004 \001(\003"
    "\022\032\n\022Client_History_Msg\030\005 \001(\005\"\206\001\n\rMsgSyst"
    "emPing\0222\n\007msgType\030\001 \001(\0162\017.MsgPB.EMsgType"
    ":\020_MSG_SYSTEM_PING\022\026\n\016ServerTimeInMs\030\002 \001"
    "(\003\022\034\n\024ServerTicketTimeInMs\030\003 \001(\003\022\013\n\003seq\030"
    "\004 \001(\005\"\200\001\n\rMsgSystemPong\0222\n\007msgType\030\001 \001(\016"
    "2\017.MsgPB.EMsgType:\020_MSG_SYSTEM_PONG\022\026\n\016S"
    "erverTimeInMs\030\002 \001(\003\022\026\n\016ClientTimeInMs\030\003 "
    "\001(\003\022\013\n\003seq\030\004 \001(\005", 536);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgPing.proto", &protobuf_RegisterTypes);
  MsgPing::default_instance_ = new MsgPing();
  MsgPong::default_instance_ = new MsgPong();
  MsgSystemPing::default_instance_ = new MsgSystemPing();
  MsgSystemPong::default_instance_ = new MsgSystemPong();
  MsgPing::default_instance_->InitAsDefaultInstance();
  MsgPong::default_instance_->InitAsDefaultInstance();
  MsgSystemPing::default_instance_->InitAsDefaultInstance();
  MsgSystemPong::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgPing_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgPing_2eproto {
  StaticDescriptorInitializer_MsgPing_2eproto() {
    protobuf_AddDesc_MsgPing_2eproto();
  }
} static_descriptor_initializer_MsgPing_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgPing::kMsgTypeFieldNumber;
const int MsgPing::kClientTimeInMsFieldNumber;
#endif  // !_MSC_VER

MsgPing::MsgPing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPing)
}

void MsgPing::InitAsDefaultInstance() {
}

MsgPing::MsgPing(const MsgPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPing)
}

void MsgPing::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1004;
  clienttimeinms_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPing::~MsgPing() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPing)
  SharedDtor();
}

void MsgPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPing_descriptor_;
}

const MsgPing& MsgPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPing_2eproto();
  return *default_instance_;
}

MsgPing* MsgPing::default_instance_ = NULL;

MsgPing* MsgPing::New() const {
  return new MsgPing;
}

void MsgPing::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1004;
    clienttimeinms_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PING];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientTimeInMs;
        break;
      }

      // optional int64 clientTimeInMs = 2;
      case 2: {
        if (tag == 16) {
         parse_clientTimeInMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clienttimeinms_)));
          set_has_clienttimeinms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPing)
  return false;
#undef DO_
}

void MsgPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPing)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PING];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 clientTimeInMs = 2;
  if (has_clienttimeinms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->clienttimeinms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPing)
}

::google::protobuf::uint8* MsgPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPing)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PING];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 clientTimeInMs = 2;
  if (has_clienttimeinms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->clienttimeinms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPing)
  return target;
}

int MsgPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PING];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 clientTimeInMs = 2;
    if (has_clienttimeinms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clienttimeinms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPing::MergeFrom(const MsgPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_clienttimeinms()) {
      set_clienttimeinms(from.clienttimeinms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPing::CopyFrom(const MsgPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPing::IsInitialized() const {

  return true;
}

void MsgPing::Swap(MsgPing* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(clienttimeinms_, other->clienttimeinms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPing_descriptor_;
  metadata.reflection = MsgPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPong::kMsgTypeFieldNumber;
const int MsgPong::kClientTimeInMsFieldNumber;
const int MsgPong::kServerTimeFieldNumber;
const int MsgPong::kServerTimeMsFieldNumber;
const int MsgPong::kClientHistoryMsgFieldNumber;
#endif  // !_MSC_VER

MsgPong::MsgPong()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgPong)
}

void MsgPong::InitAsDefaultInstance() {
}

MsgPong::MsgPong(const MsgPong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgPong)
}

void MsgPong::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1005;
  clienttimeinms_ = GOOGLE_LONGLONG(0);
  servertime_ = GOOGLE_LONGLONG(0);
  servertimems_ = GOOGLE_LONGLONG(0);
  client_history_msg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPong::~MsgPong() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgPong)
  SharedDtor();
}

void MsgPong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPong_descriptor_;
}

const MsgPong& MsgPong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPing_2eproto();
  return *default_instance_;
}

MsgPong* MsgPong::default_instance_ = NULL;

MsgPong* MsgPong::New() const {
  return new MsgPong;
}

void MsgPong::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPong*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(clienttimeinms_, servertime_);
    ZR_(client_history_msg_, servertimems_);
    msgtype_ = 1005;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgPong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PONG];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientTimeInMs;
        break;
      }

      // optional int64 clientTimeInMs = 2;
      case 2: {
        if (tag == 16) {
         parse_clientTimeInMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clienttimeinms_)));
          set_has_clienttimeinms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverTime;
        break;
      }

      // optional int64 serverTime = 3;
      case 3: {
        if (tag == 24) {
         parse_serverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_serverTimeMs;
        break;
      }

      // optional int64 serverTimeMs = 4;
      case 4: {
        if (tag == 32) {
         parse_serverTimeMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertimems_)));
          set_has_servertimems();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Client_History_Msg;
        break;
      }

      // optional int32 Client_History_Msg = 5;
      case 5: {
        if (tag == 40) {
         parse_Client_History_Msg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_history_msg_)));
          set_has_client_history_msg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgPong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgPong)
  return false;
#undef DO_
}

void MsgPong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgPong)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PONG];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 clientTimeInMs = 2;
  if (has_clienttimeinms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->clienttimeinms(), output);
  }

  // optional int64 serverTime = 3;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->servertime(), output);
  }

  // optional int64 serverTimeMs = 4;
  if (has_servertimems()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->servertimems(), output);
  }

  // optional int32 Client_History_Msg = 5;
  if (has_client_history_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->client_history_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgPong)
}

::google::protobuf::uint8* MsgPong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgPong)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PONG];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 clientTimeInMs = 2;
  if (has_clienttimeinms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->clienttimeinms(), target);
  }

  // optional int64 serverTime = 3;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->servertime(), target);
  }

  // optional int64 serverTimeMs = 4;
  if (has_servertimems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->servertimems(), target);
  }

  // optional int32 Client_History_Msg = 5;
  if (has_client_history_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->client_history_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgPong)
  return target;
}

int MsgPong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_PONG];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 clientTimeInMs = 2;
    if (has_clienttimeinms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clienttimeinms());
    }

    // optional int64 serverTime = 3;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }

    // optional int64 serverTimeMs = 4;
    if (has_servertimems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertimems());
    }

    // optional int32 Client_History_Msg = 5;
    if (has_client_history_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_history_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPong::MergeFrom(const MsgPong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_clienttimeinms()) {
      set_clienttimeinms(from.clienttimeinms());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_servertimems()) {
      set_servertimems(from.servertimems());
    }
    if (from.has_client_history_msg()) {
      set_client_history_msg(from.client_history_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPong::CopyFrom(const MsgPong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPong::IsInitialized() const {

  return true;
}

void MsgPong::Swap(MsgPong* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(clienttimeinms_, other->clienttimeinms_);
    std::swap(servertime_, other->servertime_);
    std::swap(servertimems_, other->servertimems_);
    std::swap(client_history_msg_, other->client_history_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPong_descriptor_;
  metadata.reflection = MsgPong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSystemPing::kMsgTypeFieldNumber;
const int MsgSystemPing::kServerTimeInMsFieldNumber;
const int MsgSystemPing::kServerTicketTimeInMsFieldNumber;
const int MsgSystemPing::kSeqFieldNumber;
#endif  // !_MSC_VER

MsgSystemPing::MsgSystemPing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgSystemPing)
}

void MsgSystemPing::InitAsDefaultInstance() {
}

MsgSystemPing::MsgSystemPing(const MsgSystemPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgSystemPing)
}

void MsgSystemPing::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1015;
  servertimeinms_ = GOOGLE_LONGLONG(0);
  servertickettimeinms_ = GOOGLE_LONGLONG(0);
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSystemPing::~MsgSystemPing() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgSystemPing)
  SharedDtor();
}

void MsgSystemPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSystemPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSystemPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSystemPing_descriptor_;
}

const MsgSystemPing& MsgSystemPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPing_2eproto();
  return *default_instance_;
}

MsgSystemPing* MsgSystemPing::default_instance_ = NULL;

MsgSystemPing* MsgSystemPing::New() const {
  return new MsgSystemPing;
}

void MsgSystemPing::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSystemPing*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(seq_, servertickettimeinms_);
    msgtype_ = 1015;
    servertimeinms_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSystemPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgSystemPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYSTEM_PING];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ServerTimeInMs;
        break;
      }

      // optional int64 ServerTimeInMs = 2;
      case 2: {
        if (tag == 16) {
         parse_ServerTimeInMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertimeinms_)));
          set_has_servertimeinms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ServerTicketTimeInMs;
        break;
      }

      // optional int64 ServerTicketTimeInMs = 3;
      case 3: {
        if (tag == 24) {
         parse_ServerTicketTimeInMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertickettimeinms_)));
          set_has_servertickettimeinms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_seq;
        break;
      }

      // optional int32 seq = 4;
      case 4: {
        if (tag == 32) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgSystemPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgSystemPing)
  return false;
#undef DO_
}

void MsgSystemPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgSystemPing)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYSTEM_PING];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 ServerTimeInMs = 2;
  if (has_servertimeinms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->servertimeinms(), output);
  }

  // optional int64 ServerTicketTimeInMs = 3;
  if (has_servertickettimeinms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->servertickettimeinms(), output);
  }

  // optional int32 seq = 4;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgSystemPing)
}

::google::protobuf::uint8* MsgSystemPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgSystemPing)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYSTEM_PING];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 ServerTimeInMs = 2;
  if (has_servertimeinms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->servertimeinms(), target);
  }

  // optional int64 ServerTicketTimeInMs = 3;
  if (has_servertickettimeinms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->servertickettimeinms(), target);
  }

  // optional int32 seq = 4;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgSystemPing)
  return target;
}

int MsgSystemPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYSTEM_PING];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 ServerTimeInMs = 2;
    if (has_servertimeinms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertimeinms());
    }

    // optional int64 ServerTicketTimeInMs = 3;
    if (has_servertickettimeinms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertickettimeinms());
    }

    // optional int32 seq = 4;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSystemPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSystemPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSystemPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSystemPing::MergeFrom(const MsgSystemPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_servertimeinms()) {
      set_servertimeinms(from.servertimeinms());
    }
    if (from.has_servertickettimeinms()) {
      set_servertickettimeinms(from.servertickettimeinms());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSystemPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSystemPing::CopyFrom(const MsgSystemPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSystemPing::IsInitialized() const {

  return true;
}

void MsgSystemPing::Swap(MsgSystemPing* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(servertimeinms_, other->servertimeinms_);
    std::swap(servertickettimeinms_, other->servertickettimeinms_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSystemPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSystemPing_descriptor_;
  metadata.reflection = MsgSystemPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSystemPong::kMsgTypeFieldNumber;
const int MsgSystemPong::kServerTimeInMsFieldNumber;
const int MsgSystemPong::kClientTimeInMsFieldNumber;
const int MsgSystemPong::kSeqFieldNumber;
#endif  // !_MSC_VER

MsgSystemPong::MsgSystemPong()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPB.MsgSystemPong)
}

void MsgSystemPong::InitAsDefaultInstance() {
}

MsgSystemPong::MsgSystemPong(const MsgSystemPong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPB.MsgSystemPong)
}

void MsgSystemPong::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1016;
  servertimeinms_ = GOOGLE_LONGLONG(0);
  clienttimeinms_ = GOOGLE_LONGLONG(0);
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSystemPong::~MsgSystemPong() {
  // @@protoc_insertion_point(destructor:MsgPB.MsgSystemPong)
  SharedDtor();
}

void MsgSystemPong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSystemPong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSystemPong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSystemPong_descriptor_;
}

const MsgSystemPong& MsgSystemPong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgPing_2eproto();
  return *default_instance_;
}

MsgSystemPong* MsgSystemPong::default_instance_ = NULL;

MsgSystemPong* MsgSystemPong::New() const {
  return new MsgSystemPong;
}

void MsgSystemPong::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSystemPong*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(seq_, clienttimeinms_);
    msgtype_ = 1016;
    servertimeinms_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSystemPong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPB.MsgSystemPong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYSTEM_PONG];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgPB::EMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgPB::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ServerTimeInMs;
        break;
      }

      // optional int64 ServerTimeInMs = 2;
      case 2: {
        if (tag == 16) {
         parse_ServerTimeInMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertimeinms_)));
          set_has_servertimeinms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ClientTimeInMs;
        break;
      }

      // optional int64 ClientTimeInMs = 3;
      case 3: {
        if (tag == 24) {
         parse_ClientTimeInMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clienttimeinms_)));
          set_has_clienttimeinms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_seq;
        break;
      }

      // optional int32 seq = 4;
      case 4: {
        if (tag == 32) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPB.MsgSystemPong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPB.MsgSystemPong)
  return false;
#undef DO_
}

void MsgSystemPong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPB.MsgSystemPong)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYSTEM_PONG];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional int64 ServerTimeInMs = 2;
  if (has_servertimeinms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->servertimeinms(), output);
  }

  // optional int64 ClientTimeInMs = 3;
  if (has_clienttimeinms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->clienttimeinms(), output);
  }

  // optional int32 seq = 4;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPB.MsgSystemPong)
}

::google::protobuf::uint8* MsgSystemPong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPB.MsgSystemPong)
  // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYSTEM_PONG];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional int64 ServerTimeInMs = 2;
  if (has_servertimeinms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->servertimeinms(), target);
  }

  // optional int64 ClientTimeInMs = 3;
  if (has_clienttimeinms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->clienttimeinms(), target);
  }

  // optional int32 seq = 4;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPB.MsgSystemPong)
  return target;
}

int MsgSystemPong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPB.EMsgType msgType = 1 [default = _MSG_SYSTEM_PONG];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional int64 ServerTimeInMs = 2;
    if (has_servertimeinms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertimeinms());
    }

    // optional int64 ClientTimeInMs = 3;
    if (has_clienttimeinms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clienttimeinms());
    }

    // optional int32 seq = 4;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSystemPong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSystemPong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSystemPong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSystemPong::MergeFrom(const MsgSystemPong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_servertimeinms()) {
      set_servertimeinms(from.servertimeinms());
    }
    if (from.has_clienttimeinms()) {
      set_clienttimeinms(from.clienttimeinms());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSystemPong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSystemPong::CopyFrom(const MsgSystemPong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSystemPong::IsInitialized() const {

  return true;
}

void MsgSystemPong::Swap(MsgSystemPong* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(servertimeinms_, other->servertimeinms_);
    std::swap(clienttimeinms_, other->clienttimeinms_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSystemPong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSystemPong_descriptor_;
  metadata.reflection = MsgSystemPong_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

// @@protoc_insertion_point(global_scope)
