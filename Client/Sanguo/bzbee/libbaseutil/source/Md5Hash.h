/*!
 * \file SecureHash.h
 *
 * \author mattho
 * \date 2018/01/22
 *
 *
 */
#pragma once
#include "BaseType.h"
#include "MemCrc.h"

NS_BEGIN

//////////////////////////////////////////////////////////////////////////
/** Stores an SHA hash generated by FSHA1. */
class Md5Hash
{
public:
	Md5Hash() = default;

	bool isValid() const
	{
		return (*this != Md5Hash());
	}

	friend bool operator==(const Md5Hash& inA, const Md5Hash& inB)
	{
        return inA.strHash == inB.strHash;
	}

	friend bool operator!=(const Md5Hash& inA, const Md5Hash& inB)
	{
        return inA.strHash != inB.strHash;
	}

	static uint32 getTypeHash(const Md5Hash& inKey)
	{
		return memcrc32(inKey.strHash.data(), static_cast<uint32>(inKey.strHash.length()));
	}

public:
    tstring strHash;

};
//////////////////////////////////////////////////////////////////////////

NS_END

//////////////////////////////////////////////////////////////////////////
namespace std
{
	template<> struct hash<bzbee::Md5Hash>
	{
		std::size_t operator()(const bzbee::Md5Hash& inKey) const
		{
			return bzbee::Md5Hash::getTypeHash(inKey);
		}
	};
}
